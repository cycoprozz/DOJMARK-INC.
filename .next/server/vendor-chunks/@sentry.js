/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry";
exports.ids = ["vendor-chunks/@sentry"];
exports.modules = {

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/api.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dsn = __webpack_require__(/*! ./utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  const params = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn$1 = dsn.makeDsn(dsnLike);\n  if (!dsn$1) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn$1)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsn.dsnToString(dsn$1)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] )}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n\nexports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = getReportDialogEndpoint;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFlBQVksbUJBQU8sQ0FBQyx1RkFBZ0I7O0FBRXBDOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMsYUFBYTtBQUNsRCw4QkFBOEIsU0FBUztBQUN2QyxZQUFZLFNBQVMsSUFBSSxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsU0FBUyxPQUFPO0FBQzFFOztBQUVBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QixFQUFFLGNBQWM7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCLGFBQWEsR0FBRyxnQkFBZ0I7QUFDOUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0JBQXdCLEdBQUcsMkJBQTJCO0FBQ3BGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsMEJBQTBCOztBQUVoRCw4QkFBOEIsdUJBQXVCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsOEJBQThCO0FBQ2pFO0FBQ0E7QUFDQSxvQ0FBb0MsK0JBQStCO0FBQ25FO0FBQ0EsTUFBTTtBQUNOLDRCQUE0Qix3QkFBd0IsR0FBRyx3Q0FBd0M7QUFDL0Y7QUFDQTs7QUFFQSxZQUFZLFNBQVMsR0FBRyxlQUFlO0FBQ3ZDOztBQUVBLDZDQUE2QztBQUM3QywrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZHNuID0gcmVxdWlyZSgnLi91dGlscy9kc24uanMnKTtcblxuY29uc3QgU0VOVFJZX0FQSV9WRVJTSU9OID0gJzcnO1xuXG4vKiogUmV0dXJucyB0aGUgcHJlZml4IHRvIGNvbnN0cnVjdCBTZW50cnkgaW5nZXN0aW9uIEFQSSBlbmRwb2ludHMuICovXG5mdW5jdGlvbiBnZXRCYXNlQXBpRW5kcG9pbnQoZHNuKSB7XG4gIGNvbnN0IHByb3RvY29sID0gZHNuLnByb3RvY29sID8gYCR7ZHNuLnByb3RvY29sfTpgIDogJyc7XG4gIGNvbnN0IHBvcnQgPSBkc24ucG9ydCA/IGA6JHtkc24ucG9ydH1gIDogJyc7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7ZHNuLmhvc3R9JHtwb3J0fSR7ZHNuLnBhdGggPyBgLyR7ZHNuLnBhdGh9YCA6ICcnfS9hcGkvYDtcbn1cblxuLyoqIFJldHVybnMgdGhlIGluZ2VzdCBBUEkgZW5kcG9pbnQgZm9yIHRhcmdldC4gKi9cbmZ1bmN0aW9uIF9nZXRJbmdlc3RFbmRwb2ludChkc24pIHtcbiAgcmV0dXJuIGAke2dldEJhc2VBcGlFbmRwb2ludChkc24pfSR7ZHNuLnByb2plY3RJZH0vZW52ZWxvcGUvYDtcbn1cblxuLyoqIFJldHVybnMgYSBVUkwtZW5jb2RlZCBzdHJpbmcgd2l0aCBhdXRoIGNvbmZpZyBzdWl0YWJsZSBmb3IgYSBxdWVyeSBzdHJpbmcuICovXG5mdW5jdGlvbiBfZW5jb2RlZEF1dGgoZHNuLCBzZGtJbmZvKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzZW50cnlfdmVyc2lvbjogU0VOVFJZX0FQSV9WRVJTSU9OLFxuICB9O1xuXG4gIGlmIChkc24ucHVibGljS2V5KSB7XG4gICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU3Mi5cbiAgICBwYXJhbXMuc2VudHJ5X2tleSA9IGRzbi5wdWJsaWNLZXk7XG4gIH1cblxuICBpZiAoc2RrSW5mbykge1xuICAgIHBhcmFtcy5zZW50cnlfY2xpZW50ID0gYCR7c2RrSW5mby5uYW1lfS8ke3Nka0luZm8udmVyc2lvbn1gO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTCB3aXRoIGF1dGggaW4gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoZHNuLCB0dW5uZWwsIHNka0luZm8pIHtcbiAgcmV0dXJuIHR1bm5lbCA/IHR1bm5lbCA6IGAke19nZXRJbmdlc3RFbmRwb2ludChkc24pfT8ke19lbmNvZGVkQXV0aChkc24sIHNka0luZm8pfWA7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSB1cmwgdG8gdGhlIHJlcG9ydCBkaWFsb2cgZW5kcG9pbnQuICovXG5mdW5jdGlvbiBnZXRSZXBvcnREaWFsb2dFbmRwb2ludChkc25MaWtlLCBkaWFsb2dPcHRpb25zKSB7XG4gIGNvbnN0IGRzbiQxID0gZHNuLm1ha2VEc24oZHNuTGlrZSk7XG4gIGlmICghZHNuJDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBjb25zdCBlbmRwb2ludCA9IGAke2dldEJhc2VBcGlFbmRwb2ludChkc24kMSl9ZW1iZWQvZXJyb3ItcGFnZS9gO1xuXG4gIGxldCBlbmNvZGVkT3B0aW9ucyA9IGBkc249JHtkc24uZHNuVG9TdHJpbmcoZHNuJDEpfWA7XG4gIGZvciAoY29uc3Qga2V5IGluIGRpYWxvZ09wdGlvbnMpIHtcbiAgICBpZiAoa2V5ID09PSAnZHNuJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ29uQ2xvc2UnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndXNlcicpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBkaWFsb2dPcHRpb25zLnVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5uYW1lKSB7XG4gICAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmbmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudCh1c2VyLm5hbWUpfWA7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5lbWFpbCkge1xuICAgICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJmVtYWlsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXIuZW1haWwpfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldICl9YDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYCR7ZW5kcG9pbnR9PyR7ZW5jb2RlZE9wdGlvbnN9YDtcbn1cblxuZXhwb3J0cy5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoID0gZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aDtcbmV4cG9ydHMuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgPSBnZXRSZXBvcnREaWFsb2dFbmRwb2ludDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst stackStrategy = __webpack_require__(/*! ./stackStrategy.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\");\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nfunction getAsyncContextStrategy(carrier$1) {\n  const sentry = carrier.getSentryCarrier(carrier$1);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return stackStrategy.getStackAsyncContextStrategy();\n}\n\nexports.getAsyncContextStrategy = getAsyncContextStrategy;\nexports.setAsyncContextStrategy = setAsyncContextStrategy;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXN5bmNDb250ZXh0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFlO0FBQ3ZDLHNCQUFzQixtQkFBTyxDQUFDLDRHQUFvQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9hc3luY0NvbnRleHQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzdGFja1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9zdGFja1N0cmF0ZWd5LmpzJyk7XG5cbi8qKlxuICogQHByaXZhdGUgUHJpdmF0ZSBBUEkgd2l0aCBubyBzZW12ZXIgZ3VhcmFudGVlcyFcbiAqXG4gKiBTZXRzIHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdHJhdGVneVxuICovXG5mdW5jdGlvbiBzZXRBc3luY0NvbnRleHRTdHJhdGVneShzdHJhdGVneSkge1xuICAvLyBHZXQgbWFpbiBjYXJyaWVyIChnbG9iYWwgZm9yIGV2ZXJ5IGVudmlyb25tZW50KVxuICBjb25zdCByZWdpc3RyeSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3Qgc2VudHJ5ID0gY2Fycmllci5nZXRTZW50cnlDYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgc2VudHJ5LmFjcyA9IHN0cmF0ZWd5O1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LlxuICogSWYgbm9uZSBoYXMgYmVlbiBzZXR1cCwgdGhlIGRlZmF1bHQgd2lsbCBiZSB1c2VkLlxuICovXG5mdW5jdGlvbiBnZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpIHtcbiAgY29uc3Qgc2VudHJ5ID0gY2Fycmllci5nZXRTZW50cnlDYXJyaWVyKGNhcnJpZXIkMSk7XG5cbiAgaWYgKHNlbnRyeS5hY3MpIHtcbiAgICByZXR1cm4gc2VudHJ5LmFjcztcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgdXNlIHRoZSBkZWZhdWx0IG9uZSAoc3RhY2spXG4gIHJldHVybiBzdGFja1N0cmF0ZWd5LmdldFN0YWNrQXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcbn1cblxuZXhwb3J0cy5nZXRBc3luY0NvbnRleHRTdHJhdGVneSA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuZXhwb3J0cy5zZXRBc3luY0NvbnRleHRTdHJhdGVneSA9IHNldEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst defaultScopes = __webpack_require__(/*! ../defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\n\n/**\n * This is an object that holds a stack of scopes.\n */\nclass AsyncContextStack {\n\n   constructor(scope$1, isolationScope) {\n    let assignedScope;\n    if (!scope$1) {\n      assignedScope = new scope.Scope();\n    } else {\n      assignedScope = scope$1;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new scope.Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n   withScope(callback) {\n    const scope = this._pushScope();\n\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (is.isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n   getClient() {\n    return this.getStackTop().client ;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n   getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n   getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n   getStackTop() {\n    return this._stack[this._stack.length - 1] ;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n   _pushScope() {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n   _popScope() {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack() {\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(defaultScopes.getDefaultCurrentScope(), defaultScopes.getDefaultIsolationScope()));\n}\n\nfunction withScope(callback) {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope(scope, callback) {\n  const stack = getAsyncContextStack() ;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope(callback) {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nfunction getStackAsyncContextStrategy() {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: (_isolationScope, callback) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n\nexports.AsyncContextStack = AsyncContextStack;\nexports.getStackAsyncContextStrategy = getStackAsyncContextStrategy;\n//# sourceMappingURL=stackStrategy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXN5bmNDb250ZXh0L3N0YWNrU3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsc0JBQXNCLG1CQUFPLENBQUMsZ0dBQXFCO0FBQ25ELGNBQWMsbUJBQU8sQ0FBQyxnRkFBYTtBQUNuQyxXQUFXLG1CQUFPLENBQUMsc0ZBQWdCO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFlOztBQUV2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QixvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2FzeW5jQ29udGV4dC9zdGFja1N0cmF0ZWd5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZWZhdWx0U2NvcGVzID0gcmVxdWlyZSgnLi4vZGVmYXVsdFNjb3Blcy5qcycpO1xuY29uc3Qgc2NvcGUgPSByZXF1aXJlKCcuLi9zY29wZS5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuLi91dGlscy9pcy5qcycpO1xuY29uc3QgY2FycmllciA9IHJlcXVpcmUoJy4uL2NhcnJpZXIuanMnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IGhvbGRzIGEgc3RhY2sgb2Ygc2NvcGVzLlxuICovXG5jbGFzcyBBc3luY0NvbnRleHRTdGFjayB7XG5cbiAgIGNvbnN0cnVjdG9yKHNjb3BlJDEsIGlzb2xhdGlvblNjb3BlKSB7XG4gICAgbGV0IGFzc2lnbmVkU2NvcGU7XG4gICAgaWYgKCFzY29wZSQxKSB7XG4gICAgICBhc3NpZ25lZFNjb3BlID0gbmV3IHNjb3BlLlNjb3BlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnbmVkU2NvcGUgPSBzY29wZSQxO1xuICAgIH1cblxuICAgIGxldCBhc3NpZ25lZElzb2xhdGlvblNjb3BlO1xuICAgIGlmICghaXNvbGF0aW9uU2NvcGUpIHtcbiAgICAgIGFzc2lnbmVkSXNvbGF0aW9uU2NvcGUgPSBuZXcgc2NvcGUuU2NvcGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduZWRJc29sYXRpb25TY29wZSA9IGlzb2xhdGlvblNjb3BlO1xuICAgIH1cblxuICAgIC8vIHNjb3BlIHN0YWNrIGZvciBkb21haW5zIG9yIHRoZSBwcm9jZXNzXG4gICAgdGhpcy5fc3RhY2sgPSBbeyBzY29wZTogYXNzaWduZWRTY29wZSB9XTtcbiAgICB0aGlzLl9pc29sYXRpb25TY29wZSA9IGFzc2lnbmVkSXNvbGF0aW9uU2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogRm9yayBhIHNjb3BlIGZvciB0aGUgc3RhY2suXG4gICAqL1xuICAgd2l0aFNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLl9wdXNoU2NvcGUoKTtcblxuICAgIGxldCBtYXliZVByb21pc2VSZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IGNhbGxiYWNrKHNjb3BlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLl9wb3BTY29wZSgpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoaXMuaXNUaGVuYWJsZShtYXliZVByb21pc2VSZXN1bHQpKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gaXNUaGVuYWJsZSByZXR1cm5zIHRoZSB3cm9uZyB0eXBlXG4gICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0LnRoZW4oXG4gICAgICAgIHJlcyA9PiB7XG4gICAgICAgICAgdGhpcy5fcG9wU2NvcGUoKTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBlID0+IHtcbiAgICAgICAgICB0aGlzLl9wb3BTY29wZSgpO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3BvcFNjb3BlKCk7XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNsaWVudCBvZiB0aGUgc3RhY2suXG4gICAqL1xuICAgZ2V0Q2xpZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuY2xpZW50IDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY29wZSBvZiB0aGUgdG9wIHN0YWNrLlxuICAgKi9cbiAgIGdldFNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuc2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBpc29sYXRpb24gc2NvcGUgZm9yIHRoZSBzdGFjay5cbiAgICovXG4gICBnZXRJc29sYXRpb25TY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNvbGF0aW9uU2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG9wbW9zdCBzY29wZSBsYXllciBpbiB0aGUgb3JkZXIgZG9tYWluID4gbG9jYWwgPiBwcm9jZXNzLlxuICAgKi9cbiAgIGdldFN0YWNrVG9wKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXSA7XG4gIH1cblxuICAvKipcbiAgICogUHVzaCBhIHNjb3BlIHRvIHRoZSBzdGFjay5cbiAgICovXG4gICBfcHVzaFNjb3BlKCkge1xuICAgIC8vIFdlIHdhbnQgdG8gY2xvbmUgdGhlIGNvbnRlbnQgb2YgcHJldiBzY29wZVxuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5nZXRTY29wZSgpLmNsb25lKCk7XG4gICAgdGhpcy5fc3RhY2sucHVzaCh7XG4gICAgICBjbGllbnQ6IHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICBzY29wZSxcbiAgICB9KTtcbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogUG9wIGEgc2NvcGUgZnJvbSB0aGUgc3RhY2suXG4gICAqL1xuICAgX3BvcFNjb3BlKCkge1xuICAgIGlmICh0aGlzLl9zdGFjay5sZW5ndGggPD0gMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAhIXRoaXMuX3N0YWNrLnBvcCgpO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdGFjay5cbiAqIFRoaXMgd2lsbCBiZSByZW1vdmVkIGR1cmluZyB0aGUgdjggY3ljbGUgYW5kIGlzIG9ubHkgaGVyZSB0byBtYWtlIG1pZ3JhdGlvbiBlYXNpZXIuXG4gKi9cbmZ1bmN0aW9uIGdldEFzeW5jQ29udGV4dFN0YWNrKCkge1xuICBjb25zdCByZWdpc3RyeSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3Qgc2VudHJ5ID0gY2Fycmllci5nZXRTZW50cnlDYXJyaWVyKHJlZ2lzdHJ5KTtcblxuICByZXR1cm4gKHNlbnRyeS5zdGFjayA9IHNlbnRyeS5zdGFjayB8fCBuZXcgQXN5bmNDb250ZXh0U3RhY2soZGVmYXVsdFNjb3Blcy5nZXREZWZhdWx0Q3VycmVudFNjb3BlKCksIGRlZmF1bHRTY29wZXMuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpKTtcbn1cblxuZnVuY3Rpb24gd2l0aFNjb3BlKGNhbGxiYWNrKSB7XG4gIHJldHVybiBnZXRBc3luY0NvbnRleHRTdGFjaygpLndpdGhTY29wZShjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHdpdGhTZXRTY29wZShzY29wZSwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc3RhY2sgPSBnZXRBc3luY0NvbnRleHRTdGFjaygpIDtcbiAgcmV0dXJuIHN0YWNrLndpdGhTY29wZSgoKSA9PiB7XG4gICAgc3RhY2suZ2V0U3RhY2tUb3AoKS5zY29wZSA9IHNjb3BlO1xuICAgIHJldHVybiBjYWxsYmFjayhzY29wZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGdldEFzeW5jQ29udGV4dFN0YWNrKCkud2l0aFNjb3BlKCgpID0+IHtcbiAgICByZXR1cm4gY2FsbGJhY2soZ2V0QXN5bmNDb250ZXh0U3RhY2soKS5nZXRJc29sYXRpb25TY29wZSgpKTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzdGFjay1iYXNlZCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LlxuICovXG5mdW5jdGlvbiBnZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5KCkge1xuICByZXR1cm4ge1xuICAgIHdpdGhJc29sYXRpb25TY29wZSxcbiAgICB3aXRoU2NvcGUsXG4gICAgd2l0aFNldFNjb3BlLFxuICAgIHdpdGhTZXRJc29sYXRpb25TY29wZTogKF9pc29sYXRpb25TY29wZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIHJldHVybiB3aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFNjb3BlOiAoKSA9PiBnZXRBc3luY0NvbnRleHRTdGFjaygpLmdldFNjb3BlKCksXG4gICAgZ2V0SXNvbGF0aW9uU2NvcGU6ICgpID0+IGdldEFzeW5jQ29udGV4dFN0YWNrKCkuZ2V0SXNvbGF0aW9uU2NvcGUoKSxcbiAgfTtcbn1cblxuZXhwb3J0cy5Bc3luY0NvbnRleHRTdGFjayA9IEFzeW5jQ29udGV4dFN0YWNrO1xuZXhwb3J0cy5nZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5ID0gZ2V0U3RhY2tBc3luY0NvbnRleHRTdHJhdGVneTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YWNrU3RyYXRlZ3kuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/breadcrumbs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst time = __webpack_require__(/*! ./utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = currentScopes.getClient();\n  const isolationScope = currentScopes.getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = time.dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (debugLogger.consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) )\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n\nexports.addBreadcrumb = addBreadcrumb;\n//# sourceMappingURL=breadcrumbs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYnJlYWRjcnVtYnMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLHlHQUF5QjtBQUNyRCxhQUFhLG1CQUFPLENBQUMseUZBQWlCOztBQUV0QztBQUNBO0FBQ0EsU0FBUyw2QkFBNkI7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVSxnRUFBZ0U7O0FBRTFFOztBQUVBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2JyZWFkY3J1bWJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCB0aW1lID0gcmVxdWlyZSgnLi91dGlscy90aW1lLmpzJyk7XG5cbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcblxuLyoqXG4gKiBSZWNvcmRzIGEgbmV3IGJyZWFkY3J1bWIgd2hpY2ggd2lsbCBiZSBhdHRhY2hlZCB0byBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgdG8gc3Vic2VxdWVudCBldmVudHMgdG8gcHJvdmlkZSBtb3JlIGNvbnRleHQgb25cbiAqIHVzZXIncyBhY3Rpb25zIHByaW9yIHRvIGFuIGVycm9yIG9yIGNyYXNoLlxuICovXG5mdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIGhpbnQpIHtcbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldElzb2xhdGlvblNjb3BlKCk7XG5cbiAgaWYgKCFjbGllbnQpIHJldHVybjtcblxuICBjb25zdCB7IGJlZm9yZUJyZWFkY3J1bWIgPSBudWxsLCBtYXhCcmVhZGNydW1icyA9IERFRkFVTFRfQlJFQURDUlVNQlMgfSA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgaWYgKG1heEJyZWFkY3J1bWJzIDw9IDApIHJldHVybjtcblxuICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lLmRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgY29uc3QgbWVyZ2VkQnJlYWRjcnVtYiA9IHsgdGltZXN0YW1wLCAuLi5icmVhZGNydW1iIH07XG4gIGNvbnN0IGZpbmFsQnJlYWRjcnVtYiA9IGJlZm9yZUJyZWFkY3J1bWJcbiAgICA/IChkZWJ1Z0xvZ2dlci5jb25zb2xlU2FuZGJveCgoKSA9PiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpKSApXG4gICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuXG4gIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpIHJldHVybjtcblxuICBpZiAoY2xpZW50LmVtaXQpIHtcbiAgICBjbGllbnQuZW1pdCgnYmVmb3JlQWRkQnJlYWRjcnVtYicsIGZpbmFsQnJlYWRjcnVtYiwgaGludCk7XG4gIH1cblxuICBpc29sYXRpb25TY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpO1xufVxuXG5leHBvcnRzLmFkZEJyZWFkY3J1bWIgPSBhZGRCcmVhZGNydW1iO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/carrier.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst version = __webpack_require__(/*! ./utils/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/version.js\");\nconst worldwide = __webpack_require__(/*! ./utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(worldwide.GLOBAL_OBJ);\n  return worldwide.GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nfunction getSentryCarrier(carrier) {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || version.SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(\n  name,\n  creator,\n  obj = worldwide.GLOBAL_OBJ,\n) {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n\nexports.getGlobalSingleton = getGlobalSingleton;\nexports.getMainCarrier = getMainCarrier;\nexports.getSentryCarrier = getSentryCarrier;\n//# sourceMappingURL=carrier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2Fycmllci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsbUdBQXNCOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1FQUFtRTs7QUFFbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNELDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHNCQUFzQjtBQUN0Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2NhcnJpZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuL3V0aWxzL3ZlcnNpb24uanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vdXRpbHMvd29ybGR3aWRlLmpzJyk7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgZ2xvYmFsbHkgYWNjZXNzaWJsZSBwcm9wZXJ0aWVzIGFuZCBtYWludGFpbnMgYSBzY29wZSBzdGFjay5cbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LlxuICpcbiAqIEZJWE1FOiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JsZW1hdGljLCBiZWNhdXNlIGRlc3BpdGUgYWx3YXlzIHJldHVybmluZyBhIHZhbGlkIENhcnJpZXIsXG4gKiBpdCBoYXMgYW4gb3B0aW9uYWwgYF9fU0VOVFJZX19gIHByb3BlcnR5LCB3aGljaCB0aGVuIGluIHR1cm4gcmVxdWlyZXMgdXMgdG8gYWx3YXlzIHBlcmZvcm0gYW4gdW5uZWNlc3NhcnkgY2hlY2tcbiAqIGF0IHRoZSBjYWxsLXNpdGUuIFdlIGFsd2F5cyBhY2Nlc3MgdGhlIGNhcnJpZXIgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBjYW4gZ3VhcmFudGVlIHRoYXQgYF9fU0VOVFJZX19gIGlzIHRoZXJlLlxuICoqL1xuZnVuY3Rpb24gZ2V0TWFpbkNhcnJpZXIoKSB7XG4gIC8vIFRoaXMgZW5zdXJlcyBhIFNlbnRyeSBjYXJyaWVyIGV4aXN0c1xuICBnZXRTZW50cnlDYXJyaWVyKHdvcmxkd2lkZS5HTE9CQUxfT0JKKTtcbiAgcmV0dXJuIHdvcmxkd2lkZS5HTE9CQUxfT0JKO1xufVxuXG4vKiogV2lsbCBlaXRoZXIgZ2V0IHRoZSBleGlzdGluZyBzZW50cnkgY2Fycmllciwgb3IgY3JlYXRlIGEgbmV3IG9uZS4gKi9cbmZ1bmN0aW9uIGdldFNlbnRyeUNhcnJpZXIoY2Fycmllcikge1xuICBjb25zdCBfX1NFTlRSWV9fID0gKGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fSk7XG5cbiAgLy8gRm9yIG5vdzogRmlyc3QgU0RLIHRoYXQgc2V0cyB0aGUgLnZlcnNpb24gcHJvcGVydHkgd2luc1xuICBfX1NFTlRSWV9fLnZlcnNpb24gPSBfX1NFTlRSWV9fLnZlcnNpb24gfHwgdmVyc2lvbi5TREtfVkVSU0lPTjtcblxuICAvLyBJbnRlbnRpb25hbGx5IHBvcHVsYXRpbmcgYW5kIHJldHVybmluZyB0aGUgdmVyc2lvbiBvZiBcInRoaXNcIiBTREsgaW5zdGFuY2VcbiAgLy8gcmF0aGVyIHRoYW4gd2hhdCdzIHNldCBpbiAudmVyc2lvbiBzbyB0aGF0IFwidGhpc1wiIFNESyBhbHdheXMgZ2V0cyBpdHMgY2FycmllclxuICByZXR1cm4gKF9fU0VOVFJZX19bdmVyc2lvbi5TREtfVkVSU0lPTl0gPSBfX1NFTlRSWV9fW3ZlcnNpb24uU0RLX1ZFUlNJT05dIHx8IHt9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZ2xvYmFsIHNpbmdsZXRvbiBjb250YWluZWQgaW4gdGhlIGdsb2JhbCBgX19TRU5UUllfX1tdYCBvYmplY3QuXG4gKlxuICogSWYgdGhlIHNpbmdsZXRvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gYF9fU0VOVFJZX19gLCBpdCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGdpdmVuIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIGFuZCBhZGRlZCB0byB0aGUgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBnbG9iYWwgc2luZ2xldG9uIG9uIF9fU0VOVFJZX19cbiAqIEBwYXJhbSBjcmVhdG9yIGNyZWF0b3IgRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIHNpbmdsZXRvbiBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gYF9fU0VOVFJZX19gXG4gKiBAcGFyYW0gb2JqIChPcHRpb25hbCkgVGhlIGdsb2JhbCBvYmplY3Qgb24gd2hpY2ggdG8gbG9vayBmb3IgYF9fU0VOVFJZX19gLCBpZiBub3QgYEdMT0JBTF9PQkpgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNpbmdsZXRvbihcbiAgbmFtZSxcbiAgY3JlYXRvcixcbiAgb2JqID0gd29ybGR3aWRlLkdMT0JBTF9PQkosXG4pIHtcbiAgY29uc3QgX19TRU5UUllfXyA9IChvYmouX19TRU5UUllfXyA9IG9iai5fX1NFTlRSWV9fIHx8IHt9KTtcbiAgY29uc3QgY2FycmllciA9IChfX1NFTlRSWV9fW3ZlcnNpb24uU0RLX1ZFUlNJT05dID0gX19TRU5UUllfX1t2ZXJzaW9uLlNES19WRVJTSU9OXSB8fCB7fSk7XG4gIC8vIE5vdGU6IFdlIGRvIG5vdCB3YW50IHRvIHNldCBgY2Fycmllci52ZXJzaW9uYCBoZXJlLCBhcyB0aGlzIG1heSBiZSBjYWxsZWQgYmVmb3JlIGFueSBgaW5pdGAgaXMgY2FsbGVkLCBlLmcuIGZvciB0aGUgZGVmYXVsdCBzY29wZXNcbiAgcmV0dXJuIGNhcnJpZXJbbmFtZV0gfHwgKGNhcnJpZXJbbmFtZV0gPSBjcmVhdG9yKCkpO1xufVxuXG5leHBvcnRzLmdldEdsb2JhbFNpbmdsZXRvbiA9IGdldEdsb2JhbFNpbmdsZXRvbjtcbmV4cG9ydHMuZ2V0TWFpbkNhcnJpZXIgPSBnZXRNYWluQ2FycmllcjtcbmV4cG9ydHMuZ2V0U2VudHJ5Q2FycmllciA9IGdldFNlbnRyeUNhcnJpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXJyaWVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/checkin.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dsn = __webpack_require__(/*! ./utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(\n  checkIn,\n  dynamicSamplingContext,\n  metadata,\n  tunnel,\n  dsn$1,\n) {\n  const headers = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext ;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return envelope.createEnvelope(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn) {\n  const checkInHeaders = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n\nexports.createCheckInEnvelope = createCheckInEnvelope;\n//# sourceMappingURL=checkin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2hlY2tpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsdUZBQWdCO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLGlHQUFxQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2NoZWNraW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRzbiA9IHJlcXVpcmUoJy4vdXRpbHMvZHNuLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4vdXRpbHMvZW52ZWxvcGUuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgZW52ZWxvcGUgZnJvbSBjaGVjayBpbiBpdGVtLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGVja0luRW52ZWxvcGUoXG4gIGNoZWNrSW4sXG4gIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQsXG4gIG1ldGFkYXRhLFxuICB0dW5uZWwsXG4gIGRzbiQxLFxuKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuXG4gIGlmIChtZXRhZGF0YT8uc2RrKSB7XG4gICAgaGVhZGVycy5zZGsgPSB7XG4gICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgIHZlcnNpb246IG1ldGFkYXRhLnNkay52ZXJzaW9uLFxuICAgIH07XG4gIH1cblxuICBpZiAoISF0dW5uZWwgJiYgISFkc24kMSkge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuLmRzblRvU3RyaW5nKGRzbiQxKTtcbiAgfVxuXG4gIGlmIChkeW5hbWljU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgaGVhZGVycy50cmFjZSA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgO1xuICB9XG5cbiAgY29uc3QgaXRlbSA9IGNyZWF0ZUNoZWNrSW5FbnZlbG9wZUl0ZW0oY2hlY2tJbik7XG4gIHJldHVybiBlbnZlbG9wZS5jcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbaXRlbV0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtKGNoZWNrSW4pIHtcbiAgY29uc3QgY2hlY2tJbkhlYWRlcnMgPSB7XG4gICAgdHlwZTogJ2NoZWNrX2luJyxcbiAgfTtcbiAgcmV0dXJuIFtjaGVja0luSGVhZGVycywgY2hlY2tJbl07XG59XG5cbmV4cG9ydHMuY3JlYXRlQ2hlY2tJbkVudmVsb3BlID0gY3JlYXRlQ2hlY2tJbkVudmVsb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tpbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/client.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/client.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst clientreport = __webpack_require__(/*! ./utils/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/clientreport.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst dsn = __webpack_require__(/*! ./utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst eventUtils = __webpack_require__(/*! ./utils/eventUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventUtils.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst merge = __webpack_require__(/*! ./utils/merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst shouldIgnoreSpan = __webpack_require__(/*! ./utils/should-ignore-span.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/should-ignore-span.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst syncpromise = __webpack_require__(/*! ./utils/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\nconst transactionEvent = __webpack_require__(/*! ./utils/transactionEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/transactionEvent.js\");\n\n/* eslint-disable max-lines */\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\nfunction _makeInternalError(message) {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message) {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error) {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error) {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass Client {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n\n  /** Number of calls being processed */\n\n  /** Holds flushable  */\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n   constructor(options) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = dsn.makeDsn(options.dsn);\n    } else {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = api.getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureException(exception, hint, scope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (misc.checkOrSetAlreadyCaught(exception)) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureMessage(\n    message,\n    level,\n    hint,\n    currentScope,\n  ) {\n    const hintWithEventId = {\n      event_id: misc.uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = is.isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = is.isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureEvent(event, hint, currentScope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && misc.checkOrSetAlreadyCaught(hint.originalException)) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n   captureSession(session$1) {\n    this.sendSession(session$1);\n    // After sending, we set init false to indicate it's not the first occurrence\n    session.updateSession(session$1, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n\n  /**\n   * Get the current Dsn.\n   */\n   getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n   getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n   getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n   getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n   flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return syncpromise.resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n   close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n   getEventProcessors() {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n   addEventProcessor(eventProcessor) {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n   init() {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n   getIntegrationByName(integrationName) {\n    return this._integrations[integrationName] ;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n   addIntegration(integration$1) {\n    const isAlreadyInstalled = this._integrations[integration$1.name];\n\n    // This hook takes care of only installing if not already installed\n    integration.setupIntegration(this, integration$1, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      integration.afterSetupIntegrations(this, [integration$1]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n   sendEvent(event, hint = {}) {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = envelope.createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = envelope$1.addItemToEnvelope(env, envelope$1.createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n   sendSession(session) {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = constants.DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        debugBuild.DEBUG_BUILD && debugLogger.debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        debugBuild.DEBUG_BUILD && debugLogger.debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = envelope.createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n   recordDroppedEvent(reason, category, count = 1) {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n\n  /**\n   * Register a hook on this client.\n   */\n   on(hook, callback) {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n   emit(hook, ...rest) {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n   sendEnvelope(envelope) {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        debugBuild.DEBUG_BUILD && debugLogger.debug.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    debugBuild.DEBUG_BUILD && debugLogger.debug.error('Transport disabled');\n\n    return syncpromise.resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n   _setupIntegrations() {\n    const { integrations } = this._options;\n    this._integrations = integration.setupIntegrations(this, integrations);\n    integration.afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n   _updateSessionFromEvent(session$1, event) {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session$1.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session$1.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.updateSession(session$1, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session$1.errors || Number(errored || crashed),\n      });\n      this.captureSession(session$1);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n   _isClientDoneProcessing(timeout) {\n    return new syncpromise.SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n   _isEnabled() {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n   _prepareEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent.prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: currentScopes.getTraceContextFromScope(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext$1 = dynamicSamplingContext.getDynamicSamplingContextFromScope(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext: dynamicSamplingContext$1,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n   _captureEvent(\n    event,\n    hint = {},\n    currentScope = currentScopes.getCurrentScope(),\n    isolationScope = currentScopes.getIsolationScope(),\n  ) {\n    if (debugBuild.DEBUG_BUILD && isErrorEvent(event)) {\n      debugLogger.debug.log(`Captured error event \\`${eventUtils.getPossibleEventMessages(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (debugBuild.DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            debugLogger.debug.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            debugLogger.debug.warn(reason.message);\n          } else {\n            debugLogger.debug.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n   _processEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate.parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return syncpromise.rejectedSyncPromise(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) ;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data ).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          mechanism: {\n            handled: false,\n            type: 'internal',\n          },\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n   _process(promise) {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n   _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') ;\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n   _flushOutcomes() {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('Sending outcomes:', outcomes);\n\n    const envelope = clientreport.createClientReportEnvelope(outcomes, this._options.tunnel && dsn.dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult,\n  beforeSendLabel,\n) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (is.isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!is.isPlainObject(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!is.isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client,\n  options,\n  event,\n  hint,\n) {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan, ignoreSpans } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    // Avoid processing if we don't have to\n    if (beforeSendSpan || ignoreSpans) {\n      // 1. Process root span\n      const rootSpanJson = transactionEvent.convertTransactionEventToSpanJson(processedEvent);\n\n      // 1.1 If the root span should be ignored, drop the whole transaction\n      if (ignoreSpans?.length && shouldIgnoreSpan.shouldIgnoreSpan(rootSpanJson, ignoreSpans)) {\n        // dropping the whole transaction!\n        return null;\n      }\n\n      // 1.2 If a `beforeSendSpan` callback is defined, process the root span\n      if (beforeSendSpan) {\n        const processedRootSpanJson = beforeSendSpan(rootSpanJson);\n        if (!processedRootSpanJson) {\n          spanUtils.showSpanDropWarning();\n        } else {\n          // update event with processed root span values\n          processedEvent = merge.merge(event, transactionEvent.convertSpanJsonToTransactionEvent(processedRootSpanJson));\n        }\n      }\n\n      // 2. Process child spans\n      if (processedEvent.spans) {\n        const processedSpans = [];\n\n        const initialSpans = processedEvent.spans;\n\n        for (const span of initialSpans) {\n          // 2.a If the child span should be ignored, reparent it to the root span\n          if (ignoreSpans?.length && shouldIgnoreSpan.shouldIgnoreSpan(span, ignoreSpans)) {\n            shouldIgnoreSpan.reparentChildSpans(initialSpans, span);\n            continue;\n          }\n\n          // 2.b If a `beforeSendSpan` callback is defined, process the child span\n          if (beforeSendSpan) {\n            const processedSpan = beforeSendSpan(span);\n            if (!processedSpan) {\n              spanUtils.showSpanDropWarning();\n              processedSpans.push(span);\n            } else {\n              processedSpans.push(processedSpan);\n            }\n          } else {\n            processedSpans.push(span);\n          }\n        }\n\n        const droppedSpans = processedEvent.spans.length - processedSpans.length;\n        if (droppedSpans) {\n          client.recordDroppedEvent('before_send', 'span', droppedSpans);\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent , hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nfunction _getTraceInfoFromScope(\n  client,\n  scope,\n) {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  return currentScopes.withScope(scope, () => {\n    const span = spanUtils.getActiveSpan();\n    const traceContext = span ? spanUtils.spanToTraceContext(span) : currentScopes.getTraceContextFromScope(scope);\n    const dynamicSamplingContext$1 = span\n      ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span)\n      : dynamicSamplingContext.getDynamicSamplingContextFromScope(client, scope);\n    return [dynamicSamplingContext$1, traceContext];\n  });\n}\n\nexports.Client = Client;\nexports._getTraceInfoFromScope = _getTraceInfoFromScope;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst DEFAULT_ENVIRONMENT = 'production';\n\nexports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBERUZBVUxUX0VOVklST05NRU5UID0gJ3Byb2R1Y3Rpb24nO1xuXG5leHBvcnRzLkRFRkFVTFRfRU5WSVJPTk1FTlQgPSBERUZBVUxUX0VOVklST05NRU5UO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/currentScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst propagationContext = __webpack_require__(/*! ./utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return carrier.getGlobalSingleton('globalScope', () => new scope.Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(\n  ...rest\n) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(\n  ...rest\n\n) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext$1 = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext$1;\n\n  const traceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || propagationContext.generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n\nexports.getClient = getClient;\nexports.getCurrentScope = getCurrentScope;\nexports.getGlobalScope = getGlobalScope;\nexports.getIsolationScope = getIsolationScope;\nexports.getTraceContextFromScope = getTraceContextFromScope;\nexports.withIsolationScope = withIsolationScope;\nexports.withScope = withScope;\n//# sourceMappingURL=currentScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY3VycmVudFNjb3Blcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxjQUFjLG1CQUFPLENBQUMseUdBQXlCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQywrRUFBWTtBQUNsQywyQkFBMkIsbUJBQU8sQ0FBQyxxSEFBK0I7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLDJDQUEyQzs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQywwQkFBMEI7QUFDMUIsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9jdXJyZW50U2NvcGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vYXN5bmNDb250ZXh0L2luZGV4LmpzJyk7XG5jb25zdCBjYXJyaWVyID0gcmVxdWlyZSgnLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzY29wZSA9IHJlcXVpcmUoJy4vc2NvcGUuanMnKTtcbmNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4vdXRpbHMvcHJvcGFnYXRpb25Db250ZXh0LmpzJyk7XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIHNjb3BlLlxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gIGNvbnN0IGNhcnJpZXIkMSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gaW5kZXguZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKTtcbiAgcmV0dXJuIGFjcy5nZXRDdXJyZW50U2NvcGUoKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgaXNvbGF0aW9uIHNjb3BlLlxuICogVGhlIGlzb2xhdGlvbiBzY29wZSBpcyBhY3RpdmUgZm9yIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBnZXRJc29sYXRpb25TY29wZSgpIHtcbiAgY29uc3QgY2FycmllciQxID0gY2Fycmllci5nZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBpbmRleC5nZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpO1xuICByZXR1cm4gYWNzLmdldElzb2xhdGlvblNjb3BlKCk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBUaGlzIHNjb3BlIGlzIGFwcGxpZWQgdG8gX2FsbF8gZXZlbnRzLlxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxTY29wZSgpIHtcbiAgcmV0dXJuIGNhcnJpZXIuZ2V0R2xvYmFsU2luZ2xldG9uKCdnbG9iYWxTY29wZScsICgpID0+IG5ldyBzY29wZS5TY29wZSgpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBzY29wZSwgb3Igc2V0cyB0aGUgZ2l2ZW4gc2NvcGUgYXMgYWN0aXZlIHNjb3BlIGluIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gd2l0aFNjb3BlKFxuICAuLi5yZXN0XG4pIHtcbiAgY29uc3QgY2FycmllciQxID0gY2Fycmllci5nZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBpbmRleC5nZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpO1xuXG4gIC8vIElmIGEgc2NvcGUgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byBtYWtlIHRoaXMgdGhlIGFjdGl2ZSBzY29wZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IG9uZVxuICBpZiAocmVzdC5sZW5ndGggPT09IDIpIHtcbiAgICBjb25zdCBbc2NvcGUsIGNhbGxiYWNrXSA9IHJlc3Q7XG5cbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICByZXR1cm4gYWNzLndpdGhTY29wZShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjcy53aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBhY3Mud2l0aFNjb3BlKHJlc3RbMF0pO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvcmsgdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlIGFuZCB0aGUgY3VycmVudCBzY29wZSBiYXNlZCBvbiB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LiBJZiBub1xuICogYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBzZXQsIHRoZSBpc29sYXRpb24gc2NvcGUgYW5kIHRoZSBjdXJyZW50IHNjb3BlIHdpbGwgbm90IGJlIGZvcmtlZCAodGhpcyBpcyBjdXJyZW50bHkgdGhlXG4gKiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIGJyb3dzZXIpLlxuICpcbiAqIFVzYWdlIG9mIHRoaXMgZnVuY3Rpb24gaW4gZW52aXJvbm1lbnRzIHdpdGhvdXQgYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBkaXNjb3VyYWdlZCBhbmQgbWF5IGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCBmb3IgU2VudHJ5IFNESyBhbmQgU0RLIGludGVncmF0aW9uIGRldmVsb3BtZW50LiBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYmUgdXNlZCBpbiBcIm5vcm1hbFwiXG4gKiBhcHBsaWNhdGlvbnMgZGlyZWN0bHkgYmVjYXVzZSBpdCBjb21lcyB3aXRoIHBpdGZhbGxzLiBVc2UgYXQgeW91ciBvd24gcmlzayFcbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUsIG9yIHNldHMgdGhlIGdpdmVuIGlzb2xhdGlvbiBzY29wZSBhcyBhY3RpdmUgc2NvcGUgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoXG4gIC4uLnJlc3RcblxuKSB7XG4gIGNvbnN0IGNhcnJpZXIkMSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gaW5kZXguZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKTtcblxuICAvLyBJZiBhIHNjb3BlIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gbWFrZSB0aGlzIHRoZSBhY3RpdmUgc2NvcGUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3QgW2lzb2xhdGlvblNjb3BlLCBjYWxsYmFja10gPSByZXN0O1xuXG4gICAgaWYgKCFpc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIGFjcy53aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Mud2l0aFNldElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCBjYWxsYmFjayk7XG4gIH1cblxuICByZXR1cm4gYWNzLndpdGhJc29sYXRpb25TY29wZShyZXN0WzBdKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBnZXRDbGllbnQoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50U2NvcGUoKS5nZXRDbGllbnQoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSB0cmFjZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlQ29udGV4dEZyb21TY29wZShzY29wZSkge1xuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQkMSA9IHNjb3BlLmdldFByb3BhZ2F0aW9uQ29udGV4dCgpO1xuXG4gIGNvbnN0IHsgdHJhY2VJZCwgcGFyZW50U3BhbklkLCBwcm9wYWdhdGlvblNwYW5JZCB9ID0gcHJvcGFnYXRpb25Db250ZXh0JDE7XG5cbiAgY29uc3QgdHJhY2VDb250ZXh0ID0ge1xuICAgIHRyYWNlX2lkOiB0cmFjZUlkLFxuICAgIHNwYW5faWQ6IHByb3BhZ2F0aW9uU3BhbklkIHx8IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVNwYW5JZCgpLFxuICB9O1xuXG4gIGlmIChwYXJlbnRTcGFuSWQpIHtcbiAgICB0cmFjZUNvbnRleHQucGFyZW50X3NwYW5faWQgPSBwYXJlbnRTcGFuSWQ7XG4gIH1cblxuICByZXR1cm4gdHJhY2VDb250ZXh0O1xufVxuXG5leHBvcnRzLmdldENsaWVudCA9IGdldENsaWVudDtcbmV4cG9ydHMuZ2V0Q3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlO1xuZXhwb3J0cy5nZXRHbG9iYWxTY29wZSA9IGdldEdsb2JhbFNjb3BlO1xuZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGdldElzb2xhdGlvblNjb3BlO1xuZXhwb3J0cy5nZXRUcmFjZUNvbnRleHRGcm9tU2NvcGUgPSBnZXRUcmFjZUNvbnRleHRGcm9tU2NvcGU7XG5leHBvcnRzLndpdGhJc29sYXRpb25TY29wZSA9IHdpdGhJc29sYXRpb25TY29wZTtcbmV4cG9ydHMud2l0aFNjb3BlID0gd2l0aFNjb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VycmVudFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUVoRixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2RlYnVnLWJ1aWxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/defaultScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\n\n/** Get the default current scope. */\nfunction getDefaultCurrentScope() {\n  return carrier.getGlobalSingleton('defaultCurrentScope', () => new scope.Scope());\n}\n\n/** Get the default isolation scope. */\nfunction getDefaultIsolationScope() {\n  return carrier.getGlobalSingleton('defaultIsolationScope', () => new scope.Scope());\n}\n\nexports.getDefaultCurrentScope = getDefaultCurrentScope;\nexports.getDefaultIsolationScope = getDefaultIsolationScope;\n//# sourceMappingURL=defaultScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVmYXVsdFNjb3Blcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBYztBQUN0QyxjQUFjLG1CQUFPLENBQUMsK0VBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5QixnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2RlZmF1bHRTY29wZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuL2NhcnJpZXIuanMnKTtcbmNvbnN0IHNjb3BlID0gcmVxdWlyZSgnLi9zY29wZS5qcycpO1xuXG4vKiogR2V0IHRoZSBkZWZhdWx0IGN1cnJlbnQgc2NvcGUuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gY2Fycmllci5nZXRHbG9iYWxTaW5nbGV0b24oJ2RlZmF1bHRDdXJyZW50U2NvcGUnLCAoKSA9PiBuZXcgc2NvcGUuU2NvcGUoKSk7XG59XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlLiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkge1xuICByZXR1cm4gY2Fycmllci5nZXRHbG9iYWxTaW5nbGV0b24oJ2RlZmF1bHRJc29sYXRpb25TY29wZScsICgpID0+IG5ldyBzY29wZS5TY29wZSgpKTtcbn1cblxuZXhwb3J0cy5nZXREZWZhdWx0Q3VycmVudFNjb3BlID0gZ2V0RGVmYXVsdEN1cnJlbnRTY29wZTtcbmV4cG9ydHMuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlID0gZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/envelope.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst dsn = __webpack_require__(/*! ./utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst shouldIgnoreSpan = __webpack_require__(/*! ./utils/should-ignore-span.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/should-ignore-span.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(\n  session,\n  dsn$1,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn$1 && { dsn: dsn.dsnToString(dsn$1) }),\n  };\n\n  const envelopeItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return envelope.createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(\n  event,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = envelope.createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem = [{ type: eventType }, event];\n  return envelope.createEnvelope(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn$1 = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn$1 && { dsn: dsn.dsnToString(dsn$1) }),\n  };\n\n  const { beforeSendSpan, ignoreSpans } = client?.getOptions() || {};\n\n  const filteredSpans = ignoreSpans?.length\n    ? spans.filter(span => !shouldIgnoreSpan.shouldIgnoreSpan(spanUtils.spanToJSON(span), ignoreSpans))\n    : spans;\n  const droppedSpans = spans.length - filteredSpans.length;\n\n  if (droppedSpans) {\n    client?.recordDroppedEvent('before_send', 'span', droppedSpans);\n  }\n\n  const convertToSpanJSON = beforeSendSpan\n    ? (span) => {\n        const spanJson = spanUtils.spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          spanUtils.showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanUtils.spanToJSON;\n\n  const items = [];\n  for (const span of filteredSpans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(envelope.createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return envelope.createEnvelope(headers, items);\n}\n\nexports.createEventEnvelope = createEventEnvelope;\nexports.createSessionEnvelope = createSessionEnvelope;\nexports.createSpanEnvelope = createSpanEnvelope;\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/eventProcessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst syncpromise = __webpack_require__(/*! ./utils/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nfunction notifyEventProcessors(\n  processors,\n  event,\n  hint,\n  index = 0,\n) {\n  return new syncpromise.SyncPromise((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) ;\n\n      debugBuild.DEBUG_BUILD && processor.id && result === null && debugLogger.debug.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (is.isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n\nexports.notifyEventProcessors = notifyEventProcessors;\n//# sourceMappingURL=eventProcessors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZXZlbnRQcm9jZXNzb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLDJGQUFrQjtBQUM3QyxvQkFBb0IsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDckQsV0FBVyxtQkFBTyxDQUFDLHFGQUFlO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLHVHQUF3Qjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04saUNBQWlDLFVBQVU7O0FBRTNDLDZHQUE2RyxhQUFhOztBQUUxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZXZlbnRQcm9jZXNzb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuL3V0aWxzL2lzLmpzJyk7XG5jb25zdCBzeW5jcHJvbWlzZSA9IHJlcXVpcmUoJy4vdXRpbHMvc3luY3Byb21pc2UuanMnKTtcblxuLyoqXG4gKiBQcm9jZXNzIGFuIGFycmF5IG9mIGV2ZW50IHByb2Nlc3NvcnMsIHJldHVybmluZyB0aGUgcHJvY2Vzc2VkIGV2ZW50IChvciBgbnVsbGAgaWYgdGhlIGV2ZW50IHdhcyBkcm9wcGVkKS5cbiAqL1xuZnVuY3Rpb24gbm90aWZ5RXZlbnRQcm9jZXNzb3JzKFxuICBwcm9jZXNzb3JzLFxuICBldmVudCxcbiAgaGludCxcbiAgaW5kZXggPSAwLFxuKSB7XG4gIHJldHVybiBuZXcgc3luY3Byb21pc2UuU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgIGlmIChldmVudCA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc29yKHsgLi4uZXZlbnQgfSwgaGludCkgO1xuXG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIHByb2Nlc3Nvci5pZCAmJiByZXN1bHQgPT09IG51bGwgJiYgZGVidWdMb2dnZXIuZGVidWcubG9nKGBFdmVudCBwcm9jZXNzb3IgXCIke3Byb2Nlc3Nvci5pZH1cIiBkcm9wcGVkIGV2ZW50YCk7XG5cbiAgICAgIGlmIChpcy5pc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCByZXN1bHRcbiAgICAgICAgICAudGhlbihmaW5hbCA9PiBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm9pZCBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgcmVzdWx0LCBoaW50LCBpbmRleCArIDEpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMubm90aWZ5RXZlbnRQcm9jZXNzb3JzID0gbm90aWZ5RXZlbnRQcm9jZXNzb3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRQcm9jZXNzb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/exports.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/exports.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst time = __webpack_require__(/*! ./utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst worldwide = __webpack_require__(/*! ./utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureException(exception, hint) {\n  return currentScopes.getCurrentScope().captureException(exception, prepareEvent.parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nfunction captureMessage(message, captureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return currentScopes.getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nfunction captureEvent(event, hint) {\n  return currentScopes.getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nfunction setContext(name, context) {\n  currentScopes.getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nfunction setExtras(extras) {\n  currentScopes.getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nfunction setExtra(key, extra) {\n  currentScopes.getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nfunction setTags(tags) {\n  currentScopes.getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nfunction setTag(key, value) {\n  currentScopes.getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nfunction setUser(user) {\n  currentScopes.getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nfunction lastEventId() {\n  return currentScopes.getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction captureCheckIn(checkIn, upsertMonitorConfig) {\n  const scope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return misc.uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param callback Callback to be monitored\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction withMonitor(\n  monitorSlug,\n  callback,\n  upsertMonitorConfig,\n) {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = time.timestampInSeconds();\n\n  function finishCheckIn(status) {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: time.timestampInSeconds() - now });\n  }\n\n  return currentScopes.withIsolationScope(() => {\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if (is.isThenable(maybePromiseResult)) {\n      return maybePromiseResult.then(\n        r => {\n          finishCheckIn('ok');\n          return r;\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      ) ;\n    }\n    finishCheckIn('ok');\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function flush(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function close(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nfunction isInitialized() {\n  return !!currentScopes.getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nfunction isEnabled() {\n  const client = currentScopes.getClient();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nfunction addEventProcessor(callback) {\n  currentScopes.getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nfunction startSession(context) {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = worldwide.GLOBAL_OBJ.navigator || {};\n\n  const session$1 = session.makeSession({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    session.updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session$1);\n\n  return session$1;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nfunction endSession() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n\n  const session$1 = currentScope.getSession() || isolationScope.getSession();\n  if (session$1) {\n    session.closeSession(session$1);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const client = currentScopes.getClient();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nfunction captureSession(end = false) {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n\nexports.addEventProcessor = addEventProcessor;\nexports.captureCheckIn = captureCheckIn;\nexports.captureEvent = captureEvent;\nexports.captureException = captureException;\nexports.captureMessage = captureMessage;\nexports.captureSession = captureSession;\nexports.close = close;\nexports.endSession = endSession;\nexports.flush = flush;\nexports.isEnabled = isEnabled;\nexports.isInitialized = isInitialized;\nexports.lastEventId = lastEventId;\nexports.setContext = setContext;\nexports.setExtra = setExtra;\nexports.setExtras = setExtras;\nexports.setTag = setTag;\nexports.setTags = setTags;\nexports.setUser = setUser;\nexports.startSession = startSession;\nexports.withMonitor = withMonitor;\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/feedback.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\n\n/**\n * Send user feedback to Sentry.\n */\nfunction captureFeedback(\n  params,\n  hint = {},\n  scope = currentScopes.getCurrentScope(),\n) {\n  const { message, name, email, url, source, associatedEventId, tags } = params;\n\n  const feedbackEvent = {\n    contexts: {\n      feedback: {\n        contact_email: email,\n        name,\n        message,\n        url,\n        source,\n        associated_event_id: associatedEventId,\n      },\n    },\n    type: 'feedback',\n    level: 'info',\n    tags,\n  };\n\n  const client = scope?.getClient() || currentScopes.getClient();\n\n  if (client) {\n    client.emit('beforeSendFeedback', feedbackEvent, hint);\n  }\n\n  const eventId = scope.captureEvent(feedbackEvent, hint);\n\n  return eventId;\n}\n\nexports.captureFeedback = captureFeedback;\n//# sourceMappingURL=feedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZmVlZGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQW9COztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxVQUFVLDZEQUE2RDs7QUFFdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ZlZWRiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5cbi8qKlxuICogU2VuZCB1c2VyIGZlZWRiYWNrIHRvIFNlbnRyeS5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZUZlZWRiYWNrKFxuICBwYXJhbXMsXG4gIGhpbnQgPSB7fSxcbiAgc2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLFxuKSB7XG4gIGNvbnN0IHsgbWVzc2FnZSwgbmFtZSwgZW1haWwsIHVybCwgc291cmNlLCBhc3NvY2lhdGVkRXZlbnRJZCwgdGFncyB9ID0gcGFyYW1zO1xuXG4gIGNvbnN0IGZlZWRiYWNrRXZlbnQgPSB7XG4gICAgY29udGV4dHM6IHtcbiAgICAgIGZlZWRiYWNrOiB7XG4gICAgICAgIGNvbnRhY3RfZW1haWw6IGVtYWlsLFxuICAgICAgICBuYW1lLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB1cmwsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgYXNzb2NpYXRlZF9ldmVudF9pZDogYXNzb2NpYXRlZEV2ZW50SWQsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdHlwZTogJ2ZlZWRiYWNrJyxcbiAgICBsZXZlbDogJ2luZm8nLFxuICAgIHRhZ3MsXG4gIH07XG5cbiAgY29uc3QgY2xpZW50ID0gc2NvcGU/LmdldENsaWVudCgpIHx8IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5lbWl0KCdiZWZvcmVTZW5kRmVlZGJhY2snLCBmZWVkYmFja0V2ZW50LCBoaW50KTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50SWQgPSBzY29wZS5jYXB0dXJlRXZlbnQoZmVlZGJhY2tFdmVudCwgaGludCk7XG5cbiAgcmV0dXJuIGV2ZW50SWQ7XG59XG5cbmV4cG9ydHMuY2FwdHVyZUZlZWRiYWNrID0gY2FwdHVyZUZlZWRiYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVlZGJhY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/fetch.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ./utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst baggage = __webpack_require__(/*! ./utils/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\nconst url = __webpack_require__(/*! ./utils/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/url.js\");\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n  spanOrigin = 'auto.http.browser',\n) {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = hasSpansEnabled.hasSpansEnabled() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hasParent = !!spanUtils.getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? trace.startInactiveSpan(getSpanStartOptions(url, method, spanOrigin))\n      : new sentryNonRecordingSpan.SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request = handlerData.args[0];\n\n    const options = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasSpansEnabled.hasSpansEnabled() && hasParent ? span : undefined,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = currentScopes.getClient();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } ;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nfunction _addTracingHeadersToFetchRequest(\n  request,\n  fetchOptionsObj\n\n,\n  span,\n) {\n  const traceHeaders = traceData.getTraceData({ span });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || (is.isRequest(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders ;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    return {\n      ...(originalHeaders ),\n      'sentry-trace': (existingSentryTraceHeader ) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    spanstatus.setHttpStatus(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers?.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader) {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(baggage.SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers) {\n  return typeof Headers !== 'undefined' && is.isInstanceOf(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url$1,\n  method,\n  spanOrigin,\n) {\n  const parsedUrl = url.parseStringToURLObject(url$1);\n  return {\n    name: parsedUrl ? `${method} ${url.getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url$1, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url$1,\n  parsedUrl,\n  method,\n  spanOrigin,\n) {\n  const attributes = {\n    url: url$1,\n    type: 'fetch',\n    'http.method': method,\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!url.isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n\nexports._addTracingHeadersToFetchRequest = _addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = instrumentFetchRequest;\n//# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst utils = __webpack_require__(/*! ./tracing/utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst idleSpan = __webpack_require__(/*! ./tracing/idleSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./tracing/sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst measurement = __webpack_require__(/*! ./tracing/measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst sampling = __webpack_require__(/*! ./tracing/sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst logSpans = __webpack_require__(/*! ./tracing/logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst defaultScopes = __webpack_require__(/*! ./defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst eventProcessors = __webpack_require__(/*! ./eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/client.js\");\nconst serverRuntimeClient = __webpack_require__(/*! ./server-runtime-client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\");\nconst sdk = __webpack_require__(/*! ./sdk.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\");\nconst base = __webpack_require__(/*! ./transports/base.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\");\nconst offline = __webpack_require__(/*! ./transports/offline.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\");\nconst multiplexed = __webpack_require__(/*! ./transports/multiplexed.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./utils/applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ./utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst isSentryRequestUrl = __webpack_require__(/*! ./utils/isSentryRequestUrl.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ./utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst parameterize = __webpack_require__(/*! ./utils/parameterize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\");\nconst ipAddress = __webpack_require__(/*! ./utils/ipAddress.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/ipAddress.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst sdkMetadata = __webpack_require__(/*! ./utils/sdkMetadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\nconst meta = __webpack_require__(/*! ./utils/meta.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\");\nconst debounce = __webpack_require__(/*! ./utils/debounce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debounce.js\");\nconst request = __webpack_require__(/*! ./utils/request.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/request.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst functiontostring = __webpack_require__(/*! ./integrations/functiontostring.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\");\nconst eventFilters = __webpack_require__(/*! ./integrations/eventFilters.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/eventFilters.js\");\nconst linkederrors = __webpack_require__(/*! ./integrations/linkederrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\");\nconst metadata = __webpack_require__(/*! ./integrations/metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\");\nconst requestdata = __webpack_require__(/*! ./integrations/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\");\nconst captureconsole = __webpack_require__(/*! ./integrations/captureconsole.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\");\nconst dedupe = __webpack_require__(/*! ./integrations/dedupe.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\");\nconst extraerrordata = __webpack_require__(/*! ./integrations/extraerrordata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\");\nconst rewriteframes = __webpack_require__(/*! ./integrations/rewriteframes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\");\nconst supabase = __webpack_require__(/*! ./integrations/supabase.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/supabase.js\");\nconst zoderrors = __webpack_require__(/*! ./integrations/zoderrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\");\nconst thirdPartyErrorsFilter = __webpack_require__(/*! ./integrations/third-party-errors-filter.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/console.js\");\nconst featureFlagsIntegration = __webpack_require__(/*! ./integrations/featureFlags/featureFlagsIntegration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/featureFlags/featureFlagsIntegration.js\");\nconst profiling = __webpack_require__(/*! ./profiling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\");\nconst fetch = __webpack_require__(/*! ./fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\");\nconst trpc = __webpack_require__(/*! ./trpc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/mcp-server/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/index.js\");\nconst feedback = __webpack_require__(/*! ./feedback.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\");\nconst exports$2 = __webpack_require__(/*! ./logs/exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/exports.js\");\nconst consoleIntegration = __webpack_require__(/*! ./logs/console-integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/console-integration.js\");\nconst vercelAi = __webpack_require__(/*! ./utils/vercel-ai.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai.js\");\nconst index$2 = __webpack_require__(/*! ./utils/openai/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/index.js\");\nconst constants$1 = __webpack_require__(/*! ./utils/openai/constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js\");\nconst featureFlags = __webpack_require__(/*! ./utils/featureFlags.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/featureFlags.js\");\nconst aggregateErrors = __webpack_require__(/*! ./utils/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/aggregate-errors.js\");\nconst breadcrumbLogLevel = __webpack_require__(/*! ./utils/breadcrumb-log-level.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/breadcrumb-log-level.js\");\nconst browser = __webpack_require__(/*! ./utils/browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/browser.js\");\nconst dsn = __webpack_require__(/*! ./utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst error = __webpack_require__(/*! ./utils/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/error.js\");\nconst worldwide = __webpack_require__(/*! ./utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst console$1 = __webpack_require__(/*! ./instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js\");\nconst fetch$1 = __webpack_require__(/*! ./instrument/fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/fetch.js\");\nconst globalError = __webpack_require__(/*! ./instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ./instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalUnhandledRejection.js\");\nconst handlers = __webpack_require__(/*! ./instrument/handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst isBrowser = __webpack_require__(/*! ./utils/isBrowser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/isBrowser.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst node = __webpack_require__(/*! ./utils/node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/node.js\");\nconst normalize = __webpack_require__(/*! ./utils/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst object = __webpack_require__(/*! ./utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst path = __webpack_require__(/*! ./utils/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/path.js\");\nconst promisebuffer = __webpack_require__(/*! ./utils/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/promisebuffer.js\");\nconst severity = __webpack_require__(/*! ./utils/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/severity.js\");\nconst stacktrace = __webpack_require__(/*! ./utils/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\nconst nodeStackTrace = __webpack_require__(/*! ./utils/node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/node-stack-trace.js\");\nconst string = __webpack_require__(/*! ./utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst supports = __webpack_require__(/*! ./utils/supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/supports.js\");\nconst syncpromise = __webpack_require__(/*! ./utils/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\nconst time = __webpack_require__(/*! ./utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst tracing = __webpack_require__(/*! ./utils/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js\");\nconst env = __webpack_require__(/*! ./utils/env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/env.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst clientreport = __webpack_require__(/*! ./utils/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/clientreport.js\");\nconst ratelimit = __webpack_require__(/*! ./utils/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/ratelimit.js\");\nconst baggage = __webpack_require__(/*! ./utils/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst url = __webpack_require__(/*! ./utils/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/url.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js\");\nconst anr = __webpack_require__(/*! ./utils/anr.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/anr.js\");\nconst lru = __webpack_require__(/*! ./utils/lru.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/lru.js\");\nconst propagationContext = __webpack_require__(/*! ./utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst vercelWaitUntil = __webpack_require__(/*! ./utils/vercelWaitUntil.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercelWaitUntil.js\");\nconst flushIfServerless = __webpack_require__(/*! ./utils/flushIfServerless.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/flushIfServerless.js\");\nconst version = __webpack_require__(/*! ./utils/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/version.js\");\nconst debugIds = __webpack_require__(/*! ./utils/debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-ids.js\");\nconst escapeStringForRegex = __webpack_require__(/*! ./vendor/escapeStringForRegex.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/vendor/escapeStringForRegex.js\");\n\n\n\nexports.registerSpanErrorInstrumentation = errors.registerSpanErrorInstrumentation;\nexports.getCapturedScopesOnSpan = utils.getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = utils.setCapturedScopesOnSpan;\nexports.TRACING_DEFAULTS = idleSpan.TRACING_DEFAULTS;\nexports.startIdleSpan = idleSpan.startIdleSpan;\nexports.SentrySpan = sentrySpan.SentrySpan;\nexports.SentryNonRecordingSpan = sentryNonRecordingSpan.SentryNonRecordingSpan;\nexports.SPAN_STATUS_ERROR = spanstatus.SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = spanstatus.SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = spanstatus.SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = spanstatus.getSpanStatusFromHttpCode;\nexports.setHttpStatus = spanstatus.setHttpStatus;\nexports.continueTrace = trace.continueTrace;\nexports.startInactiveSpan = trace.startInactiveSpan;\nexports.startNewTrace = trace.startNewTrace;\nexports.startSpan = trace.startSpan;\nexports.startSpanManual = trace.startSpanManual;\nexports.suppressTracing = trace.suppressTracing;\nexports.withActiveSpan = trace.withActiveSpan;\nexports.getDynamicSamplingContextFromClient = dynamicSamplingContext.getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = dynamicSamplingContext.getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = dynamicSamplingContext.getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = dynamicSamplingContext.spanToBaggageHeader;\nexports.setMeasurement = measurement.setMeasurement;\nexports.timedEventsToMeasurements = measurement.timedEventsToMeasurements;\nexports.sampleSpan = sampling.sampleSpan;\nexports.logSpanEnd = logSpans.logSpanEnd;\nexports.logSpanStart = logSpans.logSpanStart;\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = semanticAttributes.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = semanticAttributes.SEMANTIC_ATTRIBUTE_URL_FULL;\nexports.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = semanticAttributes.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE;\nexports.createEventEnvelope = envelope.createEventEnvelope;\nexports.createSessionEnvelope = envelope.createSessionEnvelope;\nexports.createSpanEnvelope = envelope.createSpanEnvelope;\nexports.addEventProcessor = exports$1.addEventProcessor;\nexports.captureCheckIn = exports$1.captureCheckIn;\nexports.captureEvent = exports$1.captureEvent;\nexports.captureException = exports$1.captureException;\nexports.captureMessage = exports$1.captureMessage;\nexports.captureSession = exports$1.captureSession;\nexports.close = exports$1.close;\nexports.endSession = exports$1.endSession;\nexports.flush = exports$1.flush;\nexports.isEnabled = exports$1.isEnabled;\nexports.isInitialized = exports$1.isInitialized;\nexports.lastEventId = exports$1.lastEventId;\nexports.setContext = exports$1.setContext;\nexports.setExtra = exports$1.setExtra;\nexports.setExtras = exports$1.setExtras;\nexports.setTag = exports$1.setTag;\nexports.setTags = exports$1.setTags;\nexports.setUser = exports$1.setUser;\nexports.startSession = exports$1.startSession;\nexports.withMonitor = exports$1.withMonitor;\nexports.getClient = currentScopes.getClient;\nexports.getCurrentScope = currentScopes.getCurrentScope;\nexports.getGlobalScope = currentScopes.getGlobalScope;\nexports.getIsolationScope = currentScopes.getIsolationScope;\nexports.getTraceContextFromScope = currentScopes.getTraceContextFromScope;\nexports.withIsolationScope = currentScopes.withIsolationScope;\nexports.withScope = currentScopes.withScope;\nexports.getDefaultCurrentScope = defaultScopes.getDefaultCurrentScope;\nexports.getDefaultIsolationScope = defaultScopes.getDefaultIsolationScope;\nexports.setAsyncContextStrategy = index.setAsyncContextStrategy;\nexports.getGlobalSingleton = carrier.getGlobalSingleton;\nexports.getMainCarrier = carrier.getMainCarrier;\nexports.closeSession = session.closeSession;\nexports.makeSession = session.makeSession;\nexports.updateSession = session.updateSession;\nexports.Scope = scope.Scope;\nexports.notifyEventProcessors = eventProcessors.notifyEventProcessors;\nexports.getEnvelopeEndpointWithUrlEncodedAuth = api.getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = api.getReportDialogEndpoint;\nexports.Client = client.Client;\nexports.ServerRuntimeClient = serverRuntimeClient.ServerRuntimeClient;\nexports.initAndBind = sdk.initAndBind;\nexports.setCurrentClient = sdk.setCurrentClient;\nexports.createTransport = base.createTransport;\nexports.makeOfflineTransport = offline.makeOfflineTransport;\nexports.makeMultiplexedTransport = multiplexed.makeMultiplexedTransport;\nexports.addIntegration = integration.addIntegration;\nexports.defineIntegration = integration.defineIntegration;\nexports.getIntegrationsToSetup = integration.getIntegrationsToSetup;\nexports.applyScopeDataToEvent = applyScopeDataToEvent.applyScopeDataToEvent;\nexports.mergeScopeData = applyScopeDataToEvent.mergeScopeData;\nexports.prepareEvent = prepareEvent.prepareEvent;\nexports.createCheckInEnvelope = checkin.createCheckInEnvelope;\nexports.hasSpansEnabled = hasSpansEnabled.hasSpansEnabled;\nexports.isSentryRequestUrl = isSentryRequestUrl.isSentryRequestUrl;\nexports.handleCallbackErrors = handleCallbackErrors.handleCallbackErrors;\nexports.fmt = parameterize.fmt;\nexports.parameterize = parameterize.parameterize;\nexports.addAutoIpAddressToSession = ipAddress.addAutoIpAddressToSession;\nexports.addAutoIpAddressToUser = ipAddress.addAutoIpAddressToUser;\nexports.addChildSpanToSpan = spanUtils.addChildSpanToSpan;\nexports.convertSpanLinksForEnvelope = spanUtils.convertSpanLinksForEnvelope;\nexports.getActiveSpan = spanUtils.getActiveSpan;\nexports.getRootSpan = spanUtils.getRootSpan;\nexports.getSpanDescendants = spanUtils.getSpanDescendants;\nexports.getStatusMessage = spanUtils.getStatusMessage;\nexports.spanIsSampled = spanUtils.spanIsSampled;\nexports.spanTimeInputToSeconds = spanUtils.spanTimeInputToSeconds;\nexports.spanToJSON = spanUtils.spanToJSON;\nexports.spanToTraceContext = spanUtils.spanToTraceContext;\nexports.spanToTraceHeader = spanUtils.spanToTraceHeader;\nexports.updateSpanName = spanUtils.updateSpanName;\nexports.parseSampleRate = parseSampleRate.parseSampleRate;\nexports.applySdkMetadata = sdkMetadata.applySdkMetadata;\nexports.getTraceData = traceData.getTraceData;\nexports.getTraceMetaTags = meta.getTraceMetaTags;\nexports.debounce = debounce.debounce;\nexports.extractQueryParamsFromUrl = request.extractQueryParamsFromUrl;\nexports.headersToDict = request.headersToDict;\nexports.httpRequestToRequestData = request.httpRequestToRequestData;\nexports.winterCGHeadersToDict = request.winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = request.winterCGRequestToRequestData;\nexports.DEFAULT_ENVIRONMENT = constants.DEFAULT_ENVIRONMENT;\nexports.addBreadcrumb = breadcrumbs.addBreadcrumb;\nexports.functionToStringIntegration = functiontostring.functionToStringIntegration;\nexports.eventFiltersIntegration = eventFilters.eventFiltersIntegration;\nexports.inboundFiltersIntegration = eventFilters.inboundFiltersIntegration;\nexports.linkedErrorsIntegration = linkederrors.linkedErrorsIntegration;\nexports.moduleMetadataIntegration = metadata.moduleMetadataIntegration;\nexports.requestDataIntegration = requestdata.requestDataIntegration;\nexports.captureConsoleIntegration = captureconsole.captureConsoleIntegration;\nexports.dedupeIntegration = dedupe.dedupeIntegration;\nexports.extraErrorDataIntegration = extraerrordata.extraErrorDataIntegration;\nexports.rewriteFramesIntegration = rewriteframes.rewriteFramesIntegration;\nexports.instrumentSupabaseClient = supabase.instrumentSupabaseClient;\nexports.supabaseIntegration = supabase.supabaseIntegration;\nexports.zodErrorsIntegration = zoderrors.zodErrorsIntegration;\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorsFilter.thirdPartyErrorFilterIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.featureFlagsIntegration = featureFlagsIntegration.featureFlagsIntegration;\nexports.profiler = profiling.profiler;\nexports.instrumentFetchRequest = fetch.instrumentFetchRequest;\nexports.trpcMiddleware = trpc.trpcMiddleware;\nexports.wrapMcpServerWithSentry = index$1.wrapMcpServerWithSentry;\nexports.captureFeedback = feedback.captureFeedback;\nexports._INTERNAL_captureLog = exports$2._INTERNAL_captureLog;\nexports._INTERNAL_captureSerializedLog = exports$2._INTERNAL_captureSerializedLog;\nexports._INTERNAL_flushLogsBuffer = exports$2._INTERNAL_flushLogsBuffer;\nexports.consoleLoggingIntegration = consoleIntegration.consoleLoggingIntegration;\nexports.addVercelAiProcessors = vercelAi.addVercelAiProcessors;\nexports.instrumentOpenAiClient = index$2.instrumentOpenAiClient;\nexports.OPENAI_INTEGRATION_NAME = constants$1.OPENAI_INTEGRATION_NAME;\nexports._INTERNAL_FLAG_BUFFER_SIZE = featureFlags._INTERNAL_FLAG_BUFFER_SIZE;\nexports._INTERNAL_MAX_FLAGS_PER_SPAN = featureFlags._INTERNAL_MAX_FLAGS_PER_SPAN;\nexports._INTERNAL_addFeatureFlagToActiveSpan = featureFlags._INTERNAL_addFeatureFlagToActiveSpan;\nexports._INTERNAL_copyFlagsFromScopeToEvent = featureFlags._INTERNAL_copyFlagsFromScopeToEvent;\nexports._INTERNAL_insertFlagToScope = featureFlags._INTERNAL_insertFlagToScope;\nexports.applyAggregateErrorsToEvent = aggregateErrors.applyAggregateErrorsToEvent;\nexports.getBreadcrumbLogLevelFromHttpStatusCode = breadcrumbLogLevel.getBreadcrumbLogLevelFromHttpStatusCode;\nexports.getComponentName = browser.getComponentName;\nexports.getLocationHref = browser.getLocationHref;\nexports.htmlTreeAsString = browser.htmlTreeAsString;\nexports.dsnFromString = dsn.dsnFromString;\nexports.dsnToString = dsn.dsnToString;\nexports.makeDsn = dsn.makeDsn;\nexports.SentryError = error.SentryError;\nexports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;\nexports.addConsoleInstrumentationHandler = console$1.addConsoleInstrumentationHandler;\nexports.addFetchEndInstrumentationHandler = fetch$1.addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = fetch$1.addFetchInstrumentationHandler;\nexports.addGlobalErrorInstrumentationHandler = globalError.addGlobalErrorInstrumentationHandler;\nexports.addGlobalUnhandledRejectionInstrumentationHandler = globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler;\nexports.addHandler = handlers.addHandler;\nexports.maybeInstrument = handlers.maybeInstrument;\nexports.resetInstrumentationHandlers = handlers.resetInstrumentationHandlers;\nexports.triggerHandlers = handlers.triggerHandlers;\nexports.isDOMError = is.isDOMError;\nexports.isDOMException = is.isDOMException;\nexports.isElement = is.isElement;\nexports.isError = is.isError;\nexports.isErrorEvent = is.isErrorEvent;\nexports.isEvent = is.isEvent;\nexports.isInstanceOf = is.isInstanceOf;\nexports.isParameterizedString = is.isParameterizedString;\nexports.isPlainObject = is.isPlainObject;\nexports.isPrimitive = is.isPrimitive;\nexports.isRegExp = is.isRegExp;\nexports.isString = is.isString;\nexports.isSyntheticEvent = is.isSyntheticEvent;\nexports.isThenable = is.isThenable;\nexports.isVueViewModel = is.isVueViewModel;\nexports.isBrowser = isBrowser.isBrowser;\nexports.CONSOLE_LEVELS = debugLogger.CONSOLE_LEVELS;\nexports.consoleSandbox = debugLogger.consoleSandbox;\nexports.debug = debugLogger.debug;\nexports.originalConsoleMethods = debugLogger.originalConsoleMethods;\nexports.addContextToFrame = misc.addContextToFrame;\nexports.addExceptionMechanism = misc.addExceptionMechanism;\nexports.addExceptionTypeValue = misc.addExceptionTypeValue;\nexports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;\nexports.getEventDescription = misc.getEventDescription;\nexports.parseSemver = misc.parseSemver;\nexports.uuid4 = misc.uuid4;\nexports.isNodeEnv = node.isNodeEnv;\nexports.loadModule = node.loadModule;\nexports.normalize = normalize.normalize;\nexports.normalizeToSize = normalize.normalizeToSize;\nexports.normalizeUrlToBase = normalize.normalizeUrlToBase;\nexports.addNonEnumerableProperty = object.addNonEnumerableProperty;\nexports.convertToPlainObject = object.convertToPlainObject;\nexports.dropUndefinedKeys = object.dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;\nexports.fill = object.fill;\nexports.getOriginalFunction = object.getOriginalFunction;\nexports.markFunctionWrapped = object.markFunctionWrapped;\nexports.objectify = object.objectify;\nexports.basename = path.basename;\nexports.dirname = path.dirname;\nexports.isAbsolute = path.isAbsolute;\nexports.join = path.join;\nexports.normalizePath = path.normalizePath;\nexports.relative = path.relative;\nexports.resolve = path.resolve;\nexports.SENTRY_BUFFER_FULL_ERROR = promisebuffer.SENTRY_BUFFER_FULL_ERROR;\nexports.makePromiseBuffer = promisebuffer.makePromiseBuffer;\nexports.severityLevelFromString = severity.severityLevelFromString;\nexports.UNKNOWN_FUNCTION = stacktrace.UNKNOWN_FUNCTION;\nexports.createStackParser = stacktrace.createStackParser;\nexports.getFramesFromEvent = stacktrace.getFramesFromEvent;\nexports.getFunctionName = stacktrace.getFunctionName;\nexports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;\nexports.filenameIsInApp = nodeStackTrace.filenameIsInApp;\nexports.node = nodeStackTrace.node;\nexports.nodeStackLineParser = nodeStackTrace.nodeStackLineParser;\nexports.isMatchingPattern = string.isMatchingPattern;\nexports.safeJoin = string.safeJoin;\nexports.snipLine = string.snipLine;\nexports.stringMatchesSomePattern = string.stringMatchesSomePattern;\nexports.truncate = string.truncate;\nexports.isNativeFunction = supports.isNativeFunction;\nexports.supportsDOMError = supports.supportsDOMError;\nexports.supportsDOMException = supports.supportsDOMException;\nexports.supportsErrorEvent = supports.supportsErrorEvent;\nexports.supportsFetch = supports.supportsFetch;\nexports.supportsHistory = supports.supportsHistory;\nexports.supportsNativeFetch = supports.supportsNativeFetch;\nexports.supportsReferrerPolicy = supports.supportsReferrerPolicy;\nexports.supportsReportingObserver = supports.supportsReportingObserver;\nexports.SyncPromise = syncpromise.SyncPromise;\nexports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;\nexports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;\nexports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = time.dateTimestampInSeconds;\nexports.timestampInSeconds = time.timestampInSeconds;\nexports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;\nexports.extractTraceparentData = tracing.extractTraceparentData;\nexports.generateSentryTraceHeader = tracing.generateSentryTraceHeader;\nexports.propagationContextFromHeaders = tracing.propagationContextFromHeaders;\nexports.shouldContinueTrace = tracing.shouldContinueTrace;\nexports.getSDKSource = env.getSDKSource;\nexports.isBrowserBundle = env.isBrowserBundle;\nexports.addItemToEnvelope = envelope$1.addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = envelope$1.createAttachmentEnvelopeItem;\nexports.createEnvelope = envelope$1.createEnvelope;\nexports.createEventEnvelopeHeaders = envelope$1.createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = envelope$1.createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelope$1.envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelope$1.envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = envelope$1.forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = envelope$1.getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = envelope$1.parseEnvelope;\nexports.serializeEnvelope = envelope$1.serializeEnvelope;\nexports.createClientReportEnvelope = clientreport.createClientReportEnvelope;\nexports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;\nexports.disabledUntil = ratelimit.disabledUntil;\nexports.isRateLimited = ratelimit.isRateLimited;\nexports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;\nexports.updateRateLimits = ratelimit.updateRateLimits;\nexports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;\nexports.objectToBaggageHeader = baggage.objectToBaggageHeader;\nexports.parseBaggageHeader = baggage.parseBaggageHeader;\nexports.getHttpSpanDetailsFromUrlObject = url.getHttpSpanDetailsFromUrlObject;\nexports.getSanitizedUrlString = url.getSanitizedUrlString;\nexports.getSanitizedUrlStringFromUrlObject = url.getSanitizedUrlStringFromUrlObject;\nexports.isURLObjectRelative = url.isURLObjectRelative;\nexports.parseStringToURLObject = url.parseStringToURLObject;\nexports.parseUrl = url.parseUrl;\nexports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;\nexports.eventFromMessage = eventbuilder.eventFromMessage;\nexports.eventFromUnknownInput = eventbuilder.eventFromUnknownInput;\nexports.exceptionFromError = eventbuilder.exceptionFromError;\nexports.parseStackFrames = eventbuilder.parseStackFrames;\nexports.callFrameToStackFrame = anr.callFrameToStackFrame;\nexports.watchdogTimer = anr.watchdogTimer;\nexports.LRUMap = lru.LRUMap;\nexports.generateSpanId = propagationContext.generateSpanId;\nexports.generateTraceId = propagationContext.generateTraceId;\nexports.vercelWaitUntil = vercelWaitUntil.vercelWaitUntil;\nexports.flushIfServerless = flushIfServerless.flushIfServerless;\nexports.SDK_VERSION = version.SDK_VERSION;\nexports.getDebugImagesForResources = debugIds.getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = debugIds.getFilenameToDebugIdMap;\nexports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZUFBZSxtQkFBTyxDQUFDLGlHQUFxQjtBQUM1QyxjQUFjLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLHFHQUF1QjtBQUNoRCxtQkFBbUIsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDcEQsK0JBQStCLG1CQUFPLENBQUMsaUlBQXFDO0FBQzVFLG1CQUFtQixtQkFBTyxDQUFDLHlHQUF5QjtBQUNwRCxjQUFjLG1CQUFPLENBQUMsK0ZBQW9CO0FBQzFDLCtCQUErQixtQkFBTyxDQUFDLGlJQUFxQztBQUM1RSxvQkFBb0IsbUJBQU8sQ0FBQywyR0FBMEI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMscUdBQXVCO0FBQ2hELGlCQUFpQixtQkFBTyxDQUFDLHFHQUF1QjtBQUNoRCwyQkFBMkIsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDNUQsaUJBQWlCLG1CQUFPLENBQUMscUZBQWU7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsbUZBQWM7QUFDeEMsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQ2xELHNCQUFzQixtQkFBTyxDQUFDLCtGQUFvQjtBQUNsRCxjQUFjLG1CQUFPLENBQUMseUdBQXlCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQywrRUFBWTtBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDdEQsWUFBWSxtQkFBTyxDQUFDLDJFQUFVO0FBQzlCLGVBQWUsbUJBQU8sQ0FBQyxpRkFBYTtBQUNwQyw0QkFBNEIsbUJBQU8sQ0FBQywrR0FBNEI7QUFDaEUsWUFBWSxtQkFBTyxDQUFDLDJFQUFVO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMseUdBQXlCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLGlIQUE2QjtBQUN6RCxvQkFBb0IsbUJBQU8sQ0FBQywyRkFBa0I7QUFDOUMsOEJBQThCLG1CQUFPLENBQUMsMkhBQWtDO0FBQ3hFLHFCQUFxQixtQkFBTyxDQUFDLHlHQUF5QjtBQUN0RCxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBYztBQUN0Qyx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBNEI7QUFDNUQsMkJBQTJCLG1CQUFPLENBQUMscUhBQStCO0FBQ2xFLDZCQUE2QixtQkFBTyxDQUFDLHlIQUFpQztBQUN0RSxxQkFBcUIsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMsbUdBQXNCO0FBQ2hELGtCQUFrQixtQkFBTyxDQUFDLG1HQUFzQjtBQUNoRCx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBNEI7QUFDNUQsb0JBQW9CLG1CQUFPLENBQUMsdUdBQXdCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLG1HQUFzQjtBQUNoRCxhQUFhLG1CQUFPLENBQUMseUZBQWlCO0FBQ3RDLGlCQUFpQixtQkFBTyxDQUFDLGlHQUFxQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsdUZBQWdCO0FBQzFDLG9CQUFvQixtQkFBTyxDQUFDLDJGQUFrQjtBQUM5Qyx5QkFBeUIsbUJBQU8sQ0FBQywrSEFBb0M7QUFDckUscUJBQXFCLG1CQUFPLENBQUMsdUhBQWdDO0FBQzdELHFCQUFxQixtQkFBTyxDQUFDLHVIQUFnQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQywrR0FBNEI7QUFDckQsb0JBQW9CLG1CQUFPLENBQUMscUhBQStCO0FBQzNELHVCQUF1QixtQkFBTyxDQUFDLDJIQUFrQztBQUNqRSxlQUFlLG1CQUFPLENBQUMsMkdBQTBCO0FBQ2pELHVCQUF1QixtQkFBTyxDQUFDLDJIQUFrQztBQUNqRSxzQkFBc0IsbUJBQU8sQ0FBQyx5SEFBaUM7QUFDL0QsaUJBQWlCLG1CQUFPLENBQUMsK0dBQTRCO0FBQ3JELGtCQUFrQixtQkFBTyxDQUFDLGlIQUE2QjtBQUN2RCwrQkFBK0IsbUJBQU8sQ0FBQyxpSkFBNkM7QUFDcEYsZ0JBQWdCLG1CQUFPLENBQUMsNkdBQTJCO0FBQ25ELGdDQUFnQyxtQkFBTyxDQUFDLHVLQUF3RDtBQUNoRyxrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBZ0I7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLCtFQUFZO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyw2RUFBVztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQywrSEFBb0M7QUFDNUQsaUJBQWlCLG1CQUFPLENBQUMscUZBQWU7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsNkZBQW1CO0FBQzdDLDJCQUEyQixtQkFBTyxDQUFDLHFIQUErQjtBQUNsRSxpQkFBaUIsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDL0MsZ0JBQWdCLG1CQUFPLENBQUMseUdBQXlCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLGlIQUE2QjtBQUN6RCxxQkFBcUIsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDdEQsd0JBQXdCLG1CQUFPLENBQUMsaUhBQTZCO0FBQzdELDJCQUEyQixtQkFBTyxDQUFDLHlIQUFpQztBQUNwRSxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDNUMsWUFBWSxtQkFBTyxDQUFDLHVGQUFnQjtBQUNwQyxjQUFjLG1CQUFPLENBQUMsMkZBQWtCO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLG1HQUFzQjtBQUNoRCxrQkFBa0IsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMscUdBQXVCO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLGlIQUE2QjtBQUN6RCxpQ0FBaUMsbUJBQU8sQ0FBQywySUFBMEM7QUFDbkYsaUJBQWlCLG1CQUFPLENBQUMsMkdBQTBCO0FBQ25ELFdBQVcsbUJBQU8sQ0FBQyxxRkFBZTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDaEQsb0JBQW9CLG1CQUFPLENBQUMseUdBQXlCO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyx5RkFBaUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLHlGQUFpQjtBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDaEQsZUFBZSxtQkFBTyxDQUFDLDZGQUFtQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMseUZBQWlCO0FBQ3RDLHNCQUFzQixtQkFBTyxDQUFDLDJHQUEwQjtBQUN4RCxpQkFBaUIsbUJBQU8sQ0FBQyxpR0FBcUI7QUFDOUMsbUJBQW1CLG1CQUFPLENBQUMscUdBQXVCO0FBQ2xELHVCQUF1QixtQkFBTyxDQUFDLGlIQUE2QjtBQUM1RCxlQUFlLG1CQUFPLENBQUMsNkZBQW1CO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLGlHQUFxQjtBQUM5QyxvQkFBb0IsbUJBQU8sQ0FBQyx1R0FBd0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLHlGQUFpQjtBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDNUMsWUFBWSxtQkFBTyxDQUFDLHVGQUFnQjtBQUNwQyxtQkFBbUIsbUJBQU8sQ0FBQyxpR0FBcUI7QUFDaEQscUJBQXFCLG1CQUFPLENBQUMseUdBQXlCO0FBQ3RELGtCQUFrQixtQkFBTyxDQUFDLG1HQUFzQjtBQUNoRCxnQkFBZ0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDNUMsWUFBWSxtQkFBTyxDQUFDLHVGQUFnQjtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyx5R0FBeUI7QUFDdEQsWUFBWSxtQkFBTyxDQUFDLHVGQUFnQjtBQUNwQyxZQUFZLG1CQUFPLENBQUMsdUZBQWdCO0FBQ3BDLDJCQUEyQixtQkFBTyxDQUFDLHFIQUErQjtBQUNsRSx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBNEI7QUFDNUQsMEJBQTBCLG1CQUFPLENBQUMsbUhBQThCO0FBQ2hFLGdCQUFnQixtQkFBTyxDQUFDLCtGQUFvQjtBQUM1QyxpQkFBaUIsbUJBQU8sQ0FBQyxtR0FBc0I7QUFDL0MsNkJBQTZCLG1CQUFPLENBQUMsMkhBQWtDOzs7O0FBSXZFLHdDQUF3QztBQUN4QywrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIsc0JBQXNCO0FBQ3RCLHlCQUF5QjtBQUN6QixpQ0FBaUM7QUFDakMscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQix1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0QiwyQ0FBMkM7QUFDM0MsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6QywyQkFBMkI7QUFDM0Isc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixvQ0FBb0M7QUFDcEMsMENBQTBDO0FBQzFDLG9DQUFvQztBQUNwQyx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDLHFDQUFxQztBQUNyQyxrREFBa0Q7QUFDbEQseURBQXlEO0FBQ3pELGtEQUFrRDtBQUNsRCxtREFBbUQ7QUFDbkQsb0NBQW9DO0FBQ3BDLHdDQUF3QztBQUN4Qyw0REFBNEQ7QUFDNUQsNkNBQTZDO0FBQzdDLHdDQUF3QztBQUN4QyxtQ0FBbUM7QUFDbkMseUNBQXlDO0FBQ3pDLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLGFBQWE7QUFDYixrQkFBa0I7QUFDbEIsYUFBYTtBQUNiLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCLGNBQWM7QUFDZCxlQUFlO0FBQ2YsZUFBZTtBQUNmLG9CQUFvQjtBQUNwQixtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQywwQkFBMEI7QUFDMUIsaUJBQWlCO0FBQ2pCLDhCQUE4QjtBQUM5QixnQ0FBZ0M7QUFDaEMsK0JBQStCO0FBQy9CLDBCQUEwQjtBQUMxQixzQkFBc0I7QUFDdEIsb0JBQW9CO0FBQ3BCLG1CQUFtQjtBQUNuQixxQkFBcUI7QUFDckIsYUFBYTtBQUNiLDZCQUE2QjtBQUM3Qiw2Q0FBNkM7QUFDN0MsK0JBQStCO0FBQy9CLGNBQWM7QUFDZCwyQkFBMkI7QUFDM0IsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsNEJBQTRCO0FBQzVCLGdDQUFnQztBQUNoQyxzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0Isc0JBQXNCO0FBQ3RCLG9CQUFvQjtBQUNwQiw2QkFBNkI7QUFDN0IsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIsV0FBVztBQUNYLG9CQUFvQjtBQUNwQixpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCLDBCQUEwQjtBQUMxQixtQ0FBbUM7QUFDbkMscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiw4QkFBOEI7QUFDOUIsa0JBQWtCO0FBQ2xCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEIsaUNBQWlDO0FBQ2pDLHFCQUFxQjtBQUNyQixnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCLG9DQUFvQztBQUNwQywyQkFBMkI7QUFDM0IscUJBQXFCO0FBQ3JCLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCLGlDQUFpQztBQUNqQyx5QkFBeUI7QUFDekIsaUNBQWlDO0FBQ2pDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsMkJBQTJCO0FBQzNCLDRCQUE0QjtBQUM1Qix3Q0FBd0M7QUFDeEMsMEJBQTBCO0FBQzFCLCtCQUErQjtBQUMvQixnQkFBZ0I7QUFDaEIsOEJBQThCO0FBQzlCLHNCQUFzQjtBQUN0QiwrQkFBK0I7QUFDL0IsdUJBQXVCO0FBQ3ZCLDRCQUE0QjtBQUM1QixzQ0FBc0M7QUFDdEMsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLCtCQUErQjtBQUMvQixrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBQ3BDLDRDQUE0QztBQUM1QywyQ0FBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLG1DQUFtQztBQUNuQywrQ0FBK0M7QUFDL0Msd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQix3Q0FBd0M7QUFDeEMseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0Qyw0Q0FBNEM7QUFDNUMseURBQXlEO0FBQ3pELGtCQUFrQjtBQUNsQix1QkFBdUI7QUFDdkIsb0NBQW9DO0FBQ3BDLHVCQUF1QjtBQUN2QixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLGVBQWU7QUFDZixvQkFBb0I7QUFDcEIsNkJBQTZCO0FBQzdCLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQix3QkFBd0I7QUFDeEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QixpQkFBaUI7QUFDakIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsbUJBQW1CO0FBQ25CLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQix1QkFBdUI7QUFDdkIsMEJBQTBCO0FBQzFCLGdDQUFnQztBQUNoQyw0QkFBNEI7QUFDNUIseUJBQXlCO0FBQ3pCLHNDQUFzQztBQUN0QyxZQUFZO0FBQ1osMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLGVBQWU7QUFDZixrQkFBa0I7QUFDbEIsWUFBWTtBQUNaLHFCQUFxQjtBQUNyQixnQkFBZ0I7QUFDaEIsZUFBZTtBQUNmLGdDQUFnQztBQUNoQyx5QkFBeUI7QUFDekIsK0JBQStCO0FBQy9CLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2Qix5Q0FBeUM7QUFDekMsbUNBQW1DO0FBQ25DLHVCQUF1QjtBQUN2QixZQUFZO0FBQ1osMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGdDQUFnQztBQUNoQyxnQkFBZ0I7QUFDaEIsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIsMEJBQTBCO0FBQzFCLHFCQUFxQjtBQUNyQix1QkFBdUI7QUFDdkIsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMsbUJBQW1CO0FBQ25CLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0Isb0NBQW9DO0FBQ3BDLDhCQUE4QjtBQUM5QiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMscUNBQXFDO0FBQ3JDLDJCQUEyQjtBQUMzQixvQkFBb0I7QUFDcEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixvQ0FBb0M7QUFDcEMsc0JBQXNCO0FBQ3RCLGtDQUFrQztBQUNsQyw4QkFBOEI7QUFDOUIsZ0NBQWdDO0FBQ2hDLHNDQUFzQztBQUN0QywyQkFBMkI7QUFDM0IsdUNBQXVDO0FBQ3ZDLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsa0NBQWtDO0FBQ2xDLDJCQUEyQjtBQUMzQixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyx1Q0FBdUM7QUFDdkMsNkNBQTZDO0FBQzdDLG1EQUFtRDtBQUNuRCw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCLHVDQUF1QztBQUN2Qyw2QkFBNkI7QUFDN0IsMENBQTBDO0FBQzFDLDJCQUEyQjtBQUMzQiw4QkFBOEI7QUFDOUIsZ0JBQWdCO0FBQ2hCLGdDQUFnQztBQUNoQyx3QkFBd0I7QUFDeEIsNkJBQTZCO0FBQzdCLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIsNkJBQTZCO0FBQzdCLHFCQUFxQjtBQUNyQixjQUFjO0FBQ2Qsc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLG1CQUFtQjtBQUNuQixrQ0FBa0M7QUFDbEMsK0JBQStCO0FBQy9CLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGVycm9ycyA9IHJlcXVpcmUoJy4vdHJhY2luZy9lcnJvcnMuanMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi90cmFjaW5nL3V0aWxzLmpzJyk7XG5jb25zdCBpZGxlU3BhbiA9IHJlcXVpcmUoJy4vdHJhY2luZy9pZGxlU3Bhbi5qcycpO1xuY29uc3Qgc2VudHJ5U3BhbiA9IHJlcXVpcmUoJy4vdHJhY2luZy9zZW50cnlTcGFuLmpzJyk7XG5jb25zdCBzZW50cnlOb25SZWNvcmRpbmdTcGFuID0gcmVxdWlyZSgnLi90cmFjaW5nL3NlbnRyeU5vblJlY29yZGluZ1NwYW4uanMnKTtcbmNvbnN0IHNwYW5zdGF0dXMgPSByZXF1aXJlKCcuL3RyYWNpbmcvc3BhbnN0YXR1cy5qcycpO1xuY29uc3QgdHJhY2UgPSByZXF1aXJlKCcuL3RyYWNpbmcvdHJhY2UuanMnKTtcbmNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1aXJlKCcuL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcycpO1xuY29uc3QgbWVhc3VyZW1lbnQgPSByZXF1aXJlKCcuL3RyYWNpbmcvbWVhc3VyZW1lbnQuanMnKTtcbmNvbnN0IHNhbXBsaW5nID0gcmVxdWlyZSgnLi90cmFjaW5nL3NhbXBsaW5nLmpzJyk7XG5jb25zdCBsb2dTcGFucyA9IHJlcXVpcmUoJy4vdHJhY2luZy9sb2dTcGFucy5qcycpO1xuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi9lbnZlbG9wZS5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi9leHBvcnRzLmpzJyk7XG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBkZWZhdWx0U2NvcGVzID0gcmVxdWlyZSgnLi9kZWZhdWx0U2NvcGVzLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vYXN5bmNDb250ZXh0L2luZGV4LmpzJyk7XG5jb25zdCBjYXJyaWVyID0gcmVxdWlyZSgnLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzZXNzaW9uID0gcmVxdWlyZSgnLi9zZXNzaW9uLmpzJyk7XG5jb25zdCBzY29wZSA9IHJlcXVpcmUoJy4vc2NvcGUuanMnKTtcbmNvbnN0IGV2ZW50UHJvY2Vzc29ycyA9IHJlcXVpcmUoJy4vZXZlbnRQcm9jZXNzb3JzLmpzJyk7XG5jb25zdCBhcGkgPSByZXF1aXJlKCcuL2FwaS5qcycpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQuanMnKTtcbmNvbnN0IHNlcnZlclJ1bnRpbWVDbGllbnQgPSByZXF1aXJlKCcuL3NlcnZlci1ydW50aW1lLWNsaWVudC5qcycpO1xuY29uc3Qgc2RrID0gcmVxdWlyZSgnLi9zZGsuanMnKTtcbmNvbnN0IGJhc2UgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvYmFzZS5qcycpO1xuY29uc3Qgb2ZmbGluZSA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9vZmZsaW5lLmpzJyk7XG5jb25zdCBtdWx0aXBsZXhlZCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9tdWx0aXBsZXhlZC5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuL2ludGVncmF0aW9uLmpzJyk7XG5jb25zdCBhcHBseVNjb3BlRGF0YVRvRXZlbnQgPSByZXF1aXJlKCcuL3V0aWxzL2FwcGx5U2NvcGVEYXRhVG9FdmVudC5qcycpO1xuY29uc3QgcHJlcGFyZUV2ZW50ID0gcmVxdWlyZSgnLi91dGlscy9wcmVwYXJlRXZlbnQuanMnKTtcbmNvbnN0IGNoZWNraW4gPSByZXF1aXJlKCcuL2NoZWNraW4uanMnKTtcbmNvbnN0IGhhc1NwYW5zRW5hYmxlZCA9IHJlcXVpcmUoJy4vdXRpbHMvaGFzU3BhbnNFbmFibGVkLmpzJyk7XG5jb25zdCBpc1NlbnRyeVJlcXVlc3RVcmwgPSByZXF1aXJlKCcuL3V0aWxzL2lzU2VudHJ5UmVxdWVzdFVybC5qcycpO1xuY29uc3QgaGFuZGxlQ2FsbGJhY2tFcnJvcnMgPSByZXF1aXJlKCcuL3V0aWxzL2hhbmRsZUNhbGxiYWNrRXJyb3JzLmpzJyk7XG5jb25zdCBwYXJhbWV0ZXJpemUgPSByZXF1aXJlKCcuL3V0aWxzL3BhcmFtZXRlcml6ZS5qcycpO1xuY29uc3QgaXBBZGRyZXNzID0gcmVxdWlyZSgnLi91dGlscy9pcEFkZHJlc3MuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5jb25zdCBwYXJzZVNhbXBsZVJhdGUgPSByZXF1aXJlKCcuL3V0aWxzL3BhcnNlU2FtcGxlUmF0ZS5qcycpO1xuY29uc3Qgc2RrTWV0YWRhdGEgPSByZXF1aXJlKCcuL3V0aWxzL3Nka01ldGFkYXRhLmpzJyk7XG5jb25zdCB0cmFjZURhdGEgPSByZXF1aXJlKCcuL3V0aWxzL3RyYWNlRGF0YS5qcycpO1xuY29uc3QgbWV0YSA9IHJlcXVpcmUoJy4vdXRpbHMvbWV0YS5qcycpO1xuY29uc3QgZGVib3VuY2UgPSByZXF1aXJlKCcuL3V0aWxzL2RlYm91bmNlLmpzJyk7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnLi91dGlscy9yZXF1ZXN0LmpzJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgYnJlYWRjcnVtYnMgPSByZXF1aXJlKCcuL2JyZWFkY3J1bWJzLmpzJyk7XG5jb25zdCBmdW5jdGlvbnRvc3RyaW5nID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcycpO1xuY29uc3QgZXZlbnRGaWx0ZXJzID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvZXZlbnRGaWx0ZXJzLmpzJyk7XG5jb25zdCBsaW5rZWRlcnJvcnMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9saW5rZWRlcnJvcnMuanMnKTtcbmNvbnN0IG1ldGFkYXRhID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvbWV0YWRhdGEuanMnKTtcbmNvbnN0IHJlcXVlc3RkYXRhID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvcmVxdWVzdGRhdGEuanMnKTtcbmNvbnN0IGNhcHR1cmVjb25zb2xlID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvY2FwdHVyZWNvbnNvbGUuanMnKTtcbmNvbnN0IGRlZHVwZSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2RlZHVwZS5qcycpO1xuY29uc3QgZXh0cmFlcnJvcmRhdGEgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9leHRyYWVycm9yZGF0YS5qcycpO1xuY29uc3QgcmV3cml0ZWZyYW1lcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3Jld3JpdGVmcmFtZXMuanMnKTtcbmNvbnN0IHN1cGFiYXNlID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvc3VwYWJhc2UuanMnKTtcbmNvbnN0IHpvZGVycm9ycyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3pvZGVycm9ycy5qcycpO1xuY29uc3QgdGhpcmRQYXJ0eUVycm9yc0ZpbHRlciA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RoaXJkLXBhcnR5LWVycm9ycy1maWx0ZXIuanMnKTtcbmNvbnN0IGNvbnNvbGUgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9jb25zb2xlLmpzJyk7XG5jb25zdCBmZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFncy9mZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgcHJvZmlsaW5nID0gcmVxdWlyZSgnLi9wcm9maWxpbmcuanMnKTtcbmNvbnN0IGZldGNoID0gcmVxdWlyZSgnLi9mZXRjaC5qcycpO1xuY29uc3QgdHJwYyA9IHJlcXVpcmUoJy4vdHJwYy5qcycpO1xuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvaW5kZXguanMnKTtcbmNvbnN0IGZlZWRiYWNrID0gcmVxdWlyZSgnLi9mZWVkYmFjay5qcycpO1xuY29uc3QgZXhwb3J0cyQyID0gcmVxdWlyZSgnLi9sb2dzL2V4cG9ydHMuanMnKTtcbmNvbnN0IGNvbnNvbGVJbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4vbG9ncy9jb25zb2xlLWludGVncmF0aW9uLmpzJyk7XG5jb25zdCB2ZXJjZWxBaSA9IHJlcXVpcmUoJy4vdXRpbHMvdmVyY2VsLWFpLmpzJyk7XG5jb25zdCBpbmRleCQyID0gcmVxdWlyZSgnLi91dGlscy9vcGVuYWkvaW5kZXguanMnKTtcbmNvbnN0IGNvbnN0YW50cyQxID0gcmVxdWlyZSgnLi91dGlscy9vcGVuYWkvY29uc3RhbnRzLmpzJyk7XG5jb25zdCBmZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL3V0aWxzL2ZlYXR1cmVGbGFncy5qcycpO1xuY29uc3QgYWdncmVnYXRlRXJyb3JzID0gcmVxdWlyZSgnLi91dGlscy9hZ2dyZWdhdGUtZXJyb3JzLmpzJyk7XG5jb25zdCBicmVhZGNydW1iTG9nTGV2ZWwgPSByZXF1aXJlKCcuL3V0aWxzL2JyZWFkY3J1bWItbG9nLWxldmVsLmpzJyk7XG5jb25zdCBicm93c2VyID0gcmVxdWlyZSgnLi91dGlscy9icm93c2VyLmpzJyk7XG5jb25zdCBkc24gPSByZXF1aXJlKCcuL3V0aWxzL2Rzbi5qcycpO1xuY29uc3QgZXJyb3IgPSByZXF1aXJlKCcuL3V0aWxzL2Vycm9yLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgY29uc29sZSQxID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50L2NvbnNvbGUuanMnKTtcbmNvbnN0IGZldGNoJDEgPSByZXF1aXJlKCcuL2luc3RydW1lbnQvZmV0Y2guanMnKTtcbmNvbnN0IGdsb2JhbEVycm9yID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzJyk7XG5jb25zdCBnbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnQvZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmpzJyk7XG5jb25zdCBoYW5kbGVycyA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudC9oYW5kbGVycy5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuL3V0aWxzL2lzLmpzJyk7XG5jb25zdCBpc0Jyb3dzZXIgPSByZXF1aXJlKCcuL3V0aWxzL2lzQnJvd3Nlci5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgbWlzYyA9IHJlcXVpcmUoJy4vdXRpbHMvbWlzYy5qcycpO1xuY29uc3Qgbm9kZSA9IHJlcXVpcmUoJy4vdXRpbHMvbm9kZS5qcycpO1xuY29uc3Qgbm9ybWFsaXplID0gcmVxdWlyZSgnLi91dGlscy9ub3JtYWxpemUuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vdXRpbHMvb2JqZWN0LmpzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgnLi91dGlscy9wYXRoLmpzJyk7XG5jb25zdCBwcm9taXNlYnVmZmVyID0gcmVxdWlyZSgnLi91dGlscy9wcm9taXNlYnVmZmVyLmpzJyk7XG5jb25zdCBzZXZlcml0eSA9IHJlcXVpcmUoJy4vdXRpbHMvc2V2ZXJpdHkuanMnKTtcbmNvbnN0IHN0YWNrdHJhY2UgPSByZXF1aXJlKCcuL3V0aWxzL3N0YWNrdHJhY2UuanMnKTtcbmNvbnN0IG5vZGVTdGFja1RyYWNlID0gcmVxdWlyZSgnLi91dGlscy9ub2RlLXN0YWNrLXRyYWNlLmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3N0cmluZy5qcycpO1xuY29uc3Qgc3VwcG9ydHMgPSByZXF1aXJlKCcuL3V0aWxzL3N1cHBvcnRzLmpzJyk7XG5jb25zdCBzeW5jcHJvbWlzZSA9IHJlcXVpcmUoJy4vdXRpbHMvc3luY3Byb21pc2UuanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuL3V0aWxzL3RpbWUuanMnKTtcbmNvbnN0IHRyYWNpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3RyYWNpbmcuanMnKTtcbmNvbnN0IGVudiA9IHJlcXVpcmUoJy4vdXRpbHMvZW52LmpzJyk7XG5jb25zdCBlbnZlbG9wZSQxID0gcmVxdWlyZSgnLi91dGlscy9lbnZlbG9wZS5qcycpO1xuY29uc3QgY2xpZW50cmVwb3J0ID0gcmVxdWlyZSgnLi91dGlscy9jbGllbnRyZXBvcnQuanMnKTtcbmNvbnN0IHJhdGVsaW1pdCA9IHJlcXVpcmUoJy4vdXRpbHMvcmF0ZWxpbWl0LmpzJyk7XG5jb25zdCBiYWdnYWdlID0gcmVxdWlyZSgnLi91dGlscy9iYWdnYWdlLmpzJyk7XG5jb25zdCB1cmwgPSByZXF1aXJlKCcuL3V0aWxzL3VybC5qcycpO1xuY29uc3QgZXZlbnRidWlsZGVyID0gcmVxdWlyZSgnLi91dGlscy9ldmVudGJ1aWxkZXIuanMnKTtcbmNvbnN0IGFuciA9IHJlcXVpcmUoJy4vdXRpbHMvYW5yLmpzJyk7XG5jb25zdCBscnUgPSByZXF1aXJlKCcuL3V0aWxzL2xydS5qcycpO1xuY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi91dGlscy9wcm9wYWdhdGlvbkNvbnRleHQuanMnKTtcbmNvbnN0IHZlcmNlbFdhaXRVbnRpbCA9IHJlcXVpcmUoJy4vdXRpbHMvdmVyY2VsV2FpdFVudGlsLmpzJyk7XG5jb25zdCBmbHVzaElmU2VydmVybGVzcyA9IHJlcXVpcmUoJy4vdXRpbHMvZmx1c2hJZlNlcnZlcmxlc3MuanMnKTtcbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuL3V0aWxzL3ZlcnNpb24uanMnKTtcbmNvbnN0IGRlYnVnSWRzID0gcmVxdWlyZSgnLi91dGlscy9kZWJ1Zy1pZHMuanMnKTtcbmNvbnN0IGVzY2FwZVN0cmluZ0ZvclJlZ2V4ID0gcmVxdWlyZSgnLi92ZW5kb3IvZXNjYXBlU3RyaW5nRm9yUmVnZXguanMnKTtcblxuXG5cbmV4cG9ydHMucmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb24gPSBlcnJvcnMucmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb247XG5leHBvcnRzLmdldENhcHR1cmVkU2NvcGVzT25TcGFuID0gdXRpbHMuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW47XG5leHBvcnRzLnNldENhcHR1cmVkU2NvcGVzT25TcGFuID0gdXRpbHMuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW47XG5leHBvcnRzLlRSQUNJTkdfREVGQVVMVFMgPSBpZGxlU3Bhbi5UUkFDSU5HX0RFRkFVTFRTO1xuZXhwb3J0cy5zdGFydElkbGVTcGFuID0gaWRsZVNwYW4uc3RhcnRJZGxlU3BhbjtcbmV4cG9ydHMuU2VudHJ5U3BhbiA9IHNlbnRyeVNwYW4uU2VudHJ5U3BhbjtcbmV4cG9ydHMuU2VudHJ5Tm9uUmVjb3JkaW5nU3BhbiA9IHNlbnRyeU5vblJlY29yZGluZ1NwYW4uU2VudHJ5Tm9uUmVjb3JkaW5nU3BhbjtcbmV4cG9ydHMuU1BBTl9TVEFUVVNfRVJST1IgPSBzcGFuc3RhdHVzLlNQQU5fU1RBVFVTX0VSUk9SO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19PSyA9IHNwYW5zdGF0dXMuU1BBTl9TVEFUVVNfT0s7XG5leHBvcnRzLlNQQU5fU1RBVFVTX1VOU0VUID0gc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19VTlNFVDtcbmV4cG9ydHMuZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZSA9IHNwYW5zdGF0dXMuZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZTtcbmV4cG9ydHMuc2V0SHR0cFN0YXR1cyA9IHNwYW5zdGF0dXMuc2V0SHR0cFN0YXR1cztcbmV4cG9ydHMuY29udGludWVUcmFjZSA9IHRyYWNlLmNvbnRpbnVlVHJhY2U7XG5leHBvcnRzLnN0YXJ0SW5hY3RpdmVTcGFuID0gdHJhY2Uuc3RhcnRJbmFjdGl2ZVNwYW47XG5leHBvcnRzLnN0YXJ0TmV3VHJhY2UgPSB0cmFjZS5zdGFydE5ld1RyYWNlO1xuZXhwb3J0cy5zdGFydFNwYW4gPSB0cmFjZS5zdGFydFNwYW47XG5leHBvcnRzLnN0YXJ0U3Bhbk1hbnVhbCA9IHRyYWNlLnN0YXJ0U3Bhbk1hbnVhbDtcbmV4cG9ydHMuc3VwcHJlc3NUcmFjaW5nID0gdHJhY2Uuc3VwcHJlc3NUcmFjaW5nO1xuZXhwb3J0cy53aXRoQWN0aXZlU3BhbiA9IHRyYWNlLndpdGhBY3RpdmVTcGFuO1xuZXhwb3J0cy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbUNsaWVudCA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQ7XG5leHBvcnRzLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGUgPSBkeW5hbWljU2FtcGxpbmdDb250ZXh0LmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGU7XG5leHBvcnRzLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbiA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuO1xuZXhwb3J0cy5zcGFuVG9CYWdnYWdlSGVhZGVyID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dC5zcGFuVG9CYWdnYWdlSGVhZGVyO1xuZXhwb3J0cy5zZXRNZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50LnNldE1lYXN1cmVtZW50O1xuZXhwb3J0cy50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnQudGltZWRFdmVudHNUb01lYXN1cmVtZW50cztcbmV4cG9ydHMuc2FtcGxlU3BhbiA9IHNhbXBsaW5nLnNhbXBsZVNwYW47XG5leHBvcnRzLmxvZ1NwYW5FbmQgPSBsb2dTcGFucy5sb2dTcGFuRW5kO1xuZXhwb3J0cy5sb2dTcGFuU3RhcnQgPSBsb2dTcGFucy5sb2dTcGFuU3RhcnQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVk7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRCA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU47XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUFJFVklPVVNfVFJBQ0VfU0FNUExFX1JBVEUgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9QUkVWSU9VU19UUkFDRV9TQU1QTEVfUkFURTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTDtcbmV4cG9ydHMuU0VNQU5USUNfTElOS19BVFRSSUJVVEVfTElOS19UWVBFID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0xJTktfQVRUUklCVVRFX0xJTktfVFlQRTtcbmV4cG9ydHMuY3JlYXRlRXZlbnRFbnZlbG9wZSA9IGVudmVsb3BlLmNyZWF0ZUV2ZW50RW52ZWxvcGU7XG5leHBvcnRzLmNyZWF0ZVNlc3Npb25FbnZlbG9wZSA9IGVudmVsb3BlLmNyZWF0ZVNlc3Npb25FbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlU3BhbkVudmVsb3BlID0gZW52ZWxvcGUuY3JlYXRlU3BhbkVudmVsb3BlO1xuZXhwb3J0cy5hZGRFdmVudFByb2Nlc3NvciA9IGV4cG9ydHMkMS5hZGRFdmVudFByb2Nlc3NvcjtcbmV4cG9ydHMuY2FwdHVyZUNoZWNrSW4gPSBleHBvcnRzJDEuY2FwdHVyZUNoZWNrSW47XG5leHBvcnRzLmNhcHR1cmVFdmVudCA9IGV4cG9ydHMkMS5jYXB0dXJlRXZlbnQ7XG5leHBvcnRzLmNhcHR1cmVFeGNlcHRpb24gPSBleHBvcnRzJDEuY2FwdHVyZUV4Y2VwdGlvbjtcbmV4cG9ydHMuY2FwdHVyZU1lc3NhZ2UgPSBleHBvcnRzJDEuY2FwdHVyZU1lc3NhZ2U7XG5leHBvcnRzLmNhcHR1cmVTZXNzaW9uID0gZXhwb3J0cyQxLmNhcHR1cmVTZXNzaW9uO1xuZXhwb3J0cy5jbG9zZSA9IGV4cG9ydHMkMS5jbG9zZTtcbmV4cG9ydHMuZW5kU2Vzc2lvbiA9IGV4cG9ydHMkMS5lbmRTZXNzaW9uO1xuZXhwb3J0cy5mbHVzaCA9IGV4cG9ydHMkMS5mbHVzaDtcbmV4cG9ydHMuaXNFbmFibGVkID0gZXhwb3J0cyQxLmlzRW5hYmxlZDtcbmV4cG9ydHMuaXNJbml0aWFsaXplZCA9IGV4cG9ydHMkMS5pc0luaXRpYWxpemVkO1xuZXhwb3J0cy5sYXN0RXZlbnRJZCA9IGV4cG9ydHMkMS5sYXN0RXZlbnRJZDtcbmV4cG9ydHMuc2V0Q29udGV4dCA9IGV4cG9ydHMkMS5zZXRDb250ZXh0O1xuZXhwb3J0cy5zZXRFeHRyYSA9IGV4cG9ydHMkMS5zZXRFeHRyYTtcbmV4cG9ydHMuc2V0RXh0cmFzID0gZXhwb3J0cyQxLnNldEV4dHJhcztcbmV4cG9ydHMuc2V0VGFnID0gZXhwb3J0cyQxLnNldFRhZztcbmV4cG9ydHMuc2V0VGFncyA9IGV4cG9ydHMkMS5zZXRUYWdzO1xuZXhwb3J0cy5zZXRVc2VyID0gZXhwb3J0cyQxLnNldFVzZXI7XG5leHBvcnRzLnN0YXJ0U2Vzc2lvbiA9IGV4cG9ydHMkMS5zdGFydFNlc3Npb247XG5leHBvcnRzLndpdGhNb25pdG9yID0gZXhwb3J0cyQxLndpdGhNb25pdG9yO1xuZXhwb3J0cy5nZXRDbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudDtcbmV4cG9ydHMuZ2V0Q3VycmVudFNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGU7XG5leHBvcnRzLmdldEdsb2JhbFNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRHbG9iYWxTY29wZTtcbmV4cG9ydHMuZ2V0SXNvbGF0aW9uU2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldElzb2xhdGlvblNjb3BlO1xuZXhwb3J0cy5nZXRUcmFjZUNvbnRleHRGcm9tU2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldFRyYWNlQ29udGV4dEZyb21TY29wZTtcbmV4cG9ydHMud2l0aElzb2xhdGlvblNjb3BlID0gY3VycmVudFNjb3Blcy53aXRoSXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLndpdGhTY29wZSA9IGN1cnJlbnRTY29wZXMud2l0aFNjb3BlO1xuZXhwb3J0cy5nZXREZWZhdWx0Q3VycmVudFNjb3BlID0gZGVmYXVsdFNjb3Blcy5nZXREZWZhdWx0Q3VycmVudFNjb3BlO1xuZXhwb3J0cy5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUgPSBkZWZhdWx0U2NvcGVzLmdldERlZmF1bHRJc29sYXRpb25TY29wZTtcbmV4cG9ydHMuc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgPSBpbmRleC5zZXRBc3luY0NvbnRleHRTdHJhdGVneTtcbmV4cG9ydHMuZ2V0R2xvYmFsU2luZ2xldG9uID0gY2Fycmllci5nZXRHbG9iYWxTaW5nbGV0b247XG5leHBvcnRzLmdldE1haW5DYXJyaWVyID0gY2Fycmllci5nZXRNYWluQ2FycmllcjtcbmV4cG9ydHMuY2xvc2VTZXNzaW9uID0gc2Vzc2lvbi5jbG9zZVNlc3Npb247XG5leHBvcnRzLm1ha2VTZXNzaW9uID0gc2Vzc2lvbi5tYWtlU2Vzc2lvbjtcbmV4cG9ydHMudXBkYXRlU2Vzc2lvbiA9IHNlc3Npb24udXBkYXRlU2Vzc2lvbjtcbmV4cG9ydHMuU2NvcGUgPSBzY29wZS5TY29wZTtcbmV4cG9ydHMubm90aWZ5RXZlbnRQcm9jZXNzb3JzID0gZXZlbnRQcm9jZXNzb3JzLm5vdGlmeUV2ZW50UHJvY2Vzc29ycztcbmV4cG9ydHMuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGFwaS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoO1xuZXhwb3J0cy5nZXRSZXBvcnREaWFsb2dFbmRwb2ludCA9IGFwaS5nZXRSZXBvcnREaWFsb2dFbmRwb2ludDtcbmV4cG9ydHMuQ2xpZW50ID0gY2xpZW50LkNsaWVudDtcbmV4cG9ydHMuU2VydmVyUnVudGltZUNsaWVudCA9IHNlcnZlclJ1bnRpbWVDbGllbnQuU2VydmVyUnVudGltZUNsaWVudDtcbmV4cG9ydHMuaW5pdEFuZEJpbmQgPSBzZGsuaW5pdEFuZEJpbmQ7XG5leHBvcnRzLnNldEN1cnJlbnRDbGllbnQgPSBzZGsuc2V0Q3VycmVudENsaWVudDtcbmV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ID0gYmFzZS5jcmVhdGVUcmFuc3BvcnQ7XG5leHBvcnRzLm1ha2VPZmZsaW5lVHJhbnNwb3J0ID0gb2ZmbGluZS5tYWtlT2ZmbGluZVRyYW5zcG9ydDtcbmV4cG9ydHMubWFrZU11bHRpcGxleGVkVHJhbnNwb3J0ID0gbXVsdGlwbGV4ZWQubWFrZU11bHRpcGxleGVkVHJhbnNwb3J0O1xuZXhwb3J0cy5hZGRJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmFkZEludGVncmF0aW9uO1xuZXhwb3J0cy5kZWZpbmVJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uO1xuZXhwb3J0cy5nZXRJbnRlZ3JhdGlvbnNUb1NldHVwID0gaW50ZWdyYXRpb24uZ2V0SW50ZWdyYXRpb25zVG9TZXR1cDtcbmV4cG9ydHMuYXBwbHlTY29wZURhdGFUb0V2ZW50ID0gYXBwbHlTY29wZURhdGFUb0V2ZW50LmFwcGx5U2NvcGVEYXRhVG9FdmVudDtcbmV4cG9ydHMubWVyZ2VTY29wZURhdGEgPSBhcHBseVNjb3BlRGF0YVRvRXZlbnQubWVyZ2VTY29wZURhdGE7XG5leHBvcnRzLnByZXBhcmVFdmVudCA9IHByZXBhcmVFdmVudC5wcmVwYXJlRXZlbnQ7XG5leHBvcnRzLmNyZWF0ZUNoZWNrSW5FbnZlbG9wZSA9IGNoZWNraW4uY3JlYXRlQ2hlY2tJbkVudmVsb3BlO1xuZXhwb3J0cy5oYXNTcGFuc0VuYWJsZWQgPSBoYXNTcGFuc0VuYWJsZWQuaGFzU3BhbnNFbmFibGVkO1xuZXhwb3J0cy5pc1NlbnRyeVJlcXVlc3RVcmwgPSBpc1NlbnRyeVJlcXVlc3RVcmwuaXNTZW50cnlSZXF1ZXN0VXJsO1xuZXhwb3J0cy5oYW5kbGVDYWxsYmFja0Vycm9ycyA9IGhhbmRsZUNhbGxiYWNrRXJyb3JzLmhhbmRsZUNhbGxiYWNrRXJyb3JzO1xuZXhwb3J0cy5mbXQgPSBwYXJhbWV0ZXJpemUuZm10O1xuZXhwb3J0cy5wYXJhbWV0ZXJpemUgPSBwYXJhbWV0ZXJpemUucGFyYW1ldGVyaXplO1xuZXhwb3J0cy5hZGRBdXRvSXBBZGRyZXNzVG9TZXNzaW9uID0gaXBBZGRyZXNzLmFkZEF1dG9JcEFkZHJlc3NUb1Nlc3Npb247XG5leHBvcnRzLmFkZEF1dG9JcEFkZHJlc3NUb1VzZXIgPSBpcEFkZHJlc3MuYWRkQXV0b0lwQWRkcmVzc1RvVXNlcjtcbmV4cG9ydHMuYWRkQ2hpbGRTcGFuVG9TcGFuID0gc3BhblV0aWxzLmFkZENoaWxkU3BhblRvU3BhbjtcbmV4cG9ydHMuY29udmVydFNwYW5MaW5rc0ZvckVudmVsb3BlID0gc3BhblV0aWxzLmNvbnZlcnRTcGFuTGlua3NGb3JFbnZlbG9wZTtcbmV4cG9ydHMuZ2V0QWN0aXZlU3BhbiA9IHNwYW5VdGlscy5nZXRBY3RpdmVTcGFuO1xuZXhwb3J0cy5nZXRSb290U3BhbiA9IHNwYW5VdGlscy5nZXRSb290U3BhbjtcbmV4cG9ydHMuZ2V0U3BhbkRlc2NlbmRhbnRzID0gc3BhblV0aWxzLmdldFNwYW5EZXNjZW5kYW50cztcbmV4cG9ydHMuZ2V0U3RhdHVzTWVzc2FnZSA9IHNwYW5VdGlscy5nZXRTdGF0dXNNZXNzYWdlO1xuZXhwb3J0cy5zcGFuSXNTYW1wbGVkID0gc3BhblV0aWxzLnNwYW5Jc1NhbXBsZWQ7XG5leHBvcnRzLnNwYW5UaW1lSW5wdXRUb1NlY29uZHMgPSBzcGFuVXRpbHMuc3BhblRpbWVJbnB1dFRvU2Vjb25kcztcbmV4cG9ydHMuc3BhblRvSlNPTiA9IHNwYW5VdGlscy5zcGFuVG9KU09OO1xuZXhwb3J0cy5zcGFuVG9UcmFjZUNvbnRleHQgPSBzcGFuVXRpbHMuc3BhblRvVHJhY2VDb250ZXh0O1xuZXhwb3J0cy5zcGFuVG9UcmFjZUhlYWRlciA9IHNwYW5VdGlscy5zcGFuVG9UcmFjZUhlYWRlcjtcbmV4cG9ydHMudXBkYXRlU3Bhbk5hbWUgPSBzcGFuVXRpbHMudXBkYXRlU3Bhbk5hbWU7XG5leHBvcnRzLnBhcnNlU2FtcGxlUmF0ZSA9IHBhcnNlU2FtcGxlUmF0ZS5wYXJzZVNhbXBsZVJhdGU7XG5leHBvcnRzLmFwcGx5U2RrTWV0YWRhdGEgPSBzZGtNZXRhZGF0YS5hcHBseVNka01ldGFkYXRhO1xuZXhwb3J0cy5nZXRUcmFjZURhdGEgPSB0cmFjZURhdGEuZ2V0VHJhY2VEYXRhO1xuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gbWV0YS5nZXRUcmFjZU1ldGFUYWdzO1xuZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlLmRlYm91bmNlO1xuZXhwb3J0cy5leHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsID0gcmVxdWVzdC5leHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsO1xuZXhwb3J0cy5oZWFkZXJzVG9EaWN0ID0gcmVxdWVzdC5oZWFkZXJzVG9EaWN0O1xuZXhwb3J0cy5odHRwUmVxdWVzdFRvUmVxdWVzdERhdGEgPSByZXF1ZXN0Lmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YTtcbmV4cG9ydHMud2ludGVyQ0dIZWFkZXJzVG9EaWN0ID0gcmVxdWVzdC53aW50ZXJDR0hlYWRlcnNUb0RpY3Q7XG5leHBvcnRzLndpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEgPSByZXF1ZXN0LndpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGE7XG5leHBvcnRzLkRFRkFVTFRfRU5WSVJPTk1FTlQgPSBjb25zdGFudHMuREVGQVVMVF9FTlZJUk9OTUVOVDtcbmV4cG9ydHMuYWRkQnJlYWRjcnVtYiA9IGJyZWFkY3J1bWJzLmFkZEJyZWFkY3J1bWI7XG5leHBvcnRzLmZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGZ1bmN0aW9udG9zdHJpbmcuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uO1xuZXhwb3J0cy5ldmVudEZpbHRlcnNJbnRlZ3JhdGlvbiA9IGV2ZW50RmlsdGVycy5ldmVudEZpbHRlcnNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5ib3VuZEZpbHRlcnNJbnRlZ3JhdGlvbiA9IGV2ZW50RmlsdGVycy5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uO1xuZXhwb3J0cy5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiA9IGxpbmtlZGVycm9ycy5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiA9IG1ldGFkYXRhLm1vZHVsZU1ldGFkYXRhSW50ZWdyYXRpb247XG5leHBvcnRzLnJlcXVlc3REYXRhSW50ZWdyYXRpb24gPSByZXF1ZXN0ZGF0YS5yZXF1ZXN0RGF0YUludGVncmF0aW9uO1xuZXhwb3J0cy5jYXB0dXJlQ29uc29sZUludGVncmF0aW9uID0gY2FwdHVyZWNvbnNvbGUuY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZGVkdXBlSW50ZWdyYXRpb24gPSBkZWR1cGUuZGVkdXBlSW50ZWdyYXRpb247XG5leHBvcnRzLmV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSBleHRyYWVycm9yZGF0YS5leHRyYUVycm9yRGF0YUludGVncmF0aW9uO1xuZXhwb3J0cy5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSByZXdyaXRlZnJhbWVzLnJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudFN1cGFiYXNlQ2xpZW50ID0gc3VwYWJhc2UuaW5zdHJ1bWVudFN1cGFiYXNlQ2xpZW50O1xuZXhwb3J0cy5zdXBhYmFzZUludGVncmF0aW9uID0gc3VwYWJhc2Uuc3VwYWJhc2VJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuem9kRXJyb3JzSW50ZWdyYXRpb24gPSB6b2RlcnJvcnMuem9kRXJyb3JzSW50ZWdyYXRpb247XG5leHBvcnRzLnRoaXJkUGFydHlFcnJvckZpbHRlckludGVncmF0aW9uID0gdGhpcmRQYXJ0eUVycm9yc0ZpbHRlci50aGlyZFBhcnR5RXJyb3JGaWx0ZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuY29uc29sZUludGVncmF0aW9uID0gY29uc29sZS5jb25zb2xlSW50ZWdyYXRpb247XG5leHBvcnRzLmZlYXR1cmVGbGFnc0ludGVncmF0aW9uID0gZmVhdHVyZUZsYWdzSW50ZWdyYXRpb24uZmVhdHVyZUZsYWdzSW50ZWdyYXRpb247XG5leHBvcnRzLnByb2ZpbGVyID0gcHJvZmlsaW5nLnByb2ZpbGVyO1xuZXhwb3J0cy5pbnN0cnVtZW50RmV0Y2hSZXF1ZXN0ID0gZmV0Y2guaW5zdHJ1bWVudEZldGNoUmVxdWVzdDtcbmV4cG9ydHMudHJwY01pZGRsZXdhcmUgPSB0cnBjLnRycGNNaWRkbGV3YXJlO1xuZXhwb3J0cy53cmFwTWNwU2VydmVyV2l0aFNlbnRyeSA9IGluZGV4JDEud3JhcE1jcFNlcnZlcldpdGhTZW50cnk7XG5leHBvcnRzLmNhcHR1cmVGZWVkYmFjayA9IGZlZWRiYWNrLmNhcHR1cmVGZWVkYmFjaztcbmV4cG9ydHMuX0lOVEVSTkFMX2NhcHR1cmVMb2cgPSBleHBvcnRzJDIuX0lOVEVSTkFMX2NhcHR1cmVMb2c7XG5leHBvcnRzLl9JTlRFUk5BTF9jYXB0dXJlU2VyaWFsaXplZExvZyA9IGV4cG9ydHMkMi5fSU5URVJOQUxfY2FwdHVyZVNlcmlhbGl6ZWRMb2c7XG5leHBvcnRzLl9JTlRFUk5BTF9mbHVzaExvZ3NCdWZmZXIgPSBleHBvcnRzJDIuX0lOVEVSTkFMX2ZsdXNoTG9nc0J1ZmZlcjtcbmV4cG9ydHMuY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbiA9IGNvbnNvbGVJbnRlZ3JhdGlvbi5jb25zb2xlTG9nZ2luZ0ludGVncmF0aW9uO1xuZXhwb3J0cy5hZGRWZXJjZWxBaVByb2Nlc3NvcnMgPSB2ZXJjZWxBaS5hZGRWZXJjZWxBaVByb2Nlc3NvcnM7XG5leHBvcnRzLmluc3RydW1lbnRPcGVuQWlDbGllbnQgPSBpbmRleCQyLmluc3RydW1lbnRPcGVuQWlDbGllbnQ7XG5leHBvcnRzLk9QRU5BSV9JTlRFR1JBVElPTl9OQU1FID0gY29uc3RhbnRzJDEuT1BFTkFJX0lOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLl9JTlRFUk5BTF9GTEFHX0JVRkZFUl9TSVpFID0gZmVhdHVyZUZsYWdzLl9JTlRFUk5BTF9GTEFHX0JVRkZFUl9TSVpFO1xuZXhwb3J0cy5fSU5URVJOQUxfTUFYX0ZMQUdTX1BFUl9TUEFOID0gZmVhdHVyZUZsYWdzLl9JTlRFUk5BTF9NQVhfRkxBR1NfUEVSX1NQQU47XG5leHBvcnRzLl9JTlRFUk5BTF9hZGRGZWF0dXJlRmxhZ1RvQWN0aXZlU3BhbiA9IGZlYXR1cmVGbGFncy5fSU5URVJOQUxfYWRkRmVhdHVyZUZsYWdUb0FjdGl2ZVNwYW47XG5leHBvcnRzLl9JTlRFUk5BTF9jb3B5RmxhZ3NGcm9tU2NvcGVUb0V2ZW50ID0gZmVhdHVyZUZsYWdzLl9JTlRFUk5BTF9jb3B5RmxhZ3NGcm9tU2NvcGVUb0V2ZW50O1xuZXhwb3J0cy5fSU5URVJOQUxfaW5zZXJ0RmxhZ1RvU2NvcGUgPSBmZWF0dXJlRmxhZ3MuX0lOVEVSTkFMX2luc2VydEZsYWdUb1Njb3BlO1xuZXhwb3J0cy5hcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQgPSBhZ2dyZWdhdGVFcnJvcnMuYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50O1xuZXhwb3J0cy5nZXRCcmVhZGNydW1iTG9nTGV2ZWxGcm9tSHR0cFN0YXR1c0NvZGUgPSBicmVhZGNydW1iTG9nTGV2ZWwuZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlO1xuZXhwb3J0cy5nZXRDb21wb25lbnROYW1lID0gYnJvd3Nlci5nZXRDb21wb25lbnROYW1lO1xuZXhwb3J0cy5nZXRMb2NhdGlvbkhyZWYgPSBicm93c2VyLmdldExvY2F0aW9uSHJlZjtcbmV4cG9ydHMuaHRtbFRyZWVBc1N0cmluZyA9IGJyb3dzZXIuaHRtbFRyZWVBc1N0cmluZztcbmV4cG9ydHMuZHNuRnJvbVN0cmluZyA9IGRzbi5kc25Gcm9tU3RyaW5nO1xuZXhwb3J0cy5kc25Ub1N0cmluZyA9IGRzbi5kc25Ub1N0cmluZztcbmV4cG9ydHMubWFrZURzbiA9IGRzbi5tYWtlRHNuO1xuZXhwb3J0cy5TZW50cnlFcnJvciA9IGVycm9yLlNlbnRyeUVycm9yO1xuZXhwb3J0cy5HTE9CQUxfT0JKID0gd29ybGR3aWRlLkdMT0JBTF9PQko7XG5leHBvcnRzLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyID0gY29uc29sZSQxLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuZXhwb3J0cy5hZGRGZXRjaEVuZEluc3RydW1lbnRhdGlvbkhhbmRsZXIgPSBmZXRjaCQxLmFkZEZldGNoRW5kSW5zdHJ1bWVudGF0aW9uSGFuZGxlcjtcbmV4cG9ydHMuYWRkRmV0Y2hJbnN0cnVtZW50YXRpb25IYW5kbGVyID0gZmV0Y2gkMS5hZGRGZXRjaEluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG5leHBvcnRzLmFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGdsb2JhbEVycm9yLmFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcjtcbmV4cG9ydHMuYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5hZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuZXhwb3J0cy5hZGRIYW5kbGVyID0gaGFuZGxlcnMuYWRkSGFuZGxlcjtcbmV4cG9ydHMubWF5YmVJbnN0cnVtZW50ID0gaGFuZGxlcnMubWF5YmVJbnN0cnVtZW50O1xuZXhwb3J0cy5yZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzID0gaGFuZGxlcnMucmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycztcbmV4cG9ydHMudHJpZ2dlckhhbmRsZXJzID0gaGFuZGxlcnMudHJpZ2dlckhhbmRsZXJzO1xuZXhwb3J0cy5pc0RPTUVycm9yID0gaXMuaXNET01FcnJvcjtcbmV4cG9ydHMuaXNET01FeGNlcHRpb24gPSBpcy5pc0RPTUV4Y2VwdGlvbjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXMuaXNFbGVtZW50O1xuZXhwb3J0cy5pc0Vycm9yID0gaXMuaXNFcnJvcjtcbmV4cG9ydHMuaXNFcnJvckV2ZW50ID0gaXMuaXNFcnJvckV2ZW50O1xuZXhwb3J0cy5pc0V2ZW50ID0gaXMuaXNFdmVudDtcbmV4cG9ydHMuaXNJbnN0YW5jZU9mID0gaXMuaXNJbnN0YW5jZU9mO1xuZXhwb3J0cy5pc1BhcmFtZXRlcml6ZWRTdHJpbmcgPSBpcy5pc1BhcmFtZXRlcml6ZWRTdHJpbmc7XG5leHBvcnRzLmlzUGxhaW5PYmplY3QgPSBpcy5pc1BsYWluT2JqZWN0O1xuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzLmlzUHJpbWl0aXZlO1xuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzLmlzUmVnRXhwO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzLmlzU3RyaW5nO1xuZXhwb3J0cy5pc1N5bnRoZXRpY0V2ZW50ID0gaXMuaXNTeW50aGV0aWNFdmVudDtcbmV4cG9ydHMuaXNUaGVuYWJsZSA9IGlzLmlzVGhlbmFibGU7XG5leHBvcnRzLmlzVnVlVmlld01vZGVsID0gaXMuaXNWdWVWaWV3TW9kZWw7XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlci5pc0Jyb3dzZXI7XG5leHBvcnRzLkNPTlNPTEVfTEVWRUxTID0gZGVidWdMb2dnZXIuQ09OU09MRV9MRVZFTFM7XG5leHBvcnRzLmNvbnNvbGVTYW5kYm94ID0gZGVidWdMb2dnZXIuY29uc29sZVNhbmRib3g7XG5leHBvcnRzLmRlYnVnID0gZGVidWdMb2dnZXIuZGVidWc7XG5leHBvcnRzLm9yaWdpbmFsQ29uc29sZU1ldGhvZHMgPSBkZWJ1Z0xvZ2dlci5vcmlnaW5hbENvbnNvbGVNZXRob2RzO1xuZXhwb3J0cy5hZGRDb250ZXh0VG9GcmFtZSA9IG1pc2MuYWRkQ29udGV4dFRvRnJhbWU7XG5leHBvcnRzLmFkZEV4Y2VwdGlvbk1lY2hhbmlzbSA9IG1pc2MuYWRkRXhjZXB0aW9uTWVjaGFuaXNtO1xuZXhwb3J0cy5hZGRFeGNlcHRpb25UeXBlVmFsdWUgPSBtaXNjLmFkZEV4Y2VwdGlvblR5cGVWYWx1ZTtcbmV4cG9ydHMuY2hlY2tPclNldEFscmVhZHlDYXVnaHQgPSBtaXNjLmNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0O1xuZXhwb3J0cy5nZXRFdmVudERlc2NyaXB0aW9uID0gbWlzYy5nZXRFdmVudERlc2NyaXB0aW9uO1xuZXhwb3J0cy5wYXJzZVNlbXZlciA9IG1pc2MucGFyc2VTZW12ZXI7XG5leHBvcnRzLnV1aWQ0ID0gbWlzYy51dWlkNDtcbmV4cG9ydHMuaXNOb2RlRW52ID0gbm9kZS5pc05vZGVFbnY7XG5leHBvcnRzLmxvYWRNb2R1bGUgPSBub2RlLmxvYWRNb2R1bGU7XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZS5ub3JtYWxpemU7XG5leHBvcnRzLm5vcm1hbGl6ZVRvU2l6ZSA9IG5vcm1hbGl6ZS5ub3JtYWxpemVUb1NpemU7XG5leHBvcnRzLm5vcm1hbGl6ZVVybFRvQmFzZSA9IG5vcm1hbGl6ZS5ub3JtYWxpemVVcmxUb0Jhc2U7XG5leHBvcnRzLmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHk7XG5leHBvcnRzLmNvbnZlcnRUb1BsYWluT2JqZWN0ID0gb2JqZWN0LmNvbnZlcnRUb1BsYWluT2JqZWN0O1xuZXhwb3J0cy5kcm9wVW5kZWZpbmVkS2V5cyA9IG9iamVjdC5kcm9wVW5kZWZpbmVkS2V5cztcbmV4cG9ydHMuZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlID0gb2JqZWN0LmV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZTtcbmV4cG9ydHMuZmlsbCA9IG9iamVjdC5maWxsO1xuZXhwb3J0cy5nZXRPcmlnaW5hbEZ1bmN0aW9uID0gb2JqZWN0LmdldE9yaWdpbmFsRnVuY3Rpb247XG5leHBvcnRzLm1hcmtGdW5jdGlvbldyYXBwZWQgPSBvYmplY3QubWFya0Z1bmN0aW9uV3JhcHBlZDtcbmV4cG9ydHMub2JqZWN0aWZ5ID0gb2JqZWN0Lm9iamVjdGlmeTtcbmV4cG9ydHMuYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lO1xuZXhwb3J0cy5kaXJuYW1lID0gcGF0aC5kaXJuYW1lO1xuZXhwb3J0cy5pc0Fic29sdXRlID0gcGF0aC5pc0Fic29sdXRlO1xuZXhwb3J0cy5qb2luID0gcGF0aC5qb2luO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gcGF0aC5ub3JtYWxpemVQYXRoO1xuZXhwb3J0cy5yZWxhdGl2ZSA9IHBhdGgucmVsYXRpdmU7XG5leHBvcnRzLnJlc29sdmUgPSBwYXRoLnJlc29sdmU7XG5leHBvcnRzLlNFTlRSWV9CVUZGRVJfRlVMTF9FUlJPUiA9IHByb21pc2VidWZmZXIuU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SO1xuZXhwb3J0cy5tYWtlUHJvbWlzZUJ1ZmZlciA9IHByb21pc2VidWZmZXIubWFrZVByb21pc2VCdWZmZXI7XG5leHBvcnRzLnNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nID0gc2V2ZXJpdHkuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmc7XG5leHBvcnRzLlVOS05PV05fRlVOQ1RJT04gPSBzdGFja3RyYWNlLlVOS05PV05fRlVOQ1RJT047XG5leHBvcnRzLmNyZWF0ZVN0YWNrUGFyc2VyID0gc3RhY2t0cmFjZS5jcmVhdGVTdGFja1BhcnNlcjtcbmV4cG9ydHMuZ2V0RnJhbWVzRnJvbUV2ZW50ID0gc3RhY2t0cmFjZS5nZXRGcmFtZXNGcm9tRXZlbnQ7XG5leHBvcnRzLmdldEZ1bmN0aW9uTmFtZSA9IHN0YWNrdHJhY2UuZ2V0RnVuY3Rpb25OYW1lO1xuZXhwb3J0cy5zdGFja1BhcnNlckZyb21TdGFja1BhcnNlck9wdGlvbnMgPSBzdGFja3RyYWNlLnN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucztcbmV4cG9ydHMuc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlID0gc3RhY2t0cmFjZS5zdHJpcFNlbnRyeUZyYW1lc0FuZFJldmVyc2U7XG5leHBvcnRzLmZpbGVuYW1lSXNJbkFwcCA9IG5vZGVTdGFja1RyYWNlLmZpbGVuYW1lSXNJbkFwcDtcbmV4cG9ydHMubm9kZSA9IG5vZGVTdGFja1RyYWNlLm5vZGU7XG5leHBvcnRzLm5vZGVTdGFja0xpbmVQYXJzZXIgPSBub2RlU3RhY2tUcmFjZS5ub2RlU3RhY2tMaW5lUGFyc2VyO1xuZXhwb3J0cy5pc01hdGNoaW5nUGF0dGVybiA9IHN0cmluZy5pc01hdGNoaW5nUGF0dGVybjtcbmV4cG9ydHMuc2FmZUpvaW4gPSBzdHJpbmcuc2FmZUpvaW47XG5leHBvcnRzLnNuaXBMaW5lID0gc3RyaW5nLnNuaXBMaW5lO1xuZXhwb3J0cy5zdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4gPSBzdHJpbmcuc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuO1xuZXhwb3J0cy50cnVuY2F0ZSA9IHN0cmluZy50cnVuY2F0ZTtcbmV4cG9ydHMuaXNOYXRpdmVGdW5jdGlvbiA9IHN1cHBvcnRzLmlzTmF0aXZlRnVuY3Rpb247XG5leHBvcnRzLnN1cHBvcnRzRE9NRXJyb3IgPSBzdXBwb3J0cy5zdXBwb3J0c0RPTUVycm9yO1xuZXhwb3J0cy5zdXBwb3J0c0RPTUV4Y2VwdGlvbiA9IHN1cHBvcnRzLnN1cHBvcnRzRE9NRXhjZXB0aW9uO1xuZXhwb3J0cy5zdXBwb3J0c0Vycm9yRXZlbnQgPSBzdXBwb3J0cy5zdXBwb3J0c0Vycm9yRXZlbnQ7XG5leHBvcnRzLnN1cHBvcnRzRmV0Y2ggPSBzdXBwb3J0cy5zdXBwb3J0c0ZldGNoO1xuZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBzdXBwb3J0cy5zdXBwb3J0c0hpc3Rvcnk7XG5leHBvcnRzLnN1cHBvcnRzTmF0aXZlRmV0Y2ggPSBzdXBwb3J0cy5zdXBwb3J0c05hdGl2ZUZldGNoO1xuZXhwb3J0cy5zdXBwb3J0c1JlZmVycmVyUG9saWN5ID0gc3VwcG9ydHMuc3VwcG9ydHNSZWZlcnJlclBvbGljeTtcbmV4cG9ydHMuc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlciA9IHN1cHBvcnRzLnN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXI7XG5leHBvcnRzLlN5bmNQcm9taXNlID0gc3luY3Byb21pc2UuU3luY1Byb21pc2U7XG5leHBvcnRzLnJlamVjdGVkU3luY1Byb21pc2UgPSBzeW5jcHJvbWlzZS5yZWplY3RlZFN5bmNQcm9taXNlO1xuZXhwb3J0cy5yZXNvbHZlZFN5bmNQcm9taXNlID0gc3luY3Byb21pc2UucmVzb2x2ZWRTeW5jUHJvbWlzZTtcbmV4cG9ydHMuYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiA9IHRpbWUuYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbjtcbmV4cG9ydHMuZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyA9IHRpbWUuZGF0ZVRpbWVzdGFtcEluU2Vjb25kcztcbmV4cG9ydHMudGltZXN0YW1wSW5TZWNvbmRzID0gdGltZS50aW1lc3RhbXBJblNlY29uZHM7XG5leHBvcnRzLlRSQUNFUEFSRU5UX1JFR0VYUCA9IHRyYWNpbmcuVFJBQ0VQQVJFTlRfUkVHRVhQO1xuZXhwb3J0cy5leHRyYWN0VHJhY2VwYXJlbnREYXRhID0gdHJhY2luZy5leHRyYWN0VHJhY2VwYXJlbnREYXRhO1xuZXhwb3J0cy5nZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyID0gdHJhY2luZy5nZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyO1xuZXhwb3J0cy5wcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyA9IHRyYWNpbmcucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnM7XG5leHBvcnRzLnNob3VsZENvbnRpbnVlVHJhY2UgPSB0cmFjaW5nLnNob3VsZENvbnRpbnVlVHJhY2U7XG5leHBvcnRzLmdldFNES1NvdXJjZSA9IGVudi5nZXRTREtTb3VyY2U7XG5leHBvcnRzLmlzQnJvd3NlckJ1bmRsZSA9IGVudi5pc0Jyb3dzZXJCdW5kbGU7XG5leHBvcnRzLmFkZEl0ZW1Ub0VudmVsb3BlID0gZW52ZWxvcGUkMS5hZGRJdGVtVG9FbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbSA9IGVudmVsb3BlJDEuY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbTtcbmV4cG9ydHMuY3JlYXRlRW52ZWxvcGUgPSBlbnZlbG9wZSQxLmNyZWF0ZUVudmVsb3BlO1xuZXhwb3J0cy5jcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycyA9IGVudmVsb3BlJDEuY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnM7XG5leHBvcnRzLmNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW0gPSBlbnZlbG9wZSQxLmNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW07XG5leHBvcnRzLmVudmVsb3BlQ29udGFpbnNJdGVtVHlwZSA9IGVudmVsb3BlJDEuZW52ZWxvcGVDb250YWluc0l0ZW1UeXBlO1xuZXhwb3J0cy5lbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkgPSBlbnZlbG9wZSQxLmVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeTtcbmV4cG9ydHMuZm9yRWFjaEVudmVsb3BlSXRlbSA9IGVudmVsb3BlJDEuZm9yRWFjaEVudmVsb3BlSXRlbTtcbmV4cG9ydHMuZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlciA9IGVudmVsb3BlJDEuZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlcjtcbmV4cG9ydHMucGFyc2VFbnZlbG9wZSA9IGVudmVsb3BlJDEucGFyc2VFbnZlbG9wZTtcbmV4cG9ydHMuc2VyaWFsaXplRW52ZWxvcGUgPSBlbnZlbG9wZSQxLnNlcmlhbGl6ZUVudmVsb3BlO1xuZXhwb3J0cy5jcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZSA9IGNsaWVudHJlcG9ydC5jcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZTtcbmV4cG9ydHMuREVGQVVMVF9SRVRSWV9BRlRFUiA9IHJhdGVsaW1pdC5ERUZBVUxUX1JFVFJZX0FGVEVSO1xuZXhwb3J0cy5kaXNhYmxlZFVudGlsID0gcmF0ZWxpbWl0LmRpc2FibGVkVW50aWw7XG5leHBvcnRzLmlzUmF0ZUxpbWl0ZWQgPSByYXRlbGltaXQuaXNSYXRlTGltaXRlZDtcbmV4cG9ydHMucGFyc2VSZXRyeUFmdGVySGVhZGVyID0gcmF0ZWxpbWl0LnBhcnNlUmV0cnlBZnRlckhlYWRlcjtcbmV4cG9ydHMudXBkYXRlUmF0ZUxpbWl0cyA9IHJhdGVsaW1pdC51cGRhdGVSYXRlTGltaXRzO1xuZXhwb3J0cy5NQVhfQkFHR0FHRV9TVFJJTkdfTEVOR1RIID0gYmFnZ2FnZS5NQVhfQkFHR0FHRV9TVFJJTkdfTEVOR1RIO1xuZXhwb3J0cy5TRU5UUllfQkFHR0FHRV9LRVlfUFJFRklYID0gYmFnZ2FnZS5TRU5UUllfQkFHR0FHRV9LRVlfUFJFRklYO1xuZXhwb3J0cy5TRU5UUllfQkFHR0FHRV9LRVlfUFJFRklYX1JFR0VYID0gYmFnZ2FnZS5TRU5UUllfQkFHR0FHRV9LRVlfUFJFRklYX1JFR0VYO1xuZXhwb3J0cy5iYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gYmFnZ2FnZS5iYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0O1xuZXhwb3J0cy5keW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyID0gYmFnZ2FnZS5keW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyO1xuZXhwb3J0cy5vYmplY3RUb0JhZ2dhZ2VIZWFkZXIgPSBiYWdnYWdlLm9iamVjdFRvQmFnZ2FnZUhlYWRlcjtcbmV4cG9ydHMucGFyc2VCYWdnYWdlSGVhZGVyID0gYmFnZ2FnZS5wYXJzZUJhZ2dhZ2VIZWFkZXI7XG5leHBvcnRzLmdldEh0dHBTcGFuRGV0YWlsc0Zyb21VcmxPYmplY3QgPSB1cmwuZ2V0SHR0cFNwYW5EZXRhaWxzRnJvbVVybE9iamVjdDtcbmV4cG9ydHMuZ2V0U2FuaXRpemVkVXJsU3RyaW5nID0gdXJsLmdldFNhbml0aXplZFVybFN0cmluZztcbmV4cG9ydHMuZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCA9IHVybC5nZXRTYW5pdGl6ZWRVcmxTdHJpbmdGcm9tVXJsT2JqZWN0O1xuZXhwb3J0cy5pc1VSTE9iamVjdFJlbGF0aXZlID0gdXJsLmlzVVJMT2JqZWN0UmVsYXRpdmU7XG5leHBvcnRzLnBhcnNlU3RyaW5nVG9VUkxPYmplY3QgPSB1cmwucGFyc2VTdHJpbmdUb1VSTE9iamVjdDtcbmV4cG9ydHMucGFyc2VVcmwgPSB1cmwucGFyc2VVcmw7XG5leHBvcnRzLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCA9IHVybC5zdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQ7XG5leHBvcnRzLmV2ZW50RnJvbU1lc3NhZ2UgPSBldmVudGJ1aWxkZXIuZXZlbnRGcm9tTWVzc2FnZTtcbmV4cG9ydHMuZXZlbnRGcm9tVW5rbm93bklucHV0ID0gZXZlbnRidWlsZGVyLmV2ZW50RnJvbVVua25vd25JbnB1dDtcbmV4cG9ydHMuZXhjZXB0aW9uRnJvbUVycm9yID0gZXZlbnRidWlsZGVyLmV4Y2VwdGlvbkZyb21FcnJvcjtcbmV4cG9ydHMucGFyc2VTdGFja0ZyYW1lcyA9IGV2ZW50YnVpbGRlci5wYXJzZVN0YWNrRnJhbWVzO1xuZXhwb3J0cy5jYWxsRnJhbWVUb1N0YWNrRnJhbWUgPSBhbnIuY2FsbEZyYW1lVG9TdGFja0ZyYW1lO1xuZXhwb3J0cy53YXRjaGRvZ1RpbWVyID0gYW5yLndhdGNoZG9nVGltZXI7XG5leHBvcnRzLkxSVU1hcCA9IGxydS5MUlVNYXA7XG5leHBvcnRzLmdlbmVyYXRlU3BhbklkID0gcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlU3BhbklkO1xuZXhwb3J0cy5nZW5lcmF0ZVRyYWNlSWQgPSBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVUcmFjZUlkO1xuZXhwb3J0cy52ZXJjZWxXYWl0VW50aWwgPSB2ZXJjZWxXYWl0VW50aWwudmVyY2VsV2FpdFVudGlsO1xuZXhwb3J0cy5mbHVzaElmU2VydmVybGVzcyA9IGZsdXNoSWZTZXJ2ZXJsZXNzLmZsdXNoSWZTZXJ2ZXJsZXNzO1xuZXhwb3J0cy5TREtfVkVSU0lPTiA9IHZlcnNpb24uU0RLX1ZFUlNJT047XG5leHBvcnRzLmdldERlYnVnSW1hZ2VzRm9yUmVzb3VyY2VzID0gZGVidWdJZHMuZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXM7XG5leHBvcnRzLmdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwID0gZGVidWdJZHMuZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXA7XG5leHBvcnRzLmVzY2FwZVN0cmluZ0ZvclJlZ2V4ID0gZXNjYXBlU3RyaW5nRm9yUmVnZXguZXNjYXBlU3RyaW5nRm9yUmVnZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/instrument/console.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole() {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return;\n  }\n\n  debugLogger.CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in worldwide.GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    object.fill(worldwide.GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      debugLogger.originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args) {\n        const handlerData = { args, level };\n        handlers.triggerHandlers('console', handlerData);\n\n        const log = debugLogger.originalConsoleMethods[level];\n        log?.apply(worldwide.GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n\nexports.addConsoleInstrumentationHandler = addConsoleInstrumentationHandler;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9jb25zb2xlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLDBHQUEwQjtBQUN0RCxlQUFlLG1CQUFPLENBQUMsOEZBQW9CO0FBQzNDLGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1QjtBQUNqRCxpQkFBaUIsbUJBQU8sQ0FBQyxnR0FBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnN0cnVtZW50L2NvbnNvbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuLi91dGlscy9vYmplY3QuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbi8qKlxuICogQWRkIGFuIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyIGZvciB3aGVuIGEgY29uc29sZS54eHggbWV0aG9kIGlzIGNhbGxlZC5cbiAqXG4gKiBVc2UgYXQgeW91ciBvd24gcmlzaywgdGhpcyBtaWdodCBicmVhayB3aXRob3V0IGNoYW5nZWxvZyBub3RpY2UsIG9ubHkgdXNlZCBpbnRlcm5hbGx5LlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAnY29uc29sZSc7XG4gIGhhbmRsZXJzLmFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIGhhbmRsZXJzLm1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50Q29uc29sZSk7XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRDb25zb2xlKCkge1xuICBpZiAoISgnY29uc29sZScgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGVidWdMb2dnZXIuQ09OU09MRV9MRVZFTFMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICBpZiAoIShsZXZlbCBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9iamVjdC5maWxsKHdvcmxkd2lkZS5HTE9CQUxfT0JKLmNvbnNvbGUsIGxldmVsLCBmdW5jdGlvbiAob3JpZ2luYWxDb25zb2xlTWV0aG9kKSB7XG4gICAgICBkZWJ1Z0xvZ2dlci5vcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJEYXRhID0geyBhcmdzLCBsZXZlbCB9O1xuICAgICAgICBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnMoJ2NvbnNvbGUnLCBoYW5kbGVyRGF0YSk7XG5cbiAgICAgICAgY29uc3QgbG9nID0gZGVidWdMb2dnZXIub3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF07XG4gICAgICAgIGxvZz8uYXBwbHkod29ybGR3aWRlLkdMT0JBTF9PQkouY29uc29sZSwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0cy5hZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/instrument/fetch.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/instrument/fetch.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst supports = __webpack_require__(/*! ../utils/supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/supports.js\");\nconst time = __webpack_require__(/*! ../utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(\n  handler,\n  skipNativeFetchCheck,\n) {\n  const type = 'fetch';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nfunction addFetchEndInstrumentationHandler(handler) {\n  const type = 'fetch-body-resolved';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\n\nfunction instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {\n  if (skipNativeFetchCheck && !supports.supportsNativeFetch()) {\n    return;\n  }\n\n  object.fill(worldwide.GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n\n      const { method, url } = parseFetchArgs(args);\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: time.timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError,\n        headers: getHeadersFromFetchArgs(args),\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        handlers.triggerHandlers('fetch', {\n          ...handlerData,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(worldwide.GLOBAL_OBJ, args).then(\n        async (response) => {\n          if (onFetchResolved) {\n            onFetchResolved(response);\n          } else {\n            handlers.triggerHandlers('fetch', {\n              ...handlerData,\n              endTimestamp: time.timestampInSeconds() * 1000,\n              response,\n            });\n          }\n\n          return response;\n        },\n        (error) => {\n          handlers.triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: time.timestampInSeconds() * 1000,\n            error,\n          });\n\n          if (is.isError(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualError.stack;\n            object.addNonEnumerableProperty(error, 'framesToPop', 1);\n          }\n\n          // We enhance the not-so-helpful \"Failed to fetch\" error messages with the host\n          // Possible messages we handle here:\n          // * \"Failed to fetch\" (chromium)\n          // * \"Load failed\" (webkit)\n          // * \"NetworkError when attempting to fetch resource.\" (firefox)\n          if (\n            error instanceof TypeError &&\n            (error.message === 'Failed to fetch' ||\n              error.message === 'Load failed' ||\n              error.message === 'NetworkError when attempting to fetch resource.')\n          ) {\n            try {\n              const url = new URL(handlerData.fetchData.url);\n              error.message = `${error.message} (${url.host})`;\n            } catch {\n              // ignore it if errors happen here\n            }\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nasync function resolveResponse(res, onFinishedResolving) {\n  if (res?.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(\n      () => {\n        body.cancel().then(null, () => {\n          // noop\n        });\n      },\n      90 * 1000, // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const { done } = await responseReader.read();\n\n        clearTimeout(chunkTimeout);\n\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n\n    clearTimeout(maxFetchDurationTimeout);\n\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\n\nfunction streamHandler(response) {\n  // clone response for awaiting stream\n  let clonedResponseForResolving;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    handlers.triggerHandlers('fetch-body-resolved', {\n      endTimestamp: time.timestampInSeconds() * 1000,\n      response,\n    });\n  });\n}\n\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!(obj )[prop];\n}\n\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs ;\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg ),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nfunction getHeadersFromFetchArgs(fetchArgs) {\n  const [requestArgument, optionsArgument] = fetchArgs;\n\n  try {\n    if (\n      typeof optionsArgument === 'object' &&\n      optionsArgument !== null &&\n      'headers' in optionsArgument &&\n      optionsArgument.headers\n    ) {\n      return new Headers(optionsArgument.headers );\n    }\n\n    if (is.isRequest(requestArgument)) {\n      return new Headers(requestArgument.headers);\n    }\n  } catch {\n    // noop\n  }\n\n  return;\n}\n\nexports.addFetchEndInstrumentationHandler = addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = addFetchInstrumentationHandler;\nexports.parseFetchArgs = parseFetchArgs;\n//# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/instrument/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/instrument/globalError.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\");\n\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError() {\n  _oldOnErrorHandler = worldwide.GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  worldwide.GLOBAL_OBJ.onerror = function (\n    msg,\n    url,\n    line,\n    column,\n    error,\n  ) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    handlers.triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  worldwide.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\nexports.addGlobalErrorInstrumentationHandler = addGlobalErrorInstrumentationHandler;\n//# sourceMappingURL=globalError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9nbG9iYWxFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7QUFDakQsaUJBQWlCLG1CQUFPLENBQUMsZ0dBQWU7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0Q0FBNEM7QUFDNUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbmxldCBfb2xkT25FcnJvckhhbmRsZXIgPSBudWxsO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhbiBlcnJvciBpcyBjYXB0dXJlZCBieSB0aGUgZ2xvYmFsIGVycm9yIGhhbmRsZXIuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdlcnJvcic7XG4gIGhhbmRsZXJzLmFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIGhhbmRsZXJzLm1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50RXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50RXJyb3IoKSB7XG4gIF9vbGRPbkVycm9ySGFuZGxlciA9IHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9uZXJyb3I7XG5cbiAgLy8gTm90ZTogVGhlIHJlYXNvbiB3ZSBhcmUgZG9pbmcgd2luZG93Lm9uZXJyb3IgaW5zdGVhZCBvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InKVxuICAvLyBpcyB0aGF0IHdlIGFyZSB1c2luZyB0aGlzIGhhbmRsZXIgaW4gdGhlIExvYWRlciBTY3JpcHQsIHRvIGhhbmRsZSBidWZmZXJlZCBlcnJvcnMgY29uc2lzdGVudGx5XG4gIHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9uZXJyb3IgPSBmdW5jdGlvbiAoXG4gICAgbXNnLFxuICAgIHVybCxcbiAgICBsaW5lLFxuICAgIGNvbHVtbixcbiAgICBlcnJvcixcbiAgKSB7XG4gICAgY29uc3QgaGFuZGxlckRhdGEgPSB7XG4gICAgICBjb2x1bW4sXG4gICAgICBlcnJvcixcbiAgICAgIGxpbmUsXG4gICAgICBtc2csXG4gICAgICB1cmwsXG4gICAgfTtcbiAgICBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnMoJ2Vycm9yJywgaGFuZGxlckRhdGEpO1xuXG4gICAgaWYgKF9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIF9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbmVycm9yLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0cy5hZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIgPSBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalUnhandledRejection.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/instrument/globalUnhandledRejection.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\");\n\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(\n  handler,\n) {\n  const type = 'unhandledrejection';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = worldwide.GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  worldwide.GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    handlers.triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  worldwide.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n\nexports.addGlobalUnhandledRejectionInstrumentationHandler = addGlobalUnhandledRejectionInstrumentationHandler;\n//# sourceMappingURL=globalUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLGdHQUFlOztBQUV4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlEQUF5RDtBQUN6RCIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbmxldCBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIGlzIGNhcHR1cmVkLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoXG4gIGhhbmRsZXIsXG4pIHtcbiAgY29uc3QgdHlwZSA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xuICBoYW5kbGVycy5hZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBoYW5kbGVycy5tYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24oKSB7XG4gIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbnVuaGFuZGxlZHJlamVjdGlvbjtcblxuICAvLyBOb3RlOiBUaGUgcmVhc29uIHdlIGFyZSBkb2luZyB3aW5kb3cub251bmhhbmRsZWRyZWplY3Rpb24gaW5zdGVhZCBvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJylcbiAgLy8gaXMgdGhhdCB3ZSBhcmUgdXNpbmcgdGhpcyBoYW5kbGVyIGluIHRoZSBMb2FkZXIgU2NyaXB0LCB0byBoYW5kbGUgYnVmZmVyZWQgcmVqZWN0aW9ucyBjb25zaXN0ZW50bHlcbiAgd29ybGR3aWRlLkdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0gZTtcbiAgICBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnMoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICByZXR1cm4gX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0cy5hZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyID0gYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/instrument/handlers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst stacktrace = __webpack_require__(/*! ../utils/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] ).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key ] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${stacktrace.getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nexports.addHandler = addHandler;\nexports.maybeInstrument = maybeInstrument;\nexports.resetInstrumentationHandlers = resetInstrumentationHandlers;\nexports.triggerHandlers = triggerHandlers;\n//# sourceMappingURL=handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELG1CQUFtQixtQkFBTyxDQUFDLHNHQUF3Qjs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHFGQUFxRixLQUFLO0FBQzFGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxvRUFBb0UsS0FBSyxVQUFVLG9DQUFvQztBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQix1QkFBdUI7QUFDdkIsb0NBQW9DO0FBQ3BDLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5zdHJ1bWVudC9oYW5kbGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3Qgc3RhY2t0cmFjZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0YWNrdHJhY2UuanMnKTtcblxuLy8gV2Uga2VlcCB0aGUgaGFuZGxlcnMgZ2xvYmFsbHlcbmNvbnN0IGhhbmRsZXJzID0ge307XG5jb25zdCBpbnN0cnVtZW50ZWQgPSB7fTtcblxuLyoqIEFkZCBhIGhhbmRsZXIgZnVuY3Rpb24uICovXG5mdW5jdGlvbiBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpIHtcbiAgaGFuZGxlcnNbdHlwZV0gPSBoYW5kbGVyc1t0eXBlXSB8fCBbXTtcbiAgKGhhbmRsZXJzW3R5cGVdICkucHVzaChoYW5kbGVyKTtcbn1cblxuLyoqXG4gKiBSZXNldCBhbGwgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXJzLlxuICogVGhpcyBjYW4gYmUgdXNlZCBieSB0ZXN0cyB0byBlbnN1cmUgd2UgaGF2ZSBhIGNsZWFuIHNsYXRlIG9mIGluc3RydW1lbnRhdGlvbiBoYW5kbGVycy5cbiAqL1xuZnVuY3Rpb24gcmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycygpIHtcbiAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBoYW5kbGVyc1trZXkgXSA9IHVuZGVmaW5lZDtcbiAgfSk7XG59XG5cbi8qKiBNYXliZSBydW4gYW4gaW5zdHJ1bWVudGF0aW9uIGZ1bmN0aW9uLCB1bmxlc3MgaXQgd2FzIGFscmVhZHkgY2FsbGVkLiAqL1xuZnVuY3Rpb24gbWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRGbikge1xuICBpZiAoIWluc3RydW1lbnRlZFt0eXBlXSkge1xuICAgIGluc3RydW1lbnRlZFt0eXBlXSA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIGluc3RydW1lbnRGbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcuZXJyb3IoYEVycm9yIHdoaWxlIGluc3RydW1lbnRpbmcgJHt0eXBlfWAsIGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiogVHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBpbnN0cnVtZW50YXRpb24gdHlwZS4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVIYW5kbGVycyA9IHR5cGUgJiYgaGFuZGxlcnNbdHlwZV07XG4gIGlmICghdHlwZUhhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHR5cGVIYW5kbGVycykge1xuICAgIHRyeSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgZGVidWdMb2dnZXIuZGVidWcuZXJyb3IoXG4gICAgICAgICAgYEVycm9yIHdoaWxlIHRyaWdnZXJpbmcgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIuXFxuVHlwZTogJHt0eXBlfVxcbk5hbWU6ICR7c3RhY2t0cmFjZS5nZXRGdW5jdGlvbk5hbWUoaGFuZGxlcil9XFxuRXJyb3I6YCxcbiAgICAgICAgICBlLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLmFkZEhhbmRsZXIgPSBhZGRIYW5kbGVyO1xuZXhwb3J0cy5tYXliZUluc3RydW1lbnQgPSBtYXliZUluc3RydW1lbnQ7XG5leHBvcnRzLnJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMgPSByZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzO1xuZXhwb3J0cy50cmlnZ2VySGFuZGxlcnMgPSB0cmlnZ2VySGFuZGxlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYW5kbGVycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/instrument/handlers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integration.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integration.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\n\nconst installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  const integrationsByName = {};\n\n  integrations.forEach((currentInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations;\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(client, integrations) {\n  const integrationIndex = {};\n\n  integrations.forEach((integration) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nfunction afterSetupIntegrations(client, integrations) {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(client, integration, integrationIndex) {\n  if (integrationIndex[integration.name]) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) ;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) ;\n\n    const processor = Object.assign((event, hint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nfunction addIntegration(integration) {\n  const client = currentScopes.getClient();\n\n  if (!client) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nfunction defineIntegration(fn) {\n  return fn;\n}\n\nexports.addIntegration = addIntegration;\nexports.afterSetupIntegrations = afterSetupIntegrations;\nexports.defineIntegration = defineIntegration;\nexports.getIntegrationsToSetup = getIntegrationsToSetup;\nexports.installedIntegrations = installedIntegrations;\nexports.setupIntegration = setupIntegration;\nexports.setupIntegrations = setupIntegrations;\n//# sourceMappingURL=integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst console = __webpack_require__(/*! ../instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst misc = __webpack_require__(/*! ../utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst severity = __webpack_require__(/*! ../utils/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/severity.js\");\nconst string = __webpack_require__(/*! ../utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options = {}) => {\n  const levels = options.levels || debugLogger.CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in worldwide.GLOBAL_OBJ)) {\n        return;\n      }\n\n      console.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (currentScopes.getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level, handled);\n      });\n    },\n  };\n}) ;\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = integration.defineIntegration(_captureConsoleIntegration);\n\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: severity.severityLevelFromString(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  currentScopes.withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      misc.addExceptionMechanism(event, {\n        handled,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${string.safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        exports$1.captureMessage(message, captureContext);\n      }\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      exports$1.captureException(error, captureContext);\n      return;\n    }\n\n    const message = string.safeJoin(args, ' ');\n    exports$1.captureMessage(message, captureContext);\n  });\n}\n\nexports.captureConsoleIntegration = captureConsoleIntegration;\n//# sourceMappingURL=captureconsole.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NhcHR1cmVjb25zb2xlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLGdHQUFxQjtBQUNuRCxrQkFBa0IsbUJBQU8sQ0FBQyxvRkFBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLDBHQUEwQjtBQUN0RCxhQUFhLG1CQUFPLENBQUMsMEZBQWtCO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLGtHQUFzQjtBQUMvQyxlQUFlLG1CQUFPLENBQUMsOEZBQW9CO0FBQzNDLGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1Qjs7QUFFakQ7O0FBRUEsaURBQWlEO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtEQUFrRCxhQUFhO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSw2Q0FBNkMsd0RBQXdEO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NhcHR1cmVjb25zb2xlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi4vZXhwb3J0cy5qcycpO1xuY29uc3QgY29uc29sZSA9IHJlcXVpcmUoJy4uL2luc3RydW1lbnQvY29uc29sZS5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IG1pc2MgPSByZXF1aXJlKCcuLi91dGlscy9taXNjLmpzJyk7XG5jb25zdCBzZXZlcml0eSA9IHJlcXVpcmUoJy4uL3V0aWxzL3NldmVyaXR5LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuLi91dGlscy9zdHJpbmcuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NhcHR1cmVDb25zb2xlJztcblxuY29uc3QgX2NhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbHMgPSBvcHRpb25zLmxldmVscyB8fCBkZWJ1Z0xvZ2dlci5DT05TT0xFX0xFVkVMUztcbiAgY29uc3QgaGFuZGxlZCA9IG9wdGlvbnMuaGFuZGxlZCA/PyB0cnVlO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICghKCdjb25zb2xlJyBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCB8fCAhbGV2ZWxzLmluY2x1ZGVzKGxldmVsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGVIYW5kbGVyKGFyZ3MsIGxldmVsLCBoYW5kbGVkKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogU2VuZCBDb25zb2xlIEFQSSBjYWxscyBhcyBTZW50cnkgRXZlbnRzLlxuICovXG5jb25zdCBjYXB0dXJlQ29uc29sZUludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oX2NhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjb25zb2xlSGFuZGxlcihhcmdzLCBsZXZlbCwgaGFuZGxlZCkge1xuICBjb25zdCBjYXB0dXJlQ29udGV4dCA9IHtcbiAgICBsZXZlbDogc2V2ZXJpdHkuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgIGV4dHJhOiB7XG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgfSxcbiAgfTtcblxuICBjdXJyZW50U2NvcGVzLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgc2NvcGUuYWRkRXZlbnRQcm9jZXNzb3IoZXZlbnQgPT4ge1xuICAgICAgZXZlbnQubG9nZ2VyID0gJ2NvbnNvbGUnO1xuXG4gICAgICBtaXNjLmFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICBoYW5kbGVkLFxuICAgICAgICB0eXBlOiAnY29uc29sZScsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pO1xuXG4gICAgaWYgKGxldmVsID09PSAnYXNzZXJ0Jykge1xuICAgICAgaWYgKCFhcmdzWzBdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQXNzZXJ0aW9uIGZhaWxlZDogJHtzdHJpbmcuc2FmZUpvaW4oYXJncy5zbGljZSgxKSwgJyAnKSB8fCAnY29uc29sZS5hc3NlcnQnfWA7XG4gICAgICAgIHNjb3BlLnNldEV4dHJhKCdhcmd1bWVudHMnLCBhcmdzLnNsaWNlKDEpKTtcbiAgICAgICAgZXhwb3J0cyQxLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGNhcHR1cmVDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvciA9IGFyZ3MuZmluZChhcmcgPT4gYXJnIGluc3RhbmNlb2YgRXJyb3IpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgZXhwb3J0cyQxLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIGNhcHR1cmVDb250ZXh0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlID0gc3RyaW5nLnNhZmVKb2luKGFyZ3MsICcgJyk7XG4gICAgZXhwb3J0cyQxLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGNhcHR1cmVDb250ZXh0KTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlY29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/console.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/console.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst breadcrumbs = __webpack_require__(/*! ../breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst console = __webpack_require__(/*! ../instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst severity = __webpack_require__(/*! ../utils/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/severity.js\");\nconst string = __webpack_require__(/*! ../utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleIntegration = integration.defineIntegration((options = {}) => {\n  const levels = new Set(options.levels || debugLogger.CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      console.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (currentScopes.getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nfunction addConsoleBreadcrumb(level, args) {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severity.severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  breadcrumbs.addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values) {\n  return 'util' in worldwide.GLOBAL_OBJ && typeof (worldwide.GLOBAL_OBJ ).util.format === 'function'\n    ? (worldwide.GLOBAL_OBJ ).util.format(...values)\n    : string.safeJoin(values, ' ');\n}\n\nexports.addConsoleBreadcrumb = addConsoleBreadcrumb;\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLGdHQUFxQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLDBHQUEwQjtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQyxrR0FBc0I7QUFDL0MsZUFBZSxtQkFBTyxDQUFDLDhGQUFvQjtBQUMzQyxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkJBQTJCO0FBQzNFLElBQUk7QUFDSjtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxhQUFhO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGlDQUFpQztBQUN6RjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYnJlYWRjcnVtYnMgPSByZXF1aXJlKCcuLi9icmVhZGNydW1icy5qcycpO1xuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGNvbnNvbGUgPSByZXF1aXJlKCcuLi9pbnN0cnVtZW50L2NvbnNvbGUuanMnKTtcbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBzZXZlcml0eSA9IHJlcXVpcmUoJy4uL3V0aWxzL3NldmVyaXR5LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuLi91dGlscy9zdHJpbmcuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NvbnNvbGUnO1xuXG4vKipcbiAqIENhcHR1cmVzIGNhbGxzIHRvIHRoZSBgY29uc29sZWAgQVBJIGFzIGJyZWFkY3J1bWJzIGluIFNlbnRyeS5cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBpbnRlZ3JhdGlvbiBpbnN0cnVtZW50cyBgY29uc29sZS5kZWJ1Z2AsIGBjb25zb2xlLmluZm9gLCBgY29uc29sZS53YXJuYCwgYGNvbnNvbGUuZXJyb3JgLFxuICogYGNvbnNvbGUubG9nYCwgYGNvbnNvbGUudHJhY2VgLCBhbmQgYGNvbnNvbGUuYXNzZXJ0YC4gWW91IGNhbiB1c2UgdGhlIGBsZXZlbHNgIG9wdGlvbiB0byBjdXN0b21pemUgd2hpY2hcbiAqIGxldmVscyBhcmUgY2FwdHVyZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuY29uc29sZUludGVncmF0aW9uKHsgbGV2ZWxzOiBbJ2Vycm9yJywgJ3dhcm4nXSB9KV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBjb25zb2xlSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxldmVscyA9IG5ldyBTZXQob3B0aW9ucy5sZXZlbHMgfHwgZGVidWdMb2dnZXIuQ09OU09MRV9MRVZFTFMpO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNvbnNvbGUuYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoKHsgYXJncywgbGV2ZWwgfSkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKSAhPT0gY2xpZW50IHx8ICFsZXZlbHMuaGFzKGxldmVsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZENvbnNvbGVCcmVhZGNydW1iKGxldmVsLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuLyoqXG4gKiBDYXB0dXJlIGEgY29uc29sZSBicmVhZGNydW1iLlxuICpcbiAqIEV4cG9ydGVkIGp1c3QgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBhZGRDb25zb2xlQnJlYWRjcnVtYihsZXZlbCwgYXJncykge1xuICBjb25zdCBicmVhZGNydW1iID0ge1xuICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgZGF0YToge1xuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgbG9nZ2VyOiAnY29uc29sZScsXG4gICAgfSxcbiAgICBsZXZlbDogc2V2ZXJpdHkuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgIG1lc3NhZ2U6IGZvcm1hdENvbnNvbGVBcmdzKGFyZ3MpLFxuICB9O1xuXG4gIGlmIChsZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICBpZiAoYXJnc1swXSA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGFzc2VydGlvbkFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuICAgICAgYnJlYWRjcnVtYi5tZXNzYWdlID1cbiAgICAgICAgYXNzZXJ0aW9uQXJncy5sZW5ndGggPiAwID8gYEFzc2VydGlvbiBmYWlsZWQ6ICR7Zm9ybWF0Q29uc29sZUFyZ3MoYXNzZXJ0aW9uQXJncyl9YCA6ICdBc3NlcnRpb24gZmFpbGVkJztcbiAgICAgIGJyZWFkY3J1bWIuZGF0YS5hcmd1bWVudHMgPSBhc3NlcnRpb25BcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEb24ndCBjYXB0dXJlIGEgYnJlYWRjcnVtYiBmb3IgcGFzc2VkIGFzc2VydGlvbnNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBicmVhZGNydW1icy5hZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIHtcbiAgICBpbnB1dDogYXJncyxcbiAgICBsZXZlbCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdENvbnNvbGVBcmdzKHZhbHVlcykge1xuICByZXR1cm4gJ3V0aWwnIGluIHdvcmxkd2lkZS5HTE9CQUxfT0JKICYmIHR5cGVvZiAod29ybGR3aWRlLkdMT0JBTF9PQkogKS51dGlsLmZvcm1hdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gKHdvcmxkd2lkZS5HTE9CQUxfT0JKICkudXRpbC5mb3JtYXQoLi4udmFsdWVzKVxuICAgIDogc3RyaW5nLnNhZmVKb2luKHZhbHVlcywgJyAnKTtcbn1cblxuZXhwb3J0cy5hZGRDb25zb2xlQnJlYWRjcnVtYiA9IGFkZENvbnNvbGVCcmVhZGNydW1iO1xuZXhwb3J0cy5jb25zb2xlSW50ZWdyYXRpb24gPSBjb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/dedupe.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst stacktrace = __webpack_require__(/*! ../utils/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) ;\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = integration.defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = stacktrace.getFramesFromEvent(currentEvent);\n  let previousFrames = stacktrace.getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames ;\n  previousFrames = previousFrames ;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint ;\n  previousFingerprint = previousFingerprint ;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event) {\n  return event.exception?.values?.[0];\n}\n\nexports._shouldDropEvent = _shouldDropEvent;\nexports.dedupeIntegration = dedupeIntegration;\n//# sourceMappingURL=dedupe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2RlZHVwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLDBHQUEwQjtBQUN0RCxtQkFBbUIsbUJBQU8sQ0FBQyxzR0FBd0I7O0FBRW5EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7O0FBRWpCO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsMkJBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9kZWR1cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IHN0YWNrdHJhY2UgPSByZXF1aXJlKCcuLi91dGlscy9zdGFja3RyYWNlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGVkdXBlJztcblxuY29uc3QgX2RlZHVwZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IHByZXZpb3VzRXZlbnQ7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByb2Nlc3NFdmVudChjdXJyZW50RXZlbnQpIHtcbiAgICAgIC8vIFdlIHdhbnQgdG8gaWdub3JlIGFueSBub24tZXJyb3IgdHlwZSBldmVudHMsIGUuZy4gdHJhbnNhY3Rpb25zIG9yIHJlcGxheXNcbiAgICAgIC8vIFRoZXNlIHNob3VsZCBuZXZlciBiZSBkZWR1cGVkLCBhbmQgYWxzbyBub3QgYmUgY29tcGFyZWQgYWdhaW5zdCBhcyBfcHJldmlvdXNFdmVudC5cbiAgICAgIGlmIChjdXJyZW50RXZlbnQudHlwZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudEV2ZW50O1xuICAgICAgfVxuXG4gICAgICAvLyBKdXV1c3QgaW4gY2FzZSBzb21ldGhpbmcgZ29lcyB3cm9uZ1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9zaG91bGREcm9wRXZlbnQoY3VycmVudEV2ZW50LCBwcmV2aW91c0V2ZW50KSkge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcud2FybignRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgYSBkdXBsaWNhdGUgb2YgcHJldmlvdXNseSBjYXB0dXJlZCBldmVudC4nKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbiAgICAgIHJldHVybiAocHJldmlvdXNFdmVudCA9IGN1cnJlbnRFdmVudCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBEZWR1cGxpY2F0aW9uIGZpbHRlci5cbiAqL1xuY29uc3QgZGVkdXBlSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfZGVkdXBlSW50ZWdyYXRpb24pO1xuXG4vKiogb25seSBleHBvcnRlZCBmb3IgdGVzdHMuICovXG5mdW5jdGlvbiBfc2hvdWxkRHJvcEV2ZW50KGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkge1xuICBpZiAoIXByZXZpb3VzRXZlbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoX2lzU2FtZU1lc3NhZ2VFdmVudChjdXJyZW50RXZlbnQsIHByZXZpb3VzRXZlbnQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoX2lzU2FtZUV4Y2VwdGlvbkV2ZW50KGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX2lzU2FtZU1lc3NhZ2VFdmVudChjdXJyZW50RXZlbnQsIHByZXZpb3VzRXZlbnQpIHtcbiAgY29uc3QgY3VycmVudE1lc3NhZ2UgPSBjdXJyZW50RXZlbnQubWVzc2FnZTtcbiAgY29uc3QgcHJldmlvdXNNZXNzYWdlID0gcHJldmlvdXNFdmVudC5tZXNzYWdlO1xuXG4gIC8vIElmIG5laXRoZXIgZXZlbnQgaGFzIGEgbWVzc2FnZSBwcm9wZXJ0eSwgdGhleSB3ZXJlIGJvdGggZXhjZXB0aW9ucywgc28gYmFpbCBvdXRcbiAgaWYgKCFjdXJyZW50TWVzc2FnZSAmJiAhcHJldmlvdXNNZXNzYWdlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gSWYgb25seSBvbmUgZXZlbnQgaGFzIGEgc3RhY2t0cmFjZSwgYnV0IG5vdCB0aGUgb3RoZXIgb25lLCB0aGV5IGFyZSBub3QgdGhlIHNhbWVcbiAgaWYgKChjdXJyZW50TWVzc2FnZSAmJiAhcHJldmlvdXNNZXNzYWdlKSB8fCAoIWN1cnJlbnRNZXNzYWdlICYmIHByZXZpb3VzTWVzc2FnZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY3VycmVudE1lc3NhZ2UgIT09IHByZXZpb3VzTWVzc2FnZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghX2lzU2FtZUZpbmdlcnByaW50KGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIV9pc1NhbWVTdGFja3RyYWNlKGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gX2lzU2FtZUV4Y2VwdGlvbkV2ZW50KGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkge1xuICBjb25zdCBwcmV2aW91c0V4Y2VwdGlvbiA9IF9nZXRFeGNlcHRpb25Gcm9tRXZlbnQocHJldmlvdXNFdmVudCk7XG4gIGNvbnN0IGN1cnJlbnRFeGNlcHRpb24gPSBfZ2V0RXhjZXB0aW9uRnJvbUV2ZW50KGN1cnJlbnRFdmVudCk7XG5cbiAgaWYgKCFwcmV2aW91c0V4Y2VwdGlvbiB8fCAhY3VycmVudEV4Y2VwdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwcmV2aW91c0V4Y2VwdGlvbi50eXBlICE9PSBjdXJyZW50RXhjZXB0aW9uLnR5cGUgfHwgcHJldmlvdXNFeGNlcHRpb24udmFsdWUgIT09IGN1cnJlbnRFeGNlcHRpb24udmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIV9pc1NhbWVGaW5nZXJwcmludChjdXJyZW50RXZlbnQsIHByZXZpb3VzRXZlbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFfaXNTYW1lU3RhY2t0cmFjZShjdXJyZW50RXZlbnQsIHByZXZpb3VzRXZlbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIF9pc1NhbWVTdGFja3RyYWNlKGN1cnJlbnRFdmVudCwgcHJldmlvdXNFdmVudCkge1xuICBsZXQgY3VycmVudEZyYW1lcyA9IHN0YWNrdHJhY2UuZ2V0RnJhbWVzRnJvbUV2ZW50KGN1cnJlbnRFdmVudCk7XG4gIGxldCBwcmV2aW91c0ZyYW1lcyA9IHN0YWNrdHJhY2UuZ2V0RnJhbWVzRnJvbUV2ZW50KHByZXZpb3VzRXZlbnQpO1xuXG4gIC8vIElmIG5laXRoZXIgZXZlbnQgaGFzIGEgc3RhY2t0cmFjZSwgdGhleSBhcmUgYXNzdW1lZCB0byBiZSB0aGUgc2FtZVxuICBpZiAoIWN1cnJlbnRGcmFtZXMgJiYgIXByZXZpb3VzRnJhbWVzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiBvbmx5IG9uZSBldmVudCBoYXMgYSBzdGFja3RyYWNlLCBidXQgbm90IHRoZSBvdGhlciBvbmUsIHRoZXkgYXJlIG5vdCB0aGUgc2FtZVxuICBpZiAoKGN1cnJlbnRGcmFtZXMgJiYgIXByZXZpb3VzRnJhbWVzKSB8fCAoIWN1cnJlbnRGcmFtZXMgJiYgcHJldmlvdXNGcmFtZXMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY3VycmVudEZyYW1lcyA9IGN1cnJlbnRGcmFtZXMgO1xuICBwcmV2aW91c0ZyYW1lcyA9IHByZXZpb3VzRnJhbWVzIDtcblxuICAvLyBJZiBudW1iZXIgb2YgZnJhbWVzIGRpZmZlciwgdGhleSBhcmUgbm90IHRoZSBzYW1lXG4gIGlmIChwcmV2aW91c0ZyYW1lcy5sZW5ndGggIT09IGN1cnJlbnRGcmFtZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBjb21wYXJlIHRoZSB0d29cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2aW91c0ZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgY29uc3QgZnJhbWVBID0gcHJldmlvdXNGcmFtZXNbaV07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICBjb25zdCBmcmFtZUIgPSBjdXJyZW50RnJhbWVzW2ldO1xuXG4gICAgaWYgKFxuICAgICAgZnJhbWVBLmZpbGVuYW1lICE9PSBmcmFtZUIuZmlsZW5hbWUgfHxcbiAgICAgIGZyYW1lQS5saW5lbm8gIT09IGZyYW1lQi5saW5lbm8gfHxcbiAgICAgIGZyYW1lQS5jb2xubyAhPT0gZnJhbWVCLmNvbG5vIHx8XG4gICAgICBmcmFtZUEuZnVuY3Rpb24gIT09IGZyYW1lQi5mdW5jdGlvblxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBfaXNTYW1lRmluZ2VycHJpbnQoY3VycmVudEV2ZW50LCBwcmV2aW91c0V2ZW50KSB7XG4gIGxldCBjdXJyZW50RmluZ2VycHJpbnQgPSBjdXJyZW50RXZlbnQuZmluZ2VycHJpbnQ7XG4gIGxldCBwcmV2aW91c0ZpbmdlcnByaW50ID0gcHJldmlvdXNFdmVudC5maW5nZXJwcmludDtcblxuICAvLyBJZiBuZWl0aGVyIGV2ZW50IGhhcyBhIGZpbmdlcnByaW50LCB0aGV5IGFyZSBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lXG4gIGlmICghY3VycmVudEZpbmdlcnByaW50ICYmICFwcmV2aW91c0ZpbmdlcnByaW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiBvbmx5IG9uZSBldmVudCBoYXMgYSBmaW5nZXJwcmludCwgYnV0IG5vdCB0aGUgb3RoZXIgb25lLCB0aGV5IGFyZSBub3QgdGhlIHNhbWVcbiAgaWYgKChjdXJyZW50RmluZ2VycHJpbnQgJiYgIXByZXZpb3VzRmluZ2VycHJpbnQpIHx8ICghY3VycmVudEZpbmdlcnByaW50ICYmIHByZXZpb3VzRmluZ2VycHJpbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY3VycmVudEZpbmdlcnByaW50ID0gY3VycmVudEZpbmdlcnByaW50IDtcbiAgcHJldmlvdXNGaW5nZXJwcmludCA9IHByZXZpb3VzRmluZ2VycHJpbnQgO1xuXG4gIC8vIE90aGVyd2lzZSwgY29tcGFyZSB0aGUgdHdvXG4gIHRyeSB7XG4gICAgcmV0dXJuICEhKGN1cnJlbnRGaW5nZXJwcmludC5qb2luKCcnKSA9PT0gcHJldmlvdXNGaW5nZXJwcmludC5qb2luKCcnKSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0RXhjZXB0aW9uRnJvbUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5leGNlcHRpb24/LnZhbHVlcz8uWzBdO1xufVxuXG5leHBvcnRzLl9zaG91bGREcm9wRXZlbnQgPSBfc2hvdWxkRHJvcEV2ZW50O1xuZXhwb3J0cy5kZWR1cGVJbnRlZ3JhdGlvbiA9IGRlZHVwZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVkdXBlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/eventFilters.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/eventFilters.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst eventUtils = __webpack_require__(/*! ../utils/eventUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventUtils.js\");\nconst misc = __webpack_require__(/*! ../utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst string = __webpack_require__(/*! ../utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nconst eventFiltersIntegration = integration.defineIntegration((options = {}) => {\n  let mergedOptions;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nconst inboundFiltersIntegration = integration.defineIntegration(((options = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) );\n\nfunction _mergeOptions(\n  internalOptions = {},\n  clientOptions = {},\n) {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event, options) {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${misc.getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${misc.getEventDescription(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${misc.getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${misc.getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${misc.getEventDescription(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event, ignoreErrors) {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return eventUtils.getPossibleEventMessages(event).some(message => string.stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? string.stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event, denyUrls) {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : string.stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event, allowUrls) {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : string.stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames = []) {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event) {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.error(`Cannot extract url for event ${misc.getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event) {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n\nexports.eventFiltersIntegration = eventFiltersIntegration;\nexports.inboundFiltersIntegration = inboundFiltersIntegration;\n//# sourceMappingURL=eventFilters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/eventFilters.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst normalize = __webpack_require__(/*! ../utils/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst string = __webpack_require__(/*! ../utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\n\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = ((options = {}) => {\n  const { depth = 3, captureErrorCause = true } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const { maxValueLength = 250 } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    },\n  };\n}) ;\n\nconst extraErrorDataIntegration = integration.defineIntegration(_extraErrorDataIntegration);\n\nfunction _enhanceEventWithErrorData(\n  event,\n  hint = {},\n  depth,\n  captureErrorCause,\n  maxValueLength,\n) {\n  if (!hint.originalException || !is.isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException ).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException , captureErrorCause, maxValueLength);\n\n  if (errorData) {\n    const contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = normalize.normalize(errorData, depth);\n\n    if (is.isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      object.addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(\n  error,\n  captureErrorCause,\n  maxValueLength,\n) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = is.isError(value) || typeof value === 'string' ? string.truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = is.isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() ;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = is.isError(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n\nexports.extraErrorDataIntegration = extraErrorDataIntegration;\n//# sourceMappingURL=extraerrordata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2V4dHJhZXJyb3JkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLDRGQUFtQjtBQUM5QyxvQkFBb0IsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELFdBQVcsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDbkMsa0JBQWtCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLDhGQUFvQjs7QUFFM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELFVBQVUsc0NBQXNDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLE1BQU07QUFDdEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZXh0cmFlcnJvcmRhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IGlzID0gcmVxdWlyZSgnLi4vdXRpbHMvaXMuanMnKTtcbmNvbnN0IG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL25vcm1hbGl6ZS5qcycpO1xuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvb2JqZWN0LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuLi91dGlscy9zdHJpbmcuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdFeHRyYUVycm9yRGF0YSc7XG5cbi8qKlxuICogRXh0cmFjdCBhZGRpdGlvbmFsIGRhdGEgZm9yIGZyb20gb3JpZ2luYWwgZXhjZXB0aW9ucy5cbiAqL1xuY29uc3QgX2V4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IGRlcHRoID0gMywgY2FwdHVyZUVycm9yQ2F1c2UgPSB0cnVlIH0gPSBvcHRpb25zO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IHsgbWF4VmFsdWVMZW5ndGggPSAyNTAgfSA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gICAgICByZXR1cm4gX2VuaGFuY2VFdmVudFdpdGhFcnJvckRhdGEoZXZlbnQsIGhpbnQsIGRlcHRoLCBjYXB0dXJlRXJyb3JDYXVzZSwgbWF4VmFsdWVMZW5ndGgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIF9lbmhhbmNlRXZlbnRXaXRoRXJyb3JEYXRhKFxuICBldmVudCxcbiAgaGludCA9IHt9LFxuICBkZXB0aCxcbiAgY2FwdHVyZUVycm9yQ2F1c2UsXG4gIG1heFZhbHVlTGVuZ3RoLFxuKSB7XG4gIGlmICghaGludC5vcmlnaW5hbEV4Y2VwdGlvbiB8fCAhaXMuaXNFcnJvcihoaW50Lm9yaWdpbmFsRXhjZXB0aW9uKSkge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBjb25zdCBleGNlcHRpb25OYW1lID0gKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gKS5uYW1lIHx8IGhpbnQub3JpZ2luYWxFeGNlcHRpb24uY29uc3RydWN0b3IubmFtZTtcblxuICBjb25zdCBlcnJvckRhdGEgPSBfZXh0cmFjdEVycm9yRGF0YShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uICwgY2FwdHVyZUVycm9yQ2F1c2UsIG1heFZhbHVlTGVuZ3RoKTtcblxuICBpZiAoZXJyb3JEYXRhKSB7XG4gICAgY29uc3QgY29udGV4dHMgPSB7XG4gICAgICAuLi5ldmVudC5jb250ZXh0cyxcbiAgICB9O1xuXG4gICAgY29uc3Qgbm9ybWFsaXplZEVycm9yRGF0YSA9IG5vcm1hbGl6ZS5ub3JtYWxpemUoZXJyb3JEYXRhLCBkZXB0aCk7XG5cbiAgICBpZiAoaXMuaXNQbGFpbk9iamVjdChub3JtYWxpemVkRXJyb3JEYXRhKSkge1xuICAgICAgLy8gV2UgbWFyayB0aGUgZXJyb3IgZGF0YSBhcyBcImFscmVhZHkgbm9ybWFsaXplZFwiIGhlcmUsIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCBvdGhlciBub3JtYWxpemF0aW9uIHByb2NlZHVyZXMgdG9cbiAgICAgIC8vIHBvdGVudGlhbGx5IHRydW5jYXRlIHRoZSBkYXRhIHdlIGp1c3QgYWxyZWFkeSBub3JtYWxpemVkLCB3aXRoIGEgY2VydGFpbiBkZXB0aCBzZXR0aW5nLlxuICAgICAgb2JqZWN0LmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShub3JtYWxpemVkRXJyb3JEYXRhLCAnX19zZW50cnlfc2tpcF9ub3JtYWxpemF0aW9uX18nLCB0cnVlKTtcbiAgICAgIGNvbnRleHRzW2V4Y2VwdGlvbk5hbWVdID0gbm9ybWFsaXplZEVycm9yRGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZXZlbnQsXG4gICAgICBjb250ZXh0cyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIEV4dHJhY3QgZXh0cmEgaW5mb3JtYXRpb24gZnJvbSB0aGUgRXJyb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIF9leHRyYWN0RXJyb3JEYXRhKFxuICBlcnJvcixcbiAgY2FwdHVyZUVycm9yQ2F1c2UsXG4gIG1heFZhbHVlTGVuZ3RoLFxuKSB7XG4gIC8vIFdlIGFyZSB0cnlpbmcgdG8gZW5oYW5jZSBhbHJlYWR5IGV4aXN0aW5nIGV2ZW50LCBzbyBubyBoYXJtIGRvbmUgaWYgaXQgd29uJ3Qgc3VjY2VlZFxuICB0cnkge1xuICAgIGNvbnN0IG5hdGl2ZUtleXMgPSBbXG4gICAgICAnbmFtZScsXG4gICAgICAnbWVzc2FnZScsXG4gICAgICAnc3RhY2snLFxuICAgICAgJ2xpbmUnLFxuICAgICAgJ2NvbHVtbicsXG4gICAgICAnZmlsZU5hbWUnLFxuICAgICAgJ2xpbmVOdW1iZXInLFxuICAgICAgJ2NvbHVtbk51bWJlcicsXG4gICAgICAndG9KU09OJyxcbiAgICBdO1xuXG4gICAgY29uc3QgZXh0cmFFcnJvckluZm8gPSB7fTtcblxuICAgIC8vIFdlIHdhbnQgb25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMsIHRodXMgYGdldE93blByb3BlcnR5TmFtZXNgIGlzIHJlZHVuZGFudCBoZXJlLCBhcyB3ZSBmaWx0ZXIga2V5cyBhbnl3YXkuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZXJyb3IpKSB7XG4gICAgICBpZiAobmF0aXZlS2V5cy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSBlcnJvcltrZXldO1xuICAgICAgZXh0cmFFcnJvckluZm9ba2V5XSA9IGlzLmlzRXJyb3IodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzdHJpbmcudHJ1bmNhdGUoYCR7dmFsdWV9YCwgbWF4VmFsdWVMZW5ndGgpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gRXJyb3IuY2F1c2UgaXMgYSBzdGFuZGFyZCBwcm9wZXJ0eSB0aGF0IGlzIG5vbiBlbnVtZXJhYmxlLCB3ZSB0aGVyZWZvcmUgbmVlZCB0byBhY2Nlc3MgaXQgc2VwYXJhdGVseS5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvci9jYXVzZVxuICAgIGlmIChjYXB0dXJlRXJyb3JDYXVzZSAmJiBlcnJvci5jYXVzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBleHRyYUVycm9ySW5mby5jYXVzZSA9IGlzLmlzRXJyb3IoZXJyb3IuY2F1c2UpID8gZXJyb3IuY2F1c2UudG9TdHJpbmcoKSA6IGVycm9yLmNhdXNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHNvbWVvbmUgYXR0YWNoZWQgYHRvSlNPTmAgbWV0aG9kIHRvIGdyYWIgZXZlbiBtb3JlIHByb3BlcnRpZXMgKGVnLiBheGlvcyBpcyBkb2luZyB0aGF0KVxuICAgIGlmICh0eXBlb2YgZXJyb3IudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBzZXJpYWxpemVkRXJyb3IgPSBlcnJvci50b0pTT04oKSA7XG5cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNlcmlhbGl6ZWRFcnJvcikpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzZXJpYWxpemVkRXJyb3Jba2V5XTtcbiAgICAgICAgZXh0cmFFcnJvckluZm9ba2V5XSA9IGlzLmlzRXJyb3IodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleHRyYUVycm9ySW5mbztcbiAgfSBjYXRjaCAob08pIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGRlYnVnTG9nZ2VyLmRlYnVnLmVycm9yKCdVbmFibGUgdG8gZXh0cmFjdCBleHRyYSBkYXRhIGZyb20gdGhlIEVycm9yIG9iamVjdDonLCBvTyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5leHRyYUVycm9yRGF0YUludGVncmF0aW9uID0gZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhZXJyb3JkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/featureFlags/featureFlagsIntegration.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/featureFlags/featureFlagsIntegration.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst featureFlags = __webpack_require__(/*! ../../utils/featureFlags.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/featureFlags.js\");\n\n/**\n * Sentry integration for buffering feature flag evaluations manually with an API, and\n * capturing them on error events and spans.\n *\n * See the [feature flag documentation](https://develop.sentry.dev/sdk/expected-features/#feature-flags) for more information.\n *\n * @example\n * ```\n * import * as Sentry from '@sentry/browser';\n * import { type FeatureFlagsIntegration } from '@sentry/browser';\n *\n * // Setup\n * Sentry.init(..., integrations: [Sentry.featureFlagsIntegration()])\n *\n * // Verify\n * const flagsIntegration = Sentry.getClient()?.getIntegrationByName<FeatureFlagsIntegration>('FeatureFlags');\n * if (flagsIntegration) {\n *   flagsIntegration.addFeatureFlag('my-flag', true);\n * } else {\n *   // check your setup\n * }\n * Sentry.captureException(Exception('broke')); // 'my-flag' should be captured to this Sentry event.\n * ```\n */\nconst featureFlagsIntegration = integration.defineIntegration(() => {\n  return {\n    name: 'FeatureFlags',\n\n    processEvent(event, _hint, _client) {\n      return featureFlags._INTERNAL_copyFlagsFromScopeToEvent(event);\n    },\n\n    addFeatureFlag(name, value) {\n      featureFlags._INTERNAL_insertFlagToScope(name, value);\n      featureFlags._INTERNAL_addFeatureFlagToActiveSpan(name, value);\n    },\n  };\n}) ;\n\nexports.featureFlagsIntegration = featureFlagsIntegration;\n//# sourceMappingURL=featureFlagsIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFncy9mZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxvQkFBb0IsbUJBQU8sQ0FBQywrRkFBc0I7QUFDbEQscUJBQXFCLG1CQUFPLENBQUMsNkdBQTZCOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtCQUErQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFncy9mZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi8uLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgZmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZmVhdHVyZUZsYWdzLmpzJyk7XG5cbi8qKlxuICogU2VudHJ5IGludGVncmF0aW9uIGZvciBidWZmZXJpbmcgZmVhdHVyZSBmbGFnIGV2YWx1YXRpb25zIG1hbnVhbGx5IHdpdGggYW4gQVBJLCBhbmRcbiAqIGNhcHR1cmluZyB0aGVtIG9uIGVycm9yIGV2ZW50cyBhbmQgc3BhbnMuXG4gKlxuICogU2VlIHRoZSBbZmVhdHVyZSBmbGFnIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9leHBlY3RlZC1mZWF0dXJlcy8jZmVhdHVyZS1mbGFncykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBpbXBvcnQgeyB0eXBlIEZlYXR1cmVGbGFnc0ludGVncmF0aW9uIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqXG4gKiAvLyBTZXR1cFxuICogU2VudHJ5LmluaXQoLi4uLCBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZmVhdHVyZUZsYWdzSW50ZWdyYXRpb24oKV0pXG4gKlxuICogLy8gVmVyaWZ5XG4gKiBjb25zdCBmbGFnc0ludGVncmF0aW9uID0gU2VudHJ5LmdldENsaWVudCgpPy5nZXRJbnRlZ3JhdGlvbkJ5TmFtZTxGZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbj4oJ0ZlYXR1cmVGbGFncycpO1xuICogaWYgKGZsYWdzSW50ZWdyYXRpb24pIHtcbiAqICAgZmxhZ3NJbnRlZ3JhdGlvbi5hZGRGZWF0dXJlRmxhZygnbXktZmxhZycsIHRydWUpO1xuICogfSBlbHNlIHtcbiAqICAgLy8gY2hlY2sgeW91ciBzZXR1cFxuICogfVxuICogU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oRXhjZXB0aW9uKCdicm9rZScpKTsgLy8gJ215LWZsYWcnIHNob3VsZCBiZSBjYXB0dXJlZCB0byB0aGlzIFNlbnRyeSBldmVudC5cbiAqIGBgYFxuICovXG5jb25zdCBmZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnRmVhdHVyZUZsYWdzJyxcblxuICAgIHByb2Nlc3NFdmVudChldmVudCwgX2hpbnQsIF9jbGllbnQpIHtcbiAgICAgIHJldHVybiBmZWF0dXJlRmxhZ3MuX0lOVEVSTkFMX2NvcHlGbGFnc0Zyb21TY29wZVRvRXZlbnQoZXZlbnQpO1xuICAgIH0sXG5cbiAgICBhZGRGZWF0dXJlRmxhZyhuYW1lLCB2YWx1ZSkge1xuICAgICAgZmVhdHVyZUZsYWdzLl9JTlRFUk5BTF9pbnNlcnRGbGFnVG9TY29wZShuYW1lLCB2YWx1ZSk7XG4gICAgICBmZWF0dXJlRmxhZ3MuX0lOVEVSTkFMX2FkZEZlYXR1cmVGbGFnVG9BY3RpdmVTcGFuKG5hbWUsIHZhbHVlKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5leHBvcnRzLmZlYXR1cmVGbGFnc0ludGVncmF0aW9uID0gZmVhdHVyZUZsYWdzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/featureFlags/featureFlagsIntegration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\n\nlet originalFunctionToString;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function ( ...args) {\n          const originalFunction = object.getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(currentScopes.getClient() ) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) ;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = integration.defineIntegration(_functionToStringIntegration);\n\nexports.functionToStringIntegration = functionToStringIntegration;\n//# sourceMappingURL=functiontostring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsc0JBQXNCLG1CQUFPLENBQUMsZ0dBQXFCO0FBQ25ELG9CQUFvQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMvQyxlQUFlLG1CQUFPLENBQUMsOEZBQW9COztBQUUzQzs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzL29iamVjdC5qcycpO1xuXG5sZXQgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Z1bmN0aW9uVG9TdHJpbmcnO1xuXG5jb25zdCBTRVRVUF9DTElFTlRTID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgX2Z1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgICAgIC8vIGludHJpbnNpY3MgKGxpa2UgRnVuY3Rpb24ucHJvdG90eXBlKSBtaWdodCBiZSBpbW11dGFibGUgaW4gc29tZSBlbnZpcm9ubWVudHNcbiAgICAgIC8vIGUuZy4gTm9kZSB3aXRoIC0tZnJvemVuLWludHJpbnNpY3MsIFhTIChhbiBlbWJlZGRlZCBKYXZhU2NyaXB0IGVuZ2luZSkgb3IgU0VTIChhIEphdmFTY3JpcHQgcHJvcG9zYWwpXG4gICAgICB0cnkge1xuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbEZ1bmN0aW9uID0gb2JqZWN0LmdldE9yaWdpbmFsRnVuY3Rpb24odGhpcyk7XG4gICAgICAgICAgY29uc3QgY29udGV4dCA9XG4gICAgICAgICAgICBTRVRVUF9DTElFTlRTLmhhcyhjdXJyZW50U2NvcGVzLmdldENsaWVudCgpICkgJiYgb3JpZ2luYWxGdW5jdGlvbiAhPT0gdW5kZWZpbmVkID8gb3JpZ2luYWxGdW5jdGlvbiA6IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGhlcmUsIGp1c3QgZG9uJ3QgcGF0Y2ggdGhpc1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBTRVRVUF9DTElFTlRTLnNldChjbGllbnQsIHRydWUpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24oKSxcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9udG9zdHJpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst aggregateErrors = __webpack_require__(/*! ../utils/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/aggregate-errors.js\");\nconst eventbuilder = __webpack_require__(/*! ../utils/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js\");\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      aggregateErrors.applyAggregateErrorsToEvent(eventbuilder.exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) ;\n\nconst linkedErrorsIntegration = integration.defineIntegration(_linkedErrorsIntegration);\n\nexports.linkedErrorsIntegration = linkedErrorsIntegration;\n//# sourceMappingURL=linkederrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxvQkFBb0IsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDL0Msd0JBQXdCLG1CQUFPLENBQUMsa0hBQThCO0FBQzlELHFCQUFxQixtQkFBTyxDQUFDLDBHQUEwQjs7QUFFdkQ7QUFDQTs7QUFFQTs7QUFFQSwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUEsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uLmpzJyk7XG5jb25zdCBhZ2dyZWdhdGVFcnJvcnMgPSByZXF1aXJlKCcuLi91dGlscy9hZ2dyZWdhdGUtZXJyb3JzLmpzJyk7XG5jb25zdCBldmVudGJ1aWxkZXIgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudGJ1aWxkZXIuanMnKTtcblxuY29uc3QgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xuY29uc3QgREVGQVVMVF9MSU1JVCA9IDU7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTGlua2VkRXJyb3JzJztcblxuY29uc3QgX2xpbmtlZEVycm9yc0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgbGltaXQgPSBvcHRpb25zLmxpbWl0IHx8IERFRkFVTFRfTElNSVQ7XG4gIGNvbnN0IGtleSA9IG9wdGlvbnMua2V5IHx8IERFRkFVTFRfS0VZO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcmVwcm9jZXNzRXZlbnQoZXZlbnQsIGhpbnQsIGNsaWVudCkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgICAgIGFnZ3JlZ2F0ZUVycm9ycy5hcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQoZXZlbnRidWlsZGVyLmV4Y2VwdGlvbkZyb21FcnJvciwgb3B0aW9ucy5zdGFja1BhcnNlciwga2V5LCBsaW1pdCwgZXZlbnQsIGhpbnQpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oX2xpbmtlZEVycm9yc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiA9IGxpbmtlZEVycm9yc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua2VkZXJyb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributeExtraction.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributeExtraction.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst url = __webpack_require__(/*! ../../utils/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/url.js\");\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\nconst methodConfig = __webpack_require__(/*! ./methodConfig.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/methodConfig.js\");\n\n/**\n * Core attribute extraction and building functions for MCP server instrumentation\n */\n\n\n/**\n * Extracts additional attributes for specific notification types\n * @param method - Notification method name\n * @param params - Notification parameters\n * @returns Method-specific attributes for span instrumentation\n */\nfunction getNotificationAttributes(\n  method,\n  params,\n) {\n  const attributes$1 = {};\n\n  switch (method) {\n    case 'notifications/cancelled':\n      if (params?.requestId) {\n        attributes$1['mcp.cancelled.request_id'] = String(params.requestId);\n      }\n      if (params?.reason) {\n        attributes$1['mcp.cancelled.reason'] = String(params.reason);\n      }\n      break;\n\n    case 'notifications/message':\n      if (params?.level) {\n        attributes$1[attributes.MCP_LOGGING_LEVEL_ATTRIBUTE] = String(params.level);\n      }\n      if (params?.logger) {\n        attributes$1[attributes.MCP_LOGGING_LOGGER_ATTRIBUTE] = String(params.logger);\n      }\n      if (params?.data !== undefined) {\n        attributes$1[attributes.MCP_LOGGING_DATA_TYPE_ATTRIBUTE] = typeof params.data;\n        if (typeof params.data === 'string') {\n          attributes$1[attributes.MCP_LOGGING_MESSAGE_ATTRIBUTE] = params.data;\n        } else {\n          attributes$1[attributes.MCP_LOGGING_MESSAGE_ATTRIBUTE] = JSON.stringify(params.data);\n        }\n      }\n      break;\n\n    case 'notifications/progress':\n      if (params?.progressToken) {\n        attributes$1['mcp.progress.token'] = String(params.progressToken);\n      }\n      if (typeof params?.progress === 'number') {\n        attributes$1['mcp.progress.current'] = params.progress;\n      }\n      if (typeof params?.total === 'number') {\n        attributes$1['mcp.progress.total'] = params.total;\n        if (typeof params?.progress === 'number') {\n          attributes$1['mcp.progress.percentage'] = (params.progress / params.total) * 100;\n        }\n      }\n      if (params?.message) {\n        attributes$1['mcp.progress.message'] = String(params.message);\n      }\n      break;\n\n    case 'notifications/resources/updated':\n      if (params?.uri) {\n        attributes$1[attributes.MCP_RESOURCE_URI_ATTRIBUTE] = String(params.uri);\n        const urlObject = url.parseStringToURLObject(String(params.uri));\n        if (urlObject && !url.isURLObjectRelative(urlObject)) {\n          attributes$1['mcp.resource.protocol'] = urlObject.protocol.replace(':', '');\n        }\n      }\n      break;\n\n    case 'notifications/initialized':\n      attributes$1['mcp.lifecycle.phase'] = 'initialization_complete';\n      attributes$1['mcp.protocol.ready'] = 1;\n      break;\n  }\n\n  return attributes$1;\n}\n\n/**\n * Build type-specific attributes based on message type\n * @param type - Span type (request or notification)\n * @param message - JSON-RPC message\n * @param params - Optional parameters for attribute extraction\n * @returns Type-specific attributes for span instrumentation\n */\nfunction buildTypeSpecificAttributes(\n  type,\n  message,\n  params,\n) {\n  if (type === 'request') {\n    const request = message ;\n    const targetInfo = methodConfig.extractTargetInfo(request.method, params || {});\n\n    return {\n      ...(request.id !== undefined && { [attributes.MCP_REQUEST_ID_ATTRIBUTE]: String(request.id) }),\n      ...targetInfo.attributes,\n      ...methodConfig.getRequestArguments(request.method, params || {}),\n    };\n  }\n\n  return getNotificationAttributes(message.method, params || {});\n}\n\nexports.buildTypeSpecificAttributes = buildTypeSpecificAttributes;\nexports.getNotificationAttributes = getNotificationAttributes;\n//# sourceMappingURL=attributeExtraction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvYXR0cmlidXRlRXh0cmFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsMkZBQW9CO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLGlIQUFpQjtBQUM1QyxxQkFBcUIsbUJBQU8sQ0FBQyxxSEFBbUI7O0FBRWhEO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRjs7QUFFbEY7QUFDQSx3Q0FBd0MsMkRBQTJEO0FBQ25HO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0E7O0FBRUEsK0RBQStEO0FBQy9EOztBQUVBLG1DQUFtQztBQUNuQyxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tY3Atc2VydmVyL2F0dHJpYnV0ZUV4dHJhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHVybCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybC5qcycpO1xuY29uc3QgYXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vYXR0cmlidXRlcy5qcycpO1xuY29uc3QgbWV0aG9kQ29uZmlnID0gcmVxdWlyZSgnLi9tZXRob2RDb25maWcuanMnKTtcblxuLyoqXG4gKiBDb3JlIGF0dHJpYnV0ZSBleHRyYWN0aW9uIGFuZCBidWlsZGluZyBmdW5jdGlvbnMgZm9yIE1DUCBzZXJ2ZXIgaW5zdHJ1bWVudGF0aW9uXG4gKi9cblxuXG4vKipcbiAqIEV4dHJhY3RzIGFkZGl0aW9uYWwgYXR0cmlidXRlcyBmb3Igc3BlY2lmaWMgbm90aWZpY2F0aW9uIHR5cGVzXG4gKiBAcGFyYW0gbWV0aG9kIC0gTm90aWZpY2F0aW9uIG1ldGhvZCBuYW1lXG4gKiBAcGFyYW0gcGFyYW1zIC0gTm90aWZpY2F0aW9uIHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zIE1ldGhvZC1zcGVjaWZpYyBhdHRyaWJ1dGVzIGZvciBzcGFuIGluc3RydW1lbnRhdGlvblxuICovXG5mdW5jdGlvbiBnZXROb3RpZmljYXRpb25BdHRyaWJ1dGVzKFxuICBtZXRob2QsXG4gIHBhcmFtcyxcbikge1xuICBjb25zdCBhdHRyaWJ1dGVzJDEgPSB7fTtcblxuICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgIGNhc2UgJ25vdGlmaWNhdGlvbnMvY2FuY2VsbGVkJzpcbiAgICAgIGlmIChwYXJhbXM/LnJlcXVlc3RJZCkge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5jYW5jZWxsZWQucmVxdWVzdF9pZCddID0gU3RyaW5nKHBhcmFtcy5yZXF1ZXN0SWQpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcz8ucmVhc29uKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMkMVsnbWNwLmNhbmNlbGxlZC5yZWFzb24nXSA9IFN0cmluZyhwYXJhbXMucmVhc29uKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbm90aWZpY2F0aW9ucy9tZXNzYWdlJzpcbiAgICAgIGlmIChwYXJhbXM/LmxldmVsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMkMVthdHRyaWJ1dGVzLk1DUF9MT0dHSU5HX0xFVkVMX0FUVFJJQlVURV0gPSBTdHJpbmcocGFyYW1zLmxldmVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXM/LmxvZ2dlcikge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfTE9HR0lOR19MT0dHRVJfQVRUUklCVVRFXSA9IFN0cmluZyhwYXJhbXMubG9nZ2VyKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXM/LmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfTE9HR0lOR19EQVRBX1RZUEVfQVRUUklCVVRFXSA9IHR5cGVvZiBwYXJhbXMuZGF0YTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfTE9HR0lOR19NRVNTQUdFX0FUVFJJQlVURV0gPSBwYXJhbXMuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfTE9HR0lOR19NRVNTQUdFX0FUVFJJQlVURV0gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbm90aWZpY2F0aW9ucy9wcm9ncmVzcyc6XG4gICAgICBpZiAocGFyYW1zPy5wcm9ncmVzc1Rva2VuKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMkMVsnbWNwLnByb2dyZXNzLnRva2VuJ10gPSBTdHJpbmcocGFyYW1zLnByb2dyZXNzVG9rZW4pO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYXJhbXM/LnByb2dyZXNzID09PSAnbnVtYmVyJykge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5wcm9ncmVzcy5jdXJyZW50J10gPSBwYXJhbXMucHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcz8udG90YWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMkMVsnbWNwLnByb2dyZXNzLnRvdGFsJ10gPSBwYXJhbXMudG90YWw7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zPy5wcm9ncmVzcyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5wcm9ncmVzcy5wZXJjZW50YWdlJ10gPSAocGFyYW1zLnByb2dyZXNzIC8gcGFyYW1zLnRvdGFsKSAqIDEwMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcz8ubWVzc2FnZSkge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5wcm9ncmVzcy5tZXNzYWdlJ10gPSBTdHJpbmcocGFyYW1zLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdub3RpZmljYXRpb25zL3Jlc291cmNlcy91cGRhdGVkJzpcbiAgICAgIGlmIChwYXJhbXM/LnVyaSkge1xuICAgICAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfUkVTT1VSQ0VfVVJJX0FUVFJJQlVURV0gPSBTdHJpbmcocGFyYW1zLnVyaSk7XG4gICAgICAgIGNvbnN0IHVybE9iamVjdCA9IHVybC5wYXJzZVN0cmluZ1RvVVJMT2JqZWN0KFN0cmluZyhwYXJhbXMudXJpKSk7XG4gICAgICAgIGlmICh1cmxPYmplY3QgJiYgIXVybC5pc1VSTE9iamVjdFJlbGF0aXZlKHVybE9iamVjdCkpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5yZXNvdXJjZS5wcm90b2NvbCddID0gdXJsT2JqZWN0LnByb3RvY29sLnJlcGxhY2UoJzonLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbm90aWZpY2F0aW9ucy9pbml0aWFsaXplZCc6XG4gICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5saWZlY3ljbGUucGhhc2UnXSA9ICdpbml0aWFsaXphdGlvbl9jb21wbGV0ZSc7XG4gICAgICBhdHRyaWJ1dGVzJDFbJ21jcC5wcm90b2NvbC5yZWFkeSddID0gMTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZXMkMTtcbn1cblxuLyoqXG4gKiBCdWlsZCB0eXBlLXNwZWNpZmljIGF0dHJpYnV0ZXMgYmFzZWQgb24gbWVzc2FnZSB0eXBlXG4gKiBAcGFyYW0gdHlwZSAtIFNwYW4gdHlwZSAocmVxdWVzdCBvciBub3RpZmljYXRpb24pXG4gKiBAcGFyYW0gbWVzc2FnZSAtIEpTT04tUlBDIG1lc3NhZ2VcbiAqIEBwYXJhbSBwYXJhbXMgLSBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBhdHRyaWJ1dGUgZXh0cmFjdGlvblxuICogQHJldHVybnMgVHlwZS1zcGVjaWZpYyBhdHRyaWJ1dGVzIGZvciBzcGFuIGluc3RydW1lbnRhdGlvblxuICovXG5mdW5jdGlvbiBidWlsZFR5cGVTcGVjaWZpY0F0dHJpYnV0ZXMoXG4gIHR5cGUsXG4gIG1lc3NhZ2UsXG4gIHBhcmFtcyxcbikge1xuICBpZiAodHlwZSA9PT0gJ3JlcXVlc3QnKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG1lc3NhZ2UgO1xuICAgIGNvbnN0IHRhcmdldEluZm8gPSBtZXRob2RDb25maWcuZXh0cmFjdFRhcmdldEluZm8ocmVxdWVzdC5tZXRob2QsIHBhcmFtcyB8fCB7fSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uKHJlcXVlc3QuaWQgIT09IHVuZGVmaW5lZCAmJiB7IFthdHRyaWJ1dGVzLk1DUF9SRVFVRVNUX0lEX0FUVFJJQlVURV06IFN0cmluZyhyZXF1ZXN0LmlkKSB9KSxcbiAgICAgIC4uLnRhcmdldEluZm8uYXR0cmlidXRlcyxcbiAgICAgIC4uLm1ldGhvZENvbmZpZy5nZXRSZXF1ZXN0QXJndW1lbnRzKHJlcXVlc3QubWV0aG9kLCBwYXJhbXMgfHwge30pLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2V0Tm90aWZpY2F0aW9uQXR0cmlidXRlcyhtZXNzYWdlLm1ldGhvZCwgcGFyYW1zIHx8IHt9KTtcbn1cblxuZXhwb3J0cy5idWlsZFR5cGVTcGVjaWZpY0F0dHJpYnV0ZXMgPSBidWlsZFR5cGVTcGVjaWZpY0F0dHJpYnV0ZXM7XG5leHBvcnRzLmdldE5vdGlmaWNhdGlvbkF0dHJpYnV0ZXMgPSBnZXROb3RpZmljYXRpb25BdHRyaWJ1dGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0cmlidXRlRXh0cmFjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributeExtraction.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Essential MCP attribute constants for Sentry instrumentation\n *\n * Based on OpenTelemetry MCP semantic conventions\n * @see https://github.com/open-telemetry/semantic-conventions/blob/3097fb0af5b9492b0e3f55dc5f6c21a3dc2be8df/docs/gen-ai/mcp.md\n */\n\n// =============================================================================\n// CORE MCP ATTRIBUTES\n// =============================================================================\n\n/** The name of the request or notification method */\nconst MCP_METHOD_NAME_ATTRIBUTE = 'mcp.method.name';\n\n/** JSON-RPC request identifier for the request. Unique within the MCP session. */\nconst MCP_REQUEST_ID_ATTRIBUTE = 'mcp.request.id';\n\n/** Identifies the MCP session */\nconst MCP_SESSION_ID_ATTRIBUTE = 'mcp.session.id';\n\n/** Transport method used for MCP communication */\nconst MCP_TRANSPORT_ATTRIBUTE = 'mcp.transport';\n\n// =============================================================================\n// SERVER ATTRIBUTES\n// =============================================================================\n\n/** Name of the MCP server application */\nconst MCP_SERVER_NAME_ATTRIBUTE = 'mcp.server.name';\n\n/** Display title of the MCP server application */\nconst MCP_SERVER_TITLE_ATTRIBUTE = 'mcp.server.title';\n\n/** Version of the MCP server application */\nconst MCP_SERVER_VERSION_ATTRIBUTE = 'mcp.server.version';\n\n/** MCP protocol version used in the session */\nconst MCP_PROTOCOL_VERSION_ATTRIBUTE = 'mcp.protocol.version';\n\n// =============================================================================\n// METHOD-SPECIFIC ATTRIBUTES\n// =============================================================================\n\n/** Name of the tool being called */\nconst MCP_TOOL_NAME_ATTRIBUTE = 'mcp.tool.name';\n\n/** The resource URI being accessed */\nconst MCP_RESOURCE_URI_ATTRIBUTE = 'mcp.resource.uri';\n\n/** Name of the prompt template */\nconst MCP_PROMPT_NAME_ATTRIBUTE = 'mcp.prompt.name';\n\n// =============================================================================\n// TOOL RESULT ATTRIBUTES\n// =============================================================================\n\n/** Whether a tool execution resulted in an error */\nconst MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE = 'mcp.tool.result.is_error';\n\n/** Number of content items in the tool result */\nconst MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE = 'mcp.tool.result.content_count';\n\n/** Serialized content of the tool result */\nconst MCP_TOOL_RESULT_CONTENT_ATTRIBUTE = 'mcp.tool.result.content';\n\n/** Prefix for tool result attributes that contain sensitive content */\nconst MCP_TOOL_RESULT_PREFIX = 'mcp.tool.result';\n\n// =============================================================================\n// PROMPT RESULT ATTRIBUTES\n// =============================================================================\n\n/** Description of the prompt result */\nconst MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE = 'mcp.prompt.result.description';\n\n/** Number of messages in the prompt result */\nconst MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE = 'mcp.prompt.result.message_count';\n\n/** Content of the message in the prompt result (for single message results) */\nconst MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE = 'mcp.prompt.result.message_content';\n\n/** Prefix for prompt result attributes that contain sensitive content */\nconst MCP_PROMPT_RESULT_PREFIX = 'mcp.prompt.result';\n\n// =============================================================================\n// REQUEST ARGUMENT ATTRIBUTES\n// =============================================================================\n\n/** Prefix for MCP request argument prefix for each argument */\nconst MCP_REQUEST_ARGUMENT = 'mcp.request.argument';\n\n// =============================================================================\n// LOGGING ATTRIBUTES\n// =============================================================================\n\n/** Log level for MCP logging operations */\nconst MCP_LOGGING_LEVEL_ATTRIBUTE = 'mcp.logging.level';\n\n/** Logger name for MCP logging operations */\nconst MCP_LOGGING_LOGGER_ATTRIBUTE = 'mcp.logging.logger';\n\n/** Data type of the logged message */\nconst MCP_LOGGING_DATA_TYPE_ATTRIBUTE = 'mcp.logging.data_type';\n\n/** Log message content */\nconst MCP_LOGGING_MESSAGE_ATTRIBUTE = 'mcp.logging.message';\n\n// =============================================================================\n// NETWORK ATTRIBUTES (OpenTelemetry Standard)\n// =============================================================================\n\n/** OSI transport layer protocol */\nconst NETWORK_TRANSPORT_ATTRIBUTE = 'network.transport';\n\n/** The version of JSON RPC protocol used */\nconst NETWORK_PROTOCOL_VERSION_ATTRIBUTE = 'network.protocol.version';\n\n/** Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name */\nconst CLIENT_ADDRESS_ATTRIBUTE = 'client.address';\n\n/** Client port number */\nconst CLIENT_PORT_ATTRIBUTE = 'client.port';\n\n// =============================================================================\n// SENTRY-SPECIFIC MCP ATTRIBUTE VALUES\n// =============================================================================\n\n/** Sentry operation value for MCP server spans */\nconst MCP_SERVER_OP_VALUE = 'mcp.server';\n\n/**\n * Sentry operation value for client-to-server notifications\n * Following OpenTelemetry MCP semantic conventions\n */\nconst MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE = 'mcp.notification.client_to_server';\n\n/**\n * Sentry operation value for server-to-client notifications\n * Following OpenTelemetry MCP semantic conventions\n */\nconst MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE = 'mcp.notification.server_to_client';\n\n/** Sentry origin value for MCP function spans */\nconst MCP_FUNCTION_ORIGIN_VALUE = 'auto.function.mcp_server';\n\n/** Sentry origin value for MCP notification spans */\nconst MCP_NOTIFICATION_ORIGIN_VALUE = 'auto.mcp.notification';\n\n/** Sentry source value for MCP route spans */\nconst MCP_ROUTE_SOURCE_VALUE = 'route';\n\nexports.CLIENT_ADDRESS_ATTRIBUTE = CLIENT_ADDRESS_ATTRIBUTE;\nexports.CLIENT_PORT_ATTRIBUTE = CLIENT_PORT_ATTRIBUTE;\nexports.MCP_FUNCTION_ORIGIN_VALUE = MCP_FUNCTION_ORIGIN_VALUE;\nexports.MCP_LOGGING_DATA_TYPE_ATTRIBUTE = MCP_LOGGING_DATA_TYPE_ATTRIBUTE;\nexports.MCP_LOGGING_LEVEL_ATTRIBUTE = MCP_LOGGING_LEVEL_ATTRIBUTE;\nexports.MCP_LOGGING_LOGGER_ATTRIBUTE = MCP_LOGGING_LOGGER_ATTRIBUTE;\nexports.MCP_LOGGING_MESSAGE_ATTRIBUTE = MCP_LOGGING_MESSAGE_ATTRIBUTE;\nexports.MCP_METHOD_NAME_ATTRIBUTE = MCP_METHOD_NAME_ATTRIBUTE;\nexports.MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE = MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE;\nexports.MCP_NOTIFICATION_ORIGIN_VALUE = MCP_NOTIFICATION_ORIGIN_VALUE;\nexports.MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE = MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE;\nexports.MCP_PROMPT_NAME_ATTRIBUTE = MCP_PROMPT_NAME_ATTRIBUTE;\nexports.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE = MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE;\nexports.MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE = MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE;\nexports.MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE = MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE;\nexports.MCP_PROMPT_RESULT_PREFIX = MCP_PROMPT_RESULT_PREFIX;\nexports.MCP_PROTOCOL_VERSION_ATTRIBUTE = MCP_PROTOCOL_VERSION_ATTRIBUTE;\nexports.MCP_REQUEST_ARGUMENT = MCP_REQUEST_ARGUMENT;\nexports.MCP_REQUEST_ID_ATTRIBUTE = MCP_REQUEST_ID_ATTRIBUTE;\nexports.MCP_RESOURCE_URI_ATTRIBUTE = MCP_RESOURCE_URI_ATTRIBUTE;\nexports.MCP_ROUTE_SOURCE_VALUE = MCP_ROUTE_SOURCE_VALUE;\nexports.MCP_SERVER_NAME_ATTRIBUTE = MCP_SERVER_NAME_ATTRIBUTE;\nexports.MCP_SERVER_OP_VALUE = MCP_SERVER_OP_VALUE;\nexports.MCP_SERVER_TITLE_ATTRIBUTE = MCP_SERVER_TITLE_ATTRIBUTE;\nexports.MCP_SERVER_VERSION_ATTRIBUTE = MCP_SERVER_VERSION_ATTRIBUTE;\nexports.MCP_SESSION_ID_ATTRIBUTE = MCP_SESSION_ID_ATTRIBUTE;\nexports.MCP_TOOL_NAME_ATTRIBUTE = MCP_TOOL_NAME_ATTRIBUTE;\nexports.MCP_TOOL_RESULT_CONTENT_ATTRIBUTE = MCP_TOOL_RESULT_CONTENT_ATTRIBUTE;\nexports.MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE = MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE;\nexports.MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE = MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE;\nexports.MCP_TOOL_RESULT_PREFIX = MCP_TOOL_RESULT_PREFIX;\nexports.MCP_TRANSPORT_ATTRIBUTE = MCP_TRANSPORT_ATTRIBUTE;\nexports.NETWORK_PROTOCOL_VERSION_ATTRIBUTE = NETWORK_PROTOCOL_VERSION_ATTRIBUTE;\nexports.NETWORK_TRANSPORT_ATTRIBUTE = NETWORK_TRANSPORT_ATTRIBUTE;\n//# sourceMappingURL=attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/correlation.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/correlation.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst spanstatus = __webpack_require__(/*! ../../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst piiFiltering = __webpack_require__(/*! ./piiFiltering.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/piiFiltering.js\");\nconst resultExtraction = __webpack_require__(/*! ./resultExtraction.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/resultExtraction.js\");\n\n/**\n * Request-span correlation system for MCP server instrumentation\n *\n * Handles mapping requestId to span data for correlation with handler execution.\n * Uses WeakMap to scope correlation maps per transport instance, preventing\n * request ID collisions between different MCP sessions.\n */\n\n\n/**\n * Transport-scoped correlation system that prevents collisions between different MCP sessions\n * @internal Each transport instance gets its own correlation map, eliminating request ID conflicts\n */\nconst transportToSpanMap = new WeakMap();\n\n/**\n * Gets or creates the span map for a specific transport instance\n * @internal\n * @param transport - MCP transport instance\n * @returns Span map for the transport\n */\nfunction getOrCreateSpanMap(transport) {\n  let spanMap = transportToSpanMap.get(transport);\n  if (!spanMap) {\n    spanMap = new Map();\n    transportToSpanMap.set(transport, spanMap);\n  }\n  return spanMap;\n}\n\n/**\n * Stores span context for later correlation with handler execution\n * @param transport - MCP transport instance\n * @param requestId - Request identifier\n * @param span - Active span to correlate\n * @param method - MCP method name\n */\nfunction storeSpanForRequest(transport, requestId, span, method) {\n  const spanMap = getOrCreateSpanMap(transport);\n  spanMap.set(requestId, {\n    span,\n    method,\n    startTime: Date.now(),\n  });\n}\n\n/**\n * Completes span with tool results and cleans up correlation\n * @param transport - MCP transport instance\n * @param requestId - Request identifier\n * @param result - Tool execution result for attribute extraction\n */\nfunction completeSpanWithResults(transport, requestId, result) {\n  const spanMap = getOrCreateSpanMap(transport);\n  const spanData = spanMap.get(requestId);\n  if (spanData) {\n    const { span, method } = spanData;\n\n    if (method === 'tools/call') {\n      const rawToolAttributes = resultExtraction.extractToolResultAttributes(result);\n      const client = currentScopes.getClient();\n      const sendDefaultPii = Boolean(client?.getOptions().sendDefaultPii);\n      const toolAttributes = piiFiltering.filterMcpPiiFromSpanData(rawToolAttributes, sendDefaultPii);\n\n      span.setAttributes(toolAttributes);\n    } else if (method === 'prompts/get') {\n      const rawPromptAttributes = resultExtraction.extractPromptResultAttributes(result);\n      const client = currentScopes.getClient();\n      const sendDefaultPii = Boolean(client?.getOptions().sendDefaultPii);\n      const promptAttributes = piiFiltering.filterMcpPiiFromSpanData(rawPromptAttributes, sendDefaultPii);\n\n      span.setAttributes(promptAttributes);\n    }\n\n    span.end();\n    spanMap.delete(requestId);\n  }\n}\n\n/**\n * Cleans up pending spans for a specific transport (when that transport closes)\n * @param transport - MCP transport instance\n * @returns Number of pending spans that were cleaned up\n */\nfunction cleanupPendingSpansForTransport(transport) {\n  const spanMap = transportToSpanMap.get(transport);\n  if (!spanMap) {\n    return 0;\n  }\n\n  const pendingCount = spanMap.size;\n\n  for (const [, spanData] of spanMap) {\n    spanData.span.setStatus({\n      code: spanstatus.SPAN_STATUS_ERROR,\n      message: 'cancelled',\n    });\n    spanData.span.end();\n  }\n\n  spanMap.clear();\n  return pendingCount;\n}\n\nexports.cleanupPendingSpansForTransport = cleanupPendingSpansForTransport;\nexports.completeSpanWithResults = completeSpanWithResults;\nexports.storeSpanForRequest = storeSpanForRequest;\n//# sourceMappingURL=correlation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvY29ycmVsYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsc0JBQXNCLG1CQUFPLENBQUMsbUdBQXdCO0FBQ3RELG1CQUFtQixtQkFBTyxDQUFDLDZHQUE2QjtBQUN4RCxxQkFBcUIsbUJBQU8sQ0FBQyxxSEFBbUI7QUFDaEQseUJBQXlCLG1CQUFPLENBQUMsNkhBQXVCOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tY3Atc2VydmVyL2NvcnJlbGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3Qgc3BhbnN0YXR1cyA9IHJlcXVpcmUoJy4uLy4uL3RyYWNpbmcvc3BhbnN0YXR1cy5qcycpO1xuY29uc3QgcGlpRmlsdGVyaW5nID0gcmVxdWlyZSgnLi9waWlGaWx0ZXJpbmcuanMnKTtcbmNvbnN0IHJlc3VsdEV4dHJhY3Rpb24gPSByZXF1aXJlKCcuL3Jlc3VsdEV4dHJhY3Rpb24uanMnKTtcblxuLyoqXG4gKiBSZXF1ZXN0LXNwYW4gY29ycmVsYXRpb24gc3lzdGVtIGZvciBNQ1Agc2VydmVyIGluc3RydW1lbnRhdGlvblxuICpcbiAqIEhhbmRsZXMgbWFwcGluZyByZXF1ZXN0SWQgdG8gc3BhbiBkYXRhIGZvciBjb3JyZWxhdGlvbiB3aXRoIGhhbmRsZXIgZXhlY3V0aW9uLlxuICogVXNlcyBXZWFrTWFwIHRvIHNjb3BlIGNvcnJlbGF0aW9uIG1hcHMgcGVyIHRyYW5zcG9ydCBpbnN0YW5jZSwgcHJldmVudGluZ1xuICogcmVxdWVzdCBJRCBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IE1DUCBzZXNzaW9ucy5cbiAqL1xuXG5cbi8qKlxuICogVHJhbnNwb3J0LXNjb3BlZCBjb3JyZWxhdGlvbiBzeXN0ZW0gdGhhdCBwcmV2ZW50cyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IE1DUCBzZXNzaW9uc1xuICogQGludGVybmFsIEVhY2ggdHJhbnNwb3J0IGluc3RhbmNlIGdldHMgaXRzIG93biBjb3JyZWxhdGlvbiBtYXAsIGVsaW1pbmF0aW5nIHJlcXVlc3QgSUQgY29uZmxpY3RzXG4gKi9cbmNvbnN0IHRyYW5zcG9ydFRvU3Bhbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogR2V0cyBvciBjcmVhdGVzIHRoZSBzcGFuIG1hcCBmb3IgYSBzcGVjaWZpYyB0cmFuc3BvcnQgaW5zdGFuY2VcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHRyYW5zcG9ydCAtIE1DUCB0cmFuc3BvcnQgaW5zdGFuY2VcbiAqIEByZXR1cm5zIFNwYW4gbWFwIGZvciB0aGUgdHJhbnNwb3J0XG4gKi9cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3Bhbk1hcCh0cmFuc3BvcnQpIHtcbiAgbGV0IHNwYW5NYXAgPSB0cmFuc3BvcnRUb1NwYW5NYXAuZ2V0KHRyYW5zcG9ydCk7XG4gIGlmICghc3Bhbk1hcCkge1xuICAgIHNwYW5NYXAgPSBuZXcgTWFwKCk7XG4gICAgdHJhbnNwb3J0VG9TcGFuTWFwLnNldCh0cmFuc3BvcnQsIHNwYW5NYXApO1xuICB9XG4gIHJldHVybiBzcGFuTWFwO1xufVxuXG4vKipcbiAqIFN0b3JlcyBzcGFuIGNvbnRleHQgZm9yIGxhdGVyIGNvcnJlbGF0aW9uIHdpdGggaGFuZGxlciBleGVjdXRpb25cbiAqIEBwYXJhbSB0cmFuc3BvcnQgLSBNQ1AgdHJhbnNwb3J0IGluc3RhbmNlXG4gKiBAcGFyYW0gcmVxdWVzdElkIC0gUmVxdWVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0gc3BhbiAtIEFjdGl2ZSBzcGFuIHRvIGNvcnJlbGF0ZVxuICogQHBhcmFtIG1ldGhvZCAtIE1DUCBtZXRob2QgbmFtZVxuICovXG5mdW5jdGlvbiBzdG9yZVNwYW5Gb3JSZXF1ZXN0KHRyYW5zcG9ydCwgcmVxdWVzdElkLCBzcGFuLCBtZXRob2QpIHtcbiAgY29uc3Qgc3Bhbk1hcCA9IGdldE9yQ3JlYXRlU3Bhbk1hcCh0cmFuc3BvcnQpO1xuICBzcGFuTWFwLnNldChyZXF1ZXN0SWQsIHtcbiAgICBzcGFuLFxuICAgIG1ldGhvZCxcbiAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBsZXRlcyBzcGFuIHdpdGggdG9vbCByZXN1bHRzIGFuZCBjbGVhbnMgdXAgY29ycmVsYXRpb25cbiAqIEBwYXJhbSB0cmFuc3BvcnQgLSBNQ1AgdHJhbnNwb3J0IGluc3RhbmNlXG4gKiBAcGFyYW0gcmVxdWVzdElkIC0gUmVxdWVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0gcmVzdWx0IC0gVG9vbCBleGVjdXRpb24gcmVzdWx0IGZvciBhdHRyaWJ1dGUgZXh0cmFjdGlvblxuICovXG5mdW5jdGlvbiBjb21wbGV0ZVNwYW5XaXRoUmVzdWx0cyh0cmFuc3BvcnQsIHJlcXVlc3RJZCwgcmVzdWx0KSB7XG4gIGNvbnN0IHNwYW5NYXAgPSBnZXRPckNyZWF0ZVNwYW5NYXAodHJhbnNwb3J0KTtcbiAgY29uc3Qgc3BhbkRhdGEgPSBzcGFuTWFwLmdldChyZXF1ZXN0SWQpO1xuICBpZiAoc3BhbkRhdGEpIHtcbiAgICBjb25zdCB7IHNwYW4sIG1ldGhvZCB9ID0gc3BhbkRhdGE7XG5cbiAgICBpZiAobWV0aG9kID09PSAndG9vbHMvY2FsbCcpIHtcbiAgICAgIGNvbnN0IHJhd1Rvb2xBdHRyaWJ1dGVzID0gcmVzdWx0RXh0cmFjdGlvbi5leHRyYWN0VG9vbFJlc3VsdEF0dHJpYnV0ZXMocmVzdWx0KTtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG4gICAgICBjb25zdCBzZW5kRGVmYXVsdFBpaSA9IEJvb2xlYW4oY2xpZW50Py5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpO1xuICAgICAgY29uc3QgdG9vbEF0dHJpYnV0ZXMgPSBwaWlGaWx0ZXJpbmcuZmlsdGVyTWNwUGlpRnJvbVNwYW5EYXRhKHJhd1Rvb2xBdHRyaWJ1dGVzLCBzZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh0b29sQXR0cmlidXRlcyk7XG4gICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdwcm9tcHRzL2dldCcpIHtcbiAgICAgIGNvbnN0IHJhd1Byb21wdEF0dHJpYnV0ZXMgPSByZXN1bHRFeHRyYWN0aW9uLmV4dHJhY3RQcm9tcHRSZXN1bHRBdHRyaWJ1dGVzKHJlc3VsdCk7XG4gICAgICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICAgICAgY29uc3Qgc2VuZERlZmF1bHRQaWkgPSBCb29sZWFuKGNsaWVudD8uZ2V0T3B0aW9ucygpLnNlbmREZWZhdWx0UGlpKTtcbiAgICAgIGNvbnN0IHByb21wdEF0dHJpYnV0ZXMgPSBwaWlGaWx0ZXJpbmcuZmlsdGVyTWNwUGlpRnJvbVNwYW5EYXRhKHJhd1Byb21wdEF0dHJpYnV0ZXMsIHNlbmREZWZhdWx0UGlpKTtcblxuICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHByb21wdEF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIHNwYW4uZW5kKCk7XG4gICAgc3Bhbk1hcC5kZWxldGUocmVxdWVzdElkKTtcbiAgfVxufVxuXG4vKipcbiAqIENsZWFucyB1cCBwZW5kaW5nIHNwYW5zIGZvciBhIHNwZWNpZmljIHRyYW5zcG9ydCAod2hlbiB0aGF0IHRyYW5zcG9ydCBjbG9zZXMpXG4gKiBAcGFyYW0gdHJhbnNwb3J0IC0gTUNQIHRyYW5zcG9ydCBpbnN0YW5jZVxuICogQHJldHVybnMgTnVtYmVyIG9mIHBlbmRpbmcgc3BhbnMgdGhhdCB3ZXJlIGNsZWFuZWQgdXBcbiAqL1xuZnVuY3Rpb24gY2xlYW51cFBlbmRpbmdTcGFuc0ZvclRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgY29uc3Qgc3Bhbk1hcCA9IHRyYW5zcG9ydFRvU3Bhbk1hcC5nZXQodHJhbnNwb3J0KTtcbiAgaWYgKCFzcGFuTWFwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjb25zdCBwZW5kaW5nQ291bnQgPSBzcGFuTWFwLnNpemU7XG5cbiAgZm9yIChjb25zdCBbLCBzcGFuRGF0YV0gb2Ygc3Bhbk1hcCkge1xuICAgIHNwYW5EYXRhLnNwYW4uc2V0U3RhdHVzKHtcbiAgICAgIGNvZGU6IHNwYW5zdGF0dXMuU1BBTl9TVEFUVVNfRVJST1IsXG4gICAgICBtZXNzYWdlOiAnY2FuY2VsbGVkJyxcbiAgICB9KTtcbiAgICBzcGFuRGF0YS5zcGFuLmVuZCgpO1xuICB9XG5cbiAgc3Bhbk1hcC5jbGVhcigpO1xuICByZXR1cm4gcGVuZGluZ0NvdW50O1xufVxuXG5leHBvcnRzLmNsZWFudXBQZW5kaW5nU3BhbnNGb3JUcmFuc3BvcnQgPSBjbGVhbnVwUGVuZGluZ1NwYW5zRm9yVHJhbnNwb3J0O1xuZXhwb3J0cy5jb21wbGV0ZVNwYW5XaXRoUmVzdWx0cyA9IGNvbXBsZXRlU3BhbldpdGhSZXN1bHRzO1xuZXhwb3J0cy5zdG9yZVNwYW5Gb3JSZXF1ZXN0ID0gc3RvcmVTcGFuRm9yUmVxdWVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcnJlbGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/correlation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/errorCapture.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/errorCapture.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst spanUtils = __webpack_require__(/*! ../../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst spanstatus = __webpack_require__(/*! ../../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\n\n/**\n * Safe error capture utilities for MCP server instrumentation\n *\n * Ensures error reporting never interferes with MCP server operation.\n * All capture operations are wrapped in try-catch to prevent side effects.\n */\n\n\n/**\n * Captures an error without affecting MCP server operation.\n *\n * The active span already contains all MCP context (method, tool, arguments, etc.)\n * @param error - Error to capture\n * @param errorType - Classification of error type for filtering\n * @param extraData - Additional context data to include\n */\nfunction captureError(error, errorType, extraData) {\n  try {\n    const client = currentScopes.getClient();\n    if (!client) {\n      return;\n    }\n\n    const activeSpan = spanUtils.getActiveSpan();\n    if (activeSpan?.isRecording()) {\n      activeSpan.setStatus({\n        code: spanstatus.SPAN_STATUS_ERROR,\n        message: 'internal_error',\n      });\n    }\n\n    exports$1.captureException(error, {\n      mechanism: {\n        type: 'mcp_server',\n        handled: false,\n        data: {\n          error_type: errorType || 'handler_execution',\n          ...extraData,\n        },\n      },\n    });\n  } catch {\n    // noop\n  }\n}\n\nexports.captureError = captureError;\n//# sourceMappingURL=errorCapture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvZXJyb3JDYXB0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLG1HQUF3QjtBQUN0RCxrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBa0I7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsdUdBQTBCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLDZHQUE2Qjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvZXJyb3JDYXB0dXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi4vLi4vZXhwb3J0cy5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5jb25zdCBzcGFuc3RhdHVzID0gcmVxdWlyZSgnLi4vLi4vdHJhY2luZy9zcGFuc3RhdHVzLmpzJyk7XG5cbi8qKlxuICogU2FmZSBlcnJvciBjYXB0dXJlIHV0aWxpdGllcyBmb3IgTUNQIHNlcnZlciBpbnN0cnVtZW50YXRpb25cbiAqXG4gKiBFbnN1cmVzIGVycm9yIHJlcG9ydGluZyBuZXZlciBpbnRlcmZlcmVzIHdpdGggTUNQIHNlcnZlciBvcGVyYXRpb24uXG4gKiBBbGwgY2FwdHVyZSBvcGVyYXRpb25zIGFyZSB3cmFwcGVkIGluIHRyeS1jYXRjaCB0byBwcmV2ZW50IHNpZGUgZWZmZWN0cy5cbiAqL1xuXG5cbi8qKlxuICogQ2FwdHVyZXMgYW4gZXJyb3Igd2l0aG91dCBhZmZlY3RpbmcgTUNQIHNlcnZlciBvcGVyYXRpb24uXG4gKlxuICogVGhlIGFjdGl2ZSBzcGFuIGFscmVhZHkgY29udGFpbnMgYWxsIE1DUCBjb250ZXh0IChtZXRob2QsIHRvb2wsIGFyZ3VtZW50cywgZXRjLilcbiAqIEBwYXJhbSBlcnJvciAtIEVycm9yIHRvIGNhcHR1cmVcbiAqIEBwYXJhbSBlcnJvclR5cGUgLSBDbGFzc2lmaWNhdGlvbiBvZiBlcnJvciB0eXBlIGZvciBmaWx0ZXJpbmdcbiAqIEBwYXJhbSBleHRyYURhdGEgLSBBZGRpdGlvbmFsIGNvbnRleHQgZGF0YSB0byBpbmNsdWRlXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnJvciwgZXJyb3JUeXBlLCBleHRyYURhdGEpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICAgIGlmICghY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlU3BhbiA9IHNwYW5VdGlscy5nZXRBY3RpdmVTcGFuKCk7XG4gICAgaWYgKGFjdGl2ZVNwYW4/LmlzUmVjb3JkaW5nKCkpIHtcbiAgICAgIGFjdGl2ZVNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgY29kZTogc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19FUlJPUixcbiAgICAgICAgbWVzc2FnZTogJ2ludGVybmFsX2Vycm9yJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4cG9ydHMkMS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgdHlwZTogJ21jcF9zZXJ2ZXInLFxuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGVycm9yX3R5cGU6IGVycm9yVHlwZSB8fCAnaGFuZGxlcl9leGVjdXRpb24nLFxuICAgICAgICAgIC4uLmV4dHJhRGF0YSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2gge1xuICAgIC8vIG5vb3BcbiAgfVxufVxuXG5leHBvcnRzLmNhcHR1cmVFcnJvciA9IGNhcHR1cmVFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ2FwdHVyZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/errorCapture.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/handlers.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/handlers.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst object = __webpack_require__(/*! ../../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst errorCapture = __webpack_require__(/*! ./errorCapture.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/errorCapture.js\");\n\n/**\n * Handler method wrapping for MCP server instrumentation\n *\n * Provides automatic error capture and span correlation for tool, resource,\n * and prompt handlers.\n */\n\n\n/**\n * Generic function to wrap MCP server method handlers\n * @internal\n * @param serverInstance - MCP server instance\n * @param methodName - Method name to wrap (tool, resource, prompt)\n */\nfunction wrapMethodHandler(serverInstance, methodName) {\n  object.fill(serverInstance, methodName, originalMethod => {\n    return function ( name, ...args) {\n      const handler = args[args.length - 1];\n\n      if (typeof handler !== 'function') {\n        return (originalMethod ).call(this, name, ...args);\n      }\n\n      const wrappedHandler = createWrappedHandler(handler , methodName, name);\n      return (originalMethod ).call(this, name, ...args.slice(0, -1), wrappedHandler);\n    };\n  });\n}\n\n/**\n * Creates a wrapped handler with span correlation and error capture\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @returns Wrapped handler function\n */\nfunction createWrappedHandler(originalHandler, methodName, handlerName) {\n  return function ( ...handlerArgs) {\n    try {\n      return createErrorCapturingHandler.call(this, originalHandler, methodName, handlerName, handlerArgs);\n    } catch (error) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('MCP handler wrapping failed:', error);\n      return originalHandler.apply(this, handlerArgs);\n    }\n  };\n}\n\n/**\n * Creates an error-capturing wrapper for handler execution\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @param handlerArgs - Handler arguments\n * @param extraHandlerData - Additional handler context\n * @returns Handler execution result\n */\nfunction createErrorCapturingHandler(\n\n  originalHandler,\n  methodName,\n  handlerName,\n  handlerArgs,\n) {\n  try {\n    const result = originalHandler.apply(this, handlerArgs);\n\n    if (result && typeof result === 'object' && typeof (result ).then === 'function') {\n      return Promise.resolve(result).catch(error => {\n        captureHandlerError(error, methodName, handlerName);\n        throw error;\n      });\n    }\n\n    return result;\n  } catch (error) {\n    captureHandlerError(error , methodName, handlerName);\n    throw error;\n  }\n}\n\n/**\n * Captures handler execution errors based on handler type\n * @internal\n * @param error - Error to capture\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n */\nfunction captureHandlerError(error, methodName, handlerName) {\n  try {\n    const extraData = {};\n\n    if (methodName === 'tool') {\n      extraData.tool_name = handlerName;\n\n      if (\n        error.name === 'ProtocolValidationError' ||\n        error.message.includes('validation') ||\n        error.message.includes('protocol')\n      ) {\n        errorCapture.captureError(error, 'validation', extraData);\n      } else if (\n        error.name === 'ServerTimeoutError' ||\n        error.message.includes('timed out') ||\n        error.message.includes('timeout')\n      ) {\n        errorCapture.captureError(error, 'timeout', extraData);\n      } else {\n        errorCapture.captureError(error, 'tool_execution', extraData);\n      }\n    } else if (methodName === 'resource') {\n      extraData.resource_uri = handlerName;\n      errorCapture.captureError(error, 'resource_execution', extraData);\n    } else if (methodName === 'prompt') {\n      extraData.prompt_name = handlerName;\n      errorCapture.captureError(error, 'prompt_execution', extraData);\n    }\n  } catch (captureErr) {\n    // noop\n  }\n}\n\n/**\n * Wraps tool handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapToolHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'tool');\n}\n\n/**\n * Wraps resource handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapResourceHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'resource');\n}\n\n/**\n * Wraps prompt handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapPromptHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'prompt');\n}\n\n/**\n * Wraps all MCP handler types (tool, resource, prompt) for span correlation\n * @param serverInstance - MCP server instance\n */\nfunction wrapAllMCPHandlers(serverInstance) {\n  wrapToolHandlers(serverInstance);\n  wrapResourceHandlers(serverInstance);\n  wrapPromptHandlers(serverInstance);\n}\n\nexports.wrapAllMCPHandlers = wrapAllMCPHandlers;\nexports.wrapPromptHandlers = wrapPromptHandlers;\nexports.wrapResourceHandlers = wrapResourceHandlers;\nexports.wrapToolHandlers = wrapToolHandlers;\n//# sourceMappingURL=handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/handlers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst object = __webpack_require__(/*! ../../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/handlers.js\");\nconst transport = __webpack_require__(/*! ./transport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/transport.js\");\nconst validation = __webpack_require__(/*! ./validation.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js\");\n\n/**\n * Tracks wrapped MCP server instances to prevent double-wrapping\n * @internal\n */\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n * Automatically instruments transport methods and handler functions for comprehensive monitoring.\n *\n * @example\n * ```typescript\n * import * as Sentry from '@sentry/core';\n * import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\n * import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';\n *\n * const server = Sentry.wrapMcpServerWithSentry(\n *   new McpServer({ name: \"my-server\", version: \"1.0.0\" })\n * );\n *\n * const transport = new StreamableHTTPServerTransport();\n * await server.connect(transport);\n * ```\n *\n * @param mcpServerInstance - MCP server instance to instrument\n * @returns Instrumented server instance (same reference)\n */\nfunction wrapMcpServerWithSentry(mcpServerInstance) {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  if (!validation.validateMcpServerInstance(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  const serverInstance = mcpServerInstance ;\n\n  object.fill(serverInstance, 'connect', originalConnect => {\n    return async function ( transport$1, ...restArgs) {\n      const result = await (originalConnect ).call(\n        this,\n        transport$1,\n        ...restArgs,\n      );\n\n      transport.wrapTransportOnMessage(transport$1);\n      transport.wrapTransportSend(transport$1);\n      transport.wrapTransportOnClose(transport$1);\n      transport.wrapTransportError(transport$1);\n\n      return result;\n    };\n  });\n\n  handlers.wrapAllMCPHandlers(serverInstance);\n\n  wrappedMcpServerInstances.add(mcpServerInstance);\n  return mcpServerInstance ;\n}\n\nexports.wrapMcpServerWithSentry = wrapMcpServerWithSentry;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZUFBZSxtQkFBTyxDQUFDLGlHQUF1QjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQyw2R0FBZTtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBZ0I7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsaUhBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QixZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0EscUJBQXFCLHFDQUFxQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL29iamVjdC5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5jb25zdCB0cmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC5qcycpO1xuY29uc3QgdmFsaWRhdGlvbiA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbi5qcycpO1xuXG4vKipcbiAqIFRyYWNrcyB3cmFwcGVkIE1DUCBzZXJ2ZXIgaW5zdGFuY2VzIHRvIHByZXZlbnQgZG91YmxlLXdyYXBwaW5nXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3Qgd3JhcHBlZE1jcFNlcnZlckluc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCk7XG5cbi8qKlxuICogV3JhcHMgYSBNQ1AgU2VydmVyIGluc3RhbmNlIGZyb20gdGhlIGBAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrYCBwYWNrYWdlIHdpdGggU2VudHJ5IGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBDb21wYXRpYmxlIHdpdGggdmVyc2lvbnMgYF4xLjkuMGAgb2YgdGhlIGBAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrYCBwYWNrYWdlLlxuICogQXV0b21hdGljYWxseSBpbnN0cnVtZW50cyB0cmFuc3BvcnQgbWV0aG9kcyBhbmQgaGFuZGxlciBmdW5jdGlvbnMgZm9yIGNvbXByZWhlbnNpdmUgbW9uaXRvcmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvY29yZSc7XG4gKiBpbXBvcnQgeyBNY3BTZXJ2ZXIgfSBmcm9tICdAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL3NlcnZlci9tY3AuanMnO1xuICogaW1wb3J0IHsgU3RyZWFtYWJsZUhUVFBTZXJ2ZXJUcmFuc3BvcnQgfSBmcm9tICdAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL3NlcnZlci9zdHJlYW1hYmxlSHR0cC5qcyc7XG4gKlxuICogY29uc3Qgc2VydmVyID0gU2VudHJ5LndyYXBNY3BTZXJ2ZXJXaXRoU2VudHJ5KFxuICogICBuZXcgTWNwU2VydmVyKHsgbmFtZTogXCJteS1zZXJ2ZXJcIiwgdmVyc2lvbjogXCIxLjAuMFwiIH0pXG4gKiApO1xuICpcbiAqIGNvbnN0IHRyYW5zcG9ydCA9IG5ldyBTdHJlYW1hYmxlSFRUUFNlcnZlclRyYW5zcG9ydCgpO1xuICogYXdhaXQgc2VydmVyLmNvbm5lY3QodHJhbnNwb3J0KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtY3BTZXJ2ZXJJbnN0YW5jZSAtIE1DUCBzZXJ2ZXIgaW5zdGFuY2UgdG8gaW5zdHJ1bWVudFxuICogQHJldHVybnMgSW5zdHJ1bWVudGVkIHNlcnZlciBpbnN0YW5jZSAoc2FtZSByZWZlcmVuY2UpXG4gKi9cbmZ1bmN0aW9uIHdyYXBNY3BTZXJ2ZXJXaXRoU2VudHJ5KG1jcFNlcnZlckluc3RhbmNlKSB7XG4gIGlmICh3cmFwcGVkTWNwU2VydmVySW5zdGFuY2VzLmhhcyhtY3BTZXJ2ZXJJbnN0YW5jZSkpIHtcbiAgICByZXR1cm4gbWNwU2VydmVySW5zdGFuY2U7XG4gIH1cblxuICBpZiAoIXZhbGlkYXRpb24udmFsaWRhdGVNY3BTZXJ2ZXJJbnN0YW5jZShtY3BTZXJ2ZXJJbnN0YW5jZSkpIHtcbiAgICByZXR1cm4gbWNwU2VydmVySW5zdGFuY2U7XG4gIH1cblxuICBjb25zdCBzZXJ2ZXJJbnN0YW5jZSA9IG1jcFNlcnZlckluc3RhbmNlIDtcblxuICBvYmplY3QuZmlsbChzZXJ2ZXJJbnN0YW5jZSwgJ2Nvbm5lY3QnLCBvcmlnaW5hbENvbm5lY3QgPT4ge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAoIHRyYW5zcG9ydCQxLCAuLi5yZXN0QXJncykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKG9yaWdpbmFsQ29ubmVjdCApLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRyYW5zcG9ydCQxLFxuICAgICAgICAuLi5yZXN0QXJncyxcbiAgICAgICk7XG5cbiAgICAgIHRyYW5zcG9ydC53cmFwVHJhbnNwb3J0T25NZXNzYWdlKHRyYW5zcG9ydCQxKTtcbiAgICAgIHRyYW5zcG9ydC53cmFwVHJhbnNwb3J0U2VuZCh0cmFuc3BvcnQkMSk7XG4gICAgICB0cmFuc3BvcnQud3JhcFRyYW5zcG9ydE9uQ2xvc2UodHJhbnNwb3J0JDEpO1xuICAgICAgdHJhbnNwb3J0LndyYXBUcmFuc3BvcnRFcnJvcih0cmFuc3BvcnQkMSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfSk7XG5cbiAgaGFuZGxlcnMud3JhcEFsbE1DUEhhbmRsZXJzKHNlcnZlckluc3RhbmNlKTtcblxuICB3cmFwcGVkTWNwU2VydmVySW5zdGFuY2VzLmFkZChtY3BTZXJ2ZXJJbnN0YW5jZSk7XG4gIHJldHVybiBtY3BTZXJ2ZXJJbnN0YW5jZSA7XG59XG5cbmV4cG9ydHMud3JhcE1jcFNlcnZlcldpdGhTZW50cnkgPSB3cmFwTWNwU2VydmVyV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/methodConfig.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/methodConfig.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\n\n/**\n * Method configuration and request processing for MCP server instrumentation\n */\n\n\n/**\n * Configuration for MCP methods to extract targets and arguments\n * @internal Maps method names to their extraction configuration\n */\nconst METHOD_CONFIGS = {\n  'tools/call': {\n    targetField: 'name',\n    targetAttribute: attributes.MCP_TOOL_NAME_ATTRIBUTE,\n    captureArguments: true,\n    argumentsField: 'arguments',\n  },\n  'resources/read': {\n    targetField: 'uri',\n    targetAttribute: attributes.MCP_RESOURCE_URI_ATTRIBUTE,\n    captureUri: true,\n  },\n  'resources/subscribe': {\n    targetField: 'uri',\n    targetAttribute: attributes.MCP_RESOURCE_URI_ATTRIBUTE,\n  },\n  'resources/unsubscribe': {\n    targetField: 'uri',\n    targetAttribute: attributes.MCP_RESOURCE_URI_ATTRIBUTE,\n  },\n  'prompts/get': {\n    targetField: 'name',\n    targetAttribute: attributes.MCP_PROMPT_NAME_ATTRIBUTE,\n    captureName: true,\n    captureArguments: true,\n    argumentsField: 'arguments',\n  },\n};\n\n/**\n * Extracts target info from method and params based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Target name and attributes for span instrumentation\n */\nfunction extractTargetInfo(\n  method,\n  params,\n)\n\n {\n  const config = METHOD_CONFIGS[method ];\n  if (!config) {\n    return { attributes: {} };\n  }\n\n  const target =\n    config.targetField && typeof params?.[config.targetField] === 'string'\n      ? (params[config.targetField] )\n      : undefined;\n\n  return {\n    target,\n    attributes: target && config.targetAttribute ? { [config.targetAttribute]: target } : {},\n  };\n}\n\n/**\n * Extracts request arguments based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Arguments as span attributes with mcp.request.argument prefix\n */\nfunction getRequestArguments(method, params) {\n  const args = {};\n  const config = METHOD_CONFIGS[method ];\n\n  if (!config) {\n    return args;\n  }\n\n  if (config.captureArguments && config.argumentsField && params?.[config.argumentsField]) {\n    const argumentsObj = params[config.argumentsField];\n    if (typeof argumentsObj === 'object' && argumentsObj !== null) {\n      for (const [key, value] of Object.entries(argumentsObj )) {\n        args[`${attributes.MCP_REQUEST_ARGUMENT}.${key.toLowerCase()}`] = JSON.stringify(value);\n      }\n    }\n  }\n\n  if (config.captureUri && params?.uri) {\n    args[`${attributes.MCP_REQUEST_ARGUMENT}.uri`] = JSON.stringify(params.uri);\n  }\n\n  if (config.captureName && params?.name) {\n    args[`${attributes.MCP_REQUEST_ARGUMENT}.name`] = JSON.stringify(params.name);\n  }\n\n  return args;\n}\n\nexports.extractTargetInfo = extractTargetInfo;\nexports.getRequestArguments = getRequestArguments;\n//# sourceMappingURL=methodConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvbWV0aG9kQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLGlIQUFpQjs7QUFFNUM7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFEQUFxRCxtQ0FBbUMsSUFBSTtBQUM1RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDLEdBQUcsa0JBQWtCO0FBQ3JFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDOztBQUVBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7O0FBRUE7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbWNwLXNlcnZlci9tZXRob2RDb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZXMuanMnKTtcblxuLyoqXG4gKiBNZXRob2QgY29uZmlndXJhdGlvbiBhbmQgcmVxdWVzdCBwcm9jZXNzaW5nIGZvciBNQ1Agc2VydmVyIGluc3RydW1lbnRhdGlvblxuICovXG5cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciBNQ1AgbWV0aG9kcyB0byBleHRyYWN0IHRhcmdldHMgYW5kIGFyZ3VtZW50c1xuICogQGludGVybmFsIE1hcHMgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIGV4dHJhY3Rpb24gY29uZmlndXJhdGlvblxuICovXG5jb25zdCBNRVRIT0RfQ09ORklHUyA9IHtcbiAgJ3Rvb2xzL2NhbGwnOiB7XG4gICAgdGFyZ2V0RmllbGQ6ICduYW1lJyxcbiAgICB0YXJnZXRBdHRyaWJ1dGU6IGF0dHJpYnV0ZXMuTUNQX1RPT0xfTkFNRV9BVFRSSUJVVEUsXG4gICAgY2FwdHVyZUFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcmd1bWVudHNGaWVsZDogJ2FyZ3VtZW50cycsXG4gIH0sXG4gICdyZXNvdXJjZXMvcmVhZCc6IHtcbiAgICB0YXJnZXRGaWVsZDogJ3VyaScsXG4gICAgdGFyZ2V0QXR0cmlidXRlOiBhdHRyaWJ1dGVzLk1DUF9SRVNPVVJDRV9VUklfQVRUUklCVVRFLFxuICAgIGNhcHR1cmVVcmk6IHRydWUsXG4gIH0sXG4gICdyZXNvdXJjZXMvc3Vic2NyaWJlJzoge1xuICAgIHRhcmdldEZpZWxkOiAndXJpJyxcbiAgICB0YXJnZXRBdHRyaWJ1dGU6IGF0dHJpYnV0ZXMuTUNQX1JFU09VUkNFX1VSSV9BVFRSSUJVVEUsXG4gIH0sXG4gICdyZXNvdXJjZXMvdW5zdWJzY3JpYmUnOiB7XG4gICAgdGFyZ2V0RmllbGQ6ICd1cmknLFxuICAgIHRhcmdldEF0dHJpYnV0ZTogYXR0cmlidXRlcy5NQ1BfUkVTT1VSQ0VfVVJJX0FUVFJJQlVURSxcbiAgfSxcbiAgJ3Byb21wdHMvZ2V0Jzoge1xuICAgIHRhcmdldEZpZWxkOiAnbmFtZScsXG4gICAgdGFyZ2V0QXR0cmlidXRlOiBhdHRyaWJ1dGVzLk1DUF9QUk9NUFRfTkFNRV9BVFRSSUJVVEUsXG4gICAgY2FwdHVyZU5hbWU6IHRydWUsXG4gICAgY2FwdHVyZUFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcmd1bWVudHNGaWVsZDogJ2FyZ3VtZW50cycsXG4gIH0sXG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHRhcmdldCBpbmZvIGZyb20gbWV0aG9kIGFuZCBwYXJhbXMgYmFzZWQgb24gbWV0aG9kIHR5cGVcbiAqIEBwYXJhbSBtZXRob2QgLSBNQ1AgbWV0aG9kIG5hbWVcbiAqIEBwYXJhbSBwYXJhbXMgLSBNZXRob2QgcGFyYW1ldGVyc1xuICogQHJldHVybnMgVGFyZ2V0IG5hbWUgYW5kIGF0dHJpYnV0ZXMgZm9yIHNwYW4gaW5zdHJ1bWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RUYXJnZXRJbmZvKFxuICBtZXRob2QsXG4gIHBhcmFtcyxcbilcblxuIHtcbiAgY29uc3QgY29uZmlnID0gTUVUSE9EX0NPTkZJR1NbbWV0aG9kIF07XG4gIGlmICghY29uZmlnKSB7XG4gICAgcmV0dXJuIHsgYXR0cmlidXRlczoge30gfTtcbiAgfVxuXG4gIGNvbnN0IHRhcmdldCA9XG4gICAgY29uZmlnLnRhcmdldEZpZWxkICYmIHR5cGVvZiBwYXJhbXM/Lltjb25maWcudGFyZ2V0RmllbGRdID09PSAnc3RyaW5nJ1xuICAgICAgPyAocGFyYW1zW2NvbmZpZy50YXJnZXRGaWVsZF0gKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIHtcbiAgICB0YXJnZXQsXG4gICAgYXR0cmlidXRlczogdGFyZ2V0ICYmIGNvbmZpZy50YXJnZXRBdHRyaWJ1dGUgPyB7IFtjb25maWcudGFyZ2V0QXR0cmlidXRlXTogdGFyZ2V0IH0gOiB7fSxcbiAgfTtcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyByZXF1ZXN0IGFyZ3VtZW50cyBiYXNlZCBvbiBtZXRob2QgdHlwZVxuICogQHBhcmFtIG1ldGhvZCAtIE1DUCBtZXRob2QgbmFtZVxuICogQHBhcmFtIHBhcmFtcyAtIE1ldGhvZCBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyBBcmd1bWVudHMgYXMgc3BhbiBhdHRyaWJ1dGVzIHdpdGggbWNwLnJlcXVlc3QuYXJndW1lbnQgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIGdldFJlcXVlc3RBcmd1bWVudHMobWV0aG9kLCBwYXJhbXMpIHtcbiAgY29uc3QgYXJncyA9IHt9O1xuICBjb25zdCBjb25maWcgPSBNRVRIT0RfQ09ORklHU1ttZXRob2QgXTtcblxuICBpZiAoIWNvbmZpZykge1xuICAgIHJldHVybiBhcmdzO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5jYXB0dXJlQXJndW1lbnRzICYmIGNvbmZpZy5hcmd1bWVudHNGaWVsZCAmJiBwYXJhbXM/Lltjb25maWcuYXJndW1lbnRzRmllbGRdKSB7XG4gICAgY29uc3QgYXJndW1lbnRzT2JqID0gcGFyYW1zW2NvbmZpZy5hcmd1bWVudHNGaWVsZF07XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNPYmogPT09ICdvYmplY3QnICYmIGFyZ3VtZW50c09iaiAhPT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXJndW1lbnRzT2JqICkpIHtcbiAgICAgICAgYXJnc1tgJHthdHRyaWJ1dGVzLk1DUF9SRVFVRVNUX0FSR1VNRU5UfS4ke2tleS50b0xvd2VyQ2FzZSgpfWBdID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjb25maWcuY2FwdHVyZVVyaSAmJiBwYXJhbXM/LnVyaSkge1xuICAgIGFyZ3NbYCR7YXR0cmlidXRlcy5NQ1BfUkVRVUVTVF9BUkdVTUVOVH0udXJpYF0gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMudXJpKTtcbiAgfVxuXG4gIGlmIChjb25maWcuY2FwdHVyZU5hbWUgJiYgcGFyYW1zPy5uYW1lKSB7XG4gICAgYXJnc1tgJHthdHRyaWJ1dGVzLk1DUF9SRVFVRVNUX0FSR1VNRU5UfS5uYW1lYF0gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMubmFtZSk7XG4gIH1cblxuICByZXR1cm4gYXJncztcbn1cblxuZXhwb3J0cy5leHRyYWN0VGFyZ2V0SW5mbyA9IGV4dHJhY3RUYXJnZXRJbmZvO1xuZXhwb3J0cy5nZXRSZXF1ZXN0QXJndW1lbnRzID0gZ2V0UmVxdWVzdEFyZ3VtZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGhvZENvbmZpZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/methodConfig.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/piiFiltering.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/piiFiltering.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\n\n/**\n * PII attributes that should be removed when sendDefaultPii is false\n * @internal\n */\nconst PII_ATTRIBUTES = new Set([\n  attributes.CLIENT_ADDRESS_ATTRIBUTE,\n  attributes.CLIENT_PORT_ATTRIBUTE,\n  attributes.MCP_LOGGING_MESSAGE_ATTRIBUTE,\n  attributes.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE,\n  attributes.MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE,\n  attributes.MCP_RESOURCE_URI_ATTRIBUTE,\n  attributes.MCP_TOOL_RESULT_CONTENT_ATTRIBUTE,\n]);\n\n/**\n * Checks if an attribute key should be considered PII.\n *\n * Returns true for:\n * - Explicit PII attributes (client.address, client.port, mcp.logging.message, etc.)\n * - All request arguments (mcp.request.argument.*)\n * - Tool and prompt result content (mcp.tool.result.*, mcp.prompt.result.*) except metadata\n *\n * Preserves metadata attributes ending with _count, _error, or .is_error as they don't contain sensitive data.\n *\n * @param key - Attribute key to evaluate\n * @returns true if the attribute should be filtered out (is PII), false if it should be preserved\n * @internal\n */\nfunction isPiiAttribute(key) {\n  if (PII_ATTRIBUTES.has(key)) {\n    return true;\n  }\n\n  if (key.startsWith(`${attributes.MCP_REQUEST_ARGUMENT}.`)) {\n    return true;\n  }\n\n  if (key.startsWith(`${attributes.MCP_TOOL_RESULT_PREFIX}.`) || key.startsWith(`${attributes.MCP_PROMPT_RESULT_PREFIX}.`)) {\n    if (!key.endsWith('_count') && !key.endsWith('_error') && !key.endsWith('.is_error')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Removes PII attributes from span data when sendDefaultPii is false\n * @param spanData - Raw span attributes\n * @param sendDefaultPii - Whether to include PII data\n * @returns Filtered span attributes\n */\nfunction filterMcpPiiFromSpanData(\n  spanData,\n  sendDefaultPii,\n) {\n  if (sendDefaultPii) {\n    return spanData ;\n  }\n\n  return Object.entries(spanData).reduce(\n    (acc, [key, value]) => {\n      if (!isPiiAttribute(key)) {\n        acc[key] = value ;\n      }\n      return acc;\n    },\n    {} ,\n  );\n}\n\nexports.filterMcpPiiFromSpanData = filterMcpPiiFromSpanData;\n//# sourceMappingURL=piiFiltering.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvcGlpRmlsdGVyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLGlIQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQTs7QUFFQSx3QkFBd0Isa0NBQWtDLHlCQUF5QixvQ0FBb0M7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsT0FBTztBQUNQO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbWNwLXNlcnZlci9waWlGaWx0ZXJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZXMuanMnKTtcblxuLyoqXG4gKiBQSUkgYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBQSUlfQVRUUklCVVRFUyA9IG5ldyBTZXQoW1xuICBhdHRyaWJ1dGVzLkNMSUVOVF9BRERSRVNTX0FUVFJJQlVURSxcbiAgYXR0cmlidXRlcy5DTElFTlRfUE9SVF9BVFRSSUJVVEUsXG4gIGF0dHJpYnV0ZXMuTUNQX0xPR0dJTkdfTUVTU0FHRV9BVFRSSUJVVEUsXG4gIGF0dHJpYnV0ZXMuTUNQX1BST01QVF9SRVNVTFRfREVTQ1JJUFRJT05fQVRUUklCVVRFLFxuICBhdHRyaWJ1dGVzLk1DUF9QUk9NUFRfUkVTVUxUX01FU1NBR0VfQ09OVEVOVF9BVFRSSUJVVEUsXG4gIGF0dHJpYnV0ZXMuTUNQX1JFU09VUkNFX1VSSV9BVFRSSUJVVEUsXG4gIGF0dHJpYnV0ZXMuTUNQX1RPT0xfUkVTVUxUX0NPTlRFTlRfQVRUUklCVVRFLFxuXSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGF0dHJpYnV0ZSBrZXkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgUElJLlxuICpcbiAqIFJldHVybnMgdHJ1ZSBmb3I6XG4gKiAtIEV4cGxpY2l0IFBJSSBhdHRyaWJ1dGVzIChjbGllbnQuYWRkcmVzcywgY2xpZW50LnBvcnQsIG1jcC5sb2dnaW5nLm1lc3NhZ2UsIGV0Yy4pXG4gKiAtIEFsbCByZXF1ZXN0IGFyZ3VtZW50cyAobWNwLnJlcXVlc3QuYXJndW1lbnQuKilcbiAqIC0gVG9vbCBhbmQgcHJvbXB0IHJlc3VsdCBjb250ZW50IChtY3AudG9vbC5yZXN1bHQuKiwgbWNwLnByb21wdC5yZXN1bHQuKikgZXhjZXB0IG1ldGFkYXRhXG4gKlxuICogUHJlc2VydmVzIG1ldGFkYXRhIGF0dHJpYnV0ZXMgZW5kaW5nIHdpdGggX2NvdW50LCBfZXJyb3IsIG9yIC5pc19lcnJvciBhcyB0aGV5IGRvbid0IGNvbnRhaW4gc2Vuc2l0aXZlIGRhdGEuXG4gKlxuICogQHBhcmFtIGtleSAtIEF0dHJpYnV0ZSBrZXkgdG8gZXZhbHVhdGVcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgZmlsdGVyZWQgb3V0IChpcyBQSUkpLCBmYWxzZSBpZiBpdCBzaG91bGQgYmUgcHJlc2VydmVkXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNQaWlBdHRyaWJ1dGUoa2V5KSB7XG4gIGlmIChQSUlfQVRUUklCVVRFUy5oYXMoa2V5KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGtleS5zdGFydHNXaXRoKGAke2F0dHJpYnV0ZXMuTUNQX1JFUVVFU1RfQVJHVU1FTlR9LmApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoa2V5LnN0YXJ0c1dpdGgoYCR7YXR0cmlidXRlcy5NQ1BfVE9PTF9SRVNVTFRfUFJFRklYfS5gKSB8fCBrZXkuc3RhcnRzV2l0aChgJHthdHRyaWJ1dGVzLk1DUF9QUk9NUFRfUkVTVUxUX1BSRUZJWH0uYCkpIHtcbiAgICBpZiAoIWtleS5lbmRzV2l0aCgnX2NvdW50JykgJiYgIWtleS5lbmRzV2l0aCgnX2Vycm9yJykgJiYgIWtleS5lbmRzV2l0aCgnLmlzX2Vycm9yJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIFBJSSBhdHRyaWJ1dGVzIGZyb20gc3BhbiBkYXRhIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIEBwYXJhbSBzcGFuRGF0YSAtIFJhdyBzcGFuIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSBzZW5kRGVmYXVsdFBpaSAtIFdoZXRoZXIgdG8gaW5jbHVkZSBQSUkgZGF0YVxuICogQHJldHVybnMgRmlsdGVyZWQgc3BhbiBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIGZpbHRlck1jcFBpaUZyb21TcGFuRGF0YShcbiAgc3BhbkRhdGEsXG4gIHNlbmREZWZhdWx0UGlpLFxuKSB7XG4gIGlmIChzZW5kRGVmYXVsdFBpaSkge1xuICAgIHJldHVybiBzcGFuRGF0YSA7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoc3BhbkRhdGEpLnJlZHVjZShcbiAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICghaXNQaWlBdHRyaWJ1dGUoa2V5KSkge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlIDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSxcbiAgICB7fSAsXG4gICk7XG59XG5cbmV4cG9ydHMuZmlsdGVyTWNwUGlpRnJvbVNwYW5EYXRhID0gZmlsdGVyTWNwUGlpRnJvbVNwYW5EYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlpRmlsdGVyaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/piiFiltering.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/resultExtraction.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/resultExtraction.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\nconst validation = __webpack_require__(/*! ./validation.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js\");\n\n/**\n * Result extraction functions for MCP server instrumentation\n *\n * Handles extraction of attributes from tool and prompt execution results.\n */\n\n\n/**\n * Build attributes for tool result content items\n * @param content - Array of content items from tool result\n * @returns Attributes extracted from each content item including type, text, mime type, URI, and resource info\n */\nfunction buildAllContentItemAttributes(content) {\n  const attributes$1 = {\n    [attributes.MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE]: content.length,\n  };\n\n  for (const [i, item] of content.entries()) {\n    if (!validation.isValidContentItem(item)) {\n      continue;\n    }\n\n    const prefix = content.length === 1 ? 'mcp.tool.result' : `mcp.tool.result.${i}`;\n\n    const safeSet = (key, value) => {\n      if (typeof value === 'string') {\n        attributes$1[`${prefix}.${key}`] = value;\n      }\n    };\n\n    safeSet('content_type', item.type);\n    safeSet('mime_type', item.mimeType);\n    safeSet('uri', item.uri);\n    safeSet('name', item.name);\n\n    if (typeof item.text === 'string') {\n      attributes$1[`${prefix}.content`] = item.text;\n    }\n\n    if (typeof item.data === 'string') {\n      attributes$1[`${prefix}.data_size`] = item.data.length;\n    }\n\n    const resource = item.resource;\n    if (validation.isValidContentItem(resource)) {\n      safeSet('resource_uri', resource.uri);\n      safeSet('resource_mime_type', resource.mimeType);\n    }\n  }\n\n  return attributes$1;\n}\n\n/**\n * Extract tool result attributes for span instrumentation\n * @param result - Tool execution result\n * @returns Attributes extracted from tool result content\n */\nfunction extractToolResultAttributes(result) {\n  if (!validation.isValidContentItem(result)) {\n    return {};\n  }\n\n  const attributes$1 = Array.isArray(result.content) ? buildAllContentItemAttributes(result.content) : {};\n\n  if (typeof result.isError === 'boolean') {\n    attributes$1[attributes.MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE] = result.isError;\n  }\n\n  return attributes$1;\n}\n\n/**\n * Extract prompt result attributes for span instrumentation\n * @param result - Prompt execution result\n * @returns Attributes extracted from prompt result\n */\nfunction extractPromptResultAttributes(result) {\n  const attributes$1 = {};\n  if (!validation.isValidContentItem(result)) {\n    return attributes$1;\n  }\n\n  if (typeof result.description === 'string') {\n    attributes$1[attributes.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE] = result.description;\n  }\n\n  if (Array.isArray(result.messages)) {\n    attributes$1[attributes.MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE] = result.messages.length;\n\n    const messages = result.messages;\n    for (const [i, message] of messages.entries()) {\n      if (!validation.isValidContentItem(message)) {\n        continue;\n      }\n\n      const prefix = messages.length === 1 ? 'mcp.prompt.result' : `mcp.prompt.result.${i}`;\n\n      const safeSet = (key, value) => {\n        if (typeof value === 'string') {\n          const attrName = messages.length === 1 ? `${prefix}.message_${key}` : `${prefix}.${key}`;\n          attributes$1[attrName] = value;\n        }\n      };\n\n      safeSet('role', message.role);\n\n      if (validation.isValidContentItem(message.content)) {\n        const content = message.content;\n        if (typeof content.text === 'string') {\n          const attrName = messages.length === 1 ? `${prefix}.message_content` : `${prefix}.content`;\n          attributes$1[attrName] = content.text;\n        }\n      }\n    }\n  }\n\n  return attributes$1;\n}\n\nexports.extractPromptResultAttributes = extractPromptResultAttributes;\nexports.extractToolResultAttributes = extractToolResultAttributes;\n//# sourceMappingURL=resultExtraction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvcmVzdWx0RXh0cmFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyxpSEFBaUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsaUhBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUZBQWlGLEVBQUU7O0FBRW5GO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTyxHQUFHLElBQUk7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCOztBQUVBO0FBQ0Esc0JBQXNCLE9BQU87QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0ZBQXdGLEVBQUU7O0FBRTFGO0FBQ0E7QUFDQSxzREFBc0QsT0FBTyxXQUFXLElBQUksT0FBTyxPQUFPLEdBQUcsSUFBSTtBQUNqRztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELE9BQU8sdUJBQXVCLE9BQU87QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tY3Atc2VydmVyL3Jlc3VsdEV4dHJhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IHZhbGlkYXRpb24gPSByZXF1aXJlKCcuL3ZhbGlkYXRpb24uanMnKTtcblxuLyoqXG4gKiBSZXN1bHQgZXh0cmFjdGlvbiBmdW5jdGlvbnMgZm9yIE1DUCBzZXJ2ZXIgaW5zdHJ1bWVudGF0aW9uXG4gKlxuICogSGFuZGxlcyBleHRyYWN0aW9uIG9mIGF0dHJpYnV0ZXMgZnJvbSB0b29sIGFuZCBwcm9tcHQgZXhlY3V0aW9uIHJlc3VsdHMuXG4gKi9cblxuXG4vKipcbiAqIEJ1aWxkIGF0dHJpYnV0ZXMgZm9yIHRvb2wgcmVzdWx0IGNvbnRlbnQgaXRlbXNcbiAqIEBwYXJhbSBjb250ZW50IC0gQXJyYXkgb2YgY29udGVudCBpdGVtcyBmcm9tIHRvb2wgcmVzdWx0XG4gKiBAcmV0dXJucyBBdHRyaWJ1dGVzIGV4dHJhY3RlZCBmcm9tIGVhY2ggY29udGVudCBpdGVtIGluY2x1ZGluZyB0eXBlLCB0ZXh0LCBtaW1lIHR5cGUsIFVSSSwgYW5kIHJlc291cmNlIGluZm9cbiAqL1xuZnVuY3Rpb24gYnVpbGRBbGxDb250ZW50SXRlbUF0dHJpYnV0ZXMoY29udGVudCkge1xuICBjb25zdCBhdHRyaWJ1dGVzJDEgPSB7XG4gICAgW2F0dHJpYnV0ZXMuTUNQX1RPT0xfUkVTVUxUX0NPTlRFTlRfQ09VTlRfQVRUUklCVVRFXTogY29udGVudC5sZW5ndGgsXG4gIH07XG5cbiAgZm9yIChjb25zdCBbaSwgaXRlbV0gb2YgY29udGVudC5lbnRyaWVzKCkpIHtcbiAgICBpZiAoIXZhbGlkYXRpb24uaXNWYWxpZENvbnRlbnRJdGVtKGl0ZW0pKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmVmaXggPSBjb250ZW50Lmxlbmd0aCA9PT0gMSA/ICdtY3AudG9vbC5yZXN1bHQnIDogYG1jcC50b29sLnJlc3VsdC4ke2l9YDtcblxuICAgIGNvbnN0IHNhZmVTZXQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYXR0cmlidXRlcyQxW2Ake3ByZWZpeH0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2FmZVNldCgnY29udGVudF90eXBlJywgaXRlbS50eXBlKTtcbiAgICBzYWZlU2V0KCdtaW1lX3R5cGUnLCBpdGVtLm1pbWVUeXBlKTtcbiAgICBzYWZlU2V0KCd1cmknLCBpdGVtLnVyaSk7XG4gICAgc2FmZVNldCgnbmFtZScsIGl0ZW0ubmFtZSk7XG5cbiAgICBpZiAodHlwZW9mIGl0ZW0udGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGF0dHJpYnV0ZXMkMVtgJHtwcmVmaXh9LmNvbnRlbnRgXSA9IGl0ZW0udGV4dDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGl0ZW0uZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGF0dHJpYnV0ZXMkMVtgJHtwcmVmaXh9LmRhdGFfc2l6ZWBdID0gaXRlbS5kYXRhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IGl0ZW0ucmVzb3VyY2U7XG4gICAgaWYgKHZhbGlkYXRpb24uaXNWYWxpZENvbnRlbnRJdGVtKHJlc291cmNlKSkge1xuICAgICAgc2FmZVNldCgncmVzb3VyY2VfdXJpJywgcmVzb3VyY2UudXJpKTtcbiAgICAgIHNhZmVTZXQoJ3Jlc291cmNlX21pbWVfdHlwZScsIHJlc291cmNlLm1pbWVUeXBlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0cmlidXRlcyQxO1xufVxuXG4vKipcbiAqIEV4dHJhY3QgdG9vbCByZXN1bHQgYXR0cmlidXRlcyBmb3Igc3BhbiBpbnN0cnVtZW50YXRpb25cbiAqIEBwYXJhbSByZXN1bHQgLSBUb29sIGV4ZWN1dGlvbiByZXN1bHRcbiAqIEByZXR1cm5zIEF0dHJpYnV0ZXMgZXh0cmFjdGVkIGZyb20gdG9vbCByZXN1bHQgY29udGVudFxuICovXG5mdW5jdGlvbiBleHRyYWN0VG9vbFJlc3VsdEF0dHJpYnV0ZXMocmVzdWx0KSB7XG4gIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkQ29udGVudEl0ZW0ocmVzdWx0KSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGF0dHJpYnV0ZXMkMSA9IEFycmF5LmlzQXJyYXkocmVzdWx0LmNvbnRlbnQpID8gYnVpbGRBbGxDb250ZW50SXRlbUF0dHJpYnV0ZXMocmVzdWx0LmNvbnRlbnQpIDoge307XG5cbiAgaWYgKHR5cGVvZiByZXN1bHQuaXNFcnJvciA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgYXR0cmlidXRlcyQxW2F0dHJpYnV0ZXMuTUNQX1RPT0xfUkVTVUxUX0lTX0VSUk9SX0FUVFJJQlVURV0gPSByZXN1bHQuaXNFcnJvcjtcbiAgfVxuXG4gIHJldHVybiBhdHRyaWJ1dGVzJDE7XG59XG5cbi8qKlxuICogRXh0cmFjdCBwcm9tcHQgcmVzdWx0IGF0dHJpYnV0ZXMgZm9yIHNwYW4gaW5zdHJ1bWVudGF0aW9uXG4gKiBAcGFyYW0gcmVzdWx0IC0gUHJvbXB0IGV4ZWN1dGlvbiByZXN1bHRcbiAqIEByZXR1cm5zIEF0dHJpYnV0ZXMgZXh0cmFjdGVkIGZyb20gcHJvbXB0IHJlc3VsdFxuICovXG5mdW5jdGlvbiBleHRyYWN0UHJvbXB0UmVzdWx0QXR0cmlidXRlcyhyZXN1bHQpIHtcbiAgY29uc3QgYXR0cmlidXRlcyQxID0ge307XG4gIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkQ29udGVudEl0ZW0ocmVzdWx0KSkge1xuICAgIHJldHVybiBhdHRyaWJ1dGVzJDE7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlc3VsdC5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBhdHRyaWJ1dGVzJDFbYXR0cmlidXRlcy5NQ1BfUFJPTVBUX1JFU1VMVF9ERVNDUklQVElPTl9BVFRSSUJVVEVdID0gcmVzdWx0LmRlc2NyaXB0aW9uO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0Lm1lc3NhZ2VzKSkge1xuICAgIGF0dHJpYnV0ZXMkMVthdHRyaWJ1dGVzLk1DUF9QUk9NUFRfUkVTVUxUX01FU1NBR0VfQ09VTlRfQVRUUklCVVRFXSA9IHJlc3VsdC5tZXNzYWdlcy5sZW5ndGg7XG5cbiAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdC5tZXNzYWdlcztcbiAgICBmb3IgKGNvbnN0IFtpLCBtZXNzYWdlXSBvZiBtZXNzYWdlcy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkQ29udGVudEl0ZW0obWVzc2FnZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByZWZpeCA9IG1lc3NhZ2VzLmxlbmd0aCA9PT0gMSA/ICdtY3AucHJvbXB0LnJlc3VsdCcgOiBgbWNwLnByb21wdC5yZXN1bHQuJHtpfWA7XG5cbiAgICAgIGNvbnN0IHNhZmVTZXQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gbWVzc2FnZXMubGVuZ3RoID09PSAxID8gYCR7cHJlZml4fS5tZXNzYWdlXyR7a2V5fWAgOiBgJHtwcmVmaXh9LiR7a2V5fWA7XG4gICAgICAgICAgYXR0cmlidXRlcyQxW2F0dHJOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzYWZlU2V0KCdyb2xlJywgbWVzc2FnZS5yb2xlKTtcblxuICAgICAgaWYgKHZhbGlkYXRpb24uaXNWYWxpZENvbnRlbnRJdGVtKG1lc3NhZ2UuY29udGVudCkpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IG1lc3NhZ2UuY29udGVudDtcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50LnRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBtZXNzYWdlcy5sZW5ndGggPT09IDEgPyBgJHtwcmVmaXh9Lm1lc3NhZ2VfY29udGVudGAgOiBgJHtwcmVmaXh9LmNvbnRlbnRgO1xuICAgICAgICAgIGF0dHJpYnV0ZXMkMVthdHRyTmFtZV0gPSBjb250ZW50LnRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0cmlidXRlcyQxO1xufVxuXG5leHBvcnRzLmV4dHJhY3RQcm9tcHRSZXN1bHRBdHRyaWJ1dGVzID0gZXh0cmFjdFByb21wdFJlc3VsdEF0dHJpYnV0ZXM7XG5leHBvcnRzLmV4dHJhY3RUb29sUmVzdWx0QXR0cmlidXRlcyA9IGV4dHJhY3RUb29sUmVzdWx0QXR0cmlidXRlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3VsdEV4dHJhY3Rpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/resultExtraction.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionExtraction.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionExtraction.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\nconst sessionManagement = __webpack_require__(/*! ./sessionManagement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionManagement.js\");\nconst validation = __webpack_require__(/*! ./validation.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js\");\n\n/**\n * Session and party info extraction functions for MCP server instrumentation\n *\n * Handles extraction of client/server info and session data from MCP messages.\n */\n\n\n/**\n * Extracts and validates PartyInfo from an unknown object\n * @param obj - Unknown object that might contain party info\n * @returns Validated PartyInfo object with only string properties\n */\nfunction extractPartyInfo(obj) {\n  const partyInfo = {};\n\n  if (validation.isValidContentItem(obj)) {\n    if (typeof obj.name === 'string') {\n      partyInfo.name = obj.name;\n    }\n    if (typeof obj.title === 'string') {\n      partyInfo.title = obj.title;\n    }\n    if (typeof obj.version === 'string') {\n      partyInfo.version = obj.version;\n    }\n  }\n\n  return partyInfo;\n}\n\n/**\n * Extracts session data from \"initialize\" requests\n * @param request - JSON-RPC \"initialize\" request containing client info and protocol version\n * @returns Session data extracted from request parameters including protocol version and client info\n */\nfunction extractSessionDataFromInitializeRequest(request) {\n  const sessionData = {};\n  if (validation.isValidContentItem(request.params)) {\n    if (typeof request.params.protocolVersion === 'string') {\n      sessionData.protocolVersion = request.params.protocolVersion;\n    }\n    if (request.params.clientInfo) {\n      sessionData.clientInfo = extractPartyInfo(request.params.clientInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Extracts session data from \"initialize\" response\n * @param result - \"initialize\" response result containing server info and protocol version\n * @returns Partial session data extracted from response including protocol version and server info\n */\nfunction extractSessionDataFromInitializeResponse(result) {\n  const sessionData = {};\n  if (validation.isValidContentItem(result)) {\n    if (typeof result.protocolVersion === 'string') {\n      sessionData.protocolVersion = result.protocolVersion;\n    }\n    if (result.serverInfo) {\n      sessionData.serverInfo = extractPartyInfo(result.serverInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Build client attributes from stored client info\n * @param transport - MCP transport instance\n * @returns Client attributes for span instrumentation\n */\nfunction getClientAttributes(transport) {\n  const clientInfo = sessionManagement.getClientInfoForTransport(transport);\n  const attributes = {};\n\n  if (clientInfo?.name) {\n    attributes['mcp.client.name'] = clientInfo.name;\n  }\n  if (clientInfo?.title) {\n    attributes['mcp.client.title'] = clientInfo.title;\n  }\n  if (clientInfo?.version) {\n    attributes['mcp.client.version'] = clientInfo.version;\n  }\n\n  return attributes;\n}\n\n/**\n * Build server attributes from stored server info\n * @param transport - MCP transport instance\n * @returns Server attributes for span instrumentation\n */\nfunction getServerAttributes(transport) {\n  const serverInfo = sessionManagement.getSessionDataForTransport(transport)?.serverInfo;\n  const attributes$1 = {};\n\n  if (serverInfo?.name) {\n    attributes$1[attributes.MCP_SERVER_NAME_ATTRIBUTE] = serverInfo.name;\n  }\n  if (serverInfo?.title) {\n    attributes$1[attributes.MCP_SERVER_TITLE_ATTRIBUTE] = serverInfo.title;\n  }\n  if (serverInfo?.version) {\n    attributes$1[attributes.MCP_SERVER_VERSION_ATTRIBUTE] = serverInfo.version;\n  }\n\n  return attributes$1;\n}\n\n/**\n * Extracts client connection info from extra handler data\n * @param extra - Extra handler data containing connection info\n * @returns Client address and port information\n */\nfunction extractClientInfo(extra)\n\n {\n  return {\n    address:\n      extra?.requestInfo?.remoteAddress ||\n      extra?.clientAddress ||\n      extra?.request?.ip ||\n      extra?.request?.connection?.remoteAddress,\n    port: extra?.requestInfo?.remotePort || extra?.clientPort || extra?.request?.connection?.remotePort,\n  };\n}\n\n/**\n * Extracts transport types based on transport constructor name\n * @param transport - MCP transport instance\n * @returns Transport type mapping for span attributes\n */\nfunction getTransportTypes(transport) {\n  const transportName = transport.constructor?.name?.toLowerCase() || '';\n\n  if (transportName.includes('stdio')) {\n    return { mcpTransport: 'stdio', networkTransport: 'pipe' };\n  }\n\n  if (transportName.includes('streamablehttp') || transportName.includes('streamable')) {\n    return { mcpTransport: 'http', networkTransport: 'tcp' };\n  }\n\n  if (transportName.includes('sse')) {\n    return { mcpTransport: 'sse', networkTransport: 'tcp' };\n  }\n\n  return { mcpTransport: 'unknown', networkTransport: 'unknown' };\n}\n\n/**\n * Build transport and network attributes\n * @param transport - MCP transport instance\n * @param extra - Optional extra handler data\n * @returns Transport attributes for span instrumentation\n */\nfunction buildTransportAttributes(\n  transport,\n  extra,\n) {\n  const sessionId = transport.sessionId;\n  const clientInfo = extra ? extractClientInfo(extra) : {};\n  const { mcpTransport, networkTransport } = getTransportTypes(transport);\n  const clientAttributes = getClientAttributes(transport);\n  const serverAttributes = getServerAttributes(transport);\n  const protocolVersion = sessionManagement.getProtocolVersionForTransport(transport);\n\n  const attributes$1 = {\n    ...(sessionId && { [attributes.MCP_SESSION_ID_ATTRIBUTE]: sessionId }),\n    ...(clientInfo.address && { [attributes.CLIENT_ADDRESS_ATTRIBUTE]: clientInfo.address }),\n    ...(clientInfo.port && { [attributes.CLIENT_PORT_ATTRIBUTE]: clientInfo.port }),\n    [attributes.MCP_TRANSPORT_ATTRIBUTE]: mcpTransport,\n    [attributes.NETWORK_TRANSPORT_ATTRIBUTE]: networkTransport,\n    [attributes.NETWORK_PROTOCOL_VERSION_ATTRIBUTE]: '2.0',\n    ...(protocolVersion && { [attributes.MCP_PROTOCOL_VERSION_ATTRIBUTE]: protocolVersion }),\n    ...clientAttributes,\n    ...serverAttributes,\n  };\n\n  return attributes$1;\n}\n\nexports.buildTransportAttributes = buildTransportAttributes;\nexports.extractClientInfo = extractClientInfo;\nexports.extractSessionDataFromInitializeRequest = extractSessionDataFromInitializeRequest;\nexports.extractSessionDataFromInitializeResponse = extractSessionDataFromInitializeResponse;\nexports.getClientAttributes = getClientAttributes;\nexports.getServerAttributes = getServerAttributes;\nexports.getTransportTypes = getTransportTypes;\n//# sourceMappingURL=sessionExtraction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionExtraction.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionManagement.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionManagement.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Transport-scoped session data storage (only for transports with sessionId)\n * @internal Maps transport instances to session-level data\n */\nconst transportToSessionData = new WeakMap();\n\n/**\n * Stores session data for a transport with sessionId\n * @param transport - MCP transport instance\n * @param sessionData - Session data to store\n */\nfunction storeSessionDataForTransport(transport, sessionData) {\n  if (transport.sessionId) {\n    transportToSessionData.set(transport, sessionData);\n  }\n}\n\n/**\n * Updates session data for a transport with sessionId (merges with existing data)\n * @param transport - MCP transport instance\n * @param partialSessionData - Partial session data to merge with existing data\n */\nfunction updateSessionDataForTransport(transport, partialSessionData) {\n  if (transport.sessionId) {\n    const existingData = transportToSessionData.get(transport) || {};\n    transportToSessionData.set(transport, { ...existingData, ...partialSessionData });\n  }\n}\n\n/**\n * Retrieves client information for a transport\n * @param transport - MCP transport instance\n * @returns Client information if available\n */\nfunction getClientInfoForTransport(transport) {\n  return transportToSessionData.get(transport)?.clientInfo;\n}\n\n/**\n * Retrieves protocol version for a transport\n * @param transport - MCP transport instance\n * @returns Protocol version if available\n */\nfunction getProtocolVersionForTransport(transport) {\n  return transportToSessionData.get(transport)?.protocolVersion;\n}\n\n/**\n * Retrieves full session data for a transport\n * @param transport - MCP transport instance\n * @returns Complete session data if available\n */\nfunction getSessionDataForTransport(transport) {\n  return transportToSessionData.get(transport);\n}\n\n/**\n * Cleans up session data for a specific transport (when that transport closes)\n * @param transport - MCP transport instance\n */\nfunction cleanupSessionDataForTransport(transport) {\n  transportToSessionData.delete(transport);\n}\n\nexports.cleanupSessionDataForTransport = cleanupSessionDataForTransport;\nexports.getClientInfoForTransport = getClientInfoForTransport;\nexports.getProtocolVersionForTransport = getProtocolVersionForTransport;\nexports.getSessionDataForTransport = getSessionDataForTransport;\nexports.storeSessionDataForTransport = storeSessionDataForTransport;\nexports.updateSessionDataForTransport = updateSessionDataForTransport;\n//# sourceMappingURL=sessionManagement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvc2Vzc2lvbk1hbmFnZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHdDQUF3QztBQUNwRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMsc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbWNwLXNlcnZlci9zZXNzaW9uTWFuYWdlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQtc2NvcGVkIHNlc3Npb24gZGF0YSBzdG9yYWdlIChvbmx5IGZvciB0cmFuc3BvcnRzIHdpdGggc2Vzc2lvbklkKVxuICogQGludGVybmFsIE1hcHMgdHJhbnNwb3J0IGluc3RhbmNlcyB0byBzZXNzaW9uLWxldmVsIGRhdGFcbiAqL1xuY29uc3QgdHJhbnNwb3J0VG9TZXNzaW9uRGF0YSA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogU3RvcmVzIHNlc3Npb24gZGF0YSBmb3IgYSB0cmFuc3BvcnQgd2l0aCBzZXNzaW9uSWRcbiAqIEBwYXJhbSB0cmFuc3BvcnQgLSBNQ1AgdHJhbnNwb3J0IGluc3RhbmNlXG4gKiBAcGFyYW0gc2Vzc2lvbkRhdGEgLSBTZXNzaW9uIGRhdGEgdG8gc3RvcmVcbiAqL1xuZnVuY3Rpb24gc3RvcmVTZXNzaW9uRGF0YUZvclRyYW5zcG9ydCh0cmFuc3BvcnQsIHNlc3Npb25EYXRhKSB7XG4gIGlmICh0cmFuc3BvcnQuc2Vzc2lvbklkKSB7XG4gICAgdHJhbnNwb3J0VG9TZXNzaW9uRGF0YS5zZXQodHJhbnNwb3J0LCBzZXNzaW9uRGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGVzIHNlc3Npb24gZGF0YSBmb3IgYSB0cmFuc3BvcnQgd2l0aCBzZXNzaW9uSWQgKG1lcmdlcyB3aXRoIGV4aXN0aW5nIGRhdGEpXG4gKiBAcGFyYW0gdHJhbnNwb3J0IC0gTUNQIHRyYW5zcG9ydCBpbnN0YW5jZVxuICogQHBhcmFtIHBhcnRpYWxTZXNzaW9uRGF0YSAtIFBhcnRpYWwgc2Vzc2lvbiBkYXRhIHRvIG1lcmdlIHdpdGggZXhpc3RpbmcgZGF0YVxuICovXG5mdW5jdGlvbiB1cGRhdGVTZXNzaW9uRGF0YUZvclRyYW5zcG9ydCh0cmFuc3BvcnQsIHBhcnRpYWxTZXNzaW9uRGF0YSkge1xuICBpZiAodHJhbnNwb3J0LnNlc3Npb25JZCkge1xuICAgIGNvbnN0IGV4aXN0aW5nRGF0YSA9IHRyYW5zcG9ydFRvU2Vzc2lvbkRhdGEuZ2V0KHRyYW5zcG9ydCkgfHwge307XG4gICAgdHJhbnNwb3J0VG9TZXNzaW9uRGF0YS5zZXQodHJhbnNwb3J0LCB7IC4uLmV4aXN0aW5nRGF0YSwgLi4ucGFydGlhbFNlc3Npb25EYXRhIH0pO1xuICB9XG59XG5cbi8qKlxuICogUmV0cmlldmVzIGNsaWVudCBpbmZvcm1hdGlvbiBmb3IgYSB0cmFuc3BvcnRcbiAqIEBwYXJhbSB0cmFuc3BvcnQgLSBNQ1AgdHJhbnNwb3J0IGluc3RhbmNlXG4gKiBAcmV0dXJucyBDbGllbnQgaW5mb3JtYXRpb24gaWYgYXZhaWxhYmxlXG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudEluZm9Gb3JUcmFuc3BvcnQodHJhbnNwb3J0KSB7XG4gIHJldHVybiB0cmFuc3BvcnRUb1Nlc3Npb25EYXRhLmdldCh0cmFuc3BvcnQpPy5jbGllbnRJbmZvO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyBwcm90b2NvbCB2ZXJzaW9uIGZvciBhIHRyYW5zcG9ydFxuICogQHBhcmFtIHRyYW5zcG9ydCAtIE1DUCB0cmFuc3BvcnQgaW5zdGFuY2VcbiAqIEByZXR1cm5zIFByb3RvY29sIHZlcnNpb24gaWYgYXZhaWxhYmxlXG4gKi9cbmZ1bmN0aW9uIGdldFByb3RvY29sVmVyc2lvbkZvclRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgcmV0dXJuIHRyYW5zcG9ydFRvU2Vzc2lvbkRhdGEuZ2V0KHRyYW5zcG9ydCk/LnByb3RvY29sVmVyc2lvbjtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgZnVsbCBzZXNzaW9uIGRhdGEgZm9yIGEgdHJhbnNwb3J0XG4gKiBAcGFyYW0gdHJhbnNwb3J0IC0gTUNQIHRyYW5zcG9ydCBpbnN0YW5jZVxuICogQHJldHVybnMgQ29tcGxldGUgc2Vzc2lvbiBkYXRhIGlmIGF2YWlsYWJsZVxuICovXG5mdW5jdGlvbiBnZXRTZXNzaW9uRGF0YUZvclRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgcmV0dXJuIHRyYW5zcG9ydFRvU2Vzc2lvbkRhdGEuZ2V0KHRyYW5zcG9ydCk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHNlc3Npb24gZGF0YSBmb3IgYSBzcGVjaWZpYyB0cmFuc3BvcnQgKHdoZW4gdGhhdCB0cmFuc3BvcnQgY2xvc2VzKVxuICogQHBhcmFtIHRyYW5zcG9ydCAtIE1DUCB0cmFuc3BvcnQgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gY2xlYW51cFNlc3Npb25EYXRhRm9yVHJhbnNwb3J0KHRyYW5zcG9ydCkge1xuICB0cmFuc3BvcnRUb1Nlc3Npb25EYXRhLmRlbGV0ZSh0cmFuc3BvcnQpO1xufVxuXG5leHBvcnRzLmNsZWFudXBTZXNzaW9uRGF0YUZvclRyYW5zcG9ydCA9IGNsZWFudXBTZXNzaW9uRGF0YUZvclRyYW5zcG9ydDtcbmV4cG9ydHMuZ2V0Q2xpZW50SW5mb0ZvclRyYW5zcG9ydCA9IGdldENsaWVudEluZm9Gb3JUcmFuc3BvcnQ7XG5leHBvcnRzLmdldFByb3RvY29sVmVyc2lvbkZvclRyYW5zcG9ydCA9IGdldFByb3RvY29sVmVyc2lvbkZvclRyYW5zcG9ydDtcbmV4cG9ydHMuZ2V0U2Vzc2lvbkRhdGFGb3JUcmFuc3BvcnQgPSBnZXRTZXNzaW9uRGF0YUZvclRyYW5zcG9ydDtcbmV4cG9ydHMuc3RvcmVTZXNzaW9uRGF0YUZvclRyYW5zcG9ydCA9IHN0b3JlU2Vzc2lvbkRhdGFGb3JUcmFuc3BvcnQ7XG5leHBvcnRzLnVwZGF0ZVNlc3Npb25EYXRhRm9yVHJhbnNwb3J0ID0gdXBkYXRlU2Vzc2lvbkRhdGFGb3JUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXNzaW9uTWFuYWdlbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionManagement.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/spans.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/spans.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ../../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst trace = __webpack_require__(/*! ../../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst attributeExtraction = __webpack_require__(/*! ./attributeExtraction.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributeExtraction.js\");\nconst attributes = __webpack_require__(/*! ./attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/attributes.js\");\nconst methodConfig = __webpack_require__(/*! ./methodConfig.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/methodConfig.js\");\nconst piiFiltering = __webpack_require__(/*! ./piiFiltering.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/piiFiltering.js\");\nconst sessionExtraction = __webpack_require__(/*! ./sessionExtraction.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionExtraction.js\");\n\n/**\n * Span creation and management functions for MCP server instrumentation\n *\n * Provides unified span creation following OpenTelemetry MCP semantic conventions and our opinitionated take on MCP.\n * Handles both request and notification spans with attribute extraction.\n */\n\n\n/**\n * Creates a span name based on the method and target\n * @internal\n * @param method - MCP method name\n * @param target - Optional target identifier\n * @returns Formatted span name\n */\nfunction createSpanName(method, target) {\n  return target ? `${method} ${target}` : method;\n}\n\n/**\n * Build Sentry-specific attributes based on span type\n * @internal\n * @param type - Span type configuration\n * @returns Sentry-specific attributes\n */\nfunction buildSentryAttributes(type) {\n  let op;\n  let origin;\n\n  switch (type) {\n    case 'request':\n      op = attributes.MCP_SERVER_OP_VALUE;\n      origin = attributes.MCP_FUNCTION_ORIGIN_VALUE;\n      break;\n    case 'notification-incoming':\n      op = attributes.MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE;\n      origin = attributes.MCP_NOTIFICATION_ORIGIN_VALUE;\n      break;\n    case 'notification-outgoing':\n      op = attributes.MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE;\n      origin = attributes.MCP_NOTIFICATION_ORIGIN_VALUE;\n      break;\n  }\n\n  return {\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: attributes.MCP_ROUTE_SOURCE_VALUE,\n  };\n}\n\n/**\n * Unified builder for creating MCP spans\n * @internal\n * @param config - Span configuration\n * @returns Created span\n */\nfunction createMcpSpan(config) {\n  const { type, message, transport, extra, callback } = config;\n  const { method } = message;\n  const params = message.params ;\n\n  // Determine span name based on type and OTEL conventions\n  let spanName;\n  if (type === 'request') {\n    const targetInfo = methodConfig.extractTargetInfo(method, params || {});\n    spanName = createSpanName(method, targetInfo.target);\n  } else {\n    // For notifications, use method name directly per OpenTelemetry conventions\n    spanName = method;\n  }\n\n  const rawAttributes = {\n    ...sessionExtraction.buildTransportAttributes(transport, extra),\n    [attributes.MCP_METHOD_NAME_ATTRIBUTE]: method,\n    ...attributeExtraction.buildTypeSpecificAttributes(type, message, params),\n    ...buildSentryAttributes(type),\n  };\n\n  const client = currentScopes.getClient();\n  const sendDefaultPii = Boolean(client?.getOptions().sendDefaultPii);\n  const attributes$1 = piiFiltering.filterMcpPiiFromSpanData(rawAttributes, sendDefaultPii) ;\n\n  return trace.startSpan(\n    {\n      name: spanName,\n      forceTransaction: true,\n      attributes: attributes$1,\n    },\n    callback,\n  );\n}\n\n/**\n * Creates a span for incoming MCP notifications\n * @param jsonRpcMessage - Notification message\n * @param transport - MCP transport instance\n * @param extra - Extra handler data\n * @param callback - Span execution callback\n * @returns Span execution result\n */\nfunction createMcpNotificationSpan(\n  jsonRpcMessage,\n  transport,\n  extra,\n  callback,\n) {\n  return createMcpSpan({\n    type: 'notification-incoming',\n    message: jsonRpcMessage,\n    transport,\n    extra,\n    callback,\n  });\n}\n\n/**\n * Creates a span for outgoing MCP notifications\n * @param jsonRpcMessage - Notification message\n * @param transport - MCP transport instance\n * @param callback - Span execution callback\n * @returns Span execution result\n */\nfunction createMcpOutgoingNotificationSpan(\n  jsonRpcMessage,\n  transport,\n  callback,\n) {\n  return createMcpSpan({\n    type: 'notification-outgoing',\n    message: jsonRpcMessage,\n    transport,\n    callback,\n  });\n}\n\n/**\n * Builds span configuration for MCP server requests\n * @param jsonRpcMessage - Request message\n * @param transport - MCP transport instance\n * @param extra - Optional extra handler data\n * @returns Span configuration object\n */\nfunction buildMcpServerSpanConfig(\n  jsonRpcMessage,\n  transport,\n  extra,\n)\n\n {\n  const { method } = jsonRpcMessage;\n  const params = jsonRpcMessage.params ;\n\n  const targetInfo = methodConfig.extractTargetInfo(method, params || {});\n  const spanName = createSpanName(method, targetInfo.target);\n\n  const rawAttributes = {\n    ...sessionExtraction.buildTransportAttributes(transport, extra),\n    [attributes.MCP_METHOD_NAME_ATTRIBUTE]: method,\n    ...attributeExtraction.buildTypeSpecificAttributes('request', jsonRpcMessage, params),\n    ...buildSentryAttributes('request'),\n  };\n\n  const client = currentScopes.getClient();\n  const sendDefaultPii = Boolean(client?.getOptions().sendDefaultPii);\n  const attributes$1 = piiFiltering.filterMcpPiiFromSpanData(rawAttributes, sendDefaultPii) ;\n\n  return {\n    name: spanName,\n    op: attributes.MCP_SERVER_OP_VALUE,\n    forceTransaction: true,\n    attributes: attributes$1,\n  };\n}\n\nexports.buildMcpServerSpanConfig = buildMcpServerSpanConfig;\nexports.createMcpNotificationSpan = createMcpNotificationSpan;\nexports.createMcpOutgoingNotificationSpan = createMcpOutgoingNotificationSpan;\n//# sourceMappingURL=spans.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/spans.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/transport.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/transport.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst object = __webpack_require__(/*! ../../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst trace = __webpack_require__(/*! ../../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst correlation = __webpack_require__(/*! ./correlation.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/correlation.js\");\nconst errorCapture = __webpack_require__(/*! ./errorCapture.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/errorCapture.js\");\nconst sessionExtraction = __webpack_require__(/*! ./sessionExtraction.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionExtraction.js\");\nconst sessionManagement = __webpack_require__(/*! ./sessionManagement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/sessionManagement.js\");\nconst spans = __webpack_require__(/*! ./spans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/spans.js\");\nconst validation = __webpack_require__(/*! ./validation.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js\");\n\n/**\n * Transport layer instrumentation for MCP server\n *\n * Handles message interception and response correlation.\n * @see https://modelcontextprotocol.io/specification/2025-06-18/basic/transports\n */\n\n\n/**\n * Wraps transport.onmessage to create spans for incoming messages.\n * For \"initialize\" requests, extracts and stores client info and protocol version\n * in the session data for the transport.\n * @param transport - MCP transport instance to wrap\n */\nfunction wrapTransportOnMessage(transport) {\n  if (transport.onmessage) {\n    object.fill(transport, 'onmessage', originalOnMessage => {\n      return function ( message, extra) {\n        if (validation.isJsonRpcRequest(message)) {\n          if (message.method === 'initialize') {\n            try {\n              const sessionData = sessionExtraction.extractSessionDataFromInitializeRequest(message);\n              sessionManagement.storeSessionDataForTransport(this, sessionData);\n            } catch {\n              // noop\n            }\n          }\n\n          const isolationScope = currentScopes.getIsolationScope().clone();\n\n          return currentScopes.withIsolationScope(isolationScope, () => {\n            const spanConfig = spans.buildMcpServerSpanConfig(message, this, extra );\n            const span = trace.startInactiveSpan(spanConfig);\n\n            correlation.storeSpanForRequest(this, message.id, span, message.method);\n\n            return trace.withActiveSpan(span, () => {\n              return (originalOnMessage ).call(this, message, extra);\n            });\n          });\n        }\n\n        if (validation.isJsonRpcNotification(message)) {\n          return spans.createMcpNotificationSpan(message, this, extra , () => {\n            return (originalOnMessage ).call(this, message, extra);\n          });\n        }\n\n        return (originalOnMessage ).call(this, message, extra);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport.send to handle outgoing messages and response correlation.\n * For \"initialize\" responses, extracts and stores protocol version and server info\n * in the session data for the transport.\n * @param transport - MCP transport instance to wrap\n */\nfunction wrapTransportSend(transport) {\n  if (transport.send) {\n    object.fill(transport, 'send', originalSend => {\n      return async function ( ...args) {\n        const [message] = args;\n\n        if (validation.isJsonRpcNotification(message)) {\n          return spans.createMcpOutgoingNotificationSpan(message, this, () => {\n            return (originalSend ).call(this, ...args);\n          });\n        }\n\n        if (validation.isJsonRpcResponse(message)) {\n          if (message.id !== null && message.id !== undefined) {\n            if (message.error) {\n              captureJsonRpcErrorResponse(message.error);\n            }\n\n            if (validation.isValidContentItem(message.result)) {\n              if (message.result.protocolVersion || message.result.serverInfo) {\n                try {\n                  const serverData = sessionExtraction.extractSessionDataFromInitializeResponse(message.result);\n                  sessionManagement.updateSessionDataForTransport(this, serverData);\n                } catch {\n                  // noop\n                }\n              }\n            }\n\n            correlation.completeSpanWithResults(this, message.id, message.result);\n          }\n        }\n\n        return (originalSend ).call(this, ...args);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport.onclose to clean up pending spans for this transport only\n * @param transport - MCP transport instance to wrap\n */\nfunction wrapTransportOnClose(transport) {\n  if (transport.onclose) {\n    object.fill(transport, 'onclose', originalOnClose => {\n      return function ( ...args) {\n        correlation.cleanupPendingSpansForTransport(this);\n        sessionManagement.cleanupSessionDataForTransport(this);\n        return (originalOnClose ).call(this, ...args);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport error handlers to capture connection errors\n * @param transport - MCP transport instance to wrap\n */\nfunction wrapTransportError(transport) {\n  if (transport.onerror) {\n    object.fill(transport, 'onerror', (originalOnError) => {\n      return function ( error) {\n        captureTransportError(error);\n        return originalOnError.call(this, error);\n      };\n    });\n  }\n}\n\n/**\n * Captures JSON-RPC error responses for server-side errors.\n * @see https://www.jsonrpc.org/specification#error_object\n * @internal\n * @param errorResponse - JSON-RPC error response\n */\nfunction captureJsonRpcErrorResponse(errorResponse) {\n  try {\n    if (errorResponse && typeof errorResponse === 'object' && 'code' in errorResponse && 'message' in errorResponse) {\n      const jsonRpcError = errorResponse ;\n\n      const isServerError =\n        jsonRpcError.code === -32603 || (jsonRpcError.code >= -32099 && jsonRpcError.code <= -32000);\n\n      if (isServerError) {\n        const error = new Error(jsonRpcError.message);\n        error.name = `JsonRpcError_${jsonRpcError.code}`;\n\n        errorCapture.captureError(error, 'protocol');\n      }\n    }\n  } catch {\n    // noop\n  }\n}\n\n/**\n * Captures transport connection errors\n * @internal\n * @param error - Transport error\n */\nfunction captureTransportError(error) {\n  try {\n    errorCapture.captureError(error, 'transport');\n  } catch {\n    // noop\n  }\n}\n\nexports.wrapTransportError = wrapTransportError;\nexports.wrapTransportOnClose = wrapTransportOnClose;\nexports.wrapTransportOnMessage = wrapTransportOnMessage;\nexports.wrapTransportSend = wrapTransportSend;\n//# sourceMappingURL=transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/transport.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\n\n/**\n * Message validation functions for MCP server instrumentation\n *\n * Provides JSON-RPC 2.0 message type validation and MCP server instance validation.\n */\n\n\n/**\n * Validates if a message is a JSON-RPC request\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC request\n */\nfunction isJsonRpcRequest(message) {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message ).jsonrpc === '2.0' &&\n    'method' in message &&\n    'id' in message\n  );\n}\n\n/**\n * Validates if a message is a JSON-RPC notification\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC notification\n */\nfunction isJsonRpcNotification(message) {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message ).jsonrpc === '2.0' &&\n    'method' in message &&\n    !('id' in message)\n  );\n}\n\n/**\n * Validates if a message is a JSON-RPC response\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC response\n */\nfunction isJsonRpcResponse(message) {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message ).jsonrpc === '2.0' &&\n    'id' in message &&\n    ('result' in message || 'error' in message)\n  );\n}\n\n/**\n * Validates MCP server instance with type checking\n * @param instance - Object to validate as MCP server instance\n * @returns True if instance has required MCP server methods\n */\nfunction validateMcpServerInstance(instance) {\n  if (\n    typeof instance === 'object' &&\n    instance !== null &&\n    'resource' in instance &&\n    'tool' in instance &&\n    'prompt' in instance &&\n    'connect' in instance\n  ) {\n    return true;\n  }\n  debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Did not patch MCP server. Interface is incompatible.');\n  return false;\n}\n\n/**\n * Check if the item is a valid content item\n * @param item - The item to check\n * @returns True if the item is a valid content item, false otherwise\n */\nfunction isValidContentItem(item) {\n  return item != null && typeof item === 'object';\n}\n\nexports.isJsonRpcNotification = isJsonRpcNotification;\nexports.isJsonRpcRequest = isJsonRpcRequest;\nexports.isJsonRpcResponse = isJsonRpcResponse;\nexports.isValidContentItem = isValidContentItem;\nexports.validateMcpServerInstance = validateMcpServerInstance;\n//# sourceMappingURL=validation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21jcC1zZXJ2ZXIvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQywrRkFBc0I7QUFDakQsb0JBQW9CLG1CQUFPLENBQUMsNkdBQTZCOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQixpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tY3Atc2VydmVyL3ZhbGlkYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi8uLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcblxuLyoqXG4gKiBNZXNzYWdlIHZhbGlkYXRpb24gZnVuY3Rpb25zIGZvciBNQ1Agc2VydmVyIGluc3RydW1lbnRhdGlvblxuICpcbiAqIFByb3ZpZGVzIEpTT04tUlBDIDIuMCBtZXNzYWdlIHR5cGUgdmFsaWRhdGlvbiBhbmQgTUNQIHNlcnZlciBpbnN0YW5jZSB2YWxpZGF0aW9uLlxuICovXG5cblxuLyoqXG4gKiBWYWxpZGF0ZXMgaWYgYSBtZXNzYWdlIGlzIGEgSlNPTi1SUEMgcmVxdWVzdFxuICogQHBhcmFtIG1lc3NhZ2UgLSBNZXNzYWdlIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyBUcnVlIGlmIG1lc3NhZ2UgaXMgYSBKU09OLVJQQyByZXF1ZXN0XG4gKi9cbmZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3QobWVzc2FnZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBtZXNzYWdlID09PSAnb2JqZWN0JyAmJlxuICAgIG1lc3NhZ2UgIT09IG51bGwgJiZcbiAgICAnanNvbnJwYycgaW4gbWVzc2FnZSAmJlxuICAgIChtZXNzYWdlICkuanNvbnJwYyA9PT0gJzIuMCcgJiZcbiAgICAnbWV0aG9kJyBpbiBtZXNzYWdlICYmXG4gICAgJ2lkJyBpbiBtZXNzYWdlXG4gICk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIGlmIGEgbWVzc2FnZSBpcyBhIEpTT04tUlBDIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIG1lc3NhZ2UgLSBNZXNzYWdlIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyBUcnVlIGlmIG1lc3NhZ2UgaXMgYSBKU09OLVJQQyBub3RpZmljYXRpb25cbiAqL1xuZnVuY3Rpb24gaXNKc29uUnBjTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgbWVzc2FnZSA9PT0gJ29iamVjdCcgJiZcbiAgICBtZXNzYWdlICE9PSBudWxsICYmXG4gICAgJ2pzb25ycGMnIGluIG1lc3NhZ2UgJiZcbiAgICAobWVzc2FnZSApLmpzb25ycGMgPT09ICcyLjAnICYmXG4gICAgJ21ldGhvZCcgaW4gbWVzc2FnZSAmJlxuICAgICEoJ2lkJyBpbiBtZXNzYWdlKVxuICApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBpZiBhIG1lc3NhZ2UgaXMgYSBKU09OLVJQQyByZXNwb25zZVxuICogQHBhcmFtIG1lc3NhZ2UgLSBNZXNzYWdlIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyBUcnVlIGlmIG1lc3NhZ2UgaXMgYSBKU09OLVJQQyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZShtZXNzYWdlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnICYmXG4gICAgbWVzc2FnZSAhPT0gbnVsbCAmJlxuICAgICdqc29ucnBjJyBpbiBtZXNzYWdlICYmXG4gICAgKG1lc3NhZ2UgKS5qc29ucnBjID09PSAnMi4wJyAmJlxuICAgICdpZCcgaW4gbWVzc2FnZSAmJlxuICAgICgncmVzdWx0JyBpbiBtZXNzYWdlIHx8ICdlcnJvcicgaW4gbWVzc2FnZSlcbiAgKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgTUNQIHNlcnZlciBpbnN0YW5jZSB3aXRoIHR5cGUgY2hlY2tpbmdcbiAqIEBwYXJhbSBpbnN0YW5jZSAtIE9iamVjdCB0byB2YWxpZGF0ZSBhcyBNQ1Agc2VydmVyIGluc3RhbmNlXG4gKiBAcmV0dXJucyBUcnVlIGlmIGluc3RhbmNlIGhhcyByZXF1aXJlZCBNQ1Agc2VydmVyIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVNY3BTZXJ2ZXJJbnN0YW5jZShpbnN0YW5jZSkge1xuICBpZiAoXG4gICAgdHlwZW9mIGluc3RhbmNlID09PSAnb2JqZWN0JyAmJlxuICAgIGluc3RhbmNlICE9PSBudWxsICYmXG4gICAgJ3Jlc291cmNlJyBpbiBpbnN0YW5jZSAmJlxuICAgICd0b29sJyBpbiBpbnN0YW5jZSAmJlxuICAgICdwcm9tcHQnIGluIGluc3RhbmNlICYmXG4gICAgJ2Nvbm5lY3QnIGluIGluc3RhbmNlXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcud2FybignRGlkIG5vdCBwYXRjaCBNQ1Agc2VydmVyLiBJbnRlcmZhY2UgaXMgaW5jb21wYXRpYmxlLicpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGl0ZW0gaXMgYSB2YWxpZCBjb250ZW50IGl0ZW1cbiAqIEBwYXJhbSBpdGVtIC0gVGhlIGl0ZW0gdG8gY2hlY2tcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGl0ZW0gaXMgYSB2YWxpZCBjb250ZW50IGl0ZW0sIGZhbHNlIG90aGVyd2lzZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQ29udGVudEl0ZW0oaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPSBudWxsICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0cy5pc0pzb25ScGNOb3RpZmljYXRpb24gPSBpc0pzb25ScGNOb3RpZmljYXRpb247XG5leHBvcnRzLmlzSnNvblJwY1JlcXVlc3QgPSBpc0pzb25ScGNSZXF1ZXN0O1xuZXhwb3J0cy5pc0pzb25ScGNSZXNwb25zZSA9IGlzSnNvblJwY1Jlc3BvbnNlO1xuZXhwb3J0cy5pc1ZhbGlkQ29udGVudEl0ZW0gPSBpc1ZhbGlkQ29udGVudEl0ZW07XG5leHBvcnRzLnZhbGlkYXRlTWNwU2VydmVySW5zdGFuY2UgPSB2YWxpZGF0ZU1jcFNlcnZlckluc3RhbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/mcp-server/validation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/metadata.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nconst moduleMetadataIntegration = integration.defineIntegration(() => {\n  return {\n    name: 'ModuleMetadata',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item )[1] : undefined;\n\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    },\n  };\n});\n\nexports.moduleMetadataIntegration = moduleMetadataIntegration;\n//# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMvQyxpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMsa0dBQXNCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uLmpzJyk7XG5jb25zdCBtZXRhZGF0YSA9IHJlcXVpcmUoJy4uL21ldGFkYXRhLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2VudmVsb3BlLmpzJyk7XG5cbi8qKlxuICogQWRkcyBtb2R1bGUgbWV0YWRhdGEgdG8gc3RhY2sgZnJhbWVzLlxuICpcbiAqIE1ldGFkYXRhIGNhbiBiZSBpbmplY3RlZCBieSB0aGUgU2VudHJ5IGJ1bmRsZXIgcGx1Z2lucyB1c2luZyB0aGUgYG1vZHVsZU1ldGFkYXRhYCBjb25maWcgb3B0aW9uLlxuICpcbiAqIFdoZW4gdGhpcyBpbnRlZ3JhdGlvbiBpcyBhZGRlZCwgdGhlIG1ldGFkYXRhIHBhc3NlZCB0byB0aGUgYnVuZGxlciBwbHVnaW4gaXMgYWRkZWQgdG8gdGhlIHN0YWNrIGZyYW1lcyBvZiBhbGwgZXZlbnRzXG4gKiB1bmRlciB0aGUgYG1vZHVsZV9tZXRhZGF0YWAgcHJvcGVydHkuIFRoaXMgY2FuIGJlIHVzZWQgdG8gaGVscCBpbiB0YWdnaW5nIG9yIHJvdXRpbmcgb2YgZXZlbnRzIGZyb20gZGlmZmVyZW50IHRlYW1zXG4gKiBvdXIgc291cmNlc1xuICovXG5jb25zdCBtb2R1bGVNZXRhZGF0YUludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdNb2R1bGVNZXRhZGF0YScsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHN0cmlwIG1ldGFkYXRhIGZyb20gc3RhY2sgZnJhbWVzIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gU2VudHJ5IHNpbmNlIHRoZXNlIGFyZSBjbGllbnQgc2lkZSBvbmx5LlxuICAgICAgY2xpZW50Lm9uKCdiZWZvcmVFbnZlbG9wZScsIGVudmVsb3BlJDEgPT4ge1xuICAgICAgICBlbnZlbG9wZS5mb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlJDEsIChpdGVtLCB0eXBlKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdldmVudCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IChpdGVtIClbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICBtZXRhZGF0YS5zdHJpcE1ldGFkYXRhRnJvbVN0YWNrRnJhbWVzKGV2ZW50KTtcbiAgICAgICAgICAgICAgaXRlbVsxXSA9IGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY2xpZW50Lm9uKCdhcHBseUZyYW1lTWV0YWRhdGEnLCBldmVudCA9PiB7XG4gICAgICAgIC8vIE9ubHkgYXBwbHkgc3RhY2sgZnJhbWUgbWV0YWRhdGEgdG8gZXJyb3IgZXZlbnRzXG4gICAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhY2tQYXJzZXIgPSBjbGllbnQuZ2V0T3B0aW9ucygpLnN0YWNrUGFyc2VyO1xuICAgICAgICBtZXRhZGF0YS5hZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMoc3RhY2tQYXJzZXIsIGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5tb2R1bGVNZXRhZGF0YUludGVncmF0aW9uID0gbW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/requestdata.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst cookie = __webpack_require__(/*! ../utils/cookie.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/cookie.js\");\nconst getIpAddress = __webpack_require__(/*! ../vendor/getIpAddress.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/vendor/getIpAddress.js\");\n\n// TODO(v11): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = integration.defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event,\n  req,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData,\n  include,\n) {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getIpAddress.getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest,\n  include,\n) {\n  const requestData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers ).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers )[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? cookie.parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n\nexports.requestDataIntegration = requestDataIntegration;\n//# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3JlcXVlc3RkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMvQyxlQUFlLG1CQUFPLENBQUMsOEZBQW9CO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLDRHQUEyQjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyw2QkFBNkI7QUFDM0MsY0FBYywrQkFBK0I7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLFdBQVc7QUFDL0U7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcmVxdWVzdGRhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IGNvb2tpZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nvb2tpZS5qcycpO1xuY29uc3QgZ2V0SXBBZGRyZXNzID0gcmVxdWlyZSgnLi4vdmVuZG9yL2dldElwQWRkcmVzcy5qcycpO1xuXG4vLyBUT0RPKHYxMSk6IENoYW5nZSBkZWZhdWx0cyBiYXNlZCBvbiBgc2VuZERlZmF1bHRQaWlgXG5jb25zdCBERUZBVUxUX0lOQ0xVREUgPSB7XG4gIGNvb2tpZXM6IHRydWUsXG4gIGRhdGE6IHRydWUsXG4gIGhlYWRlcnM6IHRydWUsXG4gIHF1ZXJ5X3N0cmluZzogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxufTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZXF1ZXN0RGF0YSc7XG5cbmNvbnN0IF9yZXF1ZXN0RGF0YUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgaW5jbHVkZSA9IHtcbiAgICAuLi5ERUZBVUxUX0lOQ0xVREUsXG4gICAgLi4ub3B0aW9ucy5pbmNsdWRlLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQsIF9oaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IHsgc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge30gfSA9IGV2ZW50O1xuICAgICAgY29uc3QgeyBub3JtYWxpemVkUmVxdWVzdCwgaXBBZGRyZXNzIH0gPSBzZGtQcm9jZXNzaW5nTWV0YWRhdGE7XG5cbiAgICAgIGNvbnN0IGluY2x1ZGVXaXRoRGVmYXVsdFBpaUFwcGxpZWQgPSB7XG4gICAgICAgIC4uLmluY2x1ZGUsXG4gICAgICAgIGlwOiBpbmNsdWRlLmlwID8/IGNsaWVudC5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWksXG4gICAgICB9O1xuXG4gICAgICBpZiAobm9ybWFsaXplZFJlcXVlc3QpIHtcbiAgICAgICAgYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudChldmVudCwgbm9ybWFsaXplZFJlcXVlc3QsIHsgaXBBZGRyZXNzIH0sIGluY2x1ZGVXaXRoRGVmYXVsdFBpaUFwcGxpZWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgZGF0YSBhYm91dCBhIHJlcXVlc3QgdG8gYW4gZXZlbnQuIFByaW1hcmlseSBmb3IgdXNlIGluIE5vZGUtYmFzZWQgU0RLcywgYnV0IGluY2x1ZGVkIGluIGBAc2VudHJ5L2NvcmVgXG4gKiBzbyBpdCBjYW4gYmUgdXNlZCBpbiBjcm9zcy1wbGF0Zm9ybSBTREtzIGxpa2UgYEBzZW50cnkvbmV4dGpzYC5cbiAqL1xuY29uc3QgcmVxdWVzdERhdGFJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9yZXF1ZXN0RGF0YUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYWxyZWFkeSBub3JtYWxpemVkIHJlcXVlc3QgZGF0YSB0byBhbiBldmVudC5cbiAqIFRoaXMgbXV0YXRlcyB0aGUgcGFzc2VkIGluIGV2ZW50LlxuICovXG5mdW5jdGlvbiBhZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50KFxuICBldmVudCxcbiAgcmVxLFxuICAvLyBEYXRhIHRoYXQgc2hvdWxkIG5vdCBnbyBpbnRvIGBldmVudC5yZXF1ZXN0YCBidXQgaXMgc29tZWhvdyByZWxhdGVkIHRvIHJlcXVlc3RzXG4gIGFkZGl0aW9uYWxEYXRhLFxuICBpbmNsdWRlLFxuKSB7XG4gIGV2ZW50LnJlcXVlc3QgPSB7XG4gICAgLi4uZXZlbnQucmVxdWVzdCxcbiAgICAuLi5leHRyYWN0Tm9ybWFsaXplZFJlcXVlc3REYXRhKHJlcSwgaW5jbHVkZSksXG4gIH07XG5cbiAgaWYgKGluY2x1ZGUuaXApIHtcbiAgICBjb25zdCBpcCA9IChyZXEuaGVhZGVycyAmJiBnZXRJcEFkZHJlc3MuZ2V0Q2xpZW50SVBBZGRyZXNzKHJlcS5oZWFkZXJzKSkgfHwgYWRkaXRpb25hbERhdGEuaXBBZGRyZXNzO1xuICAgIGlmIChpcCkge1xuICAgICAgZXZlbnQudXNlciA9IHtcbiAgICAgICAgLi4uZXZlbnQudXNlcixcbiAgICAgICAgaXBfYWRkcmVzczogaXAsXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0Tm9ybWFsaXplZFJlcXVlc3REYXRhKFxuICBub3JtYWxpemVkUmVxdWVzdCxcbiAgaW5jbHVkZSxcbikge1xuICBjb25zdCByZXF1ZXN0RGF0YSA9IHt9O1xuICBjb25zdCBoZWFkZXJzID0geyAuLi5ub3JtYWxpemVkUmVxdWVzdC5oZWFkZXJzIH07XG5cbiAgaWYgKGluY2x1ZGUuaGVhZGVycykge1xuICAgIHJlcXVlc3REYXRhLmhlYWRlcnMgPSBoZWFkZXJzO1xuXG4gICAgLy8gUmVtb3ZlIHRoZSBDb29raWUgaGVhZGVyIGluIGNhc2UgY29va2llIGRhdGEgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRcbiAgICBpZiAoIWluY2x1ZGUuY29va2llcykge1xuICAgICAgZGVsZXRlIChoZWFkZXJzICkuY29va2llO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBJUCBoZWFkZXJzIGluIGNhc2UgSVAgZGF0YSBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSBldmVudFxuICAgIGlmICghaW5jbHVkZS5pcCkge1xuICAgICAgZ2V0SXBBZGRyZXNzLmlwSGVhZGVyTmFtZXMuZm9yRWFjaChpcEhlYWRlck5hbWUgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgIGRlbGV0ZSAoaGVhZGVycyApW2lwSGVhZGVyTmFtZV07XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXF1ZXN0RGF0YS5tZXRob2QgPSBub3JtYWxpemVkUmVxdWVzdC5tZXRob2Q7XG5cbiAgaWYgKGluY2x1ZGUudXJsKSB7XG4gICAgcmVxdWVzdERhdGEudXJsID0gbm9ybWFsaXplZFJlcXVlc3QudXJsO1xuICB9XG5cbiAgaWYgKGluY2x1ZGUuY29va2llcykge1xuICAgIGNvbnN0IGNvb2tpZXMgPSBub3JtYWxpemVkUmVxdWVzdC5jb29raWVzIHx8IChoZWFkZXJzPy5jb29raWUgPyBjb29raWUucGFyc2VDb29raWUoaGVhZGVycy5jb29raWUpIDogdW5kZWZpbmVkKTtcbiAgICByZXF1ZXN0RGF0YS5jb29raWVzID0gY29va2llcyB8fCB7fTtcbiAgfVxuXG4gIGlmIChpbmNsdWRlLnF1ZXJ5X3N0cmluZykge1xuICAgIHJlcXVlc3REYXRhLnF1ZXJ5X3N0cmluZyA9IG5vcm1hbGl6ZWRSZXF1ZXN0LnF1ZXJ5X3N0cmluZztcbiAgfVxuXG4gIGlmIChpbmNsdWRlLmRhdGEpIHtcbiAgICByZXF1ZXN0RGF0YS5kYXRhID0gbm9ybWFsaXplZFJlcXVlc3QuZGF0YTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0RGF0YTtcbn1cblxuZXhwb3J0cy5yZXF1ZXN0RGF0YUludGVncmF0aW9uID0gcmVxdWVzdERhdGFJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3RkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst path = __webpack_require__(/*! ../utils/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/path.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\n/**\n * Rewrite event frames paths.\n */\nconst rewriteFramesIntegration = integration.defineIntegration((options = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = 'window' in worldwide.GLOBAL_OBJ && !!worldwide.GLOBAL_OBJ.window;\n\n  const iteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames?.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nfunction generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}\n\n) {\n  return (frame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? path.relative(root, filename) : path.basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n\nexports.generateIteratee = generateIteratee;\nexports.rewriteFramesIntegration = rewriteFramesIntegration;\n//# sourceMappingURL=rewriteframes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Jld3JpdGVmcmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQywwRkFBa0I7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsb0dBQXVCOztBQUVqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUU7QUFDQTs7QUFFQTs7QUFFQSwwREFBMEQseUJBQXlCOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGtEQUFrRDtBQUN4RixXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTyxFQUFFLEtBQUs7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Jld3JpdGVmcmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCcuLi91dGlscy9wYXRoLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuLi91dGlscy93b3JsZHdpZGUuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZXdyaXRlRnJhbWVzJztcblxuLyoqXG4gKiBSZXdyaXRlIGV2ZW50IGZyYW1lcyBwYXRocy5cbiAqL1xuY29uc3QgcmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCByb290ID0gb3B0aW9ucy5yb290O1xuICBjb25zdCBwcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnYXBwOi8vLyc7XG5cbiAgY29uc3QgaXNCcm93c2VyID0gJ3dpbmRvdycgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkogJiYgISF3b3JsZHdpZGUuR0xPQkFMX09CSi53aW5kb3c7XG5cbiAgY29uc3QgaXRlcmF0ZWUgPSBvcHRpb25zLml0ZXJhdGVlIHx8IGdlbmVyYXRlSXRlcmF0ZWUoeyBpc0Jyb3dzZXIsIHJvb3QsIHByZWZpeCB9KTtcblxuICAvKiogUHJvY2VzcyBhbiBleGNlcHRpb24gZXZlbnQuICovXG4gIGZ1bmN0aW9uIF9wcm9jZXNzRXhjZXB0aW9uc0V2ZW50KGV2ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAuLi5ldmVudC5leGNlcHRpb24sXG4gICAgICAgICAgLy8gVGhlIGNoZWNrIGZvciB0aGlzIGlzIHBlcmZvcm1lZCBpbnNpZGUgYHByb2Nlc3NgIGNhbGwgaXRzZWxmLCBzYWZlIHRvIHNraXAgaGVyZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgdmFsdWVzOiBldmVudC5leGNlcHRpb24udmFsdWVzLm1hcCh2YWx1ZSA9PiAoe1xuICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICAuLi4odmFsdWUuc3RhY2t0cmFjZSAmJiB7IHN0YWNrdHJhY2U6IF9wcm9jZXNzU3RhY2t0cmFjZSh2YWx1ZS5zdGFja3RyYWNlKSB9KSxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKiBQcm9jZXNzIGEgc3RhY2sgdHJhY2UuICovXG4gIGZ1bmN0aW9uIF9wcm9jZXNzU3RhY2t0cmFjZShzdGFja3RyYWNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0YWNrdHJhY2UsXG4gICAgICBmcmFtZXM6IHN0YWNrdHJhY2U/LmZyYW1lcz8ubWFwKGYgPT4gaXRlcmF0ZWUoZikpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KG9yaWdpbmFsRXZlbnQpIHtcbiAgICAgIGxldCBwcm9jZXNzZWRFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIGlmIChvcmlnaW5hbEV2ZW50LmV4Y2VwdGlvbiAmJiBBcnJheS5pc0FycmF5KG9yaWdpbmFsRXZlbnQuZXhjZXB0aW9uLnZhbHVlcykpIHtcbiAgICAgICAgcHJvY2Vzc2VkRXZlbnQgPSBfcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudChwcm9jZXNzZWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9jZXNzZWRFdmVudDtcbiAgICB9LFxuICB9O1xufSk7XG5cbi8qKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSXRlcmF0ZWUoe1xuICBpc0Jyb3dzZXIsXG4gIHJvb3QsXG4gIHByZWZpeCxcbn1cblxuKSB7XG4gIHJldHVybiAoZnJhbWUpID0+IHtcbiAgICBpZiAoIWZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBXaW5kb3dzIGZyYW1lIGJ5IGNoZWNraW5nIGZvciBhIFdpbmRvd3Mtc3R5bGUgcHJlZml4IHN1Y2ggYXMgYEM6XFxgXG4gICAgY29uc3QgaXNXaW5kb3dzRnJhbWUgPVxuICAgICAgL15bYS16QS1aXTpcXFxcLy50ZXN0KGZyYW1lLmZpbGVuYW1lKSB8fFxuICAgICAgLy8gb3IgdGhlIHByZXNlbmNlIG9mIGEgYmFja3NsYXNoIHdpdGhvdXQgYSBmb3J3YXJkIHNsYXNoICh3aGljaCBhcmUgbm90IGFsbG93ZWQgb24gV2luZG93cylcbiAgICAgIChmcmFtZS5maWxlbmFtZS5pbmNsdWRlcygnXFxcXCcpICYmICFmcmFtZS5maWxlbmFtZS5pbmNsdWRlcygnLycpKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBmcmFtZSBmaWxlbmFtZSBiZWdpbnMgd2l0aCBgL2BcbiAgICBjb25zdCBzdGFydHNXaXRoU2xhc2ggPSAvXlxcLy8udGVzdChmcmFtZS5maWxlbmFtZSk7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBjb25zdCBvbGRGaWxlbmFtZSA9IGZyYW1lLmZpbGVuYW1lO1xuICAgICAgICBpZiAob2xkRmlsZW5hbWUuaW5kZXhPZihyb290KSA9PT0gMCkge1xuICAgICAgICAgIGZyYW1lLmZpbGVuYW1lID0gb2xkRmlsZW5hbWUucmVwbGFjZShyb290LCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1dpbmRvd3NGcmFtZSB8fCBzdGFydHNXaXRoU2xhc2gpIHtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBpc1dpbmRvd3NGcmFtZVxuICAgICAgICAgID8gZnJhbWUuZmlsZW5hbWVcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL15bYS16QS1aXTovLCAnJykgLy8gcmVtb3ZlIFdpbmRvd3Mtc3R5bGUgcHJlZml4XG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJykgLy8gcmVwbGFjZSBhbGwgYFxcXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxuICAgICAgICAgIDogZnJhbWUuZmlsZW5hbWU7XG4gICAgICAgIGNvbnN0IGJhc2UgPSByb290ID8gcGF0aC5yZWxhdGl2ZShyb290LCBmaWxlbmFtZSkgOiBwYXRoLmJhc2VuYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgZnJhbWUuZmlsZW5hbWUgPSBgJHtwcmVmaXh9JHtiYXNlfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYW1lO1xuICB9O1xufVxuXG5leHBvcnRzLmdlbmVyYXRlSXRlcmF0ZWUgPSBnZW5lcmF0ZUl0ZXJhdGVlO1xuZXhwb3J0cy5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSByZXdyaXRlRnJhbWVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXdyaXRlZnJhbWVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/supabase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/supabase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst breadcrumbs = __webpack_require__(/*! ../breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst misc = __webpack_require__(/*! ../utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst spanstatus = __webpack_require__(/*! ../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\n\n// Based on Kamil Ogórek's work on:\n// https://github.com/supabase-community/sentry-integration-js\n\n\nconst AUTH_OPERATIONS_TO_INSTRUMENT = [\n  'reauthenticate',\n  'signInAnonymously',\n  'signInWithOAuth',\n  'signInWithIdToken',\n  'signInWithOtp',\n  'signInWithPassword',\n  'signInWithSSO',\n  'signOut',\n  'signUp',\n  'verifyOtp',\n];\n\nconst AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT = [\n  'createUser',\n  'deleteUser',\n  'listUsers',\n  'getUserById',\n  'updateUserById',\n  'inviteUserByEmail',\n];\n\nconst FILTER_MAPPINGS = {\n  eq: 'eq',\n  neq: 'neq',\n  gt: 'gt',\n  gte: 'gte',\n  lt: 'lt',\n  lte: 'lte',\n  like: 'like',\n  'like(all)': 'likeAllOf',\n  'like(any)': 'likeAnyOf',\n  ilike: 'ilike',\n  'ilike(all)': 'ilikeAllOf',\n  'ilike(any)': 'ilikeAnyOf',\n  is: 'is',\n  in: 'in',\n  cs: 'contains',\n  cd: 'containedBy',\n  sr: 'rangeGt',\n  nxl: 'rangeGte',\n  sl: 'rangeLt',\n  nxr: 'rangeLte',\n  adj: 'rangeAdjacent',\n  ov: 'overlaps',\n  fts: '',\n  plfts: 'plain',\n  phfts: 'phrase',\n  wfts: 'websearch',\n  not: 'not',\n};\n\nconst DB_OPERATIONS_TO_INSTRUMENT = ['select', 'insert', 'upsert', 'update', 'delete'];\n\nfunction markAsInstrumented(fn) {\n  try {\n    (fn ).__SENTRY_INSTRUMENTED__ = true;\n  } catch {\n    // ignore errors here\n  }\n}\n\nfunction isInstrumented(fn) {\n  try {\n    return (fn ).__SENTRY_INSTRUMENTED__;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts the database operation type from the HTTP method and headers\n * @param method - The HTTP method of the request\n * @param headers - The request headers\n * @returns The database operation type ('select', 'insert', 'upsert', 'update', or 'delete')\n */\nfunction extractOperation(method, headers = {}) {\n  switch (method) {\n    case 'GET': {\n      return 'select';\n    }\n    case 'POST': {\n      if (headers['Prefer']?.includes('resolution=')) {\n        return 'upsert';\n      } else {\n        return 'insert';\n      }\n    }\n    case 'PATCH': {\n      return 'update';\n    }\n    case 'DELETE': {\n      return 'delete';\n    }\n    default: {\n      return '<unknown-op>';\n    }\n  }\n}\n\n/**\n * Translates Supabase filter parameters into readable method names for tracing\n * @param key - The filter key from the URL search parameters\n * @param query - The filter value from the URL search parameters\n * @returns A string representation of the filter as a method call\n */\nfunction translateFiltersIntoMethods(key, query) {\n  if (query === '' || query === '*') {\n    return 'select(*)';\n  }\n\n  if (key === 'select') {\n    return `select(${query})`;\n  }\n\n  if (key === 'or' || key.endsWith('.or')) {\n    return `${key}${query}`;\n  }\n\n  const [filter, ...value] = query.split('.');\n\n  let method;\n  // Handle optional `configPart` of the filter\n  if (filter?.startsWith('fts')) {\n    method = 'textSearch';\n  } else if (filter?.startsWith('plfts')) {\n    method = 'textSearch[plain]';\n  } else if (filter?.startsWith('phfts')) {\n    method = 'textSearch[phrase]';\n  } else if (filter?.startsWith('wfts')) {\n    method = 'textSearch[websearch]';\n  } else {\n    method = (filter && FILTER_MAPPINGS[filter ]) || 'filter';\n  }\n\n  return `${method}(${key}, ${value.join('.')})`;\n}\n\nfunction instrumentAuthOperation(operation, isAdmin = false) {\n  return new Proxy(operation, {\n    apply(target, thisArg, argumentsList) {\n      return trace.startSpan(\n        {\n          name: `auth ${isAdmin ? '(admin) ' : ''}${operation.name}`,\n          attributes: {\n            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n            'db.system': 'postgresql',\n            'db.operation': `auth.${isAdmin ? 'admin.' : ''}${operation.name}`,\n          },\n        },\n        span => {\n          return Reflect.apply(target, thisArg, argumentsList)\n            .then((res) => {\n              if (res && typeof res === 'object' && 'error' in res && res.error) {\n                span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR });\n\n                exports$1.captureException(res.error, {\n                  mechanism: {\n                    handled: false,\n                    type: 'auto.db.supabase.auth',\n                  },\n                });\n              } else {\n                span.setStatus({ code: spanstatus.SPAN_STATUS_OK });\n              }\n\n              span.end();\n              return res;\n            })\n            .catch((err) => {\n              span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR });\n              span.end();\n\n              exports$1.captureException(err, {\n                mechanism: {\n                  handled: false,\n                  type: 'auto.db.supabase.auth',\n                },\n              });\n\n              throw err;\n            })\n            .then(...argumentsList);\n        },\n      );\n    },\n  });\n}\n\nfunction instrumentSupabaseAuthClient(supabaseClientInstance) {\n  const auth = supabaseClientInstance.auth;\n\n  if (!auth || isInstrumented(supabaseClientInstance.auth)) {\n    return;\n  }\n\n  for (const operation of AUTH_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth[operation] === 'function') {\n      supabaseClientInstance.auth[operation] = instrumentAuthOperation(authOperation);\n    }\n  }\n\n  for (const operation of AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth.admin[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth.admin[operation] === 'function') {\n      supabaseClientInstance.auth.admin[operation] = instrumentAuthOperation(authOperation, true);\n    }\n  }\n\n  markAsInstrumented(supabaseClientInstance.auth);\n}\n\nfunction instrumentSupabaseClientConstructor(SupabaseClient) {\n  if (isInstrumented((SupabaseClient ).prototype.from)) {\n    return;\n  }\n\n  (SupabaseClient ).prototype.from = new Proxy(\n    (SupabaseClient ).prototype.from,\n    {\n      apply(target, thisArg, argumentsList) {\n        const rv = Reflect.apply(target, thisArg, argumentsList);\n        const PostgRESTQueryBuilder = (rv ).constructor;\n\n        instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder );\n\n        return rv;\n      },\n    },\n  );\n\n  markAsInstrumented((SupabaseClient ).prototype.from);\n}\n\nfunction instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder) {\n  if (isInstrumented((PostgRESTFilterBuilder.prototype ).then)) {\n    return;\n  }\n\n  (PostgRESTFilterBuilder.prototype ).then = new Proxy(\n    (PostgRESTFilterBuilder.prototype ).then,\n    {\n      apply(target, thisArg, argumentsList) {\n        const operations = DB_OPERATIONS_TO_INSTRUMENT;\n        const typedThis = thisArg ;\n        const operation = extractOperation(typedThis.method, typedThis.headers);\n\n        if (!operations.includes(operation)) {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        if (!typedThis?.url?.pathname || typeof typedThis.url.pathname !== 'string') {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        const pathParts = typedThis.url.pathname.split('/');\n        const table = pathParts.length > 0 ? pathParts[pathParts.length - 1] : '';\n\n        const queryItems = [];\n        for (const [key, value] of typedThis.url.searchParams.entries()) {\n          // It's possible to have multiple entries for the same key, eg. `id=eq.7&id=eq.3`,\n          // so we need to use array instead of object to collect them.\n          queryItems.push(translateFiltersIntoMethods(key, value));\n        }\n        const body = Object.create(null);\n        if (is.isPlainObject(typedThis.body)) {\n          for (const [key, value] of Object.entries(typedThis.body)) {\n            body[key] = value;\n          }\n        }\n\n        // Adding operation to the beginning of the description if it's not a `select` operation\n        // For example, it can be an `insert` or `update` operation but the query can be `select(...)`\n        // For `select` operations, we don't need repeat it in the description\n        const description = `${operation === 'select' ? '' : `${operation}${body ? '(...) ' : ''}`}${queryItems.join(\n          ' ',\n        )} from(${table})`;\n\n        const attributes = {\n          'db.table': table,\n          'db.schema': typedThis.schema,\n          'db.url': typedThis.url.origin,\n          'db.sdk': typedThis.headers['X-Client-Info'],\n          'db.system': 'postgresql',\n          'db.operation': operation,\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n        };\n\n        if (queryItems.length) {\n          attributes['db.query'] = queryItems;\n        }\n\n        if (Object.keys(body).length) {\n          attributes['db.body'] = body;\n        }\n\n        return trace.startSpan(\n          {\n            name: description,\n            attributes,\n          },\n          span => {\n            return (Reflect.apply(target, thisArg, []) )\n              .then(\n                (res) => {\n                  if (span) {\n                    if (res && typeof res === 'object' && 'status' in res) {\n                      spanstatus.setHttpStatus(span, res.status || 500);\n                    }\n                    span.end();\n                  }\n\n                  if (res.error) {\n                    const err = new Error(res.error.message) ;\n                    if (res.error.code) {\n                      err.code = res.error.code;\n                    }\n                    if (res.error.details) {\n                      err.details = res.error.details;\n                    }\n\n                    const supabaseContext = {};\n                    if (queryItems.length) {\n                      supabaseContext.query = queryItems;\n                    }\n                    if (Object.keys(body).length) {\n                      supabaseContext.body = body;\n                    }\n\n                    exports$1.captureException(err, scope => {\n                      scope.addEventProcessor(e => {\n                        misc.addExceptionMechanism(e, {\n                          handled: false,\n                          type: 'auto.db.supabase.postgres',\n                        });\n\n                        return e;\n                      });\n\n                      scope.setContext('supabase', supabaseContext);\n\n                      return scope;\n                    });\n                  }\n\n                  const breadcrumb = {\n                    type: 'supabase',\n                    category: `db.${operation}`,\n                    message: description,\n                  };\n\n                  const data = {};\n\n                  if (queryItems.length) {\n                    data.query = queryItems;\n                  }\n\n                  if (Object.keys(body).length) {\n                    data.body = body;\n                  }\n\n                  if (Object.keys(data).length) {\n                    breadcrumb.data = data;\n                  }\n\n                  breadcrumbs.addBreadcrumb(breadcrumb);\n\n                  return res;\n                },\n                (err) => {\n                  // TODO: shouldn't we capture this error?\n                  if (span) {\n                    spanstatus.setHttpStatus(span, 500);\n                    span.end();\n                  }\n                  throw err;\n                },\n              )\n              .then(...argumentsList);\n          },\n        );\n      },\n    },\n  );\n\n  markAsInstrumented((PostgRESTFilterBuilder.prototype ).then);\n}\n\nfunction instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder) {\n  // We need to wrap _all_ operations despite them sharing the same `PostgRESTFilterBuilder`\n  // constructor, as we don't know which method will be called first, and we don't want to miss any calls.\n  for (const operation of DB_OPERATIONS_TO_INSTRUMENT) {\n    if (isInstrumented((PostgRESTQueryBuilder.prototype )[operation])) {\n      continue;\n    }\n\n    (PostgRESTQueryBuilder.prototype )[operation ] = new Proxy(\n      (PostgRESTQueryBuilder.prototype )[operation ],\n      {\n        apply(target, thisArg, argumentsList) {\n          const rv = Reflect.apply(target, thisArg, argumentsList);\n          const PostgRESTFilterBuilder = (rv ).constructor;\n\n          debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Instrumenting ${operation} operation's PostgRESTFilterBuilder`);\n\n          instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder);\n\n          return rv;\n        },\n      },\n    );\n\n    markAsInstrumented((PostgRESTQueryBuilder.prototype )[operation]);\n  }\n}\n\nconst instrumentSupabaseClient = (supabaseClient) => {\n  if (!supabaseClient) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Supabase integration was not installed because no Supabase client was provided.');\n    return;\n  }\n  const SupabaseClientConstructor =\n    supabaseClient.constructor === Function ? supabaseClient : supabaseClient.constructor;\n\n  instrumentSupabaseClientConstructor(SupabaseClientConstructor);\n  instrumentSupabaseAuthClient(supabaseClient );\n};\n\nconst INTEGRATION_NAME = 'Supabase';\n\nconst _supabaseIntegration = ((supabaseClient) => {\n  return {\n    setupOnce() {\n      instrumentSupabaseClient(supabaseClient);\n    },\n    name: INTEGRATION_NAME,\n  };\n}) ;\n\nconst supabaseIntegration = integration.defineIntegration((options) => {\n  return _supabaseIntegration(options.supabaseClient);\n}) ;\n\nexports.DB_OPERATIONS_TO_INSTRUMENT = DB_OPERATIONS_TO_INSTRUMENT;\nexports.FILTER_MAPPINGS = FILTER_MAPPINGS;\nexports.extractOperation = extractOperation;\nexports.instrumentSupabaseClient = instrumentSupabaseClient;\nexports.supabaseIntegration = supabaseIntegration;\nexports.translateFiltersIntoMethods = translateFiltersIntoMethods;\n//# sourceMappingURL=supabase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/supabase.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst stacktrace = __webpack_require__(/*! ../utils/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nconst thirdPartyErrorFilterIntegration = integration.defineIntegration((options) => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item )[1] : undefined;\n\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    },\n\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n\n      if (frameKeys) {\n        const arrayMethod =\n          options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n          options.behaviour === 'apply-tag-if-contains-third-party-frames'\n            ? 'some'\n            : 'every';\n\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n\n        if (behaviourApplies) {\n          const shouldDrop =\n            options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n            options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true,\n            };\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\nfunction getBundleKeysForAllFramesWithFilenames(event) {\n  const frames = stacktrace.getFramesFromEvent(event);\n\n  if (!frames) {\n    return undefined;\n  }\n\n  return (\n    frames\n      // Exclude frames without a filename since these are likely native code or built-ins\n      .filter(frame => !!frame.filename)\n      .map(frame => {\n        if (frame.module_metadata) {\n          return Object.keys(frame.module_metadata)\n            .filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX))\n            .map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n        }\n        return [];\n      })\n  );\n}\n\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\n\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorFilterIntegration;\n//# sourceMappingURL=third-party-errors-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RoaXJkLXBhcnR5LWVycm9ycy1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsb0JBQW9CLG1CQUFPLENBQUMsNEZBQW1CO0FBQy9DLGlCQUFpQixtQkFBTyxDQUFDLHNGQUFnQjtBQUN6QyxpQkFBaUIsbUJBQU8sQ0FBQyxrR0FBc0I7QUFDL0MsbUJBQW1CLG1CQUFPLENBQUMsc0dBQXdCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdGhpcmQtcGFydHktZXJyb3JzLWZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgbWV0YWRhdGEgPSByZXF1aXJlKCcuLi9tZXRhZGF0YS5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy9lbnZlbG9wZS5qcycpO1xuY29uc3Qgc3RhY2t0cmFjZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0YWNrdHJhY2UuanMnKTtcblxuLyoqXG4gKiBUaGlzIGludGVncmF0aW9uIGFsbG93cyB5b3UgdG8gZmlsdGVyIG91dCwgb3IgdGFnIGVycm9yIGV2ZW50cyB0aGF0IGRvIG5vdCBjb21lIGZyb20gdXNlciBjb2RlIG1hcmtlZCB3aXRoIGEgYnVuZGxlIGtleSB2aWEgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMuXG4gKi9cbmNvbnN0IHRoaXJkUGFydHlFcnJvckZpbHRlckludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnVGhpcmRQYXJ0eUVycm9yc0ZpbHRlcicsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHN0cmlwIG1ldGFkYXRhIGZyb20gc3RhY2sgZnJhbWVzIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gU2VudHJ5IHNpbmNlIHRoZXNlIGFyZSBjbGllbnQgc2lkZSBvbmx5LlxuICAgICAgLy8gVE9ETyhsZm9yc3QpOiBNb3ZlIHRoaXMgY2xlYW51cCBsb2dpYyBpbnRvIGEgbW9yZSBjZW50cmFsIHBsYWNlIGluIHRoZSBTREsuXG4gICAgICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgZW52ZWxvcGUkMSA9PiB7XG4gICAgICAgIGVudmVsb3BlLmZvckVhY2hFbnZlbG9wZUl0ZW0oZW52ZWxvcGUkMSwgKGl0ZW0sIHR5cGUpID0+IHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gKGl0ZW0gKVsxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLnN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMoZXZlbnQpO1xuICAgICAgICAgICAgICBpdGVtWzFdID0gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBjbGllbnQub24oJ2FwcGx5RnJhbWVNZXRhZGF0YScsIGV2ZW50ID0+IHtcbiAgICAgICAgLy8gT25seSBhcHBseSBzdGFjayBmcmFtZSBtZXRhZGF0YSB0byBlcnJvciBldmVudHNcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGFja1BhcnNlciA9IGNsaWVudC5nZXRPcHRpb25zKCkuc3RhY2tQYXJzZXI7XG4gICAgICAgIG1ldGFkYXRhLmFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyhzdGFja1BhcnNlciwgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgY29uc3QgZnJhbWVLZXlzID0gZ2V0QnVuZGxlS2V5c0ZvckFsbEZyYW1lc1dpdGhGaWxlbmFtZXMoZXZlbnQpO1xuXG4gICAgICBpZiAoZnJhbWVLZXlzKSB7XG4gICAgICAgIGNvbnN0IGFycmF5TWV0aG9kID1cbiAgICAgICAgICBvcHRpb25zLmJlaGF2aW91ciA9PT0gJ2Ryb3AtZXJyb3ItaWYtY29udGFpbnMtdGhpcmQtcGFydHktZnJhbWVzJyB8fFxuICAgICAgICAgIG9wdGlvbnMuYmVoYXZpb3VyID09PSAnYXBwbHktdGFnLWlmLWNvbnRhaW5zLXRoaXJkLXBhcnR5LWZyYW1lcydcbiAgICAgICAgICAgID8gJ3NvbWUnXG4gICAgICAgICAgICA6ICdldmVyeSc7XG5cbiAgICAgICAgY29uc3QgYmVoYXZpb3VyQXBwbGllcyA9IGZyYW1lS2V5c1thcnJheU1ldGhvZF0oa2V5cyA9PiAha2V5cy5zb21lKGtleSA9PiBvcHRpb25zLmZpbHRlcktleXMuaW5jbHVkZXMoa2V5KSkpO1xuXG4gICAgICAgIGlmIChiZWhhdmlvdXJBcHBsaWVzKSB7XG4gICAgICAgICAgY29uc3Qgc2hvdWxkRHJvcCA9XG4gICAgICAgICAgICBvcHRpb25zLmJlaGF2aW91ciA9PT0gJ2Ryb3AtZXJyb3ItaWYtY29udGFpbnMtdGhpcmQtcGFydHktZnJhbWVzJyB8fFxuICAgICAgICAgICAgb3B0aW9ucy5iZWhhdmlvdXIgPT09ICdkcm9wLWVycm9yLWlmLWV4Y2x1c2l2ZWx5LWNvbnRhaW5zLXRoaXJkLXBhcnR5LWZyYW1lcyc7XG4gICAgICAgICAgaWYgKHNob3VsZERyb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudC50YWdzID0ge1xuICAgICAgICAgICAgICAuLi5ldmVudC50YWdzLFxuICAgICAgICAgICAgICB0aGlyZF9wYXJ0eV9jb2RlOiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0sXG4gIH07XG59KTtcblxuZnVuY3Rpb24gZ2V0QnVuZGxlS2V5c0ZvckFsbEZyYW1lc1dpdGhGaWxlbmFtZXMoZXZlbnQpIHtcbiAgY29uc3QgZnJhbWVzID0gc3RhY2t0cmFjZS5nZXRGcmFtZXNGcm9tRXZlbnQoZXZlbnQpO1xuXG4gIGlmICghZnJhbWVzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgZnJhbWVzXG4gICAgICAvLyBFeGNsdWRlIGZyYW1lcyB3aXRob3V0IGEgZmlsZW5hbWUgc2luY2UgdGhlc2UgYXJlIGxpa2VseSBuYXRpdmUgY29kZSBvciBidWlsdC1pbnNcbiAgICAgIC5maWx0ZXIoZnJhbWUgPT4gISFmcmFtZS5maWxlbmFtZSlcbiAgICAgIC5tYXAoZnJhbWUgPT4ge1xuICAgICAgICBpZiAoZnJhbWUubW9kdWxlX21ldGFkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGZyYW1lLm1vZHVsZV9tZXRhZGF0YSlcbiAgICAgICAgICAgIC5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKEJVTkRMRVJfUExVR0lOX0FQUF9LRVlfUFJFRklYKSlcbiAgICAgICAgICAgIC5tYXAoa2V5ID0+IGtleS5zbGljZShCVU5ETEVSX1BMVUdJTl9BUFBfS0VZX1BSRUZJWC5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgICB9KVxuICApO1xufVxuXG5jb25zdCBCVU5ETEVSX1BMVUdJTl9BUFBfS0VZX1BSRUZJWCA9ICdfc2VudHJ5QnVuZGxlclBsdWdpbkFwcEtleTonO1xuXG5leHBvcnRzLnRoaXJkUGFydHlFcnJvckZpbHRlckludGVncmF0aW9uID0gdGhpcmRQYXJ0eUVycm9yRmlsdGVySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aGlyZC1wYXJ0eS1lcnJvcnMtZmlsdGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst string = __webpack_require__(/*! ../utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\n\nconst DEFAULT_LIMIT = 10;\nconst INTEGRATION_NAME = 'ZodErrors';\n\n/**\n * Simplified ZodIssue type definition\n */\n\nfunction originalExceptionIsZodError(originalException) {\n  return (\n    is.isError(originalException) &&\n    originalException.name === 'ZodError' &&\n    Array.isArray((originalException ).issues)\n  );\n}\n\n/**\n * Formats child objects or arrays to a string\n * that is preserved when sent to Sentry.\n *\n * Without this, we end up with something like this in Sentry:\n *\n * [\n *  [Object],\n *  [Object],\n *  [Object],\n *  [Object]\n * ]\n */\nfunction flattenIssue(issue) {\n  return {\n    ...issue,\n    path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n    keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n    unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined,\n  };\n}\n\n/**\n * Takes ZodError issue path array and returns a flattened version as a string.\n * This makes it easier to display paths within a Sentry error message.\n *\n * Array indexes are normalized to reduce duplicate entries\n *\n * @param path ZodError issue path\n * @returns flattened path\n *\n * @example\n * flattenIssuePath([0, 'foo', 1, 'bar']) // -> '<array>.foo.<array>.bar'\n */\nfunction flattenIssuePath(path) {\n  return path\n    .map(p => {\n      if (typeof p === 'number') {\n        return '<array>';\n      } else {\n        return p;\n      }\n    })\n    .join('.');\n}\n\n/**\n * Zod error message is a stringified version of ZodError.issues\n * This doesn't display well in the Sentry UI. Replace it with something shorter.\n */\nfunction formatIssueMessage(zodError) {\n  const errorKeyMap = new Set();\n  for (const iss of zodError.issues) {\n    const issuePath = flattenIssuePath(iss.path);\n    if (issuePath.length > 0) {\n      errorKeyMap.add(issuePath);\n    }\n  }\n\n  const errorKeys = Array.from(errorKeyMap);\n  if (errorKeys.length === 0) {\n    // If there are no keys, then we're likely validating the root\n    // variable rather than a key within an object. This attempts\n    // to extract what type it was that failed to validate.\n    // For example, z.string().parse(123) would return \"string\" here.\n    let rootExpectedType = 'variable';\n    if (zodError.issues.length > 0) {\n      const iss = zodError.issues[0];\n      if (iss !== undefined && 'expected' in iss && typeof iss.expected === 'string') {\n        rootExpectedType = iss.expected;\n      }\n    }\n    return `Failed to validate ${rootExpectedType}`;\n  }\n  return `Failed to validate keys: ${string.truncate(errorKeys.join(', '), 100)}`;\n}\n\n/**\n * Applies ZodError issues to an event extra and replaces the error message\n */\nfunction applyZodErrorsToEvent(\n  limit,\n  saveZodIssuesAsAttachment = false,\n  event,\n  hint,\n) {\n  if (\n    !event.exception?.values ||\n    !hint.originalException ||\n    !originalExceptionIsZodError(hint.originalException) ||\n    hint.originalException.issues.length === 0\n  ) {\n    return event;\n  }\n\n  try {\n    const issuesToFlatten = saveZodIssuesAsAttachment\n      ? hint.originalException.issues\n      : hint.originalException.issues.slice(0, limit);\n    const flattenedIssues = issuesToFlatten.map(flattenIssue);\n\n    if (saveZodIssuesAsAttachment) {\n      // Sometimes having the full error details can be helpful.\n      // Attachments have much higher limits, so we can include the full list of issues.\n      if (!Array.isArray(hint.attachments)) {\n        hint.attachments = [];\n      }\n      hint.attachments.push({\n        filename: 'zod_issues.json',\n        data: JSON.stringify({\n          issues: flattenedIssues,\n        }),\n      });\n    }\n\n    return {\n      ...event,\n      exception: {\n        ...event.exception,\n        values: [\n          {\n            ...event.exception.values[0],\n            value: formatIssueMessage(hint.originalException),\n          },\n          ...event.exception.values.slice(1),\n        ],\n      },\n      extra: {\n        ...event.extra,\n        'zoderror.issues': flattenedIssues.slice(0, limit),\n      },\n    };\n  } catch (e) {\n    // Hopefully we never throw errors here, but record it\n    // with the event just in case.\n    return {\n      ...event,\n      extra: {\n        ...event.extra,\n        'zoderrors sentry integration parse error': {\n          message: 'an exception was thrown while processing ZodError within applyZodErrorsToEvent()',\n          error: e instanceof Error ? `${e.name}: ${e.message}\\n${e.stack}` : 'unknown',\n        },\n      },\n    };\n  }\n}\n\nconst _zodErrorsIntegration = ((options = {}) => {\n  const limit = options.limit ?? DEFAULT_LIMIT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent, hint) {\n      const processedEvent = applyZodErrorsToEvent(limit, options.saveZodIssuesAsAttachment, originalEvent, hint);\n      return processedEvent;\n    },\n  };\n}) ;\n\n/**\n * Sentry integration to process Zod errors, making them easier to work with in Sentry.\n */\nconst zodErrorsIntegration = integration.defineIntegration(_zodErrorsIntegration);\n\nexports.applyZodErrorsToEvent = applyZodErrorsToEvent;\nexports.flattenIssue = flattenIssue;\nexports.flattenIssuePath = flattenIssuePath;\nexports.formatIssueMessage = formatIssueMessage;\nexports.zodErrorsIntegration = zodErrorsIntegration;\n//# sourceMappingURL=zoderrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/logs/console-integration.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/logs/console-integration.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst console = __webpack_require__(/*! ../instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/console.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst normalize = __webpack_require__(/*! ../utils/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst worldwide = __webpack_require__(/*! ../utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/exports.js\");\n\nconst INTEGRATION_NAME = 'ConsoleLogs';\n\nconst DEFAULT_ATTRIBUTES = {\n  [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging',\n};\n\nconst _consoleLoggingIntegration = ((options = {}) => {\n  const levels = options.levels || debugLogger.CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const { enableLogs, normalizeDepth = 3, normalizeMaxBreadth = 1000 } = client.getOptions();\n      if (!enableLogs) {\n        debugBuild.DEBUG_BUILD && debugLogger.debug.warn('`enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n\n      console.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (currentScopes.getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const assertionMessage =\n              followingArgs.length > 0\n                ? `Assertion failed: ${formatConsoleArgs(followingArgs, normalizeDepth, normalizeMaxBreadth)}`\n                : 'Assertion failed';\n            exports$1._INTERNAL_captureLog({ level: 'error', message: assertionMessage, attributes: DEFAULT_ATTRIBUTES });\n          }\n          return;\n        }\n\n        const isLevelLog = level === 'log';\n        exports$1._INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES,\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires the `enableLogs` option to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   enableLogs: true,\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleLoggingIntegration = integration.defineIntegration(_consoleLoggingIntegration);\n\nfunction formatConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return 'util' in worldwide.GLOBAL_OBJ && typeof (worldwide.GLOBAL_OBJ ).util.format === 'function'\n    ? (worldwide.GLOBAL_OBJ ).util.format(...values)\n    : safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth);\n}\n\nfunction safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return values\n    .map(value =>\n      is.isPrimitive(value) ? String(value) : JSON.stringify(normalize.normalize(value, normalizeDepth, normalizeMaxBreadth)),\n    )\n    .join(' ');\n}\n\nexports.consoleLoggingIntegration = consoleLoggingIntegration;\n//# sourceMappingURL=console-integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbG9ncy9jb25zb2xlLWludGVncmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLGdHQUFxQjtBQUNuRCxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsMEdBQTBCO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMvQywyQkFBMkIsbUJBQU8sQ0FBQywwR0FBMEI7QUFDN0Qsb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELFdBQVcsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDbkMsa0JBQWtCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1QjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyx3RkFBYzs7QUFFeEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlEQUFpRDtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZEQUE2RDtBQUMzRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0QsYUFBYTtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxzRUFBc0U7QUFDN0c7QUFDQSw2Q0FBNkMsMkVBQTJFO0FBQ3hIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMkJBQTJCO0FBQ2xGLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2xvZ3MvY29uc29sZS1pbnRlZ3JhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgY29uc29sZSA9IHJlcXVpcmUoJy4uL2luc3RydW1lbnQvY29uc29sZS5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuLi91dGlscy9pcy5qcycpO1xuY29uc3Qgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbHMvbm9ybWFsaXplLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuLi91dGlscy93b3JsZHdpZGUuanMnKTtcbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4vZXhwb3J0cy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NvbnNvbGVMb2dzJztcblxuY29uc3QgREVGQVVMVF9BVFRSSUJVVEVTID0ge1xuICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uY29uc29sZS5sb2dnaW5nJyxcbn07XG5cbmNvbnN0IF9jb25zb2xlTG9nZ2luZ0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgbGV2ZWxzID0gb3B0aW9ucy5sZXZlbHMgfHwgZGVidWdMb2dnZXIuQ09OU09MRV9MRVZFTFM7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY29uc3QgeyBlbmFibGVMb2dzLCBub3JtYWxpemVEZXB0aCA9IDMsIG5vcm1hbGl6ZU1heEJyZWFkdGggPSAxMDAwIH0gPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICAgICAgaWYgKCFlbmFibGVMb2dzKSB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcud2FybignYGVuYWJsZUxvZ3NgIGlzIG5vdCBlbmFibGVkLCBDb25zb2xlTG9ncyBpbnRlZ3JhdGlvbiBkaXNhYmxlZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUuYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoKHsgYXJncywgbGV2ZWwgfSkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKSAhPT0gY2xpZW50IHx8ICFsZXZlbHMuaW5jbHVkZXMobGV2ZWwpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxldmVsID09PSAnYXNzZXJ0Jykge1xuICAgICAgICAgIGlmICghYXJnc1swXSkge1xuICAgICAgICAgICAgY29uc3QgZm9sbG93aW5nQXJncyA9IGFyZ3Muc2xpY2UoMSk7XG4gICAgICAgICAgICBjb25zdCBhc3NlcnRpb25NZXNzYWdlID1cbiAgICAgICAgICAgICAgZm9sbG93aW5nQXJncy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBgQXNzZXJ0aW9uIGZhaWxlZDogJHtmb3JtYXRDb25zb2xlQXJncyhmb2xsb3dpbmdBcmdzLCBub3JtYWxpemVEZXB0aCwgbm9ybWFsaXplTWF4QnJlYWR0aCl9YFxuICAgICAgICAgICAgICAgIDogJ0Fzc2VydGlvbiBmYWlsZWQnO1xuICAgICAgICAgICAgZXhwb3J0cyQxLl9JTlRFUk5BTF9jYXB0dXJlTG9nKHsgbGV2ZWw6ICdlcnJvcicsIG1lc3NhZ2U6IGFzc2VydGlvbk1lc3NhZ2UsIGF0dHJpYnV0ZXM6IERFRkFVTFRfQVRUUklCVVRFUyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNMZXZlbExvZyA9IGxldmVsID09PSAnbG9nJztcbiAgICAgICAgZXhwb3J0cyQxLl9JTlRFUk5BTF9jYXB0dXJlTG9nKHtcbiAgICAgICAgICBsZXZlbDogaXNMZXZlbExvZyA/ICdpbmZvJyA6IGxldmVsLFxuICAgICAgICAgIG1lc3NhZ2U6IGZvcm1hdENvbnNvbGVBcmdzKGFyZ3MsIG5vcm1hbGl6ZURlcHRoLCBub3JtYWxpemVNYXhCcmVhZHRoKSxcbiAgICAgICAgICBzZXZlcml0eU51bWJlcjogaXNMZXZlbExvZyA/IDEwIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IERFRkFVTFRfQVRUUklCVVRFUyxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIENhcHR1cmVzIGNhbGxzIHRvIHRoZSBgY29uc29sZWAgQVBJIGFzIGxvZ3MgaW4gU2VudHJ5LiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIEBleHBlcmltZW50YWwgVGhpcyBmZWF0dXJlIGlzIGV4cGVyaW1lbnRhbCBhbmQgbWF5IGJlIGNoYW5nZWQgb3IgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgaW50ZWdyYXRpb24gaW5zdHJ1bWVudHMgYGNvbnNvbGUuZGVidWdgLCBgY29uc29sZS5pbmZvYCwgYGNvbnNvbGUud2FybmAsIGBjb25zb2xlLmVycm9yYCxcbiAqIGBjb25zb2xlLmxvZ2AsIGBjb25zb2xlLnRyYWNlYCwgYW5kIGBjb25zb2xlLmFzc2VydGAuIFlvdSBjYW4gdXNlIHRoZSBgbGV2ZWxzYCBvcHRpb24gdG8gY3VzdG9taXplIHdoaWNoXG4gKiBsZXZlbHMgYXJlIGNhcHR1cmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgZW5hYmxlTG9nczogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmNvbnNvbGVMb2dnaW5nSW50ZWdyYXRpb24oeyBsZXZlbHM6IFsnZXJyb3InLCAnd2FybiddIH0pXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGNvbnNvbGVMb2dnaW5nSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGZvcm1hdENvbnNvbGVBcmdzKHZhbHVlcywgbm9ybWFsaXplRGVwdGgsIG5vcm1hbGl6ZU1heEJyZWFkdGgpIHtcbiAgcmV0dXJuICd1dGlsJyBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSiAmJiB0eXBlb2YgKHdvcmxkd2lkZS5HTE9CQUxfT0JKICkudXRpbC5mb3JtYXQgPT09ICdmdW5jdGlvbidcbiAgICA/ICh3b3JsZHdpZGUuR0xPQkFMX09CSiApLnV0aWwuZm9ybWF0KC4uLnZhbHVlcylcbiAgICA6IHNhZmVKb2luQ29uc29sZUFyZ3ModmFsdWVzLCBub3JtYWxpemVEZXB0aCwgbm9ybWFsaXplTWF4QnJlYWR0aCk7XG59XG5cbmZ1bmN0aW9uIHNhZmVKb2luQ29uc29sZUFyZ3ModmFsdWVzLCBub3JtYWxpemVEZXB0aCwgbm9ybWFsaXplTWF4QnJlYWR0aCkge1xuICByZXR1cm4gdmFsdWVzXG4gICAgLm1hcCh2YWx1ZSA9PlxuICAgICAgaXMuaXNQcmltaXRpdmUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZS5ub3JtYWxpemUodmFsdWUsIG5vcm1hbGl6ZURlcHRoLCBub3JtYWxpemVNYXhCcmVhZHRoKSksXG4gICAgKVxuICAgIC5qb2luKCcgJyk7XG59XG5cbmV4cG9ydHMuY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbiA9IGNvbnNvbGVMb2dnaW5nSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLWludGVncmF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/logs/console-integration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/logs/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/logs/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Maps a log severity level to a log severity number.\n *\n * @see LogSeverityLevel\n */\nconst SEVERITY_TEXT_TO_SEVERITY_NUMBER = {\n  trace: 1,\n  debug: 5,\n  info: 9,\n  warn: 13,\n  error: 17,\n  fatal: 21,\n};\n\nexports.SEVERITY_TEXT_TO_SEVERITY_NUMBER = SEVERITY_TEXT_TO_SEVERITY_NUMBER;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbG9ncy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9sb2dzL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBNYXBzIGEgbG9nIHNldmVyaXR5IGxldmVsIHRvIGEgbG9nIHNldmVyaXR5IG51bWJlci5cbiAqXG4gKiBAc2VlIExvZ1NldmVyaXR5TGV2ZWxcbiAqL1xuY29uc3QgU0VWRVJJVFlfVEVYVF9UT19TRVZFUklUWV9OVU1CRVIgPSB7XG4gIHRyYWNlOiAxLFxuICBkZWJ1ZzogNSxcbiAgaW5mbzogOSxcbiAgd2FybjogMTMsXG4gIGVycm9yOiAxNyxcbiAgZmF0YWw6IDIxLFxufTtcblxuZXhwb3J0cy5TRVZFUklUWV9URVhUX1RPX1NFVkVSSVRZX05VTUJFUiA9IFNFVkVSSVRZX1RFWFRfVE9fU0VWRVJJVFlfTlVNQkVSO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/logs/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/logs/envelope.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/logs/envelope.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dsn = __webpack_require__(/*! ../utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nfunction createLogContainerEnvelopeItem(items) {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nfunction createLogEnvelope(\n  logs,\n  metadata,\n  tunnel,\n  dsn$1,\n) {\n  const headers = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n\n  return envelope.createEnvelope(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n\nexports.createLogContainerEnvelopeItem = createLogContainerEnvelopeItem;\nexports.createLogEnvelope = createLogEnvelope;\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbG9ncy9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsd0ZBQWlCO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLGtHQUFzQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0Qyx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2xvZ3MvZW52ZWxvcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRzbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2Rzbi5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy9lbnZlbG9wZS5qcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBsb2cgY29udGFpbmVyIGVudmVsb3BlIGl0ZW0gZm9yIGEgbGlzdCBvZiBsb2dzLlxuICpcbiAqIEBwYXJhbSBpdGVtcyAtIFRoZSBsb2dzIHRvIGluY2x1ZGUgaW4gdGhlIGVudmVsb3BlLlxuICogQHJldHVybnMgVGhlIGNyZWF0ZWQgbG9nIGNvbnRhaW5lciBlbnZlbG9wZSBpdGVtLlxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2dDb250YWluZXJFbnZlbG9wZUl0ZW0oaXRlbXMpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICB0eXBlOiAnbG9nJyxcbiAgICAgIGl0ZW1fY291bnQ6IGl0ZW1zLmxlbmd0aCxcbiAgICAgIGNvbnRlbnRfdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5zZW50cnkuaXRlbXMubG9nK2pzb24nLFxuICAgIH0sXG4gICAge1xuICAgICAgaXRlbXMsXG4gICAgfSxcbiAgXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVudmVsb3BlIGZvciBhIGxpc3Qgb2YgbG9ncy5cbiAqXG4gKiBMb2dzIGZyb20gbXVsdGlwbGUgdHJhY2VzIGNhbiBiZSBpbmNsdWRlZCBpbiB0aGUgc2FtZSBlbnZlbG9wZS5cbiAqXG4gKiBAcGFyYW0gbG9ncyAtIFRoZSBsb2dzIHRvIGluY2x1ZGUgaW4gdGhlIGVudmVsb3BlLlxuICogQHBhcmFtIG1ldGFkYXRhIC0gVGhlIG1ldGFkYXRhIHRvIGluY2x1ZGUgaW4gdGhlIGVudmVsb3BlLlxuICogQHBhcmFtIHR1bm5lbCAtIFRoZSB0dW5uZWwgdG8gaW5jbHVkZSBpbiB0aGUgZW52ZWxvcGUuXG4gKiBAcGFyYW0gZHNuIC0gVGhlIERTTiB0byBpbmNsdWRlIGluIHRoZSBlbnZlbG9wZS5cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIGVudmVsb3BlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2dFbnZlbG9wZShcbiAgbG9ncyxcbiAgbWV0YWRhdGEsXG4gIHR1bm5lbCxcbiAgZHNuJDEsXG4pIHtcbiAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gIGlmIChtZXRhZGF0YT8uc2RrKSB7XG4gICAgaGVhZGVycy5zZGsgPSB7XG4gICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgIHZlcnNpb246IG1ldGFkYXRhLnNkay52ZXJzaW9uLFxuICAgIH07XG4gIH1cblxuICBpZiAoISF0dW5uZWwgJiYgISFkc24kMSkge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuLmRzblRvU3RyaW5nKGRzbiQxKTtcbiAgfVxuXG4gIHJldHVybiBlbnZlbG9wZS5jcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbY3JlYXRlTG9nQ29udGFpbmVyRW52ZWxvcGVJdGVtKGxvZ3MpXSk7XG59XG5cbmV4cG9ydHMuY3JlYXRlTG9nQ29udGFpbmVyRW52ZWxvcGVJdGVtID0gY3JlYXRlTG9nQ29udGFpbmVyRW52ZWxvcGVJdGVtO1xuZXhwb3J0cy5jcmVhdGVMb2dFbnZlbG9wZSA9IGNyZWF0ZUxvZ0VudmVsb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52ZWxvcGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/logs/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/logs/exports.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/logs/exports.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/client.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ../utils/applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ../utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst time = __webpack_require__(/*! ../utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/constants.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/envelope.js\");\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nfunction logAttributeToSerializedLogAttribute(value) {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes,\n  key,\n  value,\n  setEvenIfPresent = true,\n) {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized log event and adds it to the log buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedLog - The serialized log event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_captureSerializedLog(client, serializedLog) {\n  const bufferMap = _getBufferMap();\n\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    bufferMap.set(client, [serializedLog]);\n  } else {\n    bufferMap.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n * @param captureSerializedLog - A function to capture the serialized log.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_captureLog(\n  beforeLog,\n  client$1 = currentScopes.getClient(),\n  currentScope = currentScopes.getCurrentScope(),\n  captureSerializedLog = _INTERNAL_captureSerializedLog,\n) {\n  if (!client$1) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No client available to capture log.');\n    return;\n  }\n\n  const { release, environment, enableLogs = false, beforeSendLog } = client$1.getOptions();\n  if (!enableLogs) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = client._getTraceInfoFromScope(client$1, currentScope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  const {\n    user: { id, email, username },\n  } = getMergedScopeData(currentScope);\n  setLogAttribute(processedLogAttributes, 'user.id', id, false);\n  setLogAttribute(processedLogAttributes, 'user.email', email, false);\n  setLogAttribute(processedLogAttributes, 'user.name', username, false);\n\n  setLogAttribute(processedLogAttributes, 'sentry.release', release);\n  setLogAttribute(processedLogAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client$1.getSdkMetadata()?.sdk ?? {};\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.name', name);\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.version', version);\n\n  const beforeLogMessage = beforeLog.message;\n  if (is.isParameterizedString(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = spanOnScope._getSpanForScope(currentScope);\n  // Add the parent span ID to the log attributes for trace context\n  setLogAttribute(processedLogAttributes, 'sentry.trace.parent_span_id', span?.spanContext().spanId);\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client$1.emit('beforeCaptureLog', processedLog);\n\n  // We need to wrap this in `consoleSandbox` to avoid recursive calls to `beforeSendLog`\n  const log = beforeSendLog ? debugLogger.consoleSandbox(() => beforeSendLog(processedLog)) : processedLog;\n  if (!log) {\n    client$1.recordDroppedEvent('before_send', 'log_item', 1);\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog = {\n    timestamp: time.timestampInSeconds(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? constants.SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} ,\n    ),\n  };\n\n  captureSerializedLog(client$1, serializedLog);\n\n  client$1.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_flushLogsBuffer(client, maybeLogBuffer) {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope$1 = envelope.createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  _getBufferMap().set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope$1);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nfunction _INTERNAL_getLogBuffer(client) {\n  return _getBufferMap().get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope) {\n  const scopeData = currentScopes.getGlobalScope().getScopeData();\n  applyScopeDataToEvent.mergeScopeData(scopeData, currentScopes.getIsolationScope().getScopeData());\n  applyScopeDataToEvent.mergeScopeData(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n\nfunction _getBufferMap() {\n  // The reference to the Client <> LogBuffer map is stored on the carrier to ensure it's always the same\n  return carrier.getGlobalSingleton('clientToLogBufferMap', () => new WeakMap());\n}\n\nexports._INTERNAL_captureLog = _INTERNAL_captureLog;\nexports._INTERNAL_captureSerializedLog = _INTERNAL_captureSerializedLog;\nexports._INTERNAL_flushLogsBuffer = _INTERNAL_flushLogsBuffer;\nexports._INTERNAL_getLogBuffer = _INTERNAL_getLogBuffer;\nexports.logAttributeToSerializedLogAttribute = logAttributeToSerializedLogAttribute;\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbG9ncy9leHBvcnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFlO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxrRkFBYztBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBcUI7QUFDbkQsbUJBQW1CLG1CQUFPLENBQUMsNEZBQW1CO0FBQzlDLDhCQUE4QixtQkFBTyxDQUFDLDRIQUFtQztBQUN6RSxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDdEQsV0FBVyxtQkFBTyxDQUFDLHNGQUFnQjtBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyx3R0FBeUI7QUFDckQsYUFBYSxtQkFBTyxDQUFDLDBGQUFrQjtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBZ0I7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsMEZBQWU7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLDBEQUEwRDtBQUNwRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQyxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsVUFBVSxnQkFBZ0I7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSw4REFBOEQ7QUFDMUU7QUFDQTtBQUNBLHlEQUF5RCxNQUFNO0FBQy9ELEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCOztBQUV6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLCtCQUErQixtQkFBbUI7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsc0NBQXNDO0FBQ3RDLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUIsNENBQTRDO0FBQzVDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9sb2dzL2V4cG9ydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBjbGllbnQgPSByZXF1aXJlKCcuLi9jbGllbnQuanMnKTtcbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGFwcGx5U2NvcGVEYXRhVG9FdmVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2FwcGx5U2NvcGVEYXRhVG9FdmVudC5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IGlzID0gcmVxdWlyZSgnLi4vdXRpbHMvaXMuanMnKTtcbmNvbnN0IHNwYW5PblNjb3BlID0gcmVxdWlyZSgnLi4vdXRpbHMvc3Bhbk9uU2NvcGUuanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuLi91dGlscy90aW1lLmpzJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuL2VudmVsb3BlLmpzJyk7XG5cbmNvbnN0IE1BWF9MT0dfQlVGRkVSX1NJWkUgPSAxMDA7XG5cbi8qKlxuICogQ29udmVydHMgYSBsb2cgYXR0cmlidXRlIHRvIGEgc2VyaWFsaXplZCBsb2cgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IG9mIHRoZSBsb2cgYXR0cmlidXRlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBsb2cgYXR0cmlidXRlLlxuICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgbG9nIGF0dHJpYnV0ZS5cbiAqL1xuZnVuY3Rpb24gbG9nQXR0cmlidXRlVG9TZXJpYWxpemVkTG9nQXR0cmlidXRlKHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlOiAnZG91YmxlJyxcbiAgICAgIH07XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgfTtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OiB7XG4gICAgICBsZXQgc3RyaW5nVmFsdWUgPSAnJztcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0cmluZ1ZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpID8/ICcnO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBzdHJpbmdWYWx1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNldHMgYSBsb2cgYXR0cmlidXRlIGlmIHRoZSB2YWx1ZSBleGlzdHMgYW5kIHRoZSBhdHRyaWJ1dGUga2V5IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKlxuICogQHBhcmFtIGxvZ0F0dHJpYnV0ZXMgLSBUaGUgbG9nIGF0dHJpYnV0ZXMgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSBrZXkgLSBUaGUgYXR0cmlidXRlIGtleSB0byBzZXQuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0IChvbmx5IHNldHMgaWYgdHJ1dGh5IGFuZCBrZXkgbm90IHByZXNlbnQpLlxuICogQHBhcmFtIHNldEV2ZW5JZlByZXNlbnQgLSBXaGV0aGVyIHRvIHNldCB0aGUgYXR0cmlidXRlIGlmIGl0IGlzIHByZXNlbnQuIERlZmF1bHRzIHRvIHRydWUuXG4gKi9cbmZ1bmN0aW9uIHNldExvZ0F0dHJpYnV0ZShcbiAgbG9nQXR0cmlidXRlcyxcbiAga2V5LFxuICB2YWx1ZSxcbiAgc2V0RXZlbklmUHJlc2VudCA9IHRydWUsXG4pIHtcbiAgaWYgKHZhbHVlICYmICghbG9nQXR0cmlidXRlc1trZXldIHx8IHNldEV2ZW5JZlByZXNlbnQpKSB7XG4gICAgbG9nQXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDYXB0dXJlcyBhIHNlcmlhbGl6ZWQgbG9nIGV2ZW50IGFuZCBhZGRzIGl0IHRvIHRoZSBsb2cgYnVmZmVyIGZvciB0aGUgZ2l2ZW4gY2xpZW50LlxuICpcbiAqIEBwYXJhbSBjbGllbnQgLSBBIGNsaWVudC4gVXNlcyB0aGUgY3VycmVudCBjbGllbnQgaWYgbm90IHByb3ZpZGVkLlxuICogQHBhcmFtIHNlcmlhbGl6ZWRMb2cgLSBUaGUgc2VyaWFsaXplZCBsb2cgZXZlbnQgdG8gY2FwdHVyZS5cbiAqXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgbWV0aG9kIHdpbGwgZXhwZXJpZW5jZSBicmVha2luZyBjaGFuZ2VzLiBUaGlzIGlzIG5vdCB5ZXQgcGFydCBvZlxuICogdGhlIHN0YWJsZSBTZW50cnkgU0RLIEFQSSBhbmQgY2FuIGJlIGNoYW5nZWQgb3IgcmVtb3ZlZCB3aXRob3V0IHdhcm5pbmcuXG4gKi9cbmZ1bmN0aW9uIF9JTlRFUk5BTF9jYXB0dXJlU2VyaWFsaXplZExvZyhjbGllbnQsIHNlcmlhbGl6ZWRMb2cpIHtcbiAgY29uc3QgYnVmZmVyTWFwID0gX2dldEJ1ZmZlck1hcCgpO1xuXG4gIGNvbnN0IGxvZ0J1ZmZlciA9IF9JTlRFUk5BTF9nZXRMb2dCdWZmZXIoY2xpZW50KTtcbiAgaWYgKGxvZ0J1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmZmVyTWFwLnNldChjbGllbnQsIFtzZXJpYWxpemVkTG9nXSk7XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyTWFwLnNldChjbGllbnQsIFsuLi5sb2dCdWZmZXIsIHNlcmlhbGl6ZWRMb2ddKTtcbiAgICBpZiAobG9nQnVmZmVyLmxlbmd0aCA+PSBNQVhfTE9HX0JVRkZFUl9TSVpFKSB7XG4gICAgICBfSU5URVJOQUxfZmx1c2hMb2dzQnVmZmVyKGNsaWVudCwgbG9nQnVmZmVyKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDYXB0dXJlcyBhIGxvZyBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nIGV2ZW50IHRvIGNhcHR1cmUuXG4gKiBAcGFyYW0gc2NvcGUgLSBBIHNjb3BlLiBVc2VzIHRoZSBjdXJyZW50IHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAqIEBwYXJhbSBjbGllbnQgLSBBIGNsaWVudC4gVXNlcyB0aGUgY3VycmVudCBjbGllbnQgaWYgbm90IHByb3ZpZGVkLlxuICogQHBhcmFtIGNhcHR1cmVTZXJpYWxpemVkTG9nIC0gQSBmdW5jdGlvbiB0byBjYXB0dXJlIHRoZSBzZXJpYWxpemVkIGxvZy5cbiAqXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgbWV0aG9kIHdpbGwgZXhwZXJpZW5jZSBicmVha2luZyBjaGFuZ2VzLiBUaGlzIGlzIG5vdCB5ZXQgcGFydCBvZlxuICogdGhlIHN0YWJsZSBTZW50cnkgU0RLIEFQSSBhbmQgY2FuIGJlIGNoYW5nZWQgb3IgcmVtb3ZlZCB3aXRob3V0IHdhcm5pbmcuXG4gKi9cbmZ1bmN0aW9uIF9JTlRFUk5BTF9jYXB0dXJlTG9nKFxuICBiZWZvcmVMb2csXG4gIGNsaWVudCQxID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKSxcbiAgY3VycmVudFNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKSxcbiAgY2FwdHVyZVNlcmlhbGl6ZWRMb2cgPSBfSU5URVJOQUxfY2FwdHVyZVNlcmlhbGl6ZWRMb2csXG4pIHtcbiAgaWYgKCFjbGllbnQkMSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcud2FybignTm8gY2xpZW50IGF2YWlsYWJsZSB0byBjYXB0dXJlIGxvZy4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IHJlbGVhc2UsIGVudmlyb25tZW50LCBlbmFibGVMb2dzID0gZmFsc2UsIGJlZm9yZVNlbmRMb2cgfSA9IGNsaWVudCQxLmdldE9wdGlvbnMoKTtcbiAgaWYgKCFlbmFibGVMb2dzKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdsb2dnaW5nIG9wdGlvbiBub3QgZW5hYmxlZCwgbG9nIHdpbGwgbm90IGJlIGNhcHR1cmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IFssIHRyYWNlQ29udGV4dF0gPSBjbGllbnQuX2dldFRyYWNlSW5mb0Zyb21TY29wZShjbGllbnQkMSwgY3VycmVudFNjb3BlKTtcblxuICBjb25zdCBwcm9jZXNzZWRMb2dBdHRyaWJ1dGVzID0ge1xuICAgIC4uLmJlZm9yZUxvZy5hdHRyaWJ1dGVzLFxuICB9O1xuXG4gIGNvbnN0IHtcbiAgICB1c2VyOiB7IGlkLCBlbWFpbCwgdXNlcm5hbWUgfSxcbiAgfSA9IGdldE1lcmdlZFNjb3BlRGF0YShjdXJyZW50U2NvcGUpO1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3VzZXIuaWQnLCBpZCwgZmFsc2UpO1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3VzZXIuZW1haWwnLCBlbWFpbCwgZmFsc2UpO1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3VzZXIubmFtZScsIHVzZXJuYW1lLCBmYWxzZSk7XG5cbiAgc2V0TG9nQXR0cmlidXRlKHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXMsICdzZW50cnkucmVsZWFzZScsIHJlbGVhc2UpO1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3NlbnRyeS5lbnZpcm9ubWVudCcsIGVudmlyb25tZW50KTtcblxuICBjb25zdCB7IG5hbWUsIHZlcnNpb24gfSA9IGNsaWVudCQxLmdldFNka01ldGFkYXRhKCk/LnNkayA/PyB7fTtcbiAgc2V0TG9nQXR0cmlidXRlKHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXMsICdzZW50cnkuc2RrLm5hbWUnLCBuYW1lKTtcbiAgc2V0TG9nQXR0cmlidXRlKHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXMsICdzZW50cnkuc2RrLnZlcnNpb24nLCB2ZXJzaW9uKTtcblxuICBjb25zdCBiZWZvcmVMb2dNZXNzYWdlID0gYmVmb3JlTG9nLm1lc3NhZ2U7XG4gIGlmIChpcy5pc1BhcmFtZXRlcml6ZWRTdHJpbmcoYmVmb3JlTG9nTWVzc2FnZSkpIHtcbiAgICBjb25zdCB7IF9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fLCBfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfXyA9IFtdIH0gPSBiZWZvcmVMb2dNZXNzYWdlO1xuICAgIHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXNbJ3NlbnRyeS5tZXNzYWdlLnRlbXBsYXRlJ10gPSBfX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXztcbiAgICBfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfXy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgIHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXNbYHNlbnRyeS5tZXNzYWdlLnBhcmFtZXRlci4ke2luZGV4fWBdID0gcGFyYW07XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzcGFuID0gc3Bhbk9uU2NvcGUuX2dldFNwYW5Gb3JTY29wZShjdXJyZW50U2NvcGUpO1xuICAvLyBBZGQgdGhlIHBhcmVudCBzcGFuIElEIHRvIHRoZSBsb2cgYXR0cmlidXRlcyBmb3IgdHJhY2UgY29udGV4dFxuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3NlbnRyeS50cmFjZS5wYXJlbnRfc3Bhbl9pZCcsIHNwYW4/LnNwYW5Db250ZXh0KCkuc3BhbklkKTtcblxuICBjb25zdCBwcm9jZXNzZWRMb2cgPSB7IC4uLmJlZm9yZUxvZywgYXR0cmlidXRlczogcHJvY2Vzc2VkTG9nQXR0cmlidXRlcyB9O1xuXG4gIGNsaWVudCQxLmVtaXQoJ2JlZm9yZUNhcHR1cmVMb2cnLCBwcm9jZXNzZWRMb2cpO1xuXG4gIC8vIFdlIG5lZWQgdG8gd3JhcCB0aGlzIGluIGBjb25zb2xlU2FuZGJveGAgdG8gYXZvaWQgcmVjdXJzaXZlIGNhbGxzIHRvIGBiZWZvcmVTZW5kTG9nYFxuICBjb25zdCBsb2cgPSBiZWZvcmVTZW5kTG9nID8gZGVidWdMb2dnZXIuY29uc29sZVNhbmRib3goKCkgPT4gYmVmb3JlU2VuZExvZyhwcm9jZXNzZWRMb2cpKSA6IHByb2Nlc3NlZExvZztcbiAgaWYgKCFsb2cpIHtcbiAgICBjbGllbnQkMS5yZWNvcmREcm9wcGVkRXZlbnQoJ2JlZm9yZV9zZW5kJywgJ2xvZ19pdGVtJywgMSk7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdiZWZvcmVTZW5kTG9nIHJldHVybmVkIG51bGwsIGxvZyB3aWxsIG5vdCBiZSBjYXB0dXJlZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGxldmVsLCBtZXNzYWdlLCBhdHRyaWJ1dGVzID0ge30sIHNldmVyaXR5TnVtYmVyIH0gPSBsb2c7XG5cbiAgY29uc3Qgc2VyaWFsaXplZExvZyA9IHtcbiAgICB0aW1lc3RhbXA6IHRpbWUudGltZXN0YW1wSW5TZWNvbmRzKCksXG4gICAgbGV2ZWwsXG4gICAgYm9keTogbWVzc2FnZSxcbiAgICB0cmFjZV9pZDogdHJhY2VDb250ZXh0Py50cmFjZV9pZCxcbiAgICBzZXZlcml0eV9udW1iZXI6IHNldmVyaXR5TnVtYmVyID8/IGNvbnN0YW50cy5TRVZFUklUWV9URVhUX1RPX1NFVkVSSVRZX05VTUJFUltsZXZlbF0sXG4gICAgYXR0cmlidXRlczogT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKFxuICAgICAgKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGFjY1trZXldID0gbG9nQXR0cmlidXRlVG9TZXJpYWxpemVkTG9nQXR0cmlidXRlKGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAge30gLFxuICAgICksXG4gIH07XG5cbiAgY2FwdHVyZVNlcmlhbGl6ZWRMb2coY2xpZW50JDEsIHNlcmlhbGl6ZWRMb2cpO1xuXG4gIGNsaWVudCQxLmVtaXQoJ2FmdGVyQ2FwdHVyZUxvZycsIGxvZyk7XG59XG5cbi8qKlxuICogRmx1c2hlcyB0aGUgbG9ncyBidWZmZXIgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBjbGllbnQgLSBBIGNsaWVudC5cbiAqIEBwYXJhbSBtYXliZUxvZ0J1ZmZlciAtIEEgbG9nIGJ1ZmZlci4gVXNlcyB0aGUgbG9nIGJ1ZmZlciBmb3IgdGhlIGdpdmVuIGNsaWVudCBpZiBub3QgcHJvdmlkZWQuXG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIG1ldGhvZCB3aWxsIGV4cGVyaWVuY2UgYnJlYWtpbmcgY2hhbmdlcy4gVGhpcyBpcyBub3QgeWV0IHBhcnQgb2ZcbiAqIHRoZSBzdGFibGUgU2VudHJ5IFNESyBBUEkgYW5kIGNhbiBiZSBjaGFuZ2VkIG9yIHJlbW92ZWQgd2l0aG91dCB3YXJuaW5nLlxuICovXG5mdW5jdGlvbiBfSU5URVJOQUxfZmx1c2hMb2dzQnVmZmVyKGNsaWVudCwgbWF5YmVMb2dCdWZmZXIpIHtcbiAgY29uc3QgbG9nQnVmZmVyID0gbWF5YmVMb2dCdWZmZXIgPz8gX0lOVEVSTkFMX2dldExvZ0J1ZmZlcihjbGllbnQpID8/IFtdO1xuICBpZiAobG9nQnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCBlbnZlbG9wZSQxID0gZW52ZWxvcGUuY3JlYXRlTG9nRW52ZWxvcGUobG9nQnVmZmVyLCBjbGllbnRPcHRpb25zLl9tZXRhZGF0YSwgY2xpZW50T3B0aW9ucy50dW5uZWwsIGNsaWVudC5nZXREc24oKSk7XG5cbiAgLy8gQ2xlYXIgdGhlIGxvZyBidWZmZXIgYWZ0ZXIgZW52ZWxvcGVzIGhhdmUgYmVlbiBjb25zdHJ1Y3RlZC5cbiAgX2dldEJ1ZmZlck1hcCgpLnNldChjbGllbnQsIFtdKTtcblxuICBjbGllbnQuZW1pdCgnZmx1c2hMb2dzJyk7XG5cbiAgLy8gc2VuZEVudmVsb3BlIHNob3VsZCBub3QgdGhyb3dcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICBjbGllbnQuc2VuZEVudmVsb3BlKGVudmVsb3BlJDEpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvZyBidWZmZXIgZm9yIGEgZ2l2ZW4gY2xpZW50LlxuICpcbiAqIEV4cG9ydGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIEBwYXJhbSBjbGllbnQgLSBUaGUgY2xpZW50IHRvIGdldCB0aGUgbG9nIGJ1ZmZlciBmb3IuXG4gKiBAcmV0dXJucyBUaGUgbG9nIGJ1ZmZlciBmb3IgdGhlIGdpdmVuIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gX0lOVEVSTkFMX2dldExvZ0J1ZmZlcihjbGllbnQpIHtcbiAgcmV0dXJuIF9nZXRCdWZmZXJNYXAoKS5nZXQoY2xpZW50KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNjb3BlIGRhdGEgZm9yIHRoZSBjdXJyZW50IHNjb3BlIGFmdGVyIG1lcmdpbmcgd2l0aCB0aGVcbiAqIGdsb2JhbCBzY29wZSBhbmQgaXNvbGF0aW9uIHNjb3BlLlxuICpcbiAqIEBwYXJhbSBjdXJyZW50U2NvcGUgLSBUaGUgY3VycmVudCBzY29wZS5cbiAqIEByZXR1cm5zIFRoZSBzY29wZSBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNZXJnZWRTY29wZURhdGEoY3VycmVudFNjb3BlKSB7XG4gIGNvbnN0IHNjb3BlRGF0YSA9IGN1cnJlbnRTY29wZXMuZ2V0R2xvYmFsU2NvcGUoKS5nZXRTY29wZURhdGEoKTtcbiAgYXBwbHlTY29wZURhdGFUb0V2ZW50Lm1lcmdlU2NvcGVEYXRhKHNjb3BlRGF0YSwgY3VycmVudFNjb3Blcy5nZXRJc29sYXRpb25TY29wZSgpLmdldFNjb3BlRGF0YSgpKTtcbiAgYXBwbHlTY29wZURhdGFUb0V2ZW50Lm1lcmdlU2NvcGVEYXRhKHNjb3BlRGF0YSwgY3VycmVudFNjb3BlLmdldFNjb3BlRGF0YSgpKTtcbiAgcmV0dXJuIHNjb3BlRGF0YTtcbn1cblxuZnVuY3Rpb24gX2dldEJ1ZmZlck1hcCgpIHtcbiAgLy8gVGhlIHJlZmVyZW5jZSB0byB0aGUgQ2xpZW50IDw+IExvZ0J1ZmZlciBtYXAgaXMgc3RvcmVkIG9uIHRoZSBjYXJyaWVyIHRvIGVuc3VyZSBpdCdzIGFsd2F5cyB0aGUgc2FtZVxuICByZXR1cm4gY2Fycmllci5nZXRHbG9iYWxTaW5nbGV0b24oJ2NsaWVudFRvTG9nQnVmZmVyTWFwJywgKCkgPT4gbmV3IFdlYWtNYXAoKSk7XG59XG5cbmV4cG9ydHMuX0lOVEVSTkFMX2NhcHR1cmVMb2cgPSBfSU5URVJOQUxfY2FwdHVyZUxvZztcbmV4cG9ydHMuX0lOVEVSTkFMX2NhcHR1cmVTZXJpYWxpemVkTG9nID0gX0lOVEVSTkFMX2NhcHR1cmVTZXJpYWxpemVkTG9nO1xuZXhwb3J0cy5fSU5URVJOQUxfZmx1c2hMb2dzQnVmZmVyID0gX0lOVEVSTkFMX2ZsdXNoTG9nc0J1ZmZlcjtcbmV4cG9ydHMuX0lOVEVSTkFMX2dldExvZ0J1ZmZlciA9IF9JTlRFUk5BTF9nZXRMb2dCdWZmZXI7XG5leHBvcnRzLmxvZ0F0dHJpYnV0ZVRvU2VyaWFsaXplZExvZ0F0dHJpYnV0ZSA9IGxvZ0F0dHJpYnV0ZVRvU2VyaWFsaXplZExvZ0F0dHJpYnV0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9ydHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/logs/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ./utils/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set();\n\nfunction ensureMetadataStacksAreParsed(parser) {\n  if (!worldwide.GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n\n  for (const stack of Object.keys(worldwide.GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = worldwide.GLOBAL_OBJ._sentryModuleMetadata[stack];\n\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadataForUrl(parser, filename) {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nfunction addMetadataToStackFrames(parser, event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename || frame.module_metadata) {\n          continue;\n        }\n\n        const metadata = getMetadataForUrl(parser, frame.filename);\n\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nfunction stripMetadataFromStackFrames(event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\nexports.addMetadataToStackFrames = addMetadataToStackFrames;\nexports.getMetadataForUrl = getMetadataForUrl;\nexports.stripMetadataFromStackFrames = stripMetadataFromStackFrames;\n//# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsbUdBQXNCOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6QixvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL21ldGFkYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3V0aWxzL3dvcmxkd2lkZS5qcycpO1xuXG4vKiogS2V5cyBhcmUgc291cmNlIGZpbGVuYW1lL3VybCwgdmFsdWVzIGFyZSBtZXRhZGF0YSBvYmplY3RzLiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IGZpbGVuYW1lTWV0YWRhdGFNYXAgPSBuZXcgTWFwKCk7XG4vKiogU2V0IG9mIHN0YWNrIHN0cmluZ3MgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBwYXJzZWQuICovXG5jb25zdCBwYXJzZWRTdGFja3MgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGVuc3VyZU1ldGFkYXRhU3RhY2tzQXJlUGFyc2VkKHBhcnNlcikge1xuICBpZiAoIXdvcmxkd2lkZS5HTE9CQUxfT0JKLl9zZW50cnlNb2R1bGVNZXRhZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3Qgc3RhY2sgb2YgT2JqZWN0LmtleXMod29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhKSkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gd29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhW3N0YWNrXTtcblxuICAgIGlmIChwYXJzZWRTdGFja3MuaGFzKHN0YWNrKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoaXMgc3RhY2sgZG9lc24ndCBnZXQgcGFyc2VkIGFnYWluXG4gICAgcGFyc2VkU3RhY2tzLmFkZChzdGFjayk7XG5cbiAgICBjb25zdCBmcmFtZXMgPSBwYXJzZXIoc3RhY2spO1xuXG4gICAgLy8gR28gdGhyb3VnaCB0aGUgZnJhbWVzIHN0YXJ0aW5nIGZyb20gdGhlIHRvcCBvZiB0aGUgc3RhY2sgYW5kIGZpbmQgdGhlIGZpcnN0IG9uZSB3aXRoIGEgZmlsZW5hbWVcbiAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGZyYW1lcy5yZXZlcnNlKCkpIHtcbiAgICAgIGlmIChmcmFtZS5maWxlbmFtZSkge1xuICAgICAgICAvLyBTYXZlIHRoZSBtZXRhZGF0YSBmb3IgdGhpcyBmaWxlbmFtZVxuICAgICAgICBmaWxlbmFtZU1ldGFkYXRhTWFwLnNldChmcmFtZS5maWxlbmFtZSwgbWV0YWRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBtZXRhZGF0YSBmb3IgYSBzcGVjaWZpYyBKYXZhU2NyaXB0IGZpbGUgVVJMLlxuICpcbiAqIE1ldGFkYXRhIGlzIGluamVjdGVkIGJ5IHRoZSBTZW50cnkgYnVuZGxlciBwbHVnaW5zIHVzaW5nIHRoZSBgX2V4cGVyaW1lbnRzLm1vZHVsZU1ldGFkYXRhYCBjb25maWcgb3B0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0TWV0YWRhdGFGb3JVcmwocGFyc2VyLCBmaWxlbmFtZSkge1xuICBlbnN1cmVNZXRhZGF0YVN0YWNrc0FyZVBhcnNlZChwYXJzZXIpO1xuICByZXR1cm4gZmlsZW5hbWVNZXRhZGF0YU1hcC5nZXQoZmlsZW5hbWUpO1xufVxuXG4vKipcbiAqIEFkZHMgbWV0YWRhdGEgdG8gc3RhY2sgZnJhbWVzLlxuICpcbiAqIE1ldGFkYXRhIGlzIGluamVjdGVkIGJ5IHRoZSBTZW50cnkgYnVuZGxlciBwbHVnaW5zIHVzaW5nIHRoZSBgX2V4cGVyaW1lbnRzLm1vZHVsZU1ldGFkYXRhYCBjb25maWcgb3B0aW9uLlxuICovXG5mdW5jdGlvbiBhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMocGFyc2VyLCBldmVudCkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICBpZiAoIWV4Y2VwdGlvbi5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW10pIHtcbiAgICAgICAgaWYgKCFmcmFtZS5maWxlbmFtZSB8fCBmcmFtZS5tb2R1bGVfbWV0YWRhdGEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gZ2V0TWV0YWRhdGFGb3JVcmwocGFyc2VyLCBmcmFtZS5maWxlbmFtZSk7XG5cbiAgICAgICAgaWYgKG1ldGFkYXRhKSB7XG4gICAgICAgICAgZnJhbWUubW9kdWxlX21ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCB7XG4gICAgLy8gVG8gc2F2ZSBidW5kbGUgc2l6ZSB3ZSdyZSBqdXN0IHRyeSBjYXRjaGluZyBoZXJlIGluc3RlYWQgb2YgY2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYWxsIHRoZSBkaWZmZXJlbnQgb2JqZWN0cy5cbiAgfVxufVxuXG4vKipcbiAqIFN0cmlwcyBtZXRhZGF0YSBmcm9tIHN0YWNrIGZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyhldmVudCkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICBpZiAoIWV4Y2VwdGlvbi5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW10pIHtcbiAgICAgICAgZGVsZXRlIGZyYW1lLm1vZHVsZV9tZXRhZGF0YTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCB7XG4gICAgLy8gVG8gc2F2ZSBidW5kbGUgc2l6ZSB3ZSdyZSBqdXN0IHRyeSBjYXRjaGluZyBoZXJlIGluc3RlYWQgb2YgY2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYWxsIHRoZSBkaWZmZXJlbnQgb2JqZWN0cy5cbiAgfVxufVxuXG5leHBvcnRzLmFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyA9IGFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcztcbmV4cG9ydHMuZ2V0TWV0YWRhdGFGb3JVcmwgPSBnZXRNZXRhZGF0YUZvclVybDtcbmV4cG9ydHMuc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyA9IHN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/profiling.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\n\nfunction isProfilingIntegrationWithProfiler(\n  integration,\n) {\n  return (\n    !!integration &&\n    typeof integration['_profiler'] !== 'undefined' &&\n    typeof integration['_profiler']['start'] === 'function' &&\n    typeof integration['_profiler']['stop'] === 'function'\n  );\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.stop();\n}\n\nconst profiler = {\n  startProfiler,\n  stopProfiler,\n};\n\nexports.profiler = profiler;\n//# sourceMappingURL=profiling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvcHJvZmlsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLCtGQUFvQjtBQUNsRCxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBa0I7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMseUdBQXlCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9wcm9maWxpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5cbmZ1bmN0aW9uIGlzUHJvZmlsaW5nSW50ZWdyYXRpb25XaXRoUHJvZmlsZXIoXG4gIGludGVncmF0aW9uLFxuKSB7XG4gIHJldHVybiAoXG4gICAgISFpbnRlZ3JhdGlvbiAmJlxuICAgIHR5cGVvZiBpbnRlZ3JhdGlvblsnX3Byb2ZpbGVyJ10gIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGludGVncmF0aW9uWydfcHJvZmlsZXInXVsnc3RhcnQnXSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBpbnRlZ3JhdGlvblsnX3Byb2ZpbGVyJ11bJ3N0b3AnXSA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuLyoqXG4gKiBTdGFydHMgdGhlIFNlbnRyeSBjb250aW51b3VzIHByb2ZpbGVyLlxuICogVGhpcyBtb2RlIGlzIGV4Y2x1c2l2ZSB3aXRoIHRoZSB0cmFuc2FjdGlvbiBwcm9maWxlciBhbmQgd2lsbCBvbmx5IHdvcmsgaWYgdGhlIHByb2ZpbGVzU2FtcGxlUmF0ZSBpcyBzZXQgdG8gYSBmYWxzeSB2YWx1ZS5cbiAqIEluIGNvbnRpbnVvdXMgcHJvZmlsaW5nIG1vZGUsIHRoZSBwcm9maWxlciB3aWxsIGtlZXAgcmVwb3J0aW5nIHByb2ZpbGUgY2h1bmtzIHRvIFNlbnRyeSB1bnRpbCBpdCBpcyBzdG9wcGVkLCB3aGljaCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgcHJvZmlsaW5nIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gc3RhcnRQcm9maWxlcigpIHtcbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgaWYgKCFjbGllbnQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGRlYnVnTG9nZ2VyLmRlYnVnLndhcm4oJ05vIFNlbnRyeSBjbGllbnQgYXZhaWxhYmxlLCBwcm9maWxpbmcgaXMgbm90IHN0YXJ0ZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnRlZ3JhdGlvbiA9IGNsaWVudC5nZXRJbnRlZ3JhdGlvbkJ5TmFtZSgnUHJvZmlsaW5nSW50ZWdyYXRpb24nKTtcblxuICBpZiAoIWludGVncmF0aW9uKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdQcm9maWxpbmdJbnRlZ3JhdGlvbiBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFpc1Byb2ZpbGluZ0ludGVncmF0aW9uV2l0aFByb2ZpbGVyKGludGVncmF0aW9uKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcud2FybignUHJvZmlsZXIgaXMgbm90IGF2YWlsYWJsZSBvbiBwcm9maWxpbmcgaW50ZWdyYXRpb24uJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW50ZWdyYXRpb24uX3Byb2ZpbGVyLnN0YXJ0KCk7XG59XG5cbi8qKlxuICogU3RvcHMgdGhlIFNlbnRyeSBjb250aW51b3VzIHByb2ZpbGVyLlxuICogQ2FsbHMgdG8gc3RvcCB3aWxsIHN0b3AgdGhlIHByb2ZpbGVyIGFuZCBmbHVzaCB0aGUgY3VycmVudGx5IGNvbGxlY3RlZCBwcm9maWxlIGRhdGEgdG8gU2VudHJ5LlxuICovXG5mdW5jdGlvbiBzdG9wUHJvZmlsZXIoKSB7XG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG4gIGlmICghY2xpZW50KSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdObyBTZW50cnkgY2xpZW50IGF2YWlsYWJsZSwgcHJvZmlsaW5nIGlzIG5vdCBzdGFydGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW50ZWdyYXRpb24gPSBjbGllbnQuZ2V0SW50ZWdyYXRpb25CeU5hbWUoJ1Byb2ZpbGluZ0ludGVncmF0aW9uJyk7XG4gIGlmICghaW50ZWdyYXRpb24pIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGRlYnVnTG9nZ2VyLmRlYnVnLndhcm4oJ1Byb2ZpbGluZ0ludGVncmF0aW9uIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWlzUHJvZmlsaW5nSW50ZWdyYXRpb25XaXRoUHJvZmlsZXIoaW50ZWdyYXRpb24pKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdQcm9maWxlciBpcyBub3QgYXZhaWxhYmxlIG9uIHByb2ZpbGluZyBpbnRlZ3JhdGlvbi4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbnRlZ3JhdGlvbi5fcHJvZmlsZXIuc3RvcCgpO1xufVxuXG5jb25zdCBwcm9maWxlciA9IHtcbiAgc3RhcnRQcm9maWxlcixcbiAgc3RvcFByb2ZpbGVyLFxufTtcblxuZXhwb3J0cy5wcm9maWxlciA9IHByb2ZpbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst merge = __webpack_require__(/*! ./utils/merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst propagationContext = __webpack_require__(/*! ./utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst spanOnScope = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst string = __webpack_require__(/*! ./utils/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst time = __webpack_require__(/*! ./utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\n\n/**\n * Holds additional event information.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n   constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: propagationContext.generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n   clone() {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    spanOnScope._setSpanForScope(newScope, spanOnScope._getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n   setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n   setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n   getClient() {\n    return this._client ;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n   lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n   addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n   setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      session.updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n   getUser() {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n   setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n   setTag(key, value) {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n   setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n   setExtra(key, extra) {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n   setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n   setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n   setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n   setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n   setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n   getSession() {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n   update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : is.isPlainObject(scopeToMerge)\n          ? (captureContext )\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n   clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    spanOnScope._setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: propagationContext.generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n   addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: time.dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? string.truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n   getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n   clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n   addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n   clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n   getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: spanOnScope._getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n   setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = merge.merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n   setPropagationContext(context) {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n   getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n   captureException(exception, hint) {\n    const eventId = hint?.event_id || misc.uuid4();\n\n    if (!this._client) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n   captureMessage(message, level, hint) {\n    const eventId = hint?.event_id || misc.uuid4();\n\n    if (!this._client) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n   captureEvent(event, hint) {\n    const eventId = hint?.event_id || misc.uuid4();\n\n    if (!this._client) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n   _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\nexports.Scope = Scope;\n//# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/sdk.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(\n  clientClass,\n  options,\n) {\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      debugLogger.debug.enable();\n    } else {\n      // use `console.warn` rather than `debug.warn` since by non-debug bundles have all `debug.x` statements stripped\n      debugLogger.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = currentScopes.getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  currentScopes.getCurrentScope().setClient(client);\n}\n\nexports.initAndBind = initAndBind;\nexports.setCurrentClient = setCurrentClient;\n//# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2RrLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLCtGQUFvQjtBQUNsRCxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBa0I7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMseUdBQXlCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3Nkay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcblxuLyoqIEEgY2xhc3Mgb2JqZWN0IHRoYXQgY2FuIGluc3RhbnRpYXRlIENsaWVudCBvYmplY3RzLiAqL1xuXG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gaW5pdEFuZEJpbmQoXG4gIGNsaWVudENsYXNzLFxuICBvcHRpb25zLFxuKSB7XG4gIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgaWYgKGRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICAgIGRlYnVnTG9nZ2VyLmRlYnVnLmVuYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1c2UgYGNvbnNvbGUud2FybmAgcmF0aGVyIHRoYW4gYGRlYnVnLndhcm5gIHNpbmNlIGJ5IG5vbi1kZWJ1ZyBidW5kbGVzIGhhdmUgYWxsIGBkZWJ1Zy54YCBzdGF0ZW1lbnRzIHN0cmlwcGVkXG4gICAgICBkZWJ1Z0xvZ2dlci5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgc2NvcGUudXBkYXRlKG9wdGlvbnMuaW5pdGlhbFNjb3BlKTtcblxuICBjb25zdCBjbGllbnQgPSBuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucyk7XG4gIHNldEN1cnJlbnRDbGllbnQoY2xpZW50KTtcbiAgY2xpZW50LmluaXQoKTtcbiAgcmV0dXJuIGNsaWVudDtcbn1cblxuLyoqXG4gKiBNYWtlIHRoZSBnaXZlbiBjbGllbnQgdGhlIGN1cnJlbnQgY2xpZW50LlxuICovXG5mdW5jdGlvbiBzZXRDdXJyZW50Q2xpZW50KGNsaWVudCkge1xuICBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQpO1xufVxuXG5leHBvcnRzLmluaXRBbmRCaW5kID0gaW5pdEFuZEJpbmQ7XG5leHBvcnRzLnNldEN1cnJlbnRDbGllbnQgPSBzZXRDdXJyZW50Q2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/semanticAttributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nconst SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nconst SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nconst SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nconst SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = SEMANTIC_ATTRIBUTE_URL_FULL;\nexports.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE;\n//# sourceMappingURL=semanticAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2VtYW50aWNBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQywwQ0FBMEM7QUFDMUMsb0NBQW9DO0FBQ3BDLHlDQUF5QztBQUN6Qyw4Q0FBOEM7QUFDOUMscUNBQXFDO0FBQ3JDLGtEQUFrRDtBQUNsRCx5REFBeUQ7QUFDekQsa0RBQWtEO0FBQ2xELG1EQUFtRDtBQUNuRCxvQ0FBb0M7QUFDcEMsd0NBQXdDO0FBQ3hDLDREQUE0RDtBQUM1RCw2Q0FBNkM7QUFDN0Msd0NBQXdDO0FBQ3hDLG1DQUFtQztBQUNuQyx5Q0FBeUM7QUFDekMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3NlbWFudGljQXR0cmlidXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBzb3VyY2Ugb2YgYSBzcGFuLlxuICogU2hvdWxkIGJlIG9uZSBvZjogY3VzdG9tLCB1cmwsIHJvdXRlLCB2aWV3LCBjb21wb25lbnQsIHRhc2ssIHVua25vd25cbiAqXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFID0gJ3NlbnRyeS5zb3VyY2UnO1xuXG4vKipcbiAqIEF0dHJpYnV0ZXMgdGhhdCBob2xkcyB0aGUgc2FtcGxlIHJhdGUgdGhhdCB3YXMgbG9jYWxseSBhcHBsaWVkIHRvIGEgc3Bhbi5cbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBkZWZpbmVkLCBpdCBtZWFucyB0aGF0IHRoZSBzcGFuIGluaGVyaXRlZCBhIHNhbXBsaW5nIGRlY2lzaW9uLlxuICpcbiAqIE5PVEU6IElzIG9ubHkgZGVmaW5lZCBvbiByb290IHNwYW5zLlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gJ3NlbnRyeS5zYW1wbGVfcmF0ZSc7XG5cbi8qKlxuICogQXR0cmlidXRlIGhvbGRpbmcgdGhlIHNhbXBsZSByYXRlIG9mIHRoZSBwcmV2aW91cyB0cmFjZS5cbiAqIFRoaXMgaXMgdXNlZCB0byBzYW1wbGUgY29uc2lzdGVudGx5IGFjcm9zcyBzdWJzZXF1ZW50IHRyYWNlcyBpbiB0aGUgYnJvd3NlciBTREsuXG4gKlxuICogTm90ZTogT25seSBkZWZpbmVkIG9uIHJvb3Qgc3BhbnMsIGlmIG9wdGVkIGludG8gY29uc2lzdGVudCBzYW1wbGluZ1xuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BSRVZJT1VTX1RSQUNFX1NBTVBMRV9SQVRFID0gJ3NlbnRyeS5wcmV2aW91c190cmFjZV9zYW1wbGVfcmF0ZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgb3BlcmF0aW9uIG9mIGEgc3Bhbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCA9ICdzZW50cnkub3AnO1xuXG4vKipcbiAqIFVzZSB0aGlzIGF0dHJpYnV0ZSB0byByZXByZXNlbnQgdGhlIG9yaWdpbiBvZiBhIHNwYW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOID0gJ3NlbnRyeS5vcmlnaW4nO1xuXG4vKiogVGhlIHJlYXNvbiB3aHkgYW4gaWRsZSBzcGFuIGZpbmlzaGVkLiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiA9ICdzZW50cnkuaWRsZV9zcGFuX2ZpbmlzaF9yZWFzb24nO1xuXG4vKiogVGhlIHVuaXQgb2YgYSBtZWFzdXJlbWVudCwgd2hpY2ggbWF5IGJlIHN0b3JlZCBhcyBhIFRpbWVkRXZlbnQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQgPSAnc2VudHJ5Lm1lYXN1cmVtZW50X3VuaXQnO1xuXG4vKiogVGhlIHZhbHVlIG9mIGEgbWVhc3VyZW1lbnQsIHdoaWNoIG1heSBiZSBzdG9yZWQgYXMgYSBUaW1lZEV2ZW50LiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSA9ICdzZW50cnkubWVhc3VyZW1lbnRfdmFsdWUnO1xuXG4vKipcbiAqIEEgY3VzdG9tIHNwYW4gbmFtZSBzZXQgYnkgdXNlcnMgZ3VhcmFudGVlZCB0byBiZSB0YWtlbiBvdmVyIGFueSBhdXRvbWF0aWNhbGx5XG4gKiBpbmZlcnJlZCBuYW1lLiBUaGlzIGF0dHJpYnV0ZSBpcyByZW1vdmVkIGJlZm9yZSB0aGUgc3BhbiBpcyBzZW50LlxuICpcbiAqIEBpbnRlcm5hbCBvbmx5IG1lYW50IGZvciBpbnRlcm5hbCBTREsgdXNhZ2VcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FID0gJ3NlbnRyeS5jdXN0b21fc3Bhbl9uYW1lJztcblxuLyoqXG4gKiBUaGUgaWQgb2YgdGhlIHByb2ZpbGUgdGhhdCB0aGlzIHNwYW4gb2NjdXJyZWQgaW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9QUk9GSUxFX0lEID0gJ3NlbnRyeS5wcm9maWxlX2lkJztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FID0gJ3NlbnRyeS5leGNsdXNpdmVfdGltZSc7XG5cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQgPSAnY2FjaGUuaGl0JztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSA9ICdjYWNoZS5rZXknO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFID0gJ2NhY2hlLml0ZW1fc2l6ZSc7XG5cbi8qKiBUT0RPOiBSZW1vdmUgdGhlc2Ugb25jZSB3ZSB1cGRhdGUgdG8gbGF0ZXN0IHNlbWFudGljIGNvbnZlbnRpb25zICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCA9ICdodHRwLnJlcXVlc3QubWV0aG9kJztcbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCA9ICd1cmwuZnVsbCc7XG5cbi8qKlxuICogQSBzcGFuIGxpbmsgYXR0cmlidXRlIHRvIG1hcmsgdGhlIGxpbmsgYXMgYSBzcGVjaWFsIHNwYW4gbGluay5cbiAqXG4gKiBLbm93biB2YWx1ZXM6XG4gKiAtIGBwcmV2aW91c190cmFjZWA6IFRoZSBzcGFuIGxpbmtzIHRvIHRoZSBmcm9udGVuZCByb290IHNwYW4gb2YgdGhlIHByZXZpb3VzIHRyYWNlLlxuICogLSBgbmV4dF90cmFjZWA6IFRoZSBzcGFuIGxpbmtzIHRvIHRoZSBmcm9udGVuZCByb290IHNwYW4gb2YgdGhlIG5leHQgdHJhY2UuIChOb3Qgc2V0IGJ5IHRoZSBTREspXG4gKlxuICogT3RoZXIgdmFsdWVzIG1heSBiZSBzZXQgYXMgYXBwcm9wcmlhdGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay90ZWxlbWV0cnkvdHJhY2VzL3NwYW4tbGlua3MvI2xpbmstdHlwZXNcbiAqL1xuY29uc3QgU0VNQU5USUNfTElOS19BVFRSSUJVVEVfTElOS19UWVBFID0gJ3NlbnRyeS5saW5rLnR5cGUnO1xuXG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQgPSBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElUO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFID0gU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSA9IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVk7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSA9IFNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0hUVFBfUkVRVUVTVF9NRVRIT0QgPSBTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgPSBTRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1A7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU47XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUFJFVklPVVNfVFJBQ0VfU0FNUExFX1JBVEUgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BSRVZJT1VTX1RSQUNFX1NBTVBMRV9SQVRFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMO1xuZXhwb3J0cy5TRU1BTlRJQ19MSU5LX0FUVFJJQlVURV9MSU5LX1RZUEUgPSBTRU1BTlRJQ19MSU5LX0FUVFJJQlVURV9MSU5LX1RZUEU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW1hbnRpY0F0dHJpYnV0ZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/server-runtime-client.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/client.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst exports$1 = __webpack_require__(/*! ./logs/exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/logs/exports.js\");\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst is = __webpack_require__(/*! ./utils/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst debugLogger = __webpack_require__(/*! ./utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js\");\nconst syncpromise = __webpack_require__(/*! ./utils/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nclass ServerRuntimeClient\n\n extends client.Client {\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n   constructor(options) {\n    // Server clients always support tracing\n    errors.registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800000) {\n          exports$1._INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            exports$1._INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        exports$1._INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromException(exception, hint) {\n    const event = eventbuilder.eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return syncpromise.resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromMessage(\n    message,\n    level = 'info',\n    hint,\n  ) {\n    return syncpromise.resolvedSyncPromise(\n      eventbuilder.eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureException(exception, hint, scope) {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureEvent(event, hint, scope) {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n   captureCheckIn(checkIn, monitorConfig, scope) {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : misc.uuid4();\n    if (!this._isEnabled()) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = client._getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = checkin.createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   _prepareEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint) {\n  const requestSession = currentScopes.getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log) {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (is.isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value) {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n\nexports.ServerRuntimeClient = ServerRuntimeClient;\n//# sourceMappingURL=server-runtime-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/session.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/session.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst misc = __webpack_require__(/*! ./utils/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst time = __webpack_require__(/*! ./utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = time.timestampInSeconds();\n\n  const session = {\n    sid: misc.uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || time.timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : misc.uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n\nexports.closeSession = closeSession;\nexports.makeSession = makeSession;\nexports.updateSession = updateSession;\n//# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/session.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst baggage = __webpack_require__(/*! ../utils/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst dsn = __webpack_require__(/*! ../utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\n/**\n * Freeze the given DSC on the given span.\n */\nfunction freezeDscOnSpan(span, dsc) {\n  const spanWithMaybeDsc = span ;\n  object.addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client) {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc = {\n    environment: options.environment || constants.DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n    org_id: dsn.extractOrgIdFromClient(client),\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nfunction getDynamicSamplingContextFromScope(client, scope) {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = spanUtils.getRootSpan(span);\n  const rootSpanJson = spanUtils.spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc) {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan )[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggage.baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled.hasSpansEnabled()) {\n    dsc.sampled = String(spanUtils.spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      utils.getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nfunction spanToBaggageHeader(span) {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n\nexports.freezeDscOnSpan = freezeDscOnSpan;\nexports.getDynamicSamplingContextFromClient = getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = spanToBaggageHeader;\n//# sourceMappingURL=dynamicSamplingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst globalError = __webpack_require__(/*! ../instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ../instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/instrument/globalUnhandledRejection.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\n\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  /**\n   * If an error or unhandled promise occurs, we mark the active root span as failed\n   */\n  function errorCallback() {\n    const activeSpan = spanUtils.getActiveSpan();\n    const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n    if (rootSpan) {\n      const message = 'internal_error';\n      debugBuild.DEBUG_BUILD && debugLogger.debug.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n      rootSpan.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message });\n    }\n  }\n\n  // The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n  // node.js default exit behaviour\n  errorCallback.tag = 'sentry_tracingErrorCallback';\n\n  errorsInstrumented = true;\n  globalError.addGlobalErrorInstrumentationHandler(errorCallback);\n  globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\nexports.registerSpanErrorInstrumentation = registerSpanErrorInstrumentation;\n//# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUJBQW1CLG1CQUFPLENBQUMsNEZBQW1CO0FBQzlDLG9CQUFvQixtQkFBTyxDQUFDLGtIQUE4QjtBQUMxRCxpQ0FBaUMsbUJBQU8sQ0FBQyw0SUFBMkM7QUFDcEYsb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1QjtBQUNqRCxtQkFBbUIsbUJBQU8sQ0FBQyxpR0FBaUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsU0FBUztBQUN2RiwyQkFBMkIsNkNBQTZDO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgZ2xvYmFsRXJyb3IgPSByZXF1aXJlKCcuLi9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzJyk7XG5jb25zdCBnbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24gPSByZXF1aXJlKCcuLi9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuY29uc3Qgc3BhbnN0YXR1cyA9IHJlcXVpcmUoJy4vc3BhbnN0YXR1cy5qcycpO1xuXG5sZXQgZXJyb3JzSW5zdHJ1bWVudGVkID0gZmFsc2U7XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZ2xvYmFsIGVycm9ycyBhdXRvbWF0aWNhbGx5IHNldCB0aGUgYWN0aXZlIHNwYW4gc3RhdHVzLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbigpIHtcbiAgaWYgKGVycm9yc0luc3RydW1lbnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhbiBlcnJvciBvciB1bmhhbmRsZWQgcHJvbWlzZSBvY2N1cnMsIHdlIG1hcmsgdGhlIGFjdGl2ZSByb290IHNwYW4gYXMgZmFpbGVkXG4gICAqL1xuICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKCkge1xuICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBzcGFuVXRpbHMuZ2V0QWN0aXZlU3BhbigpO1xuICAgIGNvbnN0IHJvb3RTcGFuID0gYWN0aXZlU3BhbiAmJiBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4oYWN0aXZlU3Bhbik7XG4gICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ2ludGVybmFsX2Vycm9yJztcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcubG9nKGBbVHJhY2luZ10gUm9vdCBzcGFuOiAke21lc3NhZ2V9IC0+IEdsb2JhbCBlcnJvciBvY2N1cnJlZGApO1xuICAgICAgcm9vdFNwYW4uc2V0U3RhdHVzKHsgY29kZTogc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGUgZnVuY3Rpb24gbmFtZSB3aWxsIGJlIGxvc3Qgd2hlbiBidW5kbGluZyBidXQgd2UgbmVlZCB0byBiZSBhYmxlIHRvIGlkZW50aWZ5IHRoaXMgbGlzdGVuZXIgbGF0ZXIgdG8gbWFpbnRhaW4gdGhlXG4gIC8vIG5vZGUuanMgZGVmYXVsdCBleGl0IGJlaGF2aW91clxuICBlcnJvckNhbGxiYWNrLnRhZyA9ICdzZW50cnlfdHJhY2luZ0Vycm9yQ2FsbGJhY2snO1xuXG4gIGVycm9yc0luc3RydW1lbnRlZCA9IHRydWU7XG4gIGdsb2JhbEVycm9yLmFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihlcnJvckNhbGxiYWNrKTtcbiAgZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoZXJyb3JDYWxsYmFjayk7XG59XG5cbmV4cG9ydHMucmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb24gPSByZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst time = __webpack_require__(/*! ../utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\n\nconst TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  childSpanTimeout: 15000,\n};\n\nconst FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\nconst FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\nconst FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\nconst FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\n\n/**\n * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n * An idle span is always the active span.\n */\nfunction startIdleSpan(startSpanOptions, options = {}) {\n  // Activities store a list of active spans\n  const activities = new Map();\n\n  // We should not use heartbeat if we finished a span\n  let _finished = false;\n\n  // Timer that tracks idleTimeout\n  let _idleTimeoutID;\n\n  // The reason why the span was finished\n  let _finishReason = FINISH_REASON_EXTERNAL_FINISH;\n\n  let _autoFinishAllowed = !options.disableAutoFinish;\n\n  const _cleanupHooks = [];\n\n  const {\n    idleTimeout = TRACING_DEFAULTS.idleTimeout,\n    finalTimeout = TRACING_DEFAULTS.finalTimeout,\n    childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n    beforeSpanEnd,\n  } = options;\n\n  const client = currentScopes.getClient();\n\n  if (!client || !hasSpansEnabled.hasSpansEnabled()) {\n    const span = new sentryNonRecordingSpan.SentryNonRecordingSpan();\n\n    const dsc = {\n      sample_rate: '0',\n      sampled: 'false',\n      ...dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),\n    } ;\n    dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n\n    return span;\n  }\n\n  const scope = currentScopes.getCurrentScope();\n  const previousActiveSpan = spanUtils.getActiveSpan();\n  const span = _startIdleSpan(startSpanOptions);\n\n  // We patch span.end to ensure we can run some things before the span is ended\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  span.end = new Proxy(span.end, {\n    apply(target, thisArg, args) {\n      if (beforeSpanEnd) {\n        beforeSpanEnd(span);\n      }\n\n      // If the span is non-recording, nothing more to do here...\n      // This is the case if tracing is enabled but this specific span was not sampled\n      if (thisArg instanceof sentryNonRecordingSpan.SentryNonRecordingSpan) {\n        return;\n      }\n\n      // Just ensuring that this keeps working, even if we ever have more arguments here\n      const [definedEndTimestamp, ...rest] = args;\n      const timestamp = definedEndTimestamp || time.timestampInSeconds();\n      const spanEndTimestamp = spanUtils.spanTimeInputToSeconds(timestamp);\n\n      // Ensure we end with the last span timestamp, if possible\n      const spans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n\n      // If we have no spans, we just end, nothing else to do here\n      if (!spans.length) {\n        onIdleSpanEnded(spanEndTimestamp);\n        return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n      }\n\n      const childEndTimestamps = spans\n        .map(span => spanUtils.spanToJSON(span).timestamp)\n        .filter(timestamp => !!timestamp) ;\n      const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n      // In reality this should always exist here, but type-wise it may be undefined...\n      const spanStartTimestamp = spanUtils.spanToJSON(span).start_timestamp;\n\n      // The final endTimestamp should:\n      // * Never be before the span start timestamp\n      // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n      // * Otherwise be the passed end timestamp\n      // Final timestamp can never be after finalTimeout\n      const endTimestamp = Math.min(\n        spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity,\n        Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)),\n      );\n\n      onIdleSpanEnded(endTimestamp);\n      return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n    },\n  });\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   */\n  function _cancelIdleTimeout() {\n    if (_idleTimeoutID) {\n      clearTimeout(_idleTimeoutID);\n      _idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  function _restartIdleTimeout(endTimestamp) {\n    _cancelIdleTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n        span.end(endTimestamp);\n      }\n    }, idleTimeout);\n  }\n\n  /**\n   * Restarts child span timeout, if there is none running it will start one.\n   */\n  function _restartChildSpanTimeout(endTimestamp) {\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n        span.end(endTimestamp);\n      }\n    }, childSpanTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  function _pushActivity(spanId) {\n    _cancelIdleTimeout();\n    activities.set(spanId, true);\n\n    const endTimestamp = time.timestampInSeconds();\n    // We need to add the timeout here to have the real endtimestamp of the idle span\n    // Remember timestampInSeconds is in seconds, timeout is in ms\n    _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  function _popActivity(spanId) {\n    if (activities.has(spanId)) {\n      activities.delete(spanId);\n    }\n\n    if (activities.size === 0) {\n      const endTimestamp = time.timestampInSeconds();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n    }\n  }\n\n  function onIdleSpanEnded(endTimestamp) {\n    _finished = true;\n    activities.clear();\n\n    _cleanupHooks.forEach(cleanup => cleanup());\n\n    spanOnScope._setSpanForScope(scope, previousActiveSpan);\n\n    const spanJSON = spanUtils.spanToJSON(span);\n\n    const { start_timestamp: startTimestamp } = spanJSON;\n    // This should never happen, but to make TS happy...\n    if (!startTimestamp) {\n      return;\n    }\n\n    const attributes = spanJSON.data;\n    if (!attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n      span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n    }\n\n    debugLogger.debug.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n\n    const childSpans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n\n    let discardedSpans = 0;\n    childSpans.forEach(childSpan => {\n      // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n      if (childSpan.isRecording()) {\n        childSpan.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'cancelled' });\n        childSpan.end(endTimestamp);\n        debugBuild.DEBUG_BUILD &&\n          debugLogger.debug.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n      }\n\n      const childSpanJSON = spanUtils.spanToJSON(childSpan);\n      const { timestamp: childEndTimestamp = 0, start_timestamp: childStartTimestamp = 0 } = childSpanJSON;\n\n      const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n      // Add a delta with idle timeout so that we prevent false positives\n      const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n      const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n\n      if (debugBuild.DEBUG_BUILD) {\n        const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n        if (!spanStartedBeforeIdleSpanEnd) {\n          debugLogger.debug.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n        } else if (!spanEndedBeforeFinalTimeout) {\n          debugLogger.debug.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n        }\n      }\n\n      if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n        spanUtils.removeChildSpanFromSpan(span, childSpan);\n        discardedSpans++;\n      }\n    });\n\n    if (discardedSpans > 0) {\n      span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n    }\n  }\n\n  _cleanupHooks.push(\n    client.on('spanStart', startedSpan => {\n      // If we already finished the idle span,\n      // or if this is the idle span itself being started,\n      // or if the started span has already been closed,\n      // we don't care about it for activity\n      if (\n        _finished ||\n        startedSpan === span ||\n        !!spanUtils.spanToJSON(startedSpan).timestamp ||\n        (startedSpan instanceof sentrySpan.SentrySpan && startedSpan.isStandaloneSpan())\n      ) {\n        return;\n      }\n\n      const allSpans = spanUtils.getSpanDescendants(span);\n\n      // If the span that was just started is a child of the idle span, we should track it\n      if (allSpans.includes(startedSpan)) {\n        _pushActivity(startedSpan.spanContext().spanId);\n      }\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('spanEnd', endedSpan => {\n      if (_finished) {\n        return;\n      }\n\n      _popActivity(endedSpan.spanContext().spanId);\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n      if (spanToAllowAutoFinish === span) {\n        _autoFinishAllowed = true;\n        _restartIdleTimeout();\n\n        if (activities.size) {\n          _restartChildSpanTimeout();\n        }\n      }\n    }),\n  );\n\n  // We only start the initial idle timeout if we are not delaying the auto finish\n  if (!options.disableAutoFinish) {\n    _restartIdleTimeout();\n  }\n\n  setTimeout(() => {\n    if (!_finished) {\n      span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'deadline_exceeded' });\n      _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n      span.end();\n    }\n  }, finalTimeout);\n\n  return span;\n}\n\nfunction _startIdleSpan(options) {\n  const span = trace.startInactiveSpan(options);\n\n  spanOnScope._setSpanForScope(currentScopes.getCurrentScope(), span);\n\n  debugBuild.DEBUG_BUILD && debugLogger.debug.log('[Tracing] Started span is an idle span');\n\n  return span;\n}\n\nexports.TRACING_DEFAULTS = TRACING_DEFAULTS;\nexports.startIdleSpan = startIdleSpan;\n//# sourceMappingURL=idleSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9pZGxlU3Bhbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBcUI7QUFDbkQsbUJBQW1CLG1CQUFPLENBQUMsNEZBQW1CO0FBQzlDLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDdEQsd0JBQXdCLG1CQUFPLENBQUMsZ0hBQTZCO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLHdHQUF5QjtBQUNyRCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7QUFDakQsYUFBYSxtQkFBTyxDQUFDLDBGQUFrQjtBQUN2QywrQkFBK0IsbUJBQU8sQ0FBQyx5SEFBNkI7QUFDcEUsK0JBQStCLG1CQUFPLENBQUMseUhBQTZCO0FBQ3BFLG1CQUFtQixtQkFBTyxDQUFDLGlHQUFpQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxpR0FBaUI7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLHVGQUFZOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0QsWUFBWTs7QUFFOUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMERBQTBEO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyw2RUFBNkU7O0FBRTNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsa0VBQWtFO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9pZGxlU3Bhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgaGFzU3BhbnNFbmFibGVkID0gcmVxdWlyZSgnLi4vdXRpbHMvaGFzU3BhbnNFbmFibGVkLmpzJyk7XG5jb25zdCBzcGFuT25TY29wZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5PblNjb3BlLmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9zcGFuVXRpbHMuanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuLi91dGlscy90aW1lLmpzJyk7XG5jb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gcmVxdWlyZSgnLi9keW5hbWljU2FtcGxpbmdDb250ZXh0LmpzJyk7XG5jb25zdCBzZW50cnlOb25SZWNvcmRpbmdTcGFuID0gcmVxdWlyZSgnLi9zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzJyk7XG5jb25zdCBzZW50cnlTcGFuID0gcmVxdWlyZSgnLi9zZW50cnlTcGFuLmpzJyk7XG5jb25zdCBzcGFuc3RhdHVzID0gcmVxdWlyZSgnLi9zcGFuc3RhdHVzLmpzJyk7XG5jb25zdCB0cmFjZSA9IHJlcXVpcmUoJy4vdHJhY2UuanMnKTtcblxuY29uc3QgVFJBQ0lOR19ERUZBVUxUUyA9IHtcbiAgaWRsZVRpbWVvdXQ6IDEwMDAsXG4gIGZpbmFsVGltZW91dDogMzAwMDAsXG4gIGNoaWxkU3BhblRpbWVvdXQ6IDE1MDAwLFxufTtcblxuY29uc3QgRklOSVNIX1JFQVNPTl9IRUFSVEJFQVRfRkFJTEVEID0gJ2hlYXJ0YmVhdEZhaWxlZCc7XG5jb25zdCBGSU5JU0hfUkVBU09OX0lETEVfVElNRU9VVCA9ICdpZGxlVGltZW91dCc7XG5jb25zdCBGSU5JU0hfUkVBU09OX0ZJTkFMX1RJTUVPVVQgPSAnZmluYWxUaW1lb3V0JztcbmNvbnN0IEZJTklTSF9SRUFTT05fRVhURVJOQUxfRklOSVNIID0gJ2V4dGVybmFsRmluaXNoJztcblxuLyoqXG4gKiBBbiBpZGxlIHNwYW4gaXMgYSBzcGFuIHRoYXQgYXV0b21hdGljYWxseSBmaW5pc2hlcy4gSXQgZG9lcyB0aGlzIGJ5IHRyYWNraW5nIGNoaWxkIHNwYW5zIGFzIGFjdGl2aXRpZXMuXG4gKiBBbiBpZGxlIHNwYW4gaXMgYWx3YXlzIHRoZSBhY3RpdmUgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gc3RhcnRJZGxlU3BhbihzdGFydFNwYW5PcHRpb25zLCBvcHRpb25zID0ge30pIHtcbiAgLy8gQWN0aXZpdGllcyBzdG9yZSBhIGxpc3Qgb2YgYWN0aXZlIHNwYW5zXG4gIGNvbnN0IGFjdGl2aXRpZXMgPSBuZXcgTWFwKCk7XG5cbiAgLy8gV2Ugc2hvdWxkIG5vdCB1c2UgaGVhcnRiZWF0IGlmIHdlIGZpbmlzaGVkIGEgc3BhblxuICBsZXQgX2ZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVGltZXIgdGhhdCB0cmFja3MgaWRsZVRpbWVvdXRcbiAgbGV0IF9pZGxlVGltZW91dElEO1xuXG4gIC8vIFRoZSByZWFzb24gd2h5IHRoZSBzcGFuIHdhcyBmaW5pc2hlZFxuICBsZXQgX2ZpbmlzaFJlYXNvbiA9IEZJTklTSF9SRUFTT05fRVhURVJOQUxfRklOSVNIO1xuXG4gIGxldCBfYXV0b0ZpbmlzaEFsbG93ZWQgPSAhb3B0aW9ucy5kaXNhYmxlQXV0b0ZpbmlzaDtcblxuICBjb25zdCBfY2xlYW51cEhvb2tzID0gW107XG5cbiAgY29uc3Qge1xuICAgIGlkbGVUaW1lb3V0ID0gVFJBQ0lOR19ERUZBVUxUUy5pZGxlVGltZW91dCxcbiAgICBmaW5hbFRpbWVvdXQgPSBUUkFDSU5HX0RFRkFVTFRTLmZpbmFsVGltZW91dCxcbiAgICBjaGlsZFNwYW5UaW1lb3V0ID0gVFJBQ0lOR19ERUZBVUxUUy5jaGlsZFNwYW5UaW1lb3V0LFxuICAgIGJlZm9yZVNwYW5FbmQsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKCFjbGllbnQgfHwgIWhhc1NwYW5zRW5hYmxlZC5oYXNTcGFuc0VuYWJsZWQoKSkge1xuICAgIGNvbnN0IHNwYW4gPSBuZXcgc2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbi5TZW50cnlOb25SZWNvcmRpbmdTcGFuKCk7XG5cbiAgICBjb25zdCBkc2MgPSB7XG4gICAgICBzYW1wbGVfcmF0ZTogJzAnLFxuICAgICAgc2FtcGxlZDogJ2ZhbHNlJyxcbiAgICAgIC4uLmR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKHNwYW4pLFxuICAgIH0gO1xuICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZnJlZXplRHNjT25TcGFuKHNwYW4sIGRzYyk7XG5cbiAgICByZXR1cm4gc3BhbjtcbiAgfVxuXG4gIGNvbnN0IHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgY29uc3QgcHJldmlvdXNBY3RpdmVTcGFuID0gc3BhblV0aWxzLmdldEFjdGl2ZVNwYW4oKTtcbiAgY29uc3Qgc3BhbiA9IF9zdGFydElkbGVTcGFuKHN0YXJ0U3Bhbk9wdGlvbnMpO1xuXG4gIC8vIFdlIHBhdGNoIHNwYW4uZW5kIHRvIGVuc3VyZSB3ZSBjYW4gcnVuIHNvbWUgdGhpbmdzIGJlZm9yZSB0aGUgc3BhbiBpcyBlbmRlZFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gIHNwYW4uZW5kID0gbmV3IFByb3h5KHNwYW4uZW5kLCB7XG4gICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgICBpZiAoYmVmb3JlU3BhbkVuZCkge1xuICAgICAgICBiZWZvcmVTcGFuRW5kKHNwYW4pO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgc3BhbiBpcyBub24tcmVjb3JkaW5nLCBub3RoaW5nIG1vcmUgdG8gZG8gaGVyZS4uLlxuICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSBpZiB0cmFjaW5nIGlzIGVuYWJsZWQgYnV0IHRoaXMgc3BlY2lmaWMgc3BhbiB3YXMgbm90IHNhbXBsZWRcbiAgICAgIGlmICh0aGlzQXJnIGluc3RhbmNlb2Ygc2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbi5TZW50cnlOb25SZWNvcmRpbmdTcGFuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSnVzdCBlbnN1cmluZyB0aGF0IHRoaXMga2VlcHMgd29ya2luZywgZXZlbiBpZiB3ZSBldmVyIGhhdmUgbW9yZSBhcmd1bWVudHMgaGVyZVxuICAgICAgY29uc3QgW2RlZmluZWRFbmRUaW1lc3RhbXAsIC4uLnJlc3RdID0gYXJncztcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IGRlZmluZWRFbmRUaW1lc3RhbXAgfHwgdGltZS50aW1lc3RhbXBJblNlY29uZHMoKTtcbiAgICAgIGNvbnN0IHNwYW5FbmRUaW1lc3RhbXAgPSBzcGFuVXRpbHMuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyh0aW1lc3RhbXApO1xuXG4gICAgICAvLyBFbnN1cmUgd2UgZW5kIHdpdGggdGhlIGxhc3Qgc3BhbiB0aW1lc3RhbXAsIGlmIHBvc3NpYmxlXG4gICAgICBjb25zdCBzcGFucyA9IHNwYW5VdGlscy5nZXRTcGFuRGVzY2VuZGFudHMoc3BhbikuZmlsdGVyKGNoaWxkID0+IGNoaWxkICE9PSBzcGFuKTtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBubyBzcGFucywgd2UganVzdCBlbmQsIG5vdGhpbmcgZWxzZSB0byBkbyBoZXJlXG4gICAgICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgICAgICBvbklkbGVTcGFuRW5kZWQoc3BhbkVuZFRpbWVzdGFtcCk7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgW3NwYW5FbmRUaW1lc3RhbXAsIC4uLnJlc3RdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hpbGRFbmRUaW1lc3RhbXBzID0gc3BhbnNcbiAgICAgICAgLm1hcChzcGFuID0+IHNwYW5VdGlscy5zcGFuVG9KU09OKHNwYW4pLnRpbWVzdGFtcClcbiAgICAgICAgLmZpbHRlcih0aW1lc3RhbXAgPT4gISF0aW1lc3RhbXApIDtcbiAgICAgIGNvbnN0IGxhdGVzdFNwYW5FbmRUaW1lc3RhbXAgPSBjaGlsZEVuZFRpbWVzdGFtcHMubGVuZ3RoID8gTWF0aC5tYXgoLi4uY2hpbGRFbmRUaW1lc3RhbXBzKSA6IHVuZGVmaW5lZDtcblxuICAgICAgLy8gSW4gcmVhbGl0eSB0aGlzIHNob3VsZCBhbHdheXMgZXhpc3QgaGVyZSwgYnV0IHR5cGUtd2lzZSBpdCBtYXkgYmUgdW5kZWZpbmVkLi4uXG4gICAgICBjb25zdCBzcGFuU3RhcnRUaW1lc3RhbXAgPSBzcGFuVXRpbHMuc3BhblRvSlNPTihzcGFuKS5zdGFydF90aW1lc3RhbXA7XG5cbiAgICAgIC8vIFRoZSBmaW5hbCBlbmRUaW1lc3RhbXAgc2hvdWxkOlxuICAgICAgLy8gKiBOZXZlciBiZSBiZWZvcmUgdGhlIHNwYW4gc3RhcnQgdGltZXN0YW1wXG4gICAgICAvLyAqIEJlIHRoZSBsYXRlc3RTcGFuRW5kVGltZXN0YW1wLCBpZiB0aGVyZSBpcyBvbmUsIGFuZCBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHBhc3NlZCBzcGFuIGVuZCB0aW1lc3RhbXBcbiAgICAgIC8vICogT3RoZXJ3aXNlIGJlIHRoZSBwYXNzZWQgZW5kIHRpbWVzdGFtcFxuICAgICAgLy8gRmluYWwgdGltZXN0YW1wIGNhbiBuZXZlciBiZSBhZnRlciBmaW5hbFRpbWVvdXRcbiAgICAgIGNvbnN0IGVuZFRpbWVzdGFtcCA9IE1hdGgubWluKFxuICAgICAgICBzcGFuU3RhcnRUaW1lc3RhbXAgPyBzcGFuU3RhcnRUaW1lc3RhbXAgKyBmaW5hbFRpbWVvdXQgLyAxMDAwIDogSW5maW5pdHksXG4gICAgICAgIE1hdGgubWF4KHNwYW5TdGFydFRpbWVzdGFtcCB8fCAtSW5maW5pdHksIE1hdGgubWluKHNwYW5FbmRUaW1lc3RhbXAsIGxhdGVzdFNwYW5FbmRUaW1lc3RhbXAgfHwgSW5maW5pdHkpKSxcbiAgICAgICk7XG5cbiAgICAgIG9uSWRsZVNwYW5FbmRlZChlbmRUaW1lc3RhbXApO1xuICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBbZW5kVGltZXN0YW1wLCAuLi5yZXN0XSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgdGhlIGV4aXN0aW5nIGlkbGUgdGltZW91dCwgaWYgdGhlcmUgaXMgb25lLlxuICAgKi9cbiAgZnVuY3Rpb24gX2NhbmNlbElkbGVUaW1lb3V0KCkge1xuICAgIGlmIChfaWRsZVRpbWVvdXRJRCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF9pZGxlVGltZW91dElEKTtcbiAgICAgIF9pZGxlVGltZW91dElEID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0YXJ0cyBpZGxlIHRpbWVvdXQsIGlmIHRoZXJlIGlzIG5vIHJ1bm5pbmcgaWRsZSB0aW1lb3V0IGl0IHdpbGwgc3RhcnQgb25lLlxuICAgKi9cbiAgZnVuY3Rpb24gX3Jlc3RhcnRJZGxlVGltZW91dChlbmRUaW1lc3RhbXApIHtcbiAgICBfY2FuY2VsSWRsZVRpbWVvdXQoKTtcbiAgICBfaWRsZVRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCFfZmluaXNoZWQgJiYgYWN0aXZpdGllcy5zaXplID09PSAwICYmIF9hdXRvRmluaXNoQWxsb3dlZCkge1xuICAgICAgICBfZmluaXNoUmVhc29uID0gRklOSVNIX1JFQVNPTl9JRExFX1RJTUVPVVQ7XG4gICAgICAgIHNwYW4uZW5kKGVuZFRpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfSwgaWRsZVRpbWVvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RhcnRzIGNoaWxkIHNwYW4gdGltZW91dCwgaWYgdGhlcmUgaXMgbm9uZSBydW5uaW5nIGl0IHdpbGwgc3RhcnQgb25lLlxuICAgKi9cbiAgZnVuY3Rpb24gX3Jlc3RhcnRDaGlsZFNwYW5UaW1lb3V0KGVuZFRpbWVzdGFtcCkge1xuICAgIF9pZGxlVGltZW91dElEID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIV9maW5pc2hlZCAmJiBfYXV0b0ZpbmlzaEFsbG93ZWQpIHtcbiAgICAgICAgX2ZpbmlzaFJlYXNvbiA9IEZJTklTSF9SRUFTT05fSEVBUlRCRUFUX0ZBSUxFRDtcbiAgICAgICAgc3Bhbi5lbmQoZW5kVGltZXN0YW1wKTtcbiAgICAgIH1cbiAgICB9LCBjaGlsZFNwYW5UaW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCB0cmFja2luZyBhIHNwZWNpZmljIGFjdGl2aXR5LlxuICAgKiBAcGFyYW0gc3BhbklkIFRoZSBzcGFuIGlkIHRoYXQgcmVwcmVzZW50cyB0aGUgYWN0aXZpdHlcbiAgICovXG4gIGZ1bmN0aW9uIF9wdXNoQWN0aXZpdHkoc3BhbklkKSB7XG4gICAgX2NhbmNlbElkbGVUaW1lb3V0KCk7XG4gICAgYWN0aXZpdGllcy5zZXQoc3BhbklkLCB0cnVlKTtcblxuICAgIGNvbnN0IGVuZFRpbWVzdGFtcCA9IHRpbWUudGltZXN0YW1wSW5TZWNvbmRzKCk7XG4gICAgLy8gV2UgbmVlZCB0byBhZGQgdGhlIHRpbWVvdXQgaGVyZSB0byBoYXZlIHRoZSByZWFsIGVuZHRpbWVzdGFtcCBvZiB0aGUgaWRsZSBzcGFuXG4gICAgLy8gUmVtZW1iZXIgdGltZXN0YW1wSW5TZWNvbmRzIGlzIGluIHNlY29uZHMsIHRpbWVvdXQgaXMgaW4gbXNcbiAgICBfcmVzdGFydENoaWxkU3BhblRpbWVvdXQoZW5kVGltZXN0YW1wICsgY2hpbGRTcGFuVGltZW91dCAvIDEwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBhY3Rpdml0eSBmcm9tIHVzYWdlXG4gICAqIEBwYXJhbSBzcGFuSWQgVGhlIHNwYW4gaWQgdGhhdCByZXByZXNlbnRzIHRoZSBhY3Rpdml0eVxuICAgKi9cbiAgZnVuY3Rpb24gX3BvcEFjdGl2aXR5KHNwYW5JZCkge1xuICAgIGlmIChhY3Rpdml0aWVzLmhhcyhzcGFuSWQpKSB7XG4gICAgICBhY3Rpdml0aWVzLmRlbGV0ZShzcGFuSWQpO1xuICAgIH1cblxuICAgIGlmIChhY3Rpdml0aWVzLnNpemUgPT09IDApIHtcbiAgICAgIGNvbnN0IGVuZFRpbWVzdGFtcCA9IHRpbWUudGltZXN0YW1wSW5TZWNvbmRzKCk7XG4gICAgICAvLyBXZSBuZWVkIHRvIGFkZCB0aGUgdGltZW91dCBoZXJlIHRvIGhhdmUgdGhlIHJlYWwgZW5kdGltZXN0YW1wIG9mIHRoZSBpZGxlIHNwYW5cbiAgICAgIC8vIFJlbWVtYmVyIHRpbWVzdGFtcEluU2Vjb25kcyBpcyBpbiBzZWNvbmRzLCB0aW1lb3V0IGlzIGluIG1zXG4gICAgICBfcmVzdGFydElkbGVUaW1lb3V0KGVuZFRpbWVzdGFtcCArIGlkbGVUaW1lb3V0IC8gMTAwMCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25JZGxlU3BhbkVuZGVkKGVuZFRpbWVzdGFtcCkge1xuICAgIF9maW5pc2hlZCA9IHRydWU7XG4gICAgYWN0aXZpdGllcy5jbGVhcigpO1xuXG4gICAgX2NsZWFudXBIb29rcy5mb3JFYWNoKGNsZWFudXAgPT4gY2xlYW51cCgpKTtcblxuICAgIHNwYW5PblNjb3BlLl9zZXRTcGFuRm9yU2NvcGUoc2NvcGUsIHByZXZpb3VzQWN0aXZlU3Bhbik7XG5cbiAgICBjb25zdCBzcGFuSlNPTiA9IHNwYW5VdGlscy5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgY29uc3QgeyBzdGFydF90aW1lc3RhbXA6IHN0YXJ0VGltZXN0YW1wIH0gPSBzcGFuSlNPTjtcbiAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIGJ1dCB0byBtYWtlIFRTIGhhcHB5Li4uXG4gICAgaWYgKCFzdGFydFRpbWVzdGFtcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzcGFuSlNPTi5kYXRhO1xuICAgIGlmICghYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTl0pIHtcbiAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OLCBfZmluaXNoUmVhc29uKTtcbiAgICB9XG5cbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coYFtUcmFjaW5nXSBJZGxlIHNwYW4gXCIke3NwYW5KU09OLm9wfVwiIGZpbmlzaGVkYCk7XG5cbiAgICBjb25zdCBjaGlsZFNwYW5zID0gc3BhblV0aWxzLmdldFNwYW5EZXNjZW5kYW50cyhzcGFuKS5maWx0ZXIoY2hpbGQgPT4gY2hpbGQgIT09IHNwYW4pO1xuXG4gICAgbGV0IGRpc2NhcmRlZFNwYW5zID0gMDtcbiAgICBjaGlsZFNwYW5zLmZvckVhY2goY2hpbGRTcGFuID0+IHtcbiAgICAgIC8vIFdlIGNhbmNlbCBhbGwgcGVuZGluZyBzcGFucyB3aXRoIHN0YXR1cyBcImNhbmNlbGxlZFwiIHRvIGluZGljYXRlIHRoZSBpZGxlIHNwYW4gd2FzIGZpbmlzaGVkIGVhcmx5XG4gICAgICBpZiAoY2hpbGRTcGFuLmlzUmVjb3JkaW5nKCkpIHtcbiAgICAgICAgY2hpbGRTcGFuLnNldFN0YXR1cyh7IGNvZGU6IHNwYW5zdGF0dXMuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdjYW5jZWxsZWQnIH0pO1xuICAgICAgICBjaGlsZFNwYW4uZW5kKGVuZFRpbWVzdGFtcCk7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coJ1tUcmFjaW5nXSBDYW5jZWxsaW5nIHNwYW4gc2luY2Ugc3BhbiBlbmRlZCBlYXJseScsIEpTT04uc3RyaW5naWZ5KGNoaWxkU3BhbiwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkU3BhbkpTT04gPSBzcGFuVXRpbHMuc3BhblRvSlNPTihjaGlsZFNwYW4pO1xuICAgICAgY29uc3QgeyB0aW1lc3RhbXA6IGNoaWxkRW5kVGltZXN0YW1wID0gMCwgc3RhcnRfdGltZXN0YW1wOiBjaGlsZFN0YXJ0VGltZXN0YW1wID0gMCB9ID0gY2hpbGRTcGFuSlNPTjtcblxuICAgICAgY29uc3Qgc3BhblN0YXJ0ZWRCZWZvcmVJZGxlU3BhbkVuZCA9IGNoaWxkU3RhcnRUaW1lc3RhbXAgPD0gZW5kVGltZXN0YW1wO1xuXG4gICAgICAvLyBBZGQgYSBkZWx0YSB3aXRoIGlkbGUgdGltZW91dCBzbyB0aGF0IHdlIHByZXZlbnQgZmFsc2UgcG9zaXRpdmVzXG4gICAgICBjb25zdCB0aW1lb3V0V2l0aE1hcmdpbk9mRXJyb3IgPSAoZmluYWxUaW1lb3V0ICsgaWRsZVRpbWVvdXQpIC8gMTAwMDtcbiAgICAgIGNvbnN0IHNwYW5FbmRlZEJlZm9yZUZpbmFsVGltZW91dCA9IGNoaWxkRW5kVGltZXN0YW1wIC0gY2hpbGRTdGFydFRpbWVzdGFtcCA8PSB0aW1lb3V0V2l0aE1hcmdpbk9mRXJyb3I7XG5cbiAgICAgIGlmIChkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkU3BhbiA9IEpTT04uc3RyaW5naWZ5KGNoaWxkU3BhbiwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgaWYgKCFzcGFuU3RhcnRlZEJlZm9yZUlkbGVTcGFuRW5kKSB7XG4gICAgICAgICAgZGVidWdMb2dnZXIuZGVidWcubG9nKCdbVHJhY2luZ10gRGlzY2FyZGluZyBzcGFuIHNpbmNlIGl0IGhhcHBlbmVkIGFmdGVyIGlkbGUgc3BhbiB3YXMgZmluaXNoZWQnLCBzdHJpbmdpZmllZFNwYW4pO1xuICAgICAgICB9IGVsc2UgaWYgKCFzcGFuRW5kZWRCZWZvcmVGaW5hbFRpbWVvdXQpIHtcbiAgICAgICAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coJ1tUcmFjaW5nXSBEaXNjYXJkaW5nIHNwYW4gc2luY2UgaXQgZmluaXNoZWQgYWZ0ZXIgaWRsZSBzcGFuIGZpbmFsIHRpbWVvdXQnLCBzdHJpbmdpZmllZFNwYW4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghc3BhbkVuZGVkQmVmb3JlRmluYWxUaW1lb3V0IHx8ICFzcGFuU3RhcnRlZEJlZm9yZUlkbGVTcGFuRW5kKSB7XG4gICAgICAgIHNwYW5VdGlscy5yZW1vdmVDaGlsZFNwYW5Gcm9tU3BhbihzcGFuLCBjaGlsZFNwYW4pO1xuICAgICAgICBkaXNjYXJkZWRTcGFucysrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGRpc2NhcmRlZFNwYW5zID4gMCkge1xuICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3NlbnRyeS5pZGxlX3NwYW5fZGlzY2FyZGVkX3NwYW5zJywgZGlzY2FyZGVkU3BhbnMpO1xuICAgIH1cbiAgfVxuXG4gIF9jbGVhbnVwSG9va3MucHVzaChcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHN0YXJ0ZWRTcGFuID0+IHtcbiAgICAgIC8vIElmIHdlIGFscmVhZHkgZmluaXNoZWQgdGhlIGlkbGUgc3BhbixcbiAgICAgIC8vIG9yIGlmIHRoaXMgaXMgdGhlIGlkbGUgc3BhbiBpdHNlbGYgYmVpbmcgc3RhcnRlZCxcbiAgICAgIC8vIG9yIGlmIHRoZSBzdGFydGVkIHNwYW4gaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQsXG4gICAgICAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGl0IGZvciBhY3Rpdml0eVxuICAgICAgaWYgKFxuICAgICAgICBfZmluaXNoZWQgfHxcbiAgICAgICAgc3RhcnRlZFNwYW4gPT09IHNwYW4gfHxcbiAgICAgICAgISFzcGFuVXRpbHMuc3BhblRvSlNPTihzdGFydGVkU3BhbikudGltZXN0YW1wIHx8XG4gICAgICAgIChzdGFydGVkU3BhbiBpbnN0YW5jZW9mIHNlbnRyeVNwYW4uU2VudHJ5U3BhbiAmJiBzdGFydGVkU3Bhbi5pc1N0YW5kYWxvbmVTcGFuKCkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhbGxTcGFucyA9IHNwYW5VdGlscy5nZXRTcGFuRGVzY2VuZGFudHMoc3Bhbik7XG5cbiAgICAgIC8vIElmIHRoZSBzcGFuIHRoYXQgd2FzIGp1c3Qgc3RhcnRlZCBpcyBhIGNoaWxkIG9mIHRoZSBpZGxlIHNwYW4sIHdlIHNob3VsZCB0cmFjayBpdFxuICAgICAgaWYgKGFsbFNwYW5zLmluY2x1ZGVzKHN0YXJ0ZWRTcGFuKSkge1xuICAgICAgICBfcHVzaEFjdGl2aXR5KHN0YXJ0ZWRTcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgKTtcblxuICBfY2xlYW51cEhvb2tzLnB1c2goXG4gICAgY2xpZW50Lm9uKCdzcGFuRW5kJywgZW5kZWRTcGFuID0+IHtcbiAgICAgIGlmIChfZmluaXNoZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcG9wQWN0aXZpdHkoZW5kZWRTcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkKTtcbiAgICB9KSxcbiAgKTtcblxuICBfY2xlYW51cEhvb2tzLnB1c2goXG4gICAgY2xpZW50Lm9uKCdpZGxlU3BhbkVuYWJsZUF1dG9GaW5pc2gnLCBzcGFuVG9BbGxvd0F1dG9GaW5pc2ggPT4ge1xuICAgICAgaWYgKHNwYW5Ub0FsbG93QXV0b0ZpbmlzaCA9PT0gc3Bhbikge1xuICAgICAgICBfYXV0b0ZpbmlzaEFsbG93ZWQgPSB0cnVlO1xuICAgICAgICBfcmVzdGFydElkbGVUaW1lb3V0KCk7XG5cbiAgICAgICAgaWYgKGFjdGl2aXRpZXMuc2l6ZSkge1xuICAgICAgICAgIF9yZXN0YXJ0Q2hpbGRTcGFuVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksXG4gICk7XG5cbiAgLy8gV2Ugb25seSBzdGFydCB0aGUgaW5pdGlhbCBpZGxlIHRpbWVvdXQgaWYgd2UgYXJlIG5vdCBkZWxheWluZyB0aGUgYXV0byBmaW5pc2hcbiAgaWYgKCFvcHRpb25zLmRpc2FibGVBdXRvRmluaXNoKSB7XG4gICAgX3Jlc3RhcnRJZGxlVGltZW91dCgpO1xuICB9XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKCFfZmluaXNoZWQpIHtcbiAgICAgIHNwYW4uc2V0U3RhdHVzKHsgY29kZTogc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2RlYWRsaW5lX2V4Y2VlZGVkJyB9KTtcbiAgICAgIF9maW5pc2hSZWFzb24gPSBGSU5JU0hfUkVBU09OX0ZJTkFMX1RJTUVPVVQ7XG4gICAgICBzcGFuLmVuZCgpO1xuICAgIH1cbiAgfSwgZmluYWxUaW1lb3V0KTtcblxuICByZXR1cm4gc3Bhbjtcbn1cblxuZnVuY3Rpb24gX3N0YXJ0SWRsZVNwYW4ob3B0aW9ucykge1xuICBjb25zdCBzcGFuID0gdHJhY2Uuc3RhcnRJbmFjdGl2ZVNwYW4ob3B0aW9ucyk7XG5cbiAgc3Bhbk9uU2NvcGUuX3NldFNwYW5Gb3JTY29wZShjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLCBzcGFuKTtcblxuICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGRlYnVnTG9nZ2VyLmRlYnVnLmxvZygnW1RyYWNpbmddIFN0YXJ0ZWQgc3BhbiBpcyBhbiBpZGxlIHNwYW4nKTtcblxuICByZXR1cm4gc3Bhbjtcbn1cblxuZXhwb3J0cy5UUkFDSU5HX0RFRkFVTFRTID0gVFJBQ0lOR19ERUZBVUxUUztcbmV4cG9ydHMuc3RhcnRJZGxlU3BhbiA9IHN0YXJ0SWRsZVNwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGxlU3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/logSpans.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanUtils.spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanUtils.spanIsSampled(span);\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanUtils.spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  debugLogger.debug.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanUtils.spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  debugLogger.debug.log(msg);\n}\n\nexports.logSpanEnd = logSpanEnd;\nexports.logSpanStart = logSpanStart;\n//# sourceMappingURL=logSpans.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9sb2dTcGFucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1Qjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHdGQUF3RjtBQUNsRyxVQUFVLFNBQVM7O0FBRW5CO0FBQ0E7QUFDQTs7QUFFQSx1Q0FBdUMsbUNBQW1DLEVBQUUsMEJBQTBCOztBQUV0Ryw0QkFBNEIsR0FBRyxZQUFZLFlBQVksVUFBVSxPQUFPOztBQUV4RTtBQUNBLGlDQUFpQyxhQUFhO0FBQzlDOztBQUVBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUIsK0JBQStCLDhCQUE4QjtBQUM3RDtBQUNBLGlDQUFpQyxHQUFHO0FBQ3BDO0FBQ0E7QUFDQSwwQ0FBMEMsWUFBWTtBQUN0RDtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQixJQUFJLHVCQUF1QjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsMERBQTBEO0FBQ3BFLFVBQVUsU0FBUztBQUNuQjtBQUNBOztBQUVBLHNDQUFzQyxHQUFHLElBQUksMEJBQTBCLFFBQVEsWUFBWSxZQUFZLE9BQU87QUFDOUc7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL2xvZ1NwYW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9zcGFuVXRpbHMuanMnKTtcblxuLyoqXG4gKiBQcmludCBhIGxvZyBtZXNzYWdlIGZvciBhIHN0YXJ0ZWQgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gbG9nU3BhblN0YXJ0KHNwYW4pIHtcbiAgaWYgKCFkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSByZXR1cm47XG5cbiAgY29uc3QgeyBkZXNjcmlwdGlvbiA9ICc8IHVua25vd24gbmFtZSA+Jywgb3AgPSAnPCB1bmtub3duIG9wID4nLCBwYXJlbnRfc3Bhbl9pZDogcGFyZW50U3BhbklkIH0gPSBzcGFuVXRpbHMuc3BhblRvSlNPTihzcGFuKTtcbiAgY29uc3QgeyBzcGFuSWQgfSA9IHNwYW4uc3BhbkNvbnRleHQoKTtcblxuICBjb25zdCBzYW1wbGVkID0gc3BhblV0aWxzLnNwYW5Jc1NhbXBsZWQoc3Bhbik7XG4gIGNvbnN0IHJvb3RTcGFuID0gc3BhblV0aWxzLmdldFJvb3RTcGFuKHNwYW4pO1xuICBjb25zdCBpc1Jvb3RTcGFuID0gcm9vdFNwYW4gPT09IHNwYW47XG5cbiAgY29uc3QgaGVhZGVyID0gYFtUcmFjaW5nXSBTdGFydGluZyAke3NhbXBsZWQgPyAnc2FtcGxlZCcgOiAndW5zYW1wbGVkJ30gJHtpc1Jvb3RTcGFuID8gJ3Jvb3QgJyA6ICcnfXNwYW5gO1xuXG4gIGNvbnN0IGluZm9QYXJ0cyA9IFtgb3A6ICR7b3B9YCwgYG5hbWU6ICR7ZGVzY3JpcHRpb259YCwgYElEOiAke3NwYW5JZH1gXTtcblxuICBpZiAocGFyZW50U3BhbklkKSB7XG4gICAgaW5mb1BhcnRzLnB1c2goYHBhcmVudCBJRDogJHtwYXJlbnRTcGFuSWR9YCk7XG4gIH1cblxuICBpZiAoIWlzUm9vdFNwYW4pIHtcbiAgICBjb25zdCB7IG9wLCBkZXNjcmlwdGlvbiB9ID0gc3BhblV0aWxzLnNwYW5Ub0pTT04ocm9vdFNwYW4pO1xuICAgIGluZm9QYXJ0cy5wdXNoKGByb290IElEOiAke3Jvb3RTcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkfWApO1xuICAgIGlmIChvcCkge1xuICAgICAgaW5mb1BhcnRzLnB1c2goYHJvb3Qgb3A6ICR7b3B9YCk7XG4gICAgfVxuICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgaW5mb1BhcnRzLnB1c2goYHJvb3QgZGVzY3JpcHRpb246ICR7ZGVzY3JpcHRpb259YCk7XG4gICAgfVxuICB9XG5cbiAgZGVidWdMb2dnZXIuZGVidWcubG9nKGAke2hlYWRlcn1cbiAgJHtpbmZvUGFydHMuam9pbignXFxuICAnKX1gKTtcbn1cblxuLyoqXG4gKiBQcmludCBhIGxvZyBtZXNzYWdlIGZvciBhbiBlbmRlZCBzcGFuLlxuICovXG5mdW5jdGlvbiBsb2dTcGFuRW5kKHNwYW4pIHtcbiAgaWYgKCFkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSByZXR1cm47XG5cbiAgY29uc3QgeyBkZXNjcmlwdGlvbiA9ICc8IHVua25vd24gbmFtZSA+Jywgb3AgPSAnPCB1bmtub3duIG9wID4nIH0gPSBzcGFuVXRpbHMuc3BhblRvSlNPTihzcGFuKTtcbiAgY29uc3QgeyBzcGFuSWQgfSA9IHNwYW4uc3BhbkNvbnRleHQoKTtcbiAgY29uc3Qgcm9vdFNwYW4gPSBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4oc3Bhbik7XG4gIGNvbnN0IGlzUm9vdFNwYW4gPSByb290U3BhbiA9PT0gc3BhbjtcblxuICBjb25zdCBtc2cgPSBgW1RyYWNpbmddIEZpbmlzaGluZyBcIiR7b3B9XCIgJHtpc1Jvb3RTcGFuID8gJ3Jvb3QgJyA6ICcnfXNwYW4gXCIke2Rlc2NyaXB0aW9ufVwiIHdpdGggSUQgJHtzcGFuSWR9YDtcbiAgZGVidWdMb2dnZXIuZGVidWcubG9nKG1zZyk7XG59XG5cbmV4cG9ydHMubG9nU3BhbkVuZCA9IGxvZ1NwYW5FbmQ7XG5leHBvcnRzLmxvZ1NwYW5TdGFydCA9IGxvZ1NwYW5TdGFydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ1NwYW5zLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/measurement.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit, activeSpan = spanUtils.getActiveSpan()) {\n  const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit ,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] ;\n    const value = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] ;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n\nexports.setMeasurement = setMeasurement;\nexports.timedEventsToMeasurements = timedEventsToMeasurements;\n//# sourceMappingURL=measurement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9tZWFzdXJlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsMkJBQTJCLG1CQUFPLENBQUMsMEdBQTBCO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLDBHQUEwQjtBQUN0RCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVHQUF1RyxNQUFNLElBQUksT0FBTyxFQUFFLEtBQUs7QUFDL0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL21lYXN1cmVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IHNlbWFudGljQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL3NlbWFudGljQXR0cmlidXRlcy5qcycpO1xuY29uc3QgZGVidWdMb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuXG4vKipcbiAqIEFkZHMgYSBtZWFzdXJlbWVudCB0byB0aGUgYWN0aXZlIHRyYW5zYWN0aW9uIG9uIHRoZSBjdXJyZW50IGdsb2JhbCBzY29wZS4gWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgaW4gYSBkaWZmZXJlbnQgc3BhblxuICogYXMgdGhlIDR0aCBwYXJhbWV0ZXIuXG4gKi9cbmZ1bmN0aW9uIHNldE1lYXN1cmVtZW50KG5hbWUsIHZhbHVlLCB1bml0LCBhY3RpdmVTcGFuID0gc3BhblV0aWxzLmdldEFjdGl2ZVNwYW4oKSkge1xuICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gJiYgc3BhblV0aWxzLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuXG4gIGlmIChyb290U3Bhbikge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcubG9nKGBbTWVhc3VyZW1lbnRdIFNldHRpbmcgbWVhc3VyZW1lbnQgb24gcm9vdCBzcGFuOiAke25hbWV9ID0gJHt2YWx1ZX0gJHt1bml0fWApO1xuICAgIHJvb3RTcGFuLmFkZEV2ZW50KG5hbWUsIHtcbiAgICAgIFtzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRV06IHZhbHVlLFxuICAgICAgW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVRdOiB1bml0ICxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgdGltZWQgZXZlbnRzIHRvIG1lYXN1cmVtZW50cy5cbiAqL1xuZnVuY3Rpb24gdGltZWRFdmVudHNUb01lYXN1cmVtZW50cyhldmVudHMpIHtcbiAgaWYgKCFldmVudHMgfHwgZXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBtZWFzdXJlbWVudHMgPSB7fTtcbiAgZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBldmVudC5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgIGNvbnN0IHVuaXQgPSBhdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVRdIDtcbiAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUVdIDtcblxuICAgIGlmICh0eXBlb2YgdW5pdCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgbWVhc3VyZW1lbnRzW2V2ZW50Lm5hbWVdID0geyB2YWx1ZSwgdW5pdCB9O1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG1lYXN1cmVtZW50cztcbn1cblxuZXhwb3J0cy5zZXRNZWFzdXJlbWVudCA9IHNldE1lYXN1cmVtZW50O1xuZXhwb3J0cy50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzID0gdGltZWRFdmVudHNUb01lYXN1cmVtZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lYXN1cmVtZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sampling.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst parseSampleRate = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(\n  options,\n  samplingContext,\n  sampleRand,\n) {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled.hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate.parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    debugBuild.DEBUG_BUILD &&\n      debugLogger.debug.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    debugBuild.DEBUG_BUILD &&\n      debugLogger.debug.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    debugBuild.DEBUG_BUILD &&\n      debugLogger.debug.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n\nexports.sampleSpan = sampleSpan;\n//# sourceMappingURL=sampling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zYW1wbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsb0JBQW9CLG1CQUFPLENBQUMsMEdBQTBCO0FBQ3RELHdCQUF3QixtQkFBTyxDQUFDLGdIQUE2QjtBQUM3RCx3QkFBd0IsbUJBQU8sQ0FBQyxnSEFBNkI7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlJQUF5STtBQUN6STtBQUNBLFdBQVcsVUFBVSxrQ0FBa0M7QUFDdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RztBQUM1RztBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL3NhbXBsaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBoYXNTcGFuc0VuYWJsZWQgPSByZXF1aXJlKCcuLi91dGlscy9oYXNTcGFuc0VuYWJsZWQuanMnKTtcbmNvbnN0IHBhcnNlU2FtcGxlUmF0ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3BhcnNlU2FtcGxlUmF0ZS5qcycpO1xuXG4vKipcbiAqIE1ha2VzIGEgc2FtcGxpbmcgZGVjaXNpb24gZm9yIHRoZSBnaXZlbiBvcHRpb25zLlxuICpcbiAqIENhbGxlZCBldmVyeSB0aW1lIGEgcm9vdCBzcGFuIGlzIGNyZWF0ZWQuIE9ubHkgcm9vdCBzcGFucyB3aGljaCBlbWVyZ2Ugd2l0aCBhIGBzYW1wbGVkYCB2YWx1ZSBvZiBgdHJ1ZWAgd2lsbCBiZVxuICogc2VudCB0byBTZW50cnkuXG4gKi9cbmZ1bmN0aW9uIHNhbXBsZVNwYW4oXG4gIG9wdGlvbnMsXG4gIHNhbXBsaW5nQ29udGV4dCxcbiAgc2FtcGxlUmFuZCxcbikge1xuICAvLyBub3RoaW5nIHRvIGRvIGlmIHNwYW4gcmVjb3JkaW5nIGlzIG5vdCBlbmFibGVkXG4gIGlmICghaGFzU3BhbnNFbmFibGVkLmhhc1NwYW5zRW5hYmxlZChvcHRpb25zKSkge1xuICAgIHJldHVybiBbZmFsc2VdO1xuICB9XG5cbiAgbGV0IGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB1bmRlZmluZWQ7XG5cbiAgLy8gd2Ugd291bGQgaGF2ZSBiYWlsZWQgYWxyZWFkeSBpZiBuZWl0aGVyIGB0cmFjZXNTYW1wbGVyYCBub3IgYHRyYWNlc1NhbXBsZVJhdGVgIHdlcmUgZGVmaW5lZCwgc28gb25lIG9mIHRoZXNlIHNob3VsZFxuICAvLyB3b3JrOyBwcmVmZXIgdGhlIGhvb2sgaWYgc29cbiAgbGV0IHNhbXBsZVJhdGU7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFjZXNTYW1wbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2FtcGxlUmF0ZSA9IG9wdGlvbnMudHJhY2VzU2FtcGxlcih7XG4gICAgICAuLi5zYW1wbGluZ0NvbnRleHQsXG4gICAgICBpbmhlcml0T3JTYW1wbGVXaXRoOiBmYWxsYmFja1NhbXBsZVJhdGUgPT4ge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGFuIGluY29taW5nIHBhcmVudCBzYW1wbGUgcmF0ZSwgd2UnbGwganVzdCB1c2UgdGhhdCBvbmUuXG4gICAgICAgIC8vIFRoZSBzYW1wbGluZyBkZWNpc2lvbiB3aWxsIGJlIGluaGVyaXRlZCBiZWNhdXNlIG9mIHRoZSBzYW1wbGVfcmFuZCB0aGF0IHdhcyBnZW5lcmF0ZWQgd2hlbiB0aGUgdHJhY2UgcmVhY2hlZCB0aGUgaW5jb21pbmcgYm91bmRhcmllcyBvZiB0aGUgU0RLLlxuICAgICAgICBpZiAodHlwZW9mIHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVSYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBzYW1wbGluZ0NvbnRleHQucGFyZW50U2FtcGxlUmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhbGxiYWNrIGlmIHBhcmVudCBzYW1wbGUgcmF0ZSBpcyBub3Qgb24gdGhlIGluY29taW5nIHRyYWNlIChlLmcuIGlmIHRoZXJlIGlzIG5vIGJhZ2dhZ2UpXG4gICAgICAgIC8vIFRoaXMgaXMgdG8gcHJvdmlkZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBpZiB0aGVyZSBhcmUgaW5jb21pbmcgdHJhY2VzIGZyb20gb2xkZXIgU0RLcyB0aGF0IGRvbid0IHNlbmQgYSBwYXJlbnQgc2FtcGxlIHJhdGUgb3IgYSBzYW1wbGUgcmFuZC4gSW4gdGhlc2UgY2FzZXMgd2UganVzdCB3YW50IHRvIGZvcmNlIGVpdGhlciBhIHNhbXBsaW5nIGRlY2lzaW9uIG9uIHRoZSBkb3duc3RyZWFtIHRyYWNlcyB2aWEgdGhlIHNhbXBsZSByYXRlLlxuICAgICAgICBpZiAodHlwZW9mIHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxsYmFja1NhbXBsZVJhdGU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzYW1wbGVSYXRlID0gc2FtcGxpbmdDb250ZXh0LnBhcmVudFNhbXBsZWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMudHJhY2VzU2FtcGxlUmF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYW1wbGVSYXRlID0gb3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlO1xuICAgIGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gU2luY2UgdGhpcyBpcyBjb21pbmcgZnJvbSB0aGUgdXNlciAob3IgZnJvbSBhIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyKSwgd2hvIGtub3dzIHdoYXQgd2UgbWlnaHQgZ2V0LlxuICAvLyAoVGhlIG9ubHkgdmFsaWQgdmFsdWVzIGFyZSBib29sZWFucyBvciBudW1iZXJzIGJldHdlZW4gMCBhbmQgMS4pXG4gIGNvbnN0IHBhcnNlZFNhbXBsZVJhdGUgPSBwYXJzZVNhbXBsZVJhdGUucGFyc2VTYW1wbGVSYXRlKHNhbXBsZVJhdGUpO1xuXG4gIGlmIChwYXJzZWRTYW1wbGVSYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKFxuICAgICAgICBgW1RyYWNpbmddIERpc2NhcmRpbmcgcm9vdCBzcGFuIGJlY2F1c2Ugb2YgaW52YWxpZCBzYW1wbGUgcmF0ZS4gU2FtcGxlIHJhdGUgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiBHb3QgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBzYW1wbGVSYXRlLFxuICAgICAgICApfSBvZiB0eXBlICR7SlNPTi5zdHJpbmdpZnkodHlwZW9mIHNhbXBsZVJhdGUpfS5gLFxuICAgICAgKTtcbiAgICByZXR1cm4gW2ZhbHNlXTtcbiAgfVxuXG4gIC8vIGlmIHRoZSBmdW5jdGlvbiByZXR1cm5lZCAwIChvciBmYWxzZSksIG9yIGlmIGB0cmFjZXNTYW1wbGVSYXRlYCBpcyAwLCBpdCdzIGEgc2lnbiB0aGUgdHJhbnNhY3Rpb24gc2hvdWxkIGJlIGRyb3BwZWRcbiAgaWYgKCFwYXJzZWRTYW1wbGVSYXRlKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgZGVidWdMb2dnZXIuZGVidWcubG9nKFxuICAgICAgICBgW1RyYWNpbmddIERpc2NhcmRpbmcgdHJhbnNhY3Rpb24gYmVjYXVzZSAke1xuICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnRyYWNlc1NhbXBsZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gJ3RyYWNlc1NhbXBsZXIgcmV0dXJuZWQgMCBvciBmYWxzZSdcbiAgICAgICAgICAgIDogJ2EgbmVnYXRpdmUgc2FtcGxpbmcgZGVjaXNpb24gd2FzIGluaGVyaXRlZCBvciB0cmFjZXNTYW1wbGVSYXRlIGlzIHNldCB0byAwJ1xuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgcmV0dXJuIFtmYWxzZSwgcGFyc2VkU2FtcGxlUmF0ZSwgbG9jYWxTYW1wbGVSYXRlV2FzQXBwbGllZF07XG4gIH1cblxuICAvLyBXZSBhbHdheXMgY29tcGFyZSB0aGUgc2FtcGxlIHJhbmQgZm9yIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBjb250ZXh0IGFnYWluc3QgdGhlIGNob3NlbiBzYW1wbGUgcmF0ZS5cbiAgLy8gUmVhZCBtb3JlOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvdGVsZW1ldHJ5L3RyYWNlcy8jcHJvcGFnYXRlZC1yYW5kb20tdmFsdWVcbiAgY29uc3Qgc2hvdWxkU2FtcGxlID0gc2FtcGxlUmFuZCA8IHBhcnNlZFNhbXBsZVJhdGU7XG5cbiAgLy8gaWYgd2UncmUgbm90IGdvaW5nIHRvIGtlZXAgaXQsIHdlJ3JlIGRvbmVcbiAgaWYgKCFzaG91bGRTYW1wbGUpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coXG4gICAgICAgIGBbVHJhY2luZ10gRGlzY2FyZGluZyB0cmFuc2FjdGlvbiBiZWNhdXNlIGl0J3Mgbm90IGluY2x1ZGVkIGluIHRoZSByYW5kb20gc2FtcGxlIChzYW1wbGluZyByYXRlID0gJHtOdW1iZXIoXG4gICAgICAgICAgc2FtcGxlUmF0ZSxcbiAgICAgICAgKX0pYCxcbiAgICAgICk7XG4gIH1cblxuICByZXR1cm4gW3Nob3VsZFNhbXBsZSwgcGFyc2VkU2FtcGxlUmF0ZSwgbG9jYWxTYW1wbGVSYXRlV2FzQXBwbGllZF07XG59XG5cbmV4cG9ydHMuc2FtcGxlU3BhbiA9IHNhbXBsZVNwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst propagationContext = __webpack_require__(/*! ../utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan  {\n\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: spanUtils.TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n   end(_timestamp) {}\n\n  /** @inheritdoc */\n   setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n   addEvent(\n    _name,\n    _attributesOrStartTime,\n    _startTime,\n  ) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLink(_link) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n}\n\nexports.SentryNonRecordingSpan = SentryNonRecordingSpan;\n//# sourceMappingURL=sentryNonRecordingSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLHNIQUFnQztBQUNuRSxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvc2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcGFnYXRpb25Db250ZXh0LmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9zcGFuVXRpbHMuanMnKTtcblxuLyoqXG4gKiBBIFNlbnRyeSBTcGFuIHRoYXQgaXMgbm9uLXJlY29yZGluZywgbWVhbmluZyBpdCB3aWxsIG5vdCBiZSBzZW50IHRvIFNlbnRyeS5cbiAqL1xuY2xhc3MgU2VudHJ5Tm9uUmVjb3JkaW5nU3BhbiAge1xuXG4gICBjb25zdHJ1Y3RvcihzcGFuQ29udGV4dCA9IHt9KSB7XG4gICAgdGhpcy5fdHJhY2VJZCA9IHNwYW5Db250ZXh0LnRyYWNlSWQgfHwgcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlVHJhY2VJZCgpO1xuICAgIHRoaXMuX3NwYW5JZCA9IHNwYW5Db250ZXh0LnNwYW5JZCB8fCBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVTcGFuSWQoKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc3BhbkNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNwYW5JZDogdGhpcy5fc3BhbklkLFxuICAgICAgdHJhY2VJZDogdGhpcy5fdHJhY2VJZCxcbiAgICAgIHRyYWNlRmxhZ3M6IHNwYW5VdGlscy5UUkFDRV9GTEFHX05PTkUsXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgZW5kKF90aW1lc3RhbXApIHt9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRBdHRyaWJ1dGUoX2tleSwgX3ZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHNldEF0dHJpYnV0ZXMoX3ZhbHVlcykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRTdGF0dXMoX3N0YXR1cykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB1cGRhdGVOYW1lKF9uYW1lKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGlzUmVjb3JkaW5nKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkRXZlbnQoXG4gICAgX25hbWUsXG4gICAgX2F0dHJpYnV0ZXNPclN0YXJ0VGltZSxcbiAgICBfc3RhcnRUaW1lLFxuICApIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgYWRkTGluayhfbGluaykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gICBhZGRMaW5rcyhfbGlua3MpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQsXG4gICAqIGJ1dCB3ZSBuZWVkIGl0IGZvciBiZWluZyBjb21wbGlhbnQgd2l0aCB0aGUgT1RFTCBTcGFuIGludGVyZmFjZS5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gICByZWNvcmRFeGNlcHRpb24oX2V4Y2VwdGlvbiwgX3RpbWUpIHtcbiAgICAvLyBub29wXG4gIH1cbn1cblxuZXhwb3J0cy5TZW50cnlOb25SZWNvcmRpbmdTcGFuID0gU2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbnRyeU5vblJlY29yZGluZ1NwYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst propagationContext = __webpack_require__(/*! ../utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst time = __webpack_require__(/*! ../utils/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst measurement = __webpack_require__(/*! ./measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan  {\n\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n    this._startTime = spanContext.startTimestamp || time.timestampInSeconds();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n   addLink(link) {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(links) {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? spanUtils.TRACE_FLAG_SAMPLED : spanUtils.TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n   setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n   updateStartTime(timeInput) {\n    this._startTime = spanUtils.spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateName(name) {\n    this._name = name;\n    this.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n   end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanUtils.spanTimeInputToSeconds(endTimestamp);\n    logSpans.logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n   getSpanJSON() {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: spanUtils.getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      profile_id: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n      exclusive_time: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n      measurements: measurement.timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && spanUtils.getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? spanUtils.getRootSpan(this).spanContext().spanId : undefined,\n      links: spanUtils.convertSpanLinksForEnvelope(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n   addEvent(\n    name,\n    attributesOrStartTime,\n    startTime,\n  ) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('[Tracing] Adding an event to span:', name);\n\n    const time$1 = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || time.timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event = {\n      name,\n      time: spanUtils.spanTimeInputToSeconds(time$1),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n   isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n   _onSpanEnded() {\n    const client = currentScopes.getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === spanUtils.getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(envelope.createSpanEnvelope([this], client));\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          debugLogger.debug.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = utils.getCapturedScopesOnSpan(this).scope || currentScopes.getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n   _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanUtils.spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = utils.getCapturedScopesOnSpan(this);\n\n    const normalizedRequest = capturedSpanScope?.getScopeData().sdkProcessingMetadata?.normalizedRequest;\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = spanUtils.getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanUtils.spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction = {\n      contexts: {\n        trace: spanUtils.spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(this),\n      },\n      request: normalizedRequest,\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = measurement.timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value) {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\nexports.SentrySpan = SentrySpan;\n//# sourceMappingURL=sentrySpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zZW50cnlTcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLGdHQUFxQjtBQUNuRCxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsc0ZBQWdCO0FBQ3pDLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDdEQsMkJBQTJCLG1CQUFPLENBQUMsc0hBQWdDO0FBQ25FLGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1QjtBQUNqRCxhQUFhLG1CQUFPLENBQUMsMEZBQWtCO0FBQ3ZDLCtCQUErQixtQkFBTyxDQUFDLHlIQUE2QjtBQUNwRSxpQkFBaUIsbUJBQU8sQ0FBQyw2RkFBZTtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQyxtR0FBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLHVGQUFZOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLHdEQUF3RDtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtRUFBbUU7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLHVFQUF1RTs7QUFFbkY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zZW50cnlTcGFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4uL2VudmVsb3BlLmpzJyk7XG5jb25zdCBzZW1hbnRpY0F0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wYWdhdGlvbkNvbnRleHQuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuY29uc3QgdGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3RpbWUuanMnKTtcbmNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1aXJlKCcuL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMnKTtcbmNvbnN0IGxvZ1NwYW5zID0gcmVxdWlyZSgnLi9sb2dTcGFucy5qcycpO1xuY29uc3QgbWVhc3VyZW1lbnQgPSByZXF1aXJlKCcuL21lYXN1cmVtZW50LmpzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcblxuY29uc3QgTUFYX1NQQU5fQ09VTlQgPSAxMDAwO1xuXG4vKipcbiAqIFNwYW4gY29udGFpbnMgYWxsIGRhdGEgYWJvdXQgYSBzcGFuXG4gKi9cbmNsYXNzIFNlbnRyeVNwYW4gIHtcblxuICAvKiogRXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHMgd2hlbiB0aGUgc3BhbiBzdGFydGVkLiAqL1xuXG4gIC8qKiBFcG9jaCB0aW1lc3RhbXAgaW4gc2Vjb25kcyB3aGVuIHRoZSBzcGFuIGVuZGVkLiAqL1xuXG4gIC8qKiBJbnRlcm5hbCBrZWVwZXIgb2YgdGhlIHN0YXR1cyAqL1xuXG4gIC8qKiBUaGUgdGltZWQgZXZlbnRzIGFkZGVkIHRvIHRoaXMgc3Bhbi4gKi9cblxuICAvKiogaWYgdHJ1ZSwgdHJlYXQgc3BhbiBhcyBhIHN0YW5kYWxvbmUgc3BhbiAobm90IHBhcnQgb2YgYSB0cmFuc2FjdGlvbikgKi9cblxuICAvKipcbiAgICogWW91IHNob3VsZCBuZXZlciBjYWxsIHRoZSBjb25zdHJ1Y3RvciBtYW51YWxseSwgYWx3YXlzIHVzZSBgU2VudHJ5LnN0YXJ0U3BhbigpYFxuICAgKiBvciBvdGhlciBzcGFuIG1ldGhvZHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAqIEBoaWRkZW5cbiAgICovXG4gICBjb25zdHJ1Y3RvcihzcGFuQ29udGV4dCA9IHt9KSB7XG4gICAgdGhpcy5fdHJhY2VJZCA9IHNwYW5Db250ZXh0LnRyYWNlSWQgfHwgcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlVHJhY2VJZCgpO1xuICAgIHRoaXMuX3NwYW5JZCA9IHNwYW5Db250ZXh0LnNwYW5JZCB8fCBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVTcGFuSWQoKTtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBzcGFuQ29udGV4dC5zdGFydFRpbWVzdGFtcCB8fCB0aW1lLnRpbWVzdGFtcEluU2Vjb25kcygpO1xuICAgIHRoaXMuX2xpbmtzID0gc3BhbkNvbnRleHQubGlua3M7XG5cbiAgICB0aGlzLl9hdHRyaWJ1dGVzID0ge307XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgIFtzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnbWFudWFsJyxcbiAgICAgIFtzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IHNwYW5Db250ZXh0Lm9wLFxuICAgICAgLi4uc3BhbkNvbnRleHQuYXR0cmlidXRlcyxcbiAgICB9KTtcblxuICAgIHRoaXMuX25hbWUgPSBzcGFuQ29udGV4dC5uYW1lO1xuXG4gICAgaWYgKHNwYW5Db250ZXh0LnBhcmVudFNwYW5JZCkge1xuICAgICAgdGhpcy5fcGFyZW50U3BhbklkID0gc3BhbkNvbnRleHQucGFyZW50U3BhbklkO1xuICAgIH1cbiAgICAvLyBXZSB3YW50IHRvIGluY2x1ZGUgYm9vbGVhbnMgYXMgd2VsbCBoZXJlXG4gICAgaWYgKCdzYW1wbGVkJyBpbiBzcGFuQ29udGV4dCkge1xuICAgICAgdGhpcy5fc2FtcGxlZCA9IHNwYW5Db250ZXh0LnNhbXBsZWQ7XG4gICAgfVxuICAgIGlmIChzcGFuQ29udGV4dC5lbmRUaW1lc3RhbXApIHtcbiAgICAgIHRoaXMuX2VuZFRpbWUgPSBzcGFuQ29udGV4dC5lbmRUaW1lc3RhbXA7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzID0gW107XG5cbiAgICB0aGlzLl9pc1N0YW5kYWxvbmVTcGFuID0gc3BhbkNvbnRleHQuaXNTdGFuZGFsb25lO1xuXG4gICAgLy8gSWYgdGhlIHNwYW4gaXMgYWxyZWFkeSBlbmRlZCwgZW5zdXJlIHdlIGZpbmFsaXplIHRoZSBzcGFuIGltbWVkaWF0ZWx5XG4gICAgaWYgKHRoaXMuX2VuZFRpbWUpIHtcbiAgICAgIHRoaXMuX29uU3BhbkVuZGVkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gICBhZGRMaW5rKGxpbmspIHtcbiAgICBpZiAodGhpcy5fbGlua3MpIHtcbiAgICAgIHRoaXMuX2xpbmtzLnB1c2gobGluayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpbmtzID0gW2xpbmtdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgYWRkTGlua3MobGlua3MpIHtcbiAgICBpZiAodGhpcy5fbGlua3MpIHtcbiAgICAgIHRoaXMuX2xpbmtzLnB1c2goLi4ubGlua3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saW5rcyA9IGxpbmtzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQsXG4gICAqIGJ1dCBpdCBpcyBuZWVkZWQgZm9yIGJlaW5nIGNvbXBsaWFudCB3aXRoIHRoZSBPVEVMIFNwYW4gaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgIHJlY29yZEV4Y2VwdGlvbihfZXhjZXB0aW9uLCBfdGltZSkge1xuICAgIC8vIG5vb3BcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc3BhbkNvbnRleHQoKSB7XG4gICAgY29uc3QgeyBfc3BhbklkOiBzcGFuSWQsIF90cmFjZUlkOiB0cmFjZUlkLCBfc2FtcGxlZDogc2FtcGxlZCB9ID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgc3BhbklkLFxuICAgICAgdHJhY2VJZCxcbiAgICAgIHRyYWNlRmxhZ3M6IHNhbXBsZWQgPyBzcGFuVXRpbHMuVFJBQ0VfRkxBR19TQU1QTEVEIDogc3BhblV0aWxzLlRSQUNFX0ZMQUdfTk9ORSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICBkZWxldGUgdGhpcy5fYXR0cmlidXRlc1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChrZXkgPT4gdGhpcy5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQsXG4gICAqIGJ1dCB3ZSBuZWVkIGl0IGZvciBicm93c2VyIHRyYWNpbmcgd2hlcmUgd2Ugd2FudCB0byBhZGp1c3QgdGhlIHN0YXJ0IHRpbWUgYWZ0ZXJ3YXJkcy5cbiAgICogVVNFIFRISVMgV0lUSCBDQVVUSU9OIVxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgIHVwZGF0ZVN0YXJ0VGltZSh0aW1lSW5wdXQpIHtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBzcGFuVXRpbHMuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyh0aW1lSW5wdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0U3RhdHVzKHZhbHVlKSB7XG4gICAgdGhpcy5fc3RhdHVzID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICB1cGRhdGVOYW1lKG5hbWUpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UsICdjdXN0b20nKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgZW5kKGVuZFRpbWVzdGFtcCkge1xuICAgIC8vIElmIGFscmVhZHkgZW5kZWQsIHNraXBcbiAgICBpZiAodGhpcy5fZW5kVGltZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2VuZFRpbWUgPSBzcGFuVXRpbHMuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyhlbmRUaW1lc3RhbXApO1xuICAgIGxvZ1NwYW5zLmxvZ1NwYW5FbmQodGhpcyk7XG5cbiAgICB0aGlzLl9vblNwYW5FbmRlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc3Bhbi5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWwgVGhpcyBtZXRob2QgaXMgcHVyZWx5IGZvciBpbnRlcm5hbCBwdXJwb3NlcyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIG91dHNpZGVcbiAgICogb2YgU0RLIGNvZGUuIElmIHlvdSBuZWVkIHRvIGdldCBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBzcGFuLFxuICAgKiB1c2UgYHNwYW5Ub0pTT04oc3BhbilgIGluc3RlYWQuXG4gICAqL1xuICAgZ2V0U3BhbkpTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHRoaXMuX2F0dHJpYnV0ZXMsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgIG9wOiB0aGlzLl9hdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSxcbiAgICAgIHBhcmVudF9zcGFuX2lkOiB0aGlzLl9wYXJlbnRTcGFuSWQsXG4gICAgICBzcGFuX2lkOiB0aGlzLl9zcGFuSWQsXG4gICAgICBzdGFydF90aW1lc3RhbXA6IHRoaXMuX3N0YXJ0VGltZSxcbiAgICAgIHN0YXR1czogc3BhblV0aWxzLmdldFN0YXR1c01lc3NhZ2UodGhpcy5fc3RhdHVzKSxcbiAgICAgIHRpbWVzdGFtcDogdGhpcy5fZW5kVGltZSxcbiAgICAgIHRyYWNlX2lkOiB0aGlzLl90cmFjZUlkLFxuICAgICAgb3JpZ2luOiB0aGlzLl9hdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl0gLFxuICAgICAgcHJvZmlsZV9pZDogdGhpcy5fYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSURdICxcbiAgICAgIGV4Y2x1c2l2ZV90aW1lOiB0aGlzLl9hdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUVdICxcbiAgICAgIG1lYXN1cmVtZW50czogbWVhc3VyZW1lbnQudGltZWRFdmVudHNUb01lYXN1cmVtZW50cyh0aGlzLl9ldmVudHMpLFxuICAgICAgaXNfc2VnbWVudDogKHRoaXMuX2lzU3RhbmRhbG9uZVNwYW4gJiYgc3BhblV0aWxzLmdldFJvb3RTcGFuKHRoaXMpID09PSB0aGlzKSB8fCB1bmRlZmluZWQsXG4gICAgICBzZWdtZW50X2lkOiB0aGlzLl9pc1N0YW5kYWxvbmVTcGFuID8gc3BhblV0aWxzLmdldFJvb3RTcGFuKHRoaXMpLnNwYW5Db250ZXh0KCkuc3BhbklkIDogdW5kZWZpbmVkLFxuICAgICAgbGlua3M6IHNwYW5VdGlscy5jb252ZXJ0U3BhbkxpbmtzRm9yRW52ZWxvcGUodGhpcy5fbGlua3MpLFxuICAgIH07XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGlzUmVjb3JkaW5nKCkge1xuICAgIHJldHVybiAhdGhpcy5fZW5kVGltZSAmJiAhIXRoaXMuX3NhbXBsZWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gICBhZGRFdmVudChcbiAgICBuYW1lLFxuICAgIGF0dHJpYnV0ZXNPclN0YXJ0VGltZSxcbiAgICBzdGFydFRpbWUsXG4gICkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgZGVidWdMb2dnZXIuZGVidWcubG9nKCdbVHJhY2luZ10gQWRkaW5nIGFuIGV2ZW50IHRvIHNwYW46JywgbmFtZSk7XG5cbiAgICBjb25zdCB0aW1lJDEgPSBpc1NwYW5UaW1lSW5wdXQoYXR0cmlidXRlc09yU3RhcnRUaW1lKSA/IGF0dHJpYnV0ZXNPclN0YXJ0VGltZSA6IHN0YXJ0VGltZSB8fCB0aW1lLnRpbWVzdGFtcEluU2Vjb25kcygpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBpc1NwYW5UaW1lSW5wdXQoYXR0cmlidXRlc09yU3RhcnRUaW1lKSA/IHt9IDogYXR0cmlidXRlc09yU3RhcnRUaW1lIHx8IHt9O1xuXG4gICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICBuYW1lLFxuICAgICAgdGltZTogc3BhblV0aWxzLnNwYW5UaW1lSW5wdXRUb1NlY29uZHModGltZSQxKSxcbiAgICAgIGF0dHJpYnV0ZXMsXG4gICAgfTtcblxuICAgIHRoaXMuX2V2ZW50cy5wdXNoKGV2ZW50KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQsXG4gICAqIGJ1dCBmb3Igbm93IHdlIG5lZWQgYSB3YXkgdG8gcHVibGljbHkgY2hlY2sgaWYgdGhlIGBfaXNTdGFuZGFsb25lU3BhbmAgZmxhZyBpcyBzZXQuXG4gICAqIFVTRSBUSElTIFdJVEggQ0FVVElPTiFcbiAgICogQGludGVybmFsXG4gICAqIEBoaWRkZW5cbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgIGlzU3RhbmRhbG9uZVNwYW4oKSB7XG4gICAgcmV0dXJuICEhdGhpcy5faXNTdGFuZGFsb25lU3BhbjtcbiAgfVxuXG4gIC8qKiBFbWl0IGBzcGFuRW5kYCB3aGVuIHRoZSBzcGFuIGlzIGVuZGVkLiAqL1xuICAgX29uU3BhbkVuZGVkKCkge1xuICAgIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgY2xpZW50LmVtaXQoJ3NwYW5FbmQnLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBBIHNlZ21lbnQgc3BhbiBpcyBiYXNpY2FsbHkgdGhlIHJvb3Qgc3BhbiBvZiBhIGxvY2FsIHNwYW4gdHJlZS5cbiAgICAvLyBTbyBmb3Igbm93LCB0aGlzIGlzIGVpdGhlciB3aGF0IHdlIHByZXZpb3VzbHkgcmVmZXIgdG8gYXMgdGhlIHJvb3Qgc3BhbixcbiAgICAvLyBvciBhIHN0YW5kYWxvbmUgc3Bhbi5cbiAgICBjb25zdCBpc1NlZ21lbnRTcGFuID0gdGhpcy5faXNTdGFuZGFsb25lU3BhbiB8fCB0aGlzID09PSBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4odGhpcyk7XG5cbiAgICBpZiAoIWlzU2VnbWVudFNwYW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgc3RhbmRhbG9uZSBzcGFuLCB3ZSBzZW5kIGl0IGltbWVkaWF0ZWx5XG4gICAgaWYgKHRoaXMuX2lzU3RhbmRhbG9uZVNwYW4pIHtcbiAgICAgIGlmICh0aGlzLl9zYW1wbGVkKSB7XG4gICAgICAgIHNlbmRTcGFuRW52ZWxvcGUoZW52ZWxvcGUuY3JlYXRlU3BhbkVudmVsb3BlKFt0aGlzXSwgY2xpZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgZGVidWdMb2dnZXIuZGVidWcubG9nKCdbVHJhY2luZ10gRGlzY2FyZGluZyBzdGFuZGFsb25lIHNwYW4gYmVjYXVzZSBpdHMgdHJhY2Ugd2FzIG5vdCBjaG9zZW4gdG8gYmUgc2FtcGxlZC4nKTtcbiAgICAgICAgaWYgKGNsaWVudCkge1xuICAgICAgICAgIGNsaWVudC5yZWNvcmREcm9wcGVkRXZlbnQoJ3NhbXBsZV9yYXRlJywgJ3NwYW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uRXZlbnQgPSB0aGlzLl9jb252ZXJ0U3BhblRvVHJhbnNhY3Rpb24oKTtcbiAgICBpZiAodHJhbnNhY3Rpb25FdmVudCkge1xuICAgICAgY29uc3Qgc2NvcGUgPSB1dGlscy5nZXRDYXB0dXJlZFNjb3Blc09uU3Bhbih0aGlzKS5zY29wZSB8fCBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgc2NvcGUuY2FwdHVyZUV2ZW50KHRyYW5zYWN0aW9uRXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5pc2ggdGhlIHRyYW5zYWN0aW9uICYgcHJlcGFyZSB0aGUgZXZlbnQgdG8gc2VuZCB0byBTZW50cnkuXG4gICAqL1xuICAgX2NvbnZlcnRTcGFuVG9UcmFuc2FjdGlvbigpIHtcbiAgICAvLyBXZSBjYW4gb25seSBjb252ZXJ0IGZpbmlzaGVkIHNwYW5zXG4gICAgaWYgKCFpc0Z1bGxGaW5pc2hlZFNwYW4oc3BhblV0aWxzLnNwYW5Ub0pTT04odGhpcykpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fbmFtZSkge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKCdUcmFuc2FjdGlvbiBoYXMgbm8gbmFtZSwgZmFsbGluZyBiYWNrIHRvIGA8dW5sYWJlbGVkIHRyYW5zYWN0aW9uPmAuJyk7XG4gICAgICB0aGlzLl9uYW1lID0gJzx1bmxhYmVsZWQgdHJhbnNhY3Rpb24+JztcbiAgICB9XG5cbiAgICBjb25zdCB7IHNjb3BlOiBjYXB0dXJlZFNwYW5TY29wZSwgaXNvbGF0aW9uU2NvcGU6IGNhcHR1cmVkU3Bhbklzb2xhdGlvblNjb3BlIH0gPSB1dGlscy5nZXRDYXB0dXJlZFNjb3Blc09uU3Bhbih0aGlzKTtcblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXF1ZXN0ID0gY2FwdHVyZWRTcGFuU2NvcGU/LmdldFNjb3BlRGF0YSgpLnNka1Byb2Nlc3NpbmdNZXRhZGF0YT8ubm9ybWFsaXplZFJlcXVlc3Q7XG5cbiAgICBpZiAodGhpcy5fc2FtcGxlZCAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBUaGUgdHJhbnNhY3Rpb24gc3BhbiBpdHNlbGYgYXMgd2VsbCBhcyBhbnkgcG90ZW50aWFsIHN0YW5kYWxvbmUgc3BhbnMgc2hvdWxkIGJlIGZpbHRlcmVkIG91dFxuICAgIGNvbnN0IGZpbmlzaGVkU3BhbnMgPSBzcGFuVXRpbHMuZ2V0U3BhbkRlc2NlbmRhbnRzKHRoaXMpLmZpbHRlcihzcGFuID0+IHNwYW4gIT09IHRoaXMgJiYgIWlzU3RhbmRhbG9uZVNwYW4oc3BhbikpO1xuXG4gICAgY29uc3Qgc3BhbnMgPSBmaW5pc2hlZFNwYW5zLm1hcChzcGFuID0+IHNwYW5VdGlscy5zcGFuVG9KU09OKHNwYW4pKS5maWx0ZXIoaXNGdWxsRmluaXNoZWRTcGFuKTtcblxuICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuX2F0dHJpYnV0ZXNbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSA7XG5cbiAgICAvLyByZW1vdmUgaW50ZXJuYWwgcm9vdCBzcGFuIGF0dHJpYnV0ZXMgd2UgZG9uJ3QgbmVlZCB0byBzZW5kLlxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZSAqL1xuICAgIGRlbGV0ZSB0aGlzLl9hdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuICAgIHNwYW5zLmZvckVhY2goc3BhbiA9PiB7XG4gICAgICBkZWxldGUgc3Bhbi5kYXRhW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1lbmFibGVkLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgdHJhY2U6IHNwYW5VdGlscy5zcGFuVG9UcmFuc2FjdGlvblRyYWNlQ29udGV4dCh0aGlzKSxcbiAgICAgIH0sXG4gICAgICBzcGFuczpcbiAgICAgICAgLy8gc3BhbnMuc29ydCgpIG11dGF0ZXMgdGhlIGFycmF5LCBidXQgYHNwYW5zYCBpcyBhbHJlYWR5IGEgY29weSBzbyB3ZSBjYW4gc2FmZWx5IGRvIHRoaXMgaGVyZVxuICAgICAgICAvLyB3ZSBkbyBub3QgdXNlIHNwYW5zIGFueW1vcmUgYWZ0ZXIgdGhpcyBwb2ludFxuICAgICAgICBzcGFucy5sZW5ndGggPiBNQVhfU1BBTl9DT1VOVFxuICAgICAgICAgID8gc3BhbnMuc29ydCgoYSwgYikgPT4gYS5zdGFydF90aW1lc3RhbXAgLSBiLnN0YXJ0X3RpbWVzdGFtcCkuc2xpY2UoMCwgTUFYX1NQQU5fQ09VTlQpXG4gICAgICAgICAgOiBzcGFucyxcbiAgICAgIHN0YXJ0X3RpbWVzdGFtcDogdGhpcy5fc3RhcnRUaW1lLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLl9lbmRUaW1lLFxuICAgICAgdHJhbnNhY3Rpb246IHRoaXMuX25hbWUsXG4gICAgICB0eXBlOiAndHJhbnNhY3Rpb24nLFxuICAgICAgc2RrUHJvY2Vzc2luZ01ldGFkYXRhOiB7XG4gICAgICAgIGNhcHR1cmVkU3BhblNjb3BlLFxuICAgICAgICBjYXB0dXJlZFNwYW5Jc29sYXRpb25TY29wZSxcbiAgICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dDogZHluYW1pY1NhbXBsaW5nQ29udGV4dC5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4odGhpcyksXG4gICAgICB9LFxuICAgICAgcmVxdWVzdDogbm9ybWFsaXplZFJlcXVlc3QsXG4gICAgICAuLi4oc291cmNlICYmIHtcbiAgICAgICAgdHJhbnNhY3Rpb25faW5mbzoge1xuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH07XG5cbiAgICBjb25zdCBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudC50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzKHRoaXMuX2V2ZW50cyk7XG4gICAgY29uc3QgaGFzTWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzICYmIE9iamVjdC5rZXlzKG1lYXN1cmVtZW50cykubGVuZ3RoO1xuXG4gICAgaWYgKGhhc01lYXN1cmVtZW50cykge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coXG4gICAgICAgICAgJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBtZWFzdXJlbWVudHMgdG8gdHJhbnNhY3Rpb24gZXZlbnQnLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG1lYXN1cmVtZW50cywgdW5kZWZpbmVkLCAyKSxcbiAgICAgICAgKTtcbiAgICAgIHRyYW5zYWN0aW9uLm1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTcGFuVGltZUlucHV0KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgfHwgdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG4vLyBXZSB3YW50IHRvIGZpbHRlciBvdXQgYW55IGluY29tcGxldGUgU3BhbkpTT04gb2JqZWN0c1xuZnVuY3Rpb24gaXNGdWxsRmluaXNoZWRTcGFuKGlucHV0KSB7XG4gIHJldHVybiAhIWlucHV0LnN0YXJ0X3RpbWVzdGFtcCAmJiAhIWlucHV0LnRpbWVzdGFtcCAmJiAhIWlucHV0LnNwYW5faWQgJiYgISFpbnB1dC50cmFjZV9pZDtcbn1cblxuLyoqIGBTZW50cnlTcGFuYHMgY2FuIGJlIHNlbnQgYXMgYSBzdGFuZGFsb25lIHNwYW4gcmF0aGVyIHRoYW4gYmVsb25naW5nIHRvIGEgdHJhbnNhY3Rpb24gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhbG9uZVNwYW4oc3Bhbikge1xuICByZXR1cm4gc3BhbiBpbnN0YW5jZW9mIFNlbnRyeVNwYW4gJiYgc3Bhbi5pc1N0YW5kYWxvbmVTcGFuKCk7XG59XG5cbi8qKlxuICogU2VuZHMgYSBgU3BhbkVudmVsb3BlYC5cbiAqXG4gKiBOb3RlOiBJZiB0aGUgZW52ZWxvcGUncyBzcGFucyBhcmUgZHJvcHBlZCwgZS5nLiB2aWEgYGJlZm9yZVNlbmRTcGFuYCxcbiAqIHRoZSBlbnZlbG9wZSB3aWxsIG5vdCBiZSBzZW50IGVpdGhlci5cbiAqL1xuZnVuY3Rpb24gc2VuZFNwYW5FbnZlbG9wZShlbnZlbG9wZSkge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNwYW5JdGVtcyA9IGVudmVsb3BlWzFdO1xuICBpZiAoIXNwYW5JdGVtcyB8fCBzcGFuSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgY2xpZW50LnJlY29yZERyb3BwZWRFdmVudCgnYmVmb3JlX3NlbmQnLCAnc3BhbicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNlbmRFbnZlbG9wZSBzaG91bGQgbm90IHRocm93XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgY2xpZW50LnNlbmRFbnZlbG9wZShlbnZlbG9wZSk7XG59XG5cbmV4cG9ydHMuU2VudHJ5U3BhbiA9IFNlbnRyeVNwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW50cnlTcGFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n\nexports.SPAN_STATUS_ERROR = SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = getSpanStatusFromHttpCode;\nexports.setHttpStatus = setHttpStatus;\n//# sourceMappingURL=spanstatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zcGFuc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLGlDQUFpQztBQUNqQyxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvc3BhbnN0YXR1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgU1BBTl9TVEFUVVNfVU5TRVQgPSAwO1xuY29uc3QgU1BBTl9TVEFUVVNfT0sgPSAxO1xuY29uc3QgU1BBTl9TVEFUVVNfRVJST1IgPSAyO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEgc2VudHJ5IHN0YXR1cyB3aXRoIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gaHR0cFN0YXR1cyBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAqIEByZXR1cm5zIFRoZSBzcGFuIHN0YXR1cyBvciB1bmtub3duX2Vycm9yLlxuICovXG4vLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZXZlbnQtcGF5bG9hZHMvc3Bhbi9cbmZ1bmN0aW9uIGdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUoaHR0cFN0YXR1cykge1xuICBpZiAoaHR0cFN0YXR1cyA8IDQwMCAmJiBodHRwU3RhdHVzID49IDEwMCkge1xuICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX09LIH07XG4gIH1cblxuICBpZiAoaHR0cFN0YXR1cyA+PSA0MDAgJiYgaHR0cFN0YXR1cyA8IDUwMCkge1xuICAgIHN3aXRjaCAoaHR0cFN0YXR1cykge1xuICAgICAgY2FzZSA0MDE6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5hdXRoZW50aWNhdGVkJyB9O1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAncGVybWlzc2lvbl9kZW5pZWQnIH07XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdub3RfZm91bmQnIH07XG4gICAgICBjYXNlIDQwOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdhbHJlYWR5X2V4aXN0cycgfTtcbiAgICAgIGNhc2UgNDEzOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ZhaWxlZF9wcmVjb25kaXRpb24nIH07XG4gICAgICBjYXNlIDQyOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdyZXNvdXJjZV9leGhhdXN0ZWQnIH07XG4gICAgICBjYXNlIDQ5OTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdjYW5jZWxsZWQnIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludmFsaWRfYXJndW1lbnQnIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGh0dHBTdGF0dXMgPj0gNTAwICYmIGh0dHBTdGF0dXMgPCA2MDApIHtcbiAgICBzd2l0Y2ggKGh0dHBTdGF0dXMpIHtcbiAgICAgIGNhc2UgNTAxOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3VuaW1wbGVtZW50ZWQnIH07XG4gICAgICBjYXNlIDUwMzpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmF2YWlsYWJsZScgfTtcbiAgICAgIGNhc2UgNTA0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2RlYWRsaW5lX2V4Y2VlZGVkJyB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Vua25vd25fZXJyb3InIH07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgSHR0cCBzdGF0dXMgYXR0cmlidXRlcyBvbiB0aGUgY3VycmVudCBzcGFuIGJhc2VkIG9uIHRoZSBodHRwIGNvZGUuXG4gKiBBZGRpdGlvbmFsbHksIHRoZSBzcGFuJ3Mgc3RhdHVzIGlzIHVwZGF0ZWQsIGRlcGVuZGluZyBvbiB0aGUgaHR0cCBjb2RlLlxuICovXG5mdW5jdGlvbiBzZXRIdHRwU3RhdHVzKHNwYW4sIGh0dHBTdGF0dXMpIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2h0dHAucmVzcG9uc2Uuc3RhdHVzX2NvZGUnLCBodHRwU3RhdHVzKTtcblxuICBjb25zdCBzcGFuU3RhdHVzID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZShodHRwU3RhdHVzKTtcbiAgaWYgKHNwYW5TdGF0dXMubWVzc2FnZSAhPT0gJ3Vua25vd25fZXJyb3InKSB7XG4gICAgc3Bhbi5zZXRTdGF0dXMoc3BhblN0YXR1cyk7XG4gIH1cbn1cblxuZXhwb3J0cy5TUEFOX1NUQVRVU19FUlJPUiA9IFNQQU5fU1RBVFVTX0VSUk9SO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19PSyA9IFNQQU5fU1RBVFVTX09LO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19VTlNFVCA9IFNQQU5fU1RBVFVTX1VOU0VUO1xuZXhwb3J0cy5nZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZTtcbmV4cG9ydHMuc2V0SHR0cFN0YXR1cyA9IHNldEh0dHBTdGF0dXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuc3RhdHVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst baggage = __webpack_require__(/*! ../utils/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst hasSpansEnabled = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\");\nconst parseSampleRate = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst propagationContext = __webpack_require__(/*! ../utils/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst tracing = __webpack_require__(/*! ../utils/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst sampling = __webpack_require__(/*! ./sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\n\n/* eslint-disable max-lines */\n\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return currentScopes.withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new sentryNonRecordingSpan.SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      spanOnScope._setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors.handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanUtils.spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return currentScopes.withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new sentryNonRecordingSpan.SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      spanOnScope._setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors.handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanUtils.spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback) => currentScopes.withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback) => withActiveSpan(customParentSpan, callback)\n      : (callback) => callback();\n\n  return wrapper(() => {\n    const scope = currentScopes.getCurrentScope();\n    const parentSpan = getParentSpan(scope, customParentSpan);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (\n  options\n\n,\n  callback,\n) => {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage: baggage$1 } = options;\n\n  const client = currentScopes.getClient();\n  const incomingDsc = baggage.baggageHeaderToDynamicSamplingContext(baggage$1);\n  if (client && !tracing.shouldContinueTrace(client, incomingDsc?.org_id)) {\n    return startNewTrace(callback);\n  }\n\n  return currentScopes.withScope(scope => {\n    const propagationContext = tracing.propagationContextFromHeaders(sentryTrace, baggage$1);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return currentScopes.withScope(scope => {\n    spanOnScope._setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return currentScopes.withScope(scope => {\n    // Note: We do not wait for the callback to finish before we reset the metadata\n    // the reason for this is that otherwise, in the browser this can lead to very weird behavior\n    // as there is only a single top scope, if the callback takes longer to finish,\n    // other, unrelated spans may also be suppressed, which we do not want\n    // so instead, we only suppress tracing synchronoysly in the browser\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    const res = callback();\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: undefined });\n    return res;\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return currentScopes.withScope(scope => {\n    scope.setPropagationContext({\n      traceId: propagationContext.generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}\n\n) {\n  if (!hasSpansEnabled.hasSpansEnabled()) {\n    const span = new sentryNonRecordingSpan.SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),\n      } ;\n      dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = currentScopes.getIsolationScope();\n\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    spanUtils.addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanUtils.spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpans.logSpanStart(span);\n\n  utils.setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx = { ...initialCtx };\n    ctx.startTimestamp = spanUtils.spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs() {\n  const carrier$1 = carrier.getMainCarrier();\n  return index.getAsyncContextStrategy(carrier$1);\n}\n\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = currentScopes.getClient();\n  const options = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampling.sampleSpan(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: parseSampleRate.parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new sentrySpan.SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanUtils.spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new sentrySpan.SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new sentryNonRecordingSpan.SentryNonRecordingSpan({ traceId });\n\n  spanUtils.addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = currentScopes.getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope, customParentSpan) {\n  // always use the passed in span directly\n  if (customParentSpan) {\n    return customParentSpan ;\n  }\n\n  // This is different from `undefined` as it means the user explicitly wants no parent span\n  if (customParentSpan === null) {\n    return undefined;\n  }\n\n  const span = spanOnScope._getSpanForScope(scope) ;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = currentScopes.getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return spanUtils.getRootSpan(span) ;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\nexports.continueTrace = continueTrace;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startNewTrace = startNewTrace;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;\n//# sourceMappingURL=trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst object = __webpack_require__(/*! ../utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    object.addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    object.addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: (span )[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span )[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n\nexports.getCapturedScopesOnSpan = getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = setCapturedScopesOnSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxlQUFlLG1CQUFPLENBQUMsOEZBQW9COztBQUUzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuLi91dGlscy9vYmplY3QuanMnKTtcblxuY29uc3QgU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCA9ICdfc2VudHJ5U2NvcGUnO1xuY29uc3QgSVNPTEFUSU9OX1NDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQgPSAnX3NlbnRyeUlzb2xhdGlvblNjb3BlJztcblxuLyoqIFN0b3JlIHRoZSBzY29wZSAmIGlzb2xhdGlvbiBzY29wZSBmb3IgYSBzcGFuLCB3aGljaCBjYW4gdGhlIGJlIHVzZWQgd2hlbiBpdCBpcyBmaW5pc2hlZC4gKi9cbmZ1bmN0aW9uIHNldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4sIHNjb3BlLCBpc29sYXRpb25TY29wZSkge1xuICBpZiAoc3Bhbikge1xuICAgIG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc3BhbiwgSVNPTEFUSU9OX1NDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQsIGlzb2xhdGlvblNjb3BlKTtcbiAgICBvYmplY3QuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHNwYW4sIFNDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQsIHNjb3BlKTtcbiAgfVxufVxuXG4vKipcbiAqIEdyYWJzIHRoZSBzY29wZSBhbmQgaXNvbGF0aW9uIHNjb3BlIG9mZiBhIHNwYW4gdGhhdCB3ZXJlIGFjdGl2ZSB3aGVuIHRoZSBzcGFuIHdhcyBzdGFydGVkLlxuICovXG5mdW5jdGlvbiBnZXRDYXB0dXJlZFNjb3Blc09uU3BhbihzcGFuKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IChzcGFuIClbU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRF0sXG4gICAgaXNvbGF0aW9uU2NvcGU6IChzcGFuIClbSVNPTEFUSU9OX1NDT1BFX09OX1NUQVJUX1NQQU5fRklFTERdLFxuICB9O1xufVxuXG5leHBvcnRzLmdldENhcHR1cmVkU2NvcGVzT25TcGFuID0gZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW47XG5leHBvcnRzLnNldENhcHR1cmVkU2NvcGVzT25TcGFuID0gc2V0Q2FwdHVyZWRTY29wZXNPblNwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst promisebuffer = __webpack_require__(/*! ../utils/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/promisebuffer.js\");\nconst ratelimit = __webpack_require__(/*! ../utils/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/ratelimit.js\");\nconst syncpromise = __webpack_require__(/*! ../utils/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(\n  options,\n  makeRequest,\n  buffer = promisebuffer.makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n) {\n  let rateLimits = {};\n  const flush = (timeout) => buffer.drain(timeout);\n\n  function send(envelope$1) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n      const dataCategory = envelope.envelopeItemTypeToDataCategory(type);\n      if (ratelimit.isRateLimited(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return syncpromise.resolvedSyncPromise({});\n    }\n\n    const filteredEnvelope = envelope.createEnvelope(envelope$1[0], filteredEnvelopeItems );\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason) => {\n      envelope.forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, envelope.envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = () =>\n      makeRequest({ body: envelope.serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            debugBuild.DEBUG_BUILD && debugLogger.debug.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = ratelimit.updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          debugBuild.DEBUG_BUILD && debugLogger.debug.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === promisebuffer.SENTRY_BUFFER_FULL_ERROR) {\n          debugBuild.DEBUG_BUILD && debugLogger.debug.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return syncpromise.resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n\nexports.DEFAULT_TRANSPORT_BUFFER_SIZE = DEFAULT_TRANSPORT_BUFFER_SIZE;\nexports.createTransport = createTransport;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLDRGQUFtQjtBQUM5QyxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsa0dBQXNCO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLDRHQUEyQjtBQUN6RCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBdUI7QUFDakQsb0JBQW9CLG1CQUFPLENBQUMsd0dBQXlCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQSxvQkFBb0Isb0RBQW9EO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRyxxQkFBcUI7QUFDdkg7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQyx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYW5zcG9ydHMvYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy9lbnZlbG9wZS5qcycpO1xuY29uc3QgcHJvbWlzZWJ1ZmZlciA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb21pc2VidWZmZXIuanMnKTtcbmNvbnN0IHJhdGVsaW1pdCA9IHJlcXVpcmUoJy4uL3V0aWxzL3JhdGVsaW1pdC5qcycpO1xuY29uc3Qgc3luY3Byb21pc2UgPSByZXF1aXJlKCcuLi91dGlscy9zeW5jcHJvbWlzZS5qcycpO1xuXG5jb25zdCBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSA9IDY0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBTZW50cnkgYFRyYW5zcG9ydGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHBhcmFtIG1ha2VSZXF1ZXN0XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zcG9ydChcbiAgb3B0aW9ucyxcbiAgbWFrZVJlcXVlc3QsXG4gIGJ1ZmZlciA9IHByb21pc2VidWZmZXIubWFrZVByb21pc2VCdWZmZXIoXG4gICAgb3B0aW9ucy5idWZmZXJTaXplIHx8IERFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFLFxuICApLFxuKSB7XG4gIGxldCByYXRlTGltaXRzID0ge307XG4gIGNvbnN0IGZsdXNoID0gKHRpbWVvdXQpID0+IGJ1ZmZlci5kcmFpbih0aW1lb3V0KTtcblxuICBmdW5jdGlvbiBzZW5kKGVudmVsb3BlJDEpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEVudmVsb3BlSXRlbXMgPSBbXTtcblxuICAgIC8vIERyb3AgcmF0ZSBsaW1pdGVkIGl0ZW1zIGZyb20gZW52ZWxvcGVcbiAgICBlbnZlbG9wZS5mb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlJDEsIChpdGVtLCB0eXBlKSA9PiB7XG4gICAgICBjb25zdCBkYXRhQ2F0ZWdvcnkgPSBlbnZlbG9wZS5lbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkodHlwZSk7XG4gICAgICBpZiAocmF0ZWxpbWl0LmlzUmF0ZUxpbWl0ZWQocmF0ZUxpbWl0cywgZGF0YUNhdGVnb3J5KSkge1xuICAgICAgICBvcHRpb25zLnJlY29yZERyb3BwZWRFdmVudCgncmF0ZWxpbWl0X2JhY2tvZmYnLCBkYXRhQ2F0ZWdvcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTa2lwIHNlbmRpbmcgaWYgZW52ZWxvcGUgaXMgZW1wdHkgYWZ0ZXIgZmlsdGVyaW5nIG91dCByYXRlIGxpbWl0ZWQgZXZlbnRzXG4gICAgaWYgKGZpbHRlcmVkRW52ZWxvcGVJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBzeW5jcHJvbWlzZS5yZXNvbHZlZFN5bmNQcm9taXNlKHt9KTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZEVudmVsb3BlID0gZW52ZWxvcGUuY3JlYXRlRW52ZWxvcGUoZW52ZWxvcGUkMVswXSwgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zICk7XG5cbiAgICAvLyBDcmVhdGVzIGNsaWVudCByZXBvcnQgZm9yIGVhY2ggaXRlbSBpbiBhbiBlbnZlbG9wZVxuICAgIGNvbnN0IHJlY29yZEVudmVsb3BlTG9zcyA9IChyZWFzb24pID0+IHtcbiAgICAgIGVudmVsb3BlLmZvckVhY2hFbnZlbG9wZUl0ZW0oZmlsdGVyZWRFbnZlbG9wZSwgKGl0ZW0sIHR5cGUpID0+IHtcbiAgICAgICAgb3B0aW9ucy5yZWNvcmREcm9wcGVkRXZlbnQocmVhc29uLCBlbnZlbG9wZS5lbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkodHlwZSkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlcXVlc3RUYXNrID0gKCkgPT5cbiAgICAgIG1ha2VSZXF1ZXN0KHsgYm9keTogZW52ZWxvcGUuc2VyaWFsaXplRW52ZWxvcGUoZmlsdGVyZWRFbnZlbG9wZSkgfSkudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gdGhyb3cgb24gTk9LIHJlc3BvbnNlcywgYnV0IHdlIHdhbnQgdG8gYXQgbGVhc3QgbG9nIHRoZW1cbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gdW5kZWZpbmVkICYmIChyZXNwb25zZS5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMzAwKSkge1xuICAgICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy53YXJuKGBTZW50cnkgcmVzcG9uZGVkIHdpdGggc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSB0byBzZW50IGV2ZW50LmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJhdGVMaW1pdHMgPSByYXRlbGltaXQudXBkYXRlUmF0ZUxpbWl0cyhyYXRlTGltaXRzLCByZXNwb25zZSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgcmVjb3JkRW52ZWxvcGVMb3NzKCduZXR3b3JrX2Vycm9yJyk7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy5lcnJvcignRW5jb3VudGVyZWQgZXJyb3IgcnVubmluZyB0cmFuc3BvcnQgcmVxdWVzdDonLCBlcnJvcik7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGJ1ZmZlci5hZGQocmVxdWVzdFRhc2spLnRoZW4oXG4gICAgICByZXN1bHQgPT4gcmVzdWx0LFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IgPT09IHByb21pc2VidWZmZXIuU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SKSB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBkZWJ1Z0xvZ2dlci5kZWJ1Zy5lcnJvcignU2tpcHBlZCBzZW5kaW5nIGV2ZW50IGJlY2F1c2UgYnVmZmVyIGlzIGZ1bGwuJyk7XG4gICAgICAgICAgcmVjb3JkRW52ZWxvcGVMb3NzKCdxdWV1ZV9vdmVyZmxvdycpO1xuICAgICAgICAgIHJldHVybiBzeW5jcHJvbWlzZS5yZXNvbHZlZFN5bmNQcm9taXNlKHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZW5kLFxuICAgIGZsdXNoLFxuICB9O1xufVxuXG5leHBvcnRzLkRFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFID0gREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkU7XG5leHBvcnRzLmNyZWF0ZVRyYW5zcG9ydCA9IGNyZWF0ZVRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/multiplexed.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! ../api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst dsn = __webpack_require__(/*! ../utils/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nfunction eventFromEnvelope(env, types) {\n  let event;\n\n  envelope.forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? (item )[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport(\n  createTransport,\n  release,\n) {\n  return options => {\n    const transport = createTransport(options);\n\n    return {\n      ...transport,\n      send: async (envelope) => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      },\n    };\n  };\n}\n\n/** Overrides the DSN in the envelope header  */\nfunction overrideDsn(envelope$1, dsn) {\n  return envelope.createEnvelope(\n    dsn\n      ? {\n          ...envelope$1[0],\n          dsn,\n        }\n      : envelope$1[0],\n    envelope$1[1],\n  );\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nfunction makeMultiplexedTransport(\n  createTransport,\n  matcher,\n) {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports = new Map();\n\n    function getTransport(dsn$1, release) {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn$1}:${release}` : dsn$1;\n\n      let transport = otherTransports.get(key);\n\n      if (!transport) {\n        const validatedDsn = dsn.dsnFromString(dsn$1);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = api.getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn, options.tunnel);\n\n        transport = release\n          ? makeOverrideReleaseTransport(createTransport, release)({ ...options, url })\n          : createTransport({ ...options, url });\n\n        otherTransports.set(key, transport);\n      }\n\n      return [dsn$1, transport];\n    }\n\n    async function send(envelope) {\n      function getEvent(types) {\n        const eventTypes = types?.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n\n      const transports = matcher({ envelope, getEvent })\n        .map(result => {\n          if (typeof result === 'string') {\n            return getTransport(result, undefined);\n          } else {\n            return getTransport(result.dsn, result.release);\n          }\n        })\n        .filter((t) => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      // Don't override the DSN in the header for the fallback transport. '' is falsy\n      const transportsWithFallback = transports.length ? transports : [['', fallbackTransport]];\n\n      const results = (await Promise.all(\n        transportsWithFallback.map(([dsn, transport]) => transport.send(overrideDsn(envelope, dsn))),\n      )) ;\n\n      return results[0];\n    }\n\n    async function flush(timeout) {\n      const allTransports = [...otherTransports.values(), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n\n    return {\n      send,\n      flush,\n    };\n  };\n}\n\nexports.eventFromEnvelope = eventFromEnvelope;\nexports.makeMultiplexedTransport = makeMultiplexedTransport;\n//# sourceMappingURL=multiplexed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9tdWx0aXBsZXhlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNEVBQVc7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHdGQUFpQjtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxrR0FBc0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsTUFBTSxHQUFHLFFBQVE7O0FBRWhEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFFQUFxRSxpQkFBaUI7QUFDdEYsOEJBQThCLGlCQUFpQjs7QUFFL0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLG9CQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9tdWx0aXBsZXhlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnLi4vYXBpLmpzJyk7XG5jb25zdCBkc24gPSByZXF1aXJlKCcuLi91dGlscy9kc24uanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi4vdXRpbHMvZW52ZWxvcGUuanMnKTtcblxuLyoqXG4gKiBHZXRzIGFuIGV2ZW50IGZyb20gYW4gZW52ZWxvcGUuXG4gKlxuICogVGhpcyBpcyBvbmx5IGV4cG9ydGVkIGZvciB1c2UgaW4gdGhlIHRlc3RzXG4gKi9cbmZ1bmN0aW9uIGV2ZW50RnJvbUVudmVsb3BlKGVudiwgdHlwZXMpIHtcbiAgbGV0IGV2ZW50O1xuXG4gIGVudmVsb3BlLmZvckVhY2hFbnZlbG9wZUl0ZW0oZW52LCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgIGlmICh0eXBlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgZXZlbnQgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gKGl0ZW0gKVsxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gYmFpbCBvdXQgaWYgd2UgZm91bmQgYW4gZXZlbnRcbiAgICByZXR1cm4gISFldmVudDtcbiAgfSk7XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0cmFuc3BvcnQgdGhhdCBvdmVycmlkZXMgdGhlIHJlbGVhc2Ugb24gYWxsIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gbWFrZU92ZXJyaWRlUmVsZWFzZVRyYW5zcG9ydChcbiAgY3JlYXRlVHJhbnNwb3J0LFxuICByZWxlYXNlLFxuKSB7XG4gIHJldHVybiBvcHRpb25zID0+IHtcbiAgICBjb25zdCB0cmFuc3BvcnQgPSBjcmVhdGVUcmFuc3BvcnQob3B0aW9ucyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4udHJhbnNwb3J0LFxuICAgICAgc2VuZDogYXN5bmMgKGVudmVsb3BlKSA9PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRGcm9tRW52ZWxvcGUoZW52ZWxvcGUsIFsnZXZlbnQnLCAndHJhbnNhY3Rpb24nLCAncHJvZmlsZScsICdyZXBsYXlfZXZlbnQnXSk7XG5cbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucmVsZWFzZSA9IHJlbGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydC5zZW5kKGVudmVsb3BlKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcbn1cblxuLyoqIE92ZXJyaWRlcyB0aGUgRFNOIGluIHRoZSBlbnZlbG9wZSBoZWFkZXIgICovXG5mdW5jdGlvbiBvdmVycmlkZURzbihlbnZlbG9wZSQxLCBkc24pIHtcbiAgcmV0dXJuIGVudmVsb3BlLmNyZWF0ZUVudmVsb3BlKFxuICAgIGRzblxuICAgICAgPyB7XG4gICAgICAgICAgLi4uZW52ZWxvcGUkMVswXSxcbiAgICAgICAgICBkc24sXG4gICAgICAgIH1cbiAgICAgIDogZW52ZWxvcGUkMVswXSxcbiAgICBlbnZlbG9wZSQxWzFdLFxuICApO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0cmFuc3BvcnQgdGhhdCBjYW4gc2VuZCBldmVudHMgdG8gZGlmZmVyZW50IERTTnMgZGVwZW5kaW5nIG9uIHRoZSBlbnZlbG9wZSBjb250ZW50cy5cbiAqL1xuZnVuY3Rpb24gbWFrZU11bHRpcGxleGVkVHJhbnNwb3J0KFxuICBjcmVhdGVUcmFuc3BvcnQsXG4gIG1hdGNoZXIsXG4pIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4ge1xuICAgIGNvbnN0IGZhbGxiYWNrVHJhbnNwb3J0ID0gY3JlYXRlVHJhbnNwb3J0KG9wdGlvbnMpO1xuICAgIGNvbnN0IG90aGVyVHJhbnNwb3J0cyA9IG5ldyBNYXAoKTtcblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zcG9ydChkc24kMSwgcmVsZWFzZSkge1xuICAgICAgLy8gV2UgY3JlYXRlIGEgdHJhbnNwb3J0IGZvciBldmVyeSB1bmlxdWUgZHNuL3JlbGVhc2UgY29tYmluYXRpb24gYXMgdGhlcmUgbWF5IGJlIGNvZGUgZnJvbSBtdWx0aXBsZSByZWxlYXNlcyBpblxuICAgICAgLy8gdXNlIGF0IHRoZSBzYW1lIHRpbWVcbiAgICAgIGNvbnN0IGtleSA9IHJlbGVhc2UgPyBgJHtkc24kMX06JHtyZWxlYXNlfWAgOiBkc24kMTtcblxuICAgICAgbGV0IHRyYW5zcG9ydCA9IG90aGVyVHJhbnNwb3J0cy5nZXQoa2V5KTtcblxuICAgICAgaWYgKCF0cmFuc3BvcnQpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRHNuID0gZHNuLmRzbkZyb21TdHJpbmcoZHNuJDEpO1xuICAgICAgICBpZiAoIXZhbGlkYXRlZERzbikge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gYXBpLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgodmFsaWRhdGVkRHNuLCBvcHRpb25zLnR1bm5lbCk7XG5cbiAgICAgICAgdHJhbnNwb3J0ID0gcmVsZWFzZVxuICAgICAgICAgID8gbWFrZU92ZXJyaWRlUmVsZWFzZVRyYW5zcG9ydChjcmVhdGVUcmFuc3BvcnQsIHJlbGVhc2UpKHsgLi4ub3B0aW9ucywgdXJsIH0pXG4gICAgICAgICAgOiBjcmVhdGVUcmFuc3BvcnQoeyAuLi5vcHRpb25zLCB1cmwgfSk7XG5cbiAgICAgICAgb3RoZXJUcmFuc3BvcnRzLnNldChrZXksIHRyYW5zcG9ydCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbZHNuJDEsIHRyYW5zcG9ydF07XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gc2VuZChlbnZlbG9wZSkge1xuICAgICAgZnVuY3Rpb24gZ2V0RXZlbnQodHlwZXMpIHtcbiAgICAgICAgY29uc3QgZXZlbnRUeXBlcyA9IHR5cGVzPy5sZW5ndGggPyB0eXBlcyA6IFsnZXZlbnQnXTtcbiAgICAgICAgcmV0dXJuIGV2ZW50RnJvbUVudmVsb3BlKGVudmVsb3BlLCBldmVudFR5cGVzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNwb3J0cyA9IG1hdGNoZXIoeyBlbnZlbG9wZSwgZ2V0RXZlbnQgfSlcbiAgICAgICAgLm1hcChyZXN1bHQgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGdldFRyYW5zcG9ydChyZXN1bHQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRUcmFuc3BvcnQocmVzdWx0LmRzbiwgcmVzdWx0LnJlbGVhc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcigodCkgPT4gISF0KTtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBubyB0cmFuc3BvcnRzIHRvIHNlbmQgdG8sIHVzZSB0aGUgZmFsbGJhY2sgdHJhbnNwb3J0XG4gICAgICAvLyBEb24ndCBvdmVycmlkZSB0aGUgRFNOIGluIHRoZSBoZWFkZXIgZm9yIHRoZSBmYWxsYmFjayB0cmFuc3BvcnQuICcnIGlzIGZhbHN5XG4gICAgICBjb25zdCB0cmFuc3BvcnRzV2l0aEZhbGxiYWNrID0gdHJhbnNwb3J0cy5sZW5ndGggPyB0cmFuc3BvcnRzIDogW1snJywgZmFsbGJhY2tUcmFuc3BvcnRdXTtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IChhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgdHJhbnNwb3J0c1dpdGhGYWxsYmFjay5tYXAoKFtkc24sIHRyYW5zcG9ydF0pID0+IHRyYW5zcG9ydC5zZW5kKG92ZXJyaWRlRHNuKGVudmVsb3BlLCBkc24pKSksXG4gICAgICApKSA7XG5cbiAgICAgIHJldHVybiByZXN1bHRzWzBdO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQpIHtcbiAgICAgIGNvbnN0IGFsbFRyYW5zcG9ydHMgPSBbLi4ub3RoZXJUcmFuc3BvcnRzLnZhbHVlcygpLCBmYWxsYmFja1RyYW5zcG9ydF07XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWxsVHJhbnNwb3J0cy5tYXAodHJhbnNwb3J0ID0+IHRyYW5zcG9ydC5mbHVzaCh0aW1lb3V0KSkpO1xuICAgICAgcmV0dXJuIHJlc3VsdHMuZXZlcnkociA9PiByKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2VuZCxcbiAgICAgIGZsdXNoLFxuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydHMuZXZlbnRGcm9tRW52ZWxvcGUgPSBldmVudEZyb21FbnZlbG9wZTtcbmV4cG9ydHMubWFrZU11bHRpcGxleGVkVHJhbnNwb3J0ID0gbWFrZU11bHRpcGxleGVkVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGlwbGV4ZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/offline.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ../utils/debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst envelope = __webpack_require__(/*! ../utils/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst ratelimit = __webpack_require__(/*! ../utils/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/ratelimit.js\");\n\nconst MIN_DELAY = 100; // 100 ms\nconst START_DELAY = 5000; // 5 seconds\nconst MAX_DELAY = 3.6e6; // 1 hour\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nfunction makeOfflineTransport(\n  createTransport,\n) {\n  function log(...args) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log('[Offline]:', ...args);\n  }\n\n  return options => {\n    const transport = createTransport(options);\n\n    if (!options.createStore) {\n      throw new Error('No `createStore` function was provided');\n    }\n\n    const store = options.createStore(options);\n\n    let retryDelay = START_DELAY;\n    let flushTimer;\n\n    function shouldQueue(env, error, retryDelay) {\n      // We want to drop client reports because they can be generated when we retry sending events while offline.\n      if (envelope.envelopeContainsItemType(env, ['client_report'])) {\n        return false;\n      }\n\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n\n      return true;\n    }\n\n    function flushIn(delay) {\n      if (flushTimer) {\n        clearTimeout(flushTimer );\n      }\n\n      flushTimer = setTimeout(async () => {\n        flushTimer = undefined;\n\n        const found = await store.shift();\n        if (found) {\n          log('Attempting to send previously queued event');\n\n          // We should to update the sent_at timestamp to the current time.\n          found[0].sent_at = new Date().toISOString();\n\n          void send(found, true).catch(e => {\n            log('Failed to retry sending', e);\n          });\n        }\n      }, delay) ;\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n\n    function flushWithBackOff() {\n      if (flushTimer) {\n        return;\n      }\n\n      flushIn(retryDelay);\n\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n\n    async function send(envelope$1, isRetry = false) {\n      // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we\n      // need to retry them in order.\n      if (!isRetry && envelope.envelopeContainsItemType(envelope$1, ['replay_event', 'replay_recording'])) {\n        await store.push(envelope$1);\n        flushIn(MIN_DELAY);\n        return {};\n      }\n\n      try {\n        if (options.shouldSend && (await options.shouldSend(envelope$1)) === false) {\n          throw new Error('Envelope not sent because `shouldSend` callback returned false');\n        }\n\n        const result = await transport.send(envelope$1);\n\n        let delay = MIN_DELAY;\n\n        if (result) {\n          // If there's a retry-after header, use that as the next delay.\n          if (result.headers?.['retry-after']) {\n            delay = ratelimit.parseRetryAfterHeader(result.headers['retry-after']);\n          } else if (result.headers?.['x-sentry-rate-limits']) {\n            delay = 60000; // 60 seconds\n          } // If we have a server error, return now so we don't flush the queue.\n          else if ((result.statusCode || 0) >= 400) {\n            return result;\n          }\n        }\n\n        flushIn(delay);\n        retryDelay = START_DELAY;\n        return result;\n      } catch (e) {\n        if (await shouldQueue(envelope$1, e , retryDelay)) {\n          // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.\n          if (isRetry) {\n            await store.unshift(envelope$1);\n          } else {\n            await store.push(envelope$1);\n          }\n          flushWithBackOff();\n          log('Error sending. Event queued.', e );\n          return {};\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n\n    return {\n      send,\n      flush: timeout => {\n        // If there's no timeout, we should attempt to flush the offline queue.\n        if (timeout === undefined) {\n          retryDelay = START_DELAY;\n          flushIn(MIN_DELAY);\n        }\n\n        return transport.flush(timeout);\n      },\n    };\n  };\n}\n\nexports.MIN_DELAY = MIN_DELAY;\nexports.START_DELAY = START_DELAY;\nexports.makeOfflineTransport = makeOfflineTransport;\n//# sourceMappingURL=offline.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9vZmZsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1CQUFtQixtQkFBTyxDQUFDLDRGQUFtQjtBQUM5QyxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBMEI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsa0dBQXNCO0FBQy9DLGtCQUFrQixtQkFBTyxDQUFDLG9HQUF1Qjs7QUFFakQsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQix5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osMkJBQTJCO0FBQzNCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCLG1CQUFtQjtBQUNuQiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYW5zcG9ydHMvb2ZmbGluZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYnVnLWxvZ2dlci5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy9lbnZlbG9wZS5qcycpO1xuY29uc3QgcmF0ZWxpbWl0ID0gcmVxdWlyZSgnLi4vdXRpbHMvcmF0ZWxpbWl0LmpzJyk7XG5cbmNvbnN0IE1JTl9ERUxBWSA9IDEwMDsgLy8gMTAwIG1zXG5jb25zdCBTVEFSVF9ERUxBWSA9IDUwMDA7IC8vIDUgc2Vjb25kc1xuY29uc3QgTUFYX0RFTEFZID0gMy42ZTY7IC8vIDEgaG91clxuXG4vKipcbiAqIFdyYXBzIGEgdHJhbnNwb3J0IGFuZCBzdG9yZXMgYW5kIHJldHJpZXMgZXZlbnRzIHdoZW4gdGhleSBmYWlsIHRvIHNlbmQuXG4gKlxuICogQHBhcmFtIGNyZWF0ZVRyYW5zcG9ydCBUaGUgdHJhbnNwb3J0IHRvIHdyYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VPZmZsaW5lVHJhbnNwb3J0KFxuICBjcmVhdGVUcmFuc3BvcnQsXG4pIHtcbiAgZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGRlYnVnTG9nZ2VyLmRlYnVnLmxvZygnW09mZmxpbmVdOicsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMgPT4ge1xuICAgIGNvbnN0IHRyYW5zcG9ydCA9IGNyZWF0ZVRyYW5zcG9ydChvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5jcmVhdGVTdG9yZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBgY3JlYXRlU3RvcmVgIGZ1bmN0aW9uIHdhcyBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlID0gb3B0aW9ucy5jcmVhdGVTdG9yZShvcHRpb25zKTtcblxuICAgIGxldCByZXRyeURlbGF5ID0gU1RBUlRfREVMQVk7XG4gICAgbGV0IGZsdXNoVGltZXI7XG5cbiAgICBmdW5jdGlvbiBzaG91bGRRdWV1ZShlbnYsIGVycm9yLCByZXRyeURlbGF5KSB7XG4gICAgICAvLyBXZSB3YW50IHRvIGRyb3AgY2xpZW50IHJlcG9ydHMgYmVjYXVzZSB0aGV5IGNhbiBiZSBnZW5lcmF0ZWQgd2hlbiB3ZSByZXRyeSBzZW5kaW5nIGV2ZW50cyB3aGlsZSBvZmZsaW5lLlxuICAgICAgaWYgKGVudmVsb3BlLmVudmVsb3BlQ29udGFpbnNJdGVtVHlwZShlbnYsIFsnY2xpZW50X3JlcG9ydCddKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnNob3VsZFN0b3JlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnNob3VsZFN0b3JlKGVudiwgZXJyb3IsIHJldHJ5RGVsYXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmbHVzaEluKGRlbGF5KSB7XG4gICAgICBpZiAoZmx1c2hUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoZmx1c2hUaW1lciApO1xuICAgICAgfVxuXG4gICAgICBmbHVzaFRpbWVyID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZsdXNoVGltZXIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgZm91bmQgPSBhd2FpdCBzdG9yZS5zaGlmdCgpO1xuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICBsb2coJ0F0dGVtcHRpbmcgdG8gc2VuZCBwcmV2aW91c2x5IHF1ZXVlZCBldmVudCcpO1xuXG4gICAgICAgICAgLy8gV2Ugc2hvdWxkIHRvIHVwZGF0ZSB0aGUgc2VudF9hdCB0aW1lc3RhbXAgdG8gdGhlIGN1cnJlbnQgdGltZS5cbiAgICAgICAgICBmb3VuZFswXS5zZW50X2F0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4gICAgICAgICAgdm9pZCBzZW5kKGZvdW5kLCB0cnVlKS5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIGxvZygnRmFpbGVkIHRvIHJldHJ5IHNlbmRpbmcnLCBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpIDtcblxuICAgICAgLy8gV2UgbmVlZCB0byB1bnJlZiB0aGUgdGltZXIgaW4gbm9kZS5qcywgb3RoZXJ3aXNlIHRoZSBub2RlIHByb2Nlc3MgbmV2ZXIgZXhpdC5cbiAgICAgIGlmICh0eXBlb2YgZmx1c2hUaW1lciAhPT0gJ251bWJlcicgJiYgZmx1c2hUaW1lci51bnJlZikge1xuICAgICAgICBmbHVzaFRpbWVyLnVucmVmKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmx1c2hXaXRoQmFja09mZigpIHtcbiAgICAgIGlmIChmbHVzaFRpbWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZmx1c2hJbihyZXRyeURlbGF5KTtcblxuICAgICAgcmV0cnlEZWxheSA9IE1hdGgubWluKHJldHJ5RGVsYXkgKiAyLCBNQVhfREVMQVkpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNlbmQoZW52ZWxvcGUkMSwgaXNSZXRyeSA9IGZhbHNlKSB7XG4gICAgICAvLyBXZSBxdWV1ZSBhbGwgcmVwbGF5IGVudmVsb3BlcyB0byBhdm9pZCBtdWx0aXBsZSByZXBsYXkgZW52ZWxvcGVzIGJlaW5nIHNlbnQgYXQgdGhlIHNhbWUgdGltZS4gSWYgb25lIGZhaWxzLCB3ZVxuICAgICAgLy8gbmVlZCB0byByZXRyeSB0aGVtIGluIG9yZGVyLlxuICAgICAgaWYgKCFpc1JldHJ5ICYmIGVudmVsb3BlLmVudmVsb3BlQ29udGFpbnNJdGVtVHlwZShlbnZlbG9wZSQxLCBbJ3JlcGxheV9ldmVudCcsICdyZXBsYXlfcmVjb3JkaW5nJ10pKSB7XG4gICAgICAgIGF3YWl0IHN0b3JlLnB1c2goZW52ZWxvcGUkMSk7XG4gICAgICAgIGZsdXNoSW4oTUlOX0RFTEFZKTtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRTZW5kICYmIChhd2FpdCBvcHRpb25zLnNob3VsZFNlbmQoZW52ZWxvcGUkMSkpID09PSBmYWxzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW52ZWxvcGUgbm90IHNlbnQgYmVjYXVzZSBgc2hvdWxkU2VuZGAgY2FsbGJhY2sgcmV0dXJuZWQgZmFsc2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyYW5zcG9ydC5zZW5kKGVudmVsb3BlJDEpO1xuXG4gICAgICAgIGxldCBkZWxheSA9IE1JTl9ERUxBWTtcblxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUncyBhIHJldHJ5LWFmdGVyIGhlYWRlciwgdXNlIHRoYXQgYXMgdGhlIG5leHQgZGVsYXkuXG4gICAgICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzPy5bJ3JldHJ5LWFmdGVyJ10pIHtcbiAgICAgICAgICAgIGRlbGF5ID0gcmF0ZWxpbWl0LnBhcnNlUmV0cnlBZnRlckhlYWRlcihyZXN1bHQuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuaGVhZGVycz8uWyd4LXNlbnRyeS1yYXRlLWxpbWl0cyddKSB7XG4gICAgICAgICAgICBkZWxheSA9IDYwMDAwOyAvLyA2MCBzZWNvbmRzXG4gICAgICAgICAgfSAvLyBJZiB3ZSBoYXZlIGEgc2VydmVyIGVycm9yLCByZXR1cm4gbm93IHNvIHdlIGRvbid0IGZsdXNoIHRoZSBxdWV1ZS5cbiAgICAgICAgICBlbHNlIGlmICgocmVzdWx0LnN0YXR1c0NvZGUgfHwgMCkgPj0gNDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZsdXNoSW4oZGVsYXkpO1xuICAgICAgICByZXRyeURlbGF5ID0gU1RBUlRfREVMQVk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChhd2FpdCBzaG91bGRRdWV1ZShlbnZlbG9wZSQxLCBlICwgcmV0cnlEZWxheSkpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGVudmVsb3BlIHdhcyBhIHJldHJ5LCB3ZSB3YW50IHRvIGFkZCBpdCB0byB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlIHNvIGl0J3MgcmV0cmllZCBhZ2FpbiBmaXJzdC5cbiAgICAgICAgICBpZiAoaXNSZXRyeSkge1xuICAgICAgICAgICAgYXdhaXQgc3RvcmUudW5zaGlmdChlbnZlbG9wZSQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHVzaChlbnZlbG9wZSQxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hXaXRoQmFja09mZigpO1xuICAgICAgICAgIGxvZygnRXJyb3Igc2VuZGluZy4gRXZlbnQgcXVldWVkLicsIGUgKTtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZsdXNoQXRTdGFydHVwKSB7XG4gICAgICBmbHVzaFdpdGhCYWNrT2ZmKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmQsXG4gICAgICBmbHVzaDogdGltZW91dCA9PiB7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGltZW91dCwgd2Ugc2hvdWxkIGF0dGVtcHQgdG8gZmx1c2ggdGhlIG9mZmxpbmUgcXVldWUuXG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXRyeURlbGF5ID0gU1RBUlRfREVMQVk7XG4gICAgICAgICAgZmx1c2hJbihNSU5fREVMQVkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydC5mbHVzaCh0aW1lb3V0KTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0cy5NSU5fREVMQVkgPSBNSU5fREVMQVk7XG5leHBvcnRzLlNUQVJUX0RFTEFZID0gU1RBUlRfREVMQVk7XG5leHBvcnRzLm1ha2VPZmZsaW5lVHJhbnNwb3J0ID0gbWFrZU9mZmxpbmVUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vZmZsaW5lLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/trpc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst object = __webpack_require__(/*! ./utils/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst normalize = __webpack_require__(/*! ./utils/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\n\nconst trpcCaptureContext = { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } };\n\nfunction captureIfError(nextResult) {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (\n    typeof nextResult === 'object' &&\n    nextResult !== null &&\n    'ok' in nextResult &&\n    !nextResult.ok &&\n    'error' in nextResult\n  ) {\n    exports$1.captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nfunction trpcMiddleware(options = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function (opts) {\n    const { path, type, next, rawInput, getRawInput } = opts;\n\n    const client = currentScopes.getClient();\n    const clientOptions = client?.getOptions();\n\n    const trpcContext = {\n      procedure_path: path,\n      procedure_type: type,\n    };\n\n    object.addNonEnumerableProperty(\n      trpcContext,\n      '__sentry_override_normalization_depth__',\n      1 + // 1 for context.input + the normal normalization depth\n        (clientOptions?.normalizeDepth ?? 5), // 5 is a sane depth\n    );\n\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize.normalize(rawInput);\n      }\n\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n\n          trpcContext.input = normalize.normalize(rawRes);\n        } catch {\n          // noop\n        }\n      }\n    }\n\n    return currentScopes.withIsolationScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return trace.startSpanManual(\n        {\n          name: `trpc/${path}`,\n          op: 'rpc.server',\n          attributes: {\n            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',\n          },\n          forceTransaction: !!options.forceTransaction,\n        },\n        async span => {\n          try {\n            const nextResult = await next();\n            captureIfError(nextResult);\n            span.end();\n            return nextResult;\n          } catch (e) {\n            exports$1.captureException(e, trpcCaptureContext);\n            span.end();\n            throw e;\n          }\n        },\n      ) ;\n    });\n  };\n}\n\nexports.trpcMiddleware = trpcMiddleware;\n//# sourceMappingURL=trpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJwYy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxzQkFBc0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDbEQsa0JBQWtCLG1CQUFPLENBQUMsbUZBQWM7QUFDeEMsMkJBQTJCLG1CQUFPLENBQUMseUdBQXlCO0FBQzVELGVBQWUsbUJBQU8sQ0FBQyw2RkFBbUI7QUFDMUMsa0JBQWtCLG1CQUFPLENBQUMsbUdBQXNCO0FBQ2hELGNBQWMsbUJBQU8sQ0FBQywrRkFBb0I7O0FBRTFDLDZCQUE2QixhQUFhLHdCQUF3Qjs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUEwQzs7QUFFdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cnBjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBleHBvcnRzJDEgPSByZXF1aXJlKCcuL2V4cG9ydHMuanMnKTtcbmNvbnN0IHNlbWFudGljQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuL3V0aWxzL29iamVjdC5qcycpO1xuY29uc3Qgbm9ybWFsaXplID0gcmVxdWlyZSgnLi91dGlscy9ub3JtYWxpemUuanMnKTtcbmNvbnN0IHRyYWNlID0gcmVxdWlyZSgnLi90cmFjaW5nL3RyYWNlLmpzJyk7XG5cbmNvbnN0IHRycGNDYXB0dXJlQ29udGV4dCA9IHsgbWVjaGFuaXNtOiB7IGhhbmRsZWQ6IGZhbHNlLCBkYXRhOiB7IGZ1bmN0aW9uOiAndHJwY01pZGRsZXdhcmUnIH0gfSB9O1xuXG5mdW5jdGlvbiBjYXB0dXJlSWZFcnJvcihuZXh0UmVzdWx0KSB7XG4gIC8vIFRPRE86IFNldCBzcGFuIHN0YXR1cyBiYXNlZCBvbiB3aGF0IFRSUENFcnJvciB3YXMgZW5jb3VudGVyZWRcbiAgaWYgKFxuICAgIHR5cGVvZiBuZXh0UmVzdWx0ID09PSAnb2JqZWN0JyAmJlxuICAgIG5leHRSZXN1bHQgIT09IG51bGwgJiZcbiAgICAnb2snIGluIG5leHRSZXN1bHQgJiZcbiAgICAhbmV4dFJlc3VsdC5vayAmJlxuICAgICdlcnJvcicgaW4gbmV4dFJlc3VsdFxuICApIHtcbiAgICBleHBvcnRzJDEuY2FwdHVyZUV4Y2VwdGlvbihuZXh0UmVzdWx0LmVycm9yLCB0cnBjQ2FwdHVyZUNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogU2VudHJ5IHRSUEMgbWlkZGxld2FyZSB0aGF0IGNhcHR1cmVzIGVycm9ycyBhbmQgY3JlYXRlcyBzcGFucyBmb3IgdFJQQyBwcm9jZWR1cmVzLlxuICovXG5mdW5jdGlvbiB0cnBjTWlkZGxld2FyZShvcHRpb25zID0ge30pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAvLyBAdHMtaWdub3JlXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCwgdHlwZSwgbmV4dCwgcmF3SW5wdXQsIGdldFJhd0lucHV0IH0gPSBvcHRzO1xuXG4gICAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0gY2xpZW50Py5nZXRPcHRpb25zKCk7XG5cbiAgICBjb25zdCB0cnBjQ29udGV4dCA9IHtcbiAgICAgIHByb2NlZHVyZV9wYXRoOiBwYXRoLFxuICAgICAgcHJvY2VkdXJlX3R5cGU6IHR5cGUsXG4gICAgfTtcblxuICAgIG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoXG4gICAgICB0cnBjQ29udGV4dCxcbiAgICAgICdfX3NlbnRyeV9vdmVycmlkZV9ub3JtYWxpemF0aW9uX2RlcHRoX18nLFxuICAgICAgMSArIC8vIDEgZm9yIGNvbnRleHQuaW5wdXQgKyB0aGUgbm9ybWFsIG5vcm1hbGl6YXRpb24gZGVwdGhcbiAgICAgICAgKGNsaWVudE9wdGlvbnM/Lm5vcm1hbGl6ZURlcHRoID8/IDUpLCAvLyA1IGlzIGEgc2FuZSBkZXB0aFxuICAgICk7XG5cbiAgICBpZiAob3B0aW9ucy5hdHRhY2hScGNJbnB1dCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5hdHRhY2hScGNJbnB1dCA6IGNsaWVudE9wdGlvbnM/LnNlbmREZWZhdWx0UGlpKSB7XG4gICAgICBpZiAocmF3SW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnBjQ29udGV4dC5pbnB1dCA9IG5vcm1hbGl6ZS5ub3JtYWxpemUocmF3SW5wdXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0UmF3SW5wdXQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZ2V0UmF3SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByYXdSZXMgPSBhd2FpdCBnZXRSYXdJbnB1dCgpO1xuXG4gICAgICAgICAgdHJwY0NvbnRleHQuaW5wdXQgPSBub3JtYWxpemUubm9ybWFsaXplKHJhd1Jlcyk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U2NvcGVzLndpdGhJc29sYXRpb25TY29wZShzY29wZSA9PiB7XG4gICAgICBzY29wZS5zZXRDb250ZXh0KCd0cnBjJywgdHJwY0NvbnRleHQpO1xuICAgICAgcmV0dXJuIHRyYWNlLnN0YXJ0U3Bhbk1hbnVhbChcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IGB0cnBjLyR7cGF0aH1gLFxuICAgICAgICAgIG9wOiAncnBjLnNlcnZlcicsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06ICdyb3V0ZScsXG4gICAgICAgICAgICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8ucnBjLnRycGMnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9yY2VUcmFuc2FjdGlvbjogISFvcHRpb25zLmZvcmNlVHJhbnNhY3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNwYW4gPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzdWx0ID0gYXdhaXQgbmV4dCgpO1xuICAgICAgICAgICAgY2FwdHVyZUlmRXJyb3IobmV4dFJlc3VsdCk7XG4gICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHRSZXN1bHQ7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXhwb3J0cyQxLmNhcHR1cmVFeGNlcHRpb24oZSwgdHJwY0NhcHR1cmVDb250ZXh0KTtcbiAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICkgO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnRzLnRycGNNaWRkbGV3YXJlID0gdHJwY01pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnBjLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/aggregate-errors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/aggregate-errors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation,\n  parser,\n  key,\n  limit,\n  event,\n  hint,\n) {\n  if (!event.exception?.values || !hint || !is.isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException ,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation,\n  parser,\n  limit,\n  error,\n  key,\n  prevExceptions,\n  exception,\n  exceptionId,\n) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (is.isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (is.isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception,\n  source,\n  exceptionId,\n  parentId,\n) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\nexports.applyAggregateErrorsToEvent = applyAggregateErrorsToEvent;\n//# sourceMappingURL=aggregate-errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvYWdncmVnYXRlLWVycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxXQUFXLG1CQUFPLENBQUMsK0VBQVM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLEVBQUU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQSxpREFBaUQsMEJBQTBCO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2FnZ3JlZ2F0ZS1lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzID0gcmVxdWlyZSgnLi9pcy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgZXhjZXB0aW9ucyBpbnNpZGUgYGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNgIGZvciBlcnJvcnMgdGhhdCBhcmUgbmVzdGVkIG9uIHByb3BlcnRpZXMgYmFzZWQgb24gdGhlIGBrZXlgIHBhcmFtZXRlci5cbiAqL1xuZnVuY3Rpb24gYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50KFxuICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgcGFyc2VyLFxuICBrZXksXG4gIGxpbWl0LFxuICBldmVudCxcbiAgaGludCxcbikge1xuICBpZiAoIWV2ZW50LmV4Y2VwdGlvbj8udmFsdWVzIHx8ICFoaW50IHx8ICFpcy5pc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gR2VuZXJhbGx5IHNwZWFraW5nIHRoZSBsYXN0IGl0ZW0gaW4gYGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNgIGlzIHRoZSBleGNlcHRpb24gb3JpZ2luYXRpbmcgZnJvbSB0aGUgb3JpZ2luYWwgRXJyb3JcbiAgY29uc3Qgb3JpZ2luYWxFeGNlcHRpb24gPVxuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMubGVuZ3RoID4gMCA/IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAvLyBXZSBvbmx5IGNyZWF0ZSBleGNlcHRpb24gZ3JvdXBpbmcgaWYgdGhlcmUgaXMgYW4gZXhjZXB0aW9uIGluIHRoZSBldmVudC5cbiAgaWYgKG9yaWdpbmFsRXhjZXB0aW9uKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgICAgIHBhcnNlcixcbiAgICAgIGxpbWl0LFxuICAgICAgaGludC5vcmlnaW5hbEV4Y2VwdGlvbiAsXG4gICAgICBrZXksXG4gICAgICBldmVudC5leGNlcHRpb24udmFsdWVzLFxuICAgICAgb3JpZ2luYWxFeGNlcHRpb24sXG4gICAgICAwLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWdncmVnYXRlRXhjZXB0aW9uc0Zyb21FcnJvcihcbiAgZXhjZXB0aW9uRnJvbUVycm9ySW1wbGVtZW50YXRpb24sXG4gIHBhcnNlcixcbiAgbGltaXQsXG4gIGVycm9yLFxuICBrZXksXG4gIHByZXZFeGNlcHRpb25zLFxuICBleGNlcHRpb24sXG4gIGV4Y2VwdGlvbklkLFxuKSB7XG4gIGlmIChwcmV2RXhjZXB0aW9ucy5sZW5ndGggPj0gbGltaXQgKyAxKSB7XG4gICAgcmV0dXJuIHByZXZFeGNlcHRpb25zO1xuICB9XG5cbiAgbGV0IG5ld0V4Y2VwdGlvbnMgPSBbLi4ucHJldkV4Y2VwdGlvbnNdO1xuXG4gIC8vIFJlY3Vyc2l2ZWx5IGNhbGwgdGhpcyBmdW5jdGlvbiBpbiBvcmRlciB0byB3YWxrIGRvd24gYSBjaGFpbiBvZiBlcnJvcnNcbiAgaWYgKGlzLmlzSW5zdGFuY2VPZihlcnJvcltrZXldLCBFcnJvcikpIHtcbiAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpO1xuICAgIGNvbnN0IG5ld0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21FcnJvckltcGxlbWVudGF0aW9uKHBhcnNlciwgZXJyb3Jba2V5XSk7XG4gICAgY29uc3QgbmV3RXhjZXB0aW9uSWQgPSBuZXdFeGNlcHRpb25zLmxlbmd0aDtcbiAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24obmV3RXhjZXB0aW9uLCBrZXksIG5ld0V4Y2VwdGlvbklkLCBleGNlcHRpb25JZCk7XG4gICAgbmV3RXhjZXB0aW9ucyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgICAgIHBhcnNlcixcbiAgICAgIGxpbWl0LFxuICAgICAgZXJyb3Jba2V5XSxcbiAgICAgIGtleSxcbiAgICAgIFtuZXdFeGNlcHRpb24sIC4uLm5ld0V4Y2VwdGlvbnNdLFxuICAgICAgbmV3RXhjZXB0aW9uLFxuICAgICAgbmV3RXhjZXB0aW9uSWQsXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRoaXMgd2lsbCBjcmVhdGUgZXhjZXB0aW9uIGdyb3VwaW5nIGZvciBBZ2dyZWdhdGVFcnJvcnNcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQWdncmVnYXRlRXJyb3JcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXJyb3IuZXJyb3JzKSkge1xuICAgIGVycm9yLmVycm9ycy5mb3JFYWNoKChjaGlsZEVycm9yLCBpKSA9PiB7XG4gICAgICBpZiAoaXMuaXNJbnN0YW5jZU9mKGNoaWxkRXJyb3IsIEVycm9yKSkge1xuICAgICAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpO1xuICAgICAgICBjb25zdCBuZXdFeGNlcHRpb24gPSBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbihwYXJzZXIsIGNoaWxkRXJyb3IpO1xuICAgICAgICBjb25zdCBuZXdFeGNlcHRpb25JZCA9IG5ld0V4Y2VwdGlvbnMubGVuZ3RoO1xuICAgICAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24obmV3RXhjZXB0aW9uLCBgZXJyb3JzWyR7aX1dYCwgbmV3RXhjZXB0aW9uSWQsIGV4Y2VwdGlvbklkKTtcbiAgICAgICAgbmV3RXhjZXB0aW9ucyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICAgICAgZXhjZXB0aW9uRnJvbUVycm9ySW1wbGVtZW50YXRpb24sXG4gICAgICAgICAgcGFyc2VyLFxuICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgIGNoaWxkRXJyb3IsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFtuZXdFeGNlcHRpb24sIC4uLm5ld0V4Y2VwdGlvbnNdLFxuICAgICAgICAgIG5ld0V4Y2VwdGlvbixcbiAgICAgICAgICBuZXdFeGNlcHRpb25JZCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdFeGNlcHRpb25zO1xufVxuXG5mdW5jdGlvbiBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpIHtcbiAgLy8gRG9uJ3Qga25vdyBpZiB0aGlzIGRlZmF1bHQgbWFrZXMgc2Vuc2UuIFRoZSBwcm90b2NvbCByZXF1aXJlcyB1cyB0byBzZXQgdGhlc2UgdmFsdWVzIHNvIHdlIHBpY2sgKnNvbWUqIGRlZmF1bHQuXG4gIGV4Y2VwdGlvbi5tZWNoYW5pc20gPSBleGNlcHRpb24ubWVjaGFuaXNtIHx8IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG5cbiAgZXhjZXB0aW9uLm1lY2hhbmlzbSA9IHtcbiAgICAuLi5leGNlcHRpb24ubWVjaGFuaXNtLFxuICAgIC4uLihleGNlcHRpb24udHlwZSA9PT0gJ0FnZ3JlZ2F0ZUVycm9yJyAmJiB7IGlzX2V4Y2VwdGlvbl9ncm91cDogdHJ1ZSB9KSxcbiAgICBleGNlcHRpb25faWQ6IGV4Y2VwdGlvbklkLFxuICB9O1xufVxuXG5mdW5jdGlvbiBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24oXG4gIGV4Y2VwdGlvbixcbiAgc291cmNlLFxuICBleGNlcHRpb25JZCxcbiAgcGFyZW50SWQsXG4pIHtcbiAgLy8gRG9uJ3Qga25vdyBpZiB0aGlzIGRlZmF1bHQgbWFrZXMgc2Vuc2UuIFRoZSBwcm90b2NvbCByZXF1aXJlcyB1cyB0byBzZXQgdGhlc2UgdmFsdWVzIHNvIHdlIHBpY2sgKnNvbWUqIGRlZmF1bHQuXG4gIGV4Y2VwdGlvbi5tZWNoYW5pc20gPSBleGNlcHRpb24ubWVjaGFuaXNtIHx8IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG5cbiAgZXhjZXB0aW9uLm1lY2hhbmlzbSA9IHtcbiAgICAuLi5leGNlcHRpb24ubWVjaGFuaXNtLFxuICAgIHR5cGU6ICdjaGFpbmVkJyxcbiAgICBzb3VyY2UsXG4gICAgZXhjZXB0aW9uX2lkOiBleGNlcHRpb25JZCxcbiAgICBwYXJlbnRfaWQ6IHBhcmVudElkLFxuICB9O1xufVxuXG5leHBvcnRzLmFwcGx5QWdncmVnYXRlRXJyb3JzVG9FdmVudCA9IGFwcGx5QWdncmVnYXRlRXJyb3JzVG9FdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZ3JlZ2F0ZS1lcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/aggregate-errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/anr.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/anr.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst nodeStackTrace = __webpack_require__(/*! ./node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/node-stack-trace.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nfunction watchdogTimer(\n  createTimer,\n  pollInterval,\n  anrThreshold,\n  callback,\n) {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: (state) => {\n      enabled = state;\n    },\n  };\n}\n\n// types copied from inspector.d.ts\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nfunction callFrameToStackFrame(\n  frame,\n  url,\n  getModuleFromFilename,\n) {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n\n  return {\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || stacktrace.UNKNOWN_FUNCTION,\n    colno,\n    lineno,\n    in_app: filename ? nodeStackTrace.filenameIsInApp(filename) : undefined,\n  };\n}\n\nexports.callFrameToStackFrame = callFrameToStackFrame;\nexports.watchdogTimer = watchdogTimer;\n//# sourceMappingURL=anr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvYW5yLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHVCQUF1QixtQkFBTyxDQUFDLDJHQUF1QjtBQUN0RCxtQkFBbUIsbUJBQU8sQ0FBQywrRkFBaUI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QixxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2Fuci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZVN0YWNrVHJhY2UgPSByZXF1aXJlKCcuL25vZGUtc3RhY2stdHJhY2UuanMnKTtcbmNvbnN0IHN0YWNrdHJhY2UgPSByZXF1aXJlKCcuL3N0YWNrdHJhY2UuanMnKTtcblxuLyoqXG4gKiBBIG5vZGUuanMgd2F0Y2hkb2cgdGltZXJcbiAqIEBwYXJhbSBwb2xsSW50ZXJ2YWwgVGhlIGludGVydmFsIHRoYXQgd2UgZXhwZWN0IHRvIGdldCBwb2xsZWQgYXRcbiAqIEBwYXJhbSBhbnJUaHJlc2hvbGQgVGhlIHRocmVzaG9sZCBmb3Igd2hlbiB3ZSBjb25zaWRlciBBTlJcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2FsbCBmb3IgQU5SXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCBgcG9sbGAgYW5kIGBlbmFibGVkYCBmdW5jdGlvbnMge0BsaW5rIFdhdGNoZG9nUmV0dXJufVxuICovXG5mdW5jdGlvbiB3YXRjaGRvZ1RpbWVyKFxuICBjcmVhdGVUaW1lcixcbiAgcG9sbEludGVydmFsLFxuICBhbnJUaHJlc2hvbGQsXG4gIGNhbGxiYWNrLFxuKSB7XG4gIGNvbnN0IHRpbWVyID0gY3JlYXRlVGltZXIoKTtcbiAgbGV0IHRyaWdnZXJlZCA9IGZhbHNlO1xuICBsZXQgZW5hYmxlZCA9IHRydWU7XG5cbiAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGNvbnN0IGRpZmZNcyA9IHRpbWVyLmdldFRpbWVNcygpO1xuXG4gICAgaWYgKHRyaWdnZXJlZCA9PT0gZmFsc2UgJiYgZGlmZk1zID4gcG9sbEludGVydmFsICsgYW5yVGhyZXNob2xkKSB7XG4gICAgICB0cmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlmZk1zIDwgcG9sbEludGVydmFsICsgYW5yVGhyZXNob2xkKSB7XG4gICAgICB0cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIDIwKTtcblxuICByZXR1cm4ge1xuICAgIHBvbGw6ICgpID0+IHtcbiAgICAgIHRpbWVyLnJlc2V0KCk7XG4gICAgfSxcbiAgICBlbmFibGVkOiAoc3RhdGUpID0+IHtcbiAgICAgIGVuYWJsZWQgPSBzdGF0ZTtcbiAgICB9LFxuICB9O1xufVxuXG4vLyB0eXBlcyBjb3BpZWQgZnJvbSBpbnNwZWN0b3IuZC50c1xuXG4vKipcbiAqIENvbnZlcnRzIERlYnVnZ2VyLkNhbGxGcmFtZSB0byBTZW50cnkgU3RhY2tGcmFtZVxuICovXG5mdW5jdGlvbiBjYWxsRnJhbWVUb1N0YWNrRnJhbWUoXG4gIGZyYW1lLFxuICB1cmwsXG4gIGdldE1vZHVsZUZyb21GaWxlbmFtZSxcbikge1xuICBjb25zdCBmaWxlbmFtZSA9IHVybCA/IHVybC5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCAnJykgOiB1bmRlZmluZWQ7XG5cbiAgLy8gQ2FsbEZyYW1lIHJvdy9jb2wgYXJlIDAgYmFzZWQsIHdoZXJlYXMgU3RhY2tGcmFtZSBhcmUgMSBiYXNlZFxuICBjb25zdCBjb2xubyA9IGZyYW1lLmxvY2F0aW9uLmNvbHVtbk51bWJlciA/IGZyYW1lLmxvY2F0aW9uLmNvbHVtbk51bWJlciArIDEgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGxpbmVubyA9IGZyYW1lLmxvY2F0aW9uLmxpbmVOdW1iZXIgPyBmcmFtZS5sb2NhdGlvbi5saW5lTnVtYmVyICsgMSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4ge1xuICAgIGZpbGVuYW1lLFxuICAgIG1vZHVsZTogZ2V0TW9kdWxlRnJvbUZpbGVuYW1lKGZpbGVuYW1lKSxcbiAgICBmdW5jdGlvbjogZnJhbWUuZnVuY3Rpb25OYW1lIHx8IHN0YWNrdHJhY2UuVU5LTk9XTl9GVU5DVElPTixcbiAgICBjb2xubyxcbiAgICBsaW5lbm8sXG4gICAgaW5fYXBwOiBmaWxlbmFtZSA/IG5vZGVTdGFja1RyYWNlLmZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gIH07XG59XG5cbmV4cG9ydHMuY2FsbEZyYW1lVG9TdGFja0ZyYW1lID0gY2FsbEZyYW1lVG9TdGFja0ZyYW1lO1xuZXhwb3J0cy53YXRjaGRvZ1RpbWVyID0gd2F0Y2hkb2dUaW1lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/anr.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst merge = __webpack_require__(/*! ./merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nfunction applyScopeDataToEvent(event, data) {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nfunction mergeScopeData(data, mergeData) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = merge.merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nfunction mergeAndOverwriteScopeData\n\n(data, prop, mergeVal) {\n  data[prop] = merge.merge(data[prop], mergeVal, 1);\n}\n\nfunction applyDataToEvent(event, data) {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event, span) {\n  event.contexts = {\n    trace: spanUtils.spanToTraceContext(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = spanUtils.getRootSpan(span);\n  const transactionName = spanUtils.spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event, fingerprint) {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n\nexports.applyScopeDataToEvent = applyScopeDataToEvent;\nexports.mergeAndOverwriteScopeData = mergeAndOverwriteScopeData;\nexports.mergeScopeData = mergeScopeData;\n//# sourceMappingURL=applyScopeDataToEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvYXBwbHlTY29wZURhdGFUb0V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLGtJQUFzQztBQUM3RSxjQUFjLG1CQUFPLENBQUMscUZBQVk7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNkZBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0RBQXdEOztBQUVsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsc0RBQXNEOztBQUVoRTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QixrQ0FBa0M7QUFDbEMsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9hcHBseVNjb3BlRGF0YVRvRXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1aXJlKCcuLi90cmFjaW5nL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMnKTtcbmNvbnN0IG1lcmdlID0gcmVxdWlyZSgnLi9tZXJnZS5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi9zcGFuVXRpbHMuanMnKTtcblxuLyoqXG4gKiBBcHBsaWVzIGRhdGEgZnJvbSB0aGUgc2NvcGUgdG8gdGhlIGV2ZW50IGFuZCBydW5zIGFsbCBldmVudCBwcm9jZXNzb3JzIG9uIGl0LlxuICovXG5mdW5jdGlvbiBhcHBseVNjb3BlRGF0YVRvRXZlbnQoZXZlbnQsIGRhdGEpIHtcbiAgY29uc3QgeyBmaW5nZXJwcmludCwgc3BhbiwgYnJlYWRjcnVtYnMsIHNka1Byb2Nlc3NpbmdNZXRhZGF0YSB9ID0gZGF0YTtcblxuICAvLyBBcHBseSBnZW5lcmFsIGRhdGFcbiAgYXBwbHlEYXRhVG9FdmVudChldmVudCwgZGF0YSk7XG5cbiAgLy8gV2Ugd2FudCB0byBzZXQgdGhlIHRyYWNlIGNvbnRleHQgZm9yIG5vcm1hbCBldmVudHMgb25seSBpZiB0aGVyZSBpc24ndCBhbHJlYWR5XG4gIC8vIGEgdHJhY2UgY29udGV4dCBvbiB0aGUgZXZlbnQuIFRoZXJlIGlzIGEgcHJvZHVjdCBmZWF0dXJlIGluIHBsYWNlIHdoZXJlIHdlIGxpbmtcbiAgLy8gZXJyb3JzIHdpdGggdHJhbnNhY3Rpb24gYW5kIGl0IHJlbGllcyBvbiB0aGF0LlxuICBpZiAoc3Bhbikge1xuICAgIGFwcGx5U3BhblRvRXZlbnQoZXZlbnQsIHNwYW4pO1xuICB9XG5cbiAgYXBwbHlGaW5nZXJwcmludFRvRXZlbnQoZXZlbnQsIGZpbmdlcnByaW50KTtcbiAgYXBwbHlCcmVhZGNydW1ic1RvRXZlbnQoZXZlbnQsIGJyZWFkY3J1bWJzKTtcbiAgYXBwbHlTZGtNZXRhZGF0YVRvRXZlbnQoZXZlbnQsIHNka1Byb2Nlc3NpbmdNZXRhZGF0YSk7XG59XG5cbi8qKiBNZXJnZSBkYXRhIG9mIHR3byBzY29wZXMgdG9nZXRoZXIuICovXG5mdW5jdGlvbiBtZXJnZVNjb3BlRGF0YShkYXRhLCBtZXJnZURhdGEpIHtcbiAgY29uc3Qge1xuICAgIGV4dHJhLFxuICAgIHRhZ3MsXG4gICAgdXNlcixcbiAgICBjb250ZXh0cyxcbiAgICBsZXZlbCxcbiAgICBzZGtQcm9jZXNzaW5nTWV0YWRhdGEsXG4gICAgYnJlYWRjcnVtYnMsXG4gICAgZmluZ2VycHJpbnQsXG4gICAgZXZlbnRQcm9jZXNzb3JzLFxuICAgIGF0dGFjaG1lbnRzLFxuICAgIHByb3BhZ2F0aW9uQ29udGV4dCxcbiAgICB0cmFuc2FjdGlvbk5hbWUsXG4gICAgc3BhbixcbiAgfSA9IG1lcmdlRGF0YTtcblxuICBtZXJnZUFuZE92ZXJ3cml0ZVNjb3BlRGF0YShkYXRhLCAnZXh0cmEnLCBleHRyYSk7XG4gIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhKGRhdGEsICd0YWdzJywgdGFncyk7XG4gIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhKGRhdGEsICd1c2VyJywgdXNlcik7XG4gIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhKGRhdGEsICdjb250ZXh0cycsIGNvbnRleHRzKTtcblxuICBkYXRhLnNka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IG1lcmdlLm1lcmdlKGRhdGEuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLCBzZGtQcm9jZXNzaW5nTWV0YWRhdGEsIDIpO1xuXG4gIGlmIChsZXZlbCkge1xuICAgIGRhdGEubGV2ZWwgPSBsZXZlbDtcbiAgfVxuXG4gIGlmICh0cmFuc2FjdGlvbk5hbWUpIHtcbiAgICBkYXRhLnRyYW5zYWN0aW9uTmFtZSA9IHRyYW5zYWN0aW9uTmFtZTtcbiAgfVxuXG4gIGlmIChzcGFuKSB7XG4gICAgZGF0YS5zcGFuID0gc3BhbjtcbiAgfVxuXG4gIGlmIChicmVhZGNydW1icy5sZW5ndGgpIHtcbiAgICBkYXRhLmJyZWFkY3J1bWJzID0gWy4uLmRhdGEuYnJlYWRjcnVtYnMsIC4uLmJyZWFkY3J1bWJzXTtcbiAgfVxuXG4gIGlmIChmaW5nZXJwcmludC5sZW5ndGgpIHtcbiAgICBkYXRhLmZpbmdlcnByaW50ID0gWy4uLmRhdGEuZmluZ2VycHJpbnQsIC4uLmZpbmdlcnByaW50XTtcbiAgfVxuXG4gIGlmIChldmVudFByb2Nlc3NvcnMubGVuZ3RoKSB7XG4gICAgZGF0YS5ldmVudFByb2Nlc3NvcnMgPSBbLi4uZGF0YS5ldmVudFByb2Nlc3NvcnMsIC4uLmV2ZW50UHJvY2Vzc29yc107XG4gIH1cblxuICBpZiAoYXR0YWNobWVudHMubGVuZ3RoKSB7XG4gICAgZGF0YS5hdHRhY2htZW50cyA9IFsuLi5kYXRhLmF0dGFjaG1lbnRzLCAuLi5hdHRhY2htZW50c107XG4gIH1cblxuICBkYXRhLnByb3BhZ2F0aW9uQ29udGV4dCA9IHsgLi4uZGF0YS5wcm9wYWdhdGlvbkNvbnRleHQsIC4uLnByb3BhZ2F0aW9uQ29udGV4dCB9O1xufVxuXG4vKipcbiAqIE1lcmdlcyBjZXJ0YWluIHNjb3BlIGRhdGEuIFVuZGVmaW5lZCB2YWx1ZXMgd2lsbCBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIHZhbHVlcy5cbiAqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBtZXJnZUFuZE92ZXJ3cml0ZVNjb3BlRGF0YVxuXG4oZGF0YSwgcHJvcCwgbWVyZ2VWYWwpIHtcbiAgZGF0YVtwcm9wXSA9IG1lcmdlLm1lcmdlKGRhdGFbcHJvcF0sIG1lcmdlVmFsLCAxKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlEYXRhVG9FdmVudChldmVudCwgZGF0YSkge1xuICBjb25zdCB7IGV4dHJhLCB0YWdzLCB1c2VyLCBjb250ZXh0cywgbGV2ZWwsIHRyYW5zYWN0aW9uTmFtZSB9ID0gZGF0YTtcblxuICBpZiAoT2JqZWN0LmtleXMoZXh0cmEpLmxlbmd0aCkge1xuICAgIGV2ZW50LmV4dHJhID0geyAuLi5leHRyYSwgLi4uZXZlbnQuZXh0cmEgfTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyh0YWdzKS5sZW5ndGgpIHtcbiAgICBldmVudC50YWdzID0geyAuLi50YWdzLCAuLi5ldmVudC50YWdzIH07XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXModXNlcikubGVuZ3RoKSB7XG4gICAgZXZlbnQudXNlciA9IHsgLi4udXNlciwgLi4uZXZlbnQudXNlciB9O1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGNvbnRleHRzKS5sZW5ndGgpIHtcbiAgICBldmVudC5jb250ZXh0cyA9IHsgLi4uY29udGV4dHMsIC4uLmV2ZW50LmNvbnRleHRzIH07XG4gIH1cblxuICBpZiAobGV2ZWwpIHtcbiAgICBldmVudC5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgLy8gdHJhbnNhY3Rpb24gZXZlbnRzIGdldCB0aGVpciBgdHJhbnNhY3Rpb25gIGZyb20gdGhlIHJvb3Qgc3BhbiBuYW1lXG4gIGlmICh0cmFuc2FjdGlvbk5hbWUgJiYgZXZlbnQudHlwZSAhPT0gJ3RyYW5zYWN0aW9uJykge1xuICAgIGV2ZW50LnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb25OYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5QnJlYWRjcnVtYnNUb0V2ZW50KGV2ZW50LCBicmVhZGNydW1icykge1xuICBjb25zdCBtZXJnZWRCcmVhZGNydW1icyA9IFsuLi4oZXZlbnQuYnJlYWRjcnVtYnMgfHwgW10pLCAuLi5icmVhZGNydW1ic107XG4gIGV2ZW50LmJyZWFkY3J1bWJzID0gbWVyZ2VkQnJlYWRjcnVtYnMubGVuZ3RoID8gbWVyZ2VkQnJlYWRjcnVtYnMgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGFwcGx5U2RrTWV0YWRhdGFUb0V2ZW50KGV2ZW50LCBzZGtQcm9jZXNzaW5nTWV0YWRhdGEpIHtcbiAgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge1xuICAgIC4uLmV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgICAuLi5zZGtQcm9jZXNzaW5nTWV0YWRhdGEsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFwcGx5U3BhblRvRXZlbnQoZXZlbnQsIHNwYW4pIHtcbiAgZXZlbnQuY29udGV4dHMgPSB7XG4gICAgdHJhY2U6IHNwYW5VdGlscy5zcGFuVG9UcmFjZUNvbnRleHQoc3BhbiksXG4gICAgLi4uZXZlbnQuY29udGV4dHMsXG4gIH07XG5cbiAgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge1xuICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQ6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKHNwYW4pLFxuICAgIC4uLmV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgfTtcblxuICBjb25zdCByb290U3BhbiA9IHNwYW5VdGlscy5nZXRSb290U3BhbihzcGFuKTtcbiAgY29uc3QgdHJhbnNhY3Rpb25OYW1lID0gc3BhblV0aWxzLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRlc2NyaXB0aW9uO1xuICBpZiAodHJhbnNhY3Rpb25OYW1lICYmICFldmVudC50cmFuc2FjdGlvbiAmJiBldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbk5hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGZpbmdlcnByaW50IGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBpZiB0aGVyZSdzIG9uZSxcbiAqIHVzZXMgbWVzc2FnZSBpZiB0aGVyZSdzIG9uZSBpbnN0ZWFkIG9yIGdldCByaWQgb2YgZW1wdHkgZmluZ2VycHJpbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlGaW5nZXJwcmludFRvRXZlbnQoZXZlbnQsIGZpbmdlcnByaW50KSB7XG4gIC8vIE1ha2Ugc3VyZSBpdCdzIGFuIGFycmF5IGZpcnN0IGFuZCB3ZSBhY3R1YWxseSBoYXZlIHNvbWV0aGluZyBpbiBwbGFjZVxuICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50XG4gICAgPyBBcnJheS5pc0FycmF5KGV2ZW50LmZpbmdlcnByaW50KVxuICAgICAgPyBldmVudC5maW5nZXJwcmludFxuICAgICAgOiBbZXZlbnQuZmluZ2VycHJpbnRdXG4gICAgOiBbXTtcblxuICAvLyBJZiB3ZSBoYXZlIHNvbWV0aGluZyBvbiB0aGUgc2NvcGUsIHRoZW4gbWVyZ2UgaXQgd2l0aCBldmVudFxuICBpZiAoZmluZ2VycHJpbnQpIHtcbiAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50LmNvbmNhdChmaW5nZXJwcmludCk7XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIG5vIGRhdGEgYXQgYWxsLCByZW1vdmUgZW1wdHkgYXJyYXkgZGVmYXVsdFxuICBpZiAoIWV2ZW50LmZpbmdlcnByaW50Lmxlbmd0aCkge1xuICAgIGRlbGV0ZSBldmVudC5maW5nZXJwcmludDtcbiAgfVxufVxuXG5leHBvcnRzLmFwcGx5U2NvcGVEYXRhVG9FdmVudCA9IGFwcGx5U2NvcGVEYXRhVG9FdmVudDtcbmV4cG9ydHMubWVyZ2VBbmRPdmVyd3JpdGVTY29wZURhdGEgPSBtZXJnZUFuZE92ZXJ3cml0ZVNjb3BlRGF0YTtcbmV4cG9ydHMubWVyZ2VTY29wZURhdGEgPSBtZXJnZVNjb3BlRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGx5U2NvcGVEYXRhVG9FdmVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/baggage.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\n\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader,\n) {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext ;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext,\n) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nfunction parseBaggageHeader(\n  baggageHeader,\n) {\n  if (!baggageHeader || (!is.isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry =>\n      baggageEntry.split('=').map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      }),\n    )\n    .reduce((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      debugBuild.DEBUG_BUILD &&\n        debugLogger.debug.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n\nexports.MAX_BAGGAGE_STRING_LENGTH = MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;\nexports.objectToBaggageHeader = objectToBaggageHeader;\nexports.parseBaggageHeader = parseBaggageHeader;\n//# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/breadcrumb-log-level.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/breadcrumb-log-level.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nfunction getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n\nexports.getBreadcrumbLogLevelFromHttpStatusCode = getBreadcrumbLogLevelFromHttpStatusCode;\n//# sourceMappingURL=breadcrumb-log-level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLCtDQUErQztBQUMvQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGEgYnJlYWRjcnVtYidzIGxvZyBsZXZlbCAob25seSBgd2FybmluZ2Agb3IgYGVycm9yYCkgYmFzZWQgb24gYW4gSFRUUCBzdGF0dXMgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlKHN0YXR1c0NvZGUpIHtcbiAgLy8gTk9URTogdW5kZWZpbmVkIGRlZmF1bHRzIHRvICdpbmZvJyBpbiBTZW50cnlcbiAgaWYgKHN0YXR1c0NvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA0MDAgJiYgc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgIHJldHVybiAnd2FybmluZyc7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydHMuZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlID0gZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/breadcrumb-log-level.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/browser.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/browser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst WINDOW = worldwide.GLOBAL_OBJ ;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(\n  elem,\n  options = {},\n) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem ;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el\n\n;\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && is.isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem ;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n\nexports.getComponentName = getComponentName;\nexports.getLocationHref = getLocationHref;\nexports.htmlTreeAsString = htmlTreeAsString;\n//# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/browser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/clientreport.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/clientreport.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\");\nconst time = __webpack_require__(/*! ./time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(\n  discarded_events,\n  dsn,\n  timestamp,\n) {\n  const clientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || time.dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return envelope.createEnvelope(dsn ? { dsn } : {}, [clientReportItem]);\n}\n\nexports.createClientReportEnvelope = createClientReportEnvelope;\n//# sourceMappingURL=clientreport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvY2xpZW50cmVwb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFlO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxtRkFBVzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sdUJBQXVCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlDQUF5QyxNQUFNLElBQUk7QUFDbkQ7O0FBRUEsa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9jbGllbnRyZXBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi9lbnZlbG9wZS5qcycpO1xuY29uc3QgdGltZSA9IHJlcXVpcmUoJy4vdGltZS5qcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgY2xpZW50IHJlcG9ydCBlbnZlbG9wZVxuICogQHBhcmFtIGRpc2NhcmRlZF9ldmVudHMgQW4gYXJyYXkgb2YgZGlzY2FyZCBldmVudHNcbiAqIEBwYXJhbSBkc24gQSBEU04gdGhhdCBjYW4gYmUgc2V0IG9uIHRoZSBoZWFkZXIuIE9wdGlvbmFsLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZShcbiAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgZHNuLFxuICB0aW1lc3RhbXAsXG4pIHtcbiAgY29uc3QgY2xpZW50UmVwb3J0SXRlbSA9IFtcbiAgICB7IHR5cGU6ICdjbGllbnRfcmVwb3J0JyB9LFxuICAgIHtcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wIHx8IHRpbWUuZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpLFxuICAgICAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgICB9LFxuICBdO1xuICByZXR1cm4gZW52ZWxvcGUuY3JlYXRlRW52ZWxvcGUoZHNuID8geyBkc24gfSA6IHt9LCBbY2xpZW50UmVwb3J0SXRlbV0pO1xufVxuXG5leHBvcnRzLmNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlID0gY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRyZXBvcnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/clientreport.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/cookie.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/cookie.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nfunction parseCookie(str) {\n  const obj = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n\nexports.parseCookie = parseCookie;\n//# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvY29va2llLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2Nvb2tpZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgY29waWVkIGZyb20gdGhlICdjb29raWVgIG1vZHVsZSBhdCB2MC41LjAgYW5kIHdhcyBzaW1wbGlmaWVkIGZvciBvdXIgdXNlIGNhc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL2Nvb2tpZS9ibG9iL2EwYzg0MTQ3YWFiNjI2NmJkYjM5OTZjZjQwNjJlOTM5MDdjMGIwZmMvaW5kZXguanNcbiAqIEl0IGhhZCB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hbiA8c2h0eWxtYW5AZ21haWwuY29tPlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uIDxkb3VnQHNvbWV0aGluZ2RvdWcuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb29raWUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29va2llKHN0cikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY29uc3QgZXFJZHggPSBzdHIuaW5kZXhPZignPScsIGluZGV4KTtcblxuICAgIC8vIG5vIG1vcmUgY29va2llIHBhaXJzXG4gICAgaWYgKGVxSWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGVuZElkeCA9IHN0ci5pbmRleE9mKCc7JywgaW5kZXgpO1xuXG4gICAgaWYgKGVuZElkeCA9PT0gLTEpIHtcbiAgICAgIGVuZElkeCA9IHN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChlbmRJZHggPCBlcUlkeCkge1xuICAgICAgLy8gYmFja3RyYWNrIG9uIHByaW9yIHNlbWljb2xvblxuICAgICAgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoJzsnLCBlcUlkeCAtIDEpICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IHN0ci5zbGljZShpbmRleCwgZXFJZHgpLnRyaW0oKTtcblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgbGV0IHZhbCA9IHN0ci5zbGljZShlcUlkeCArIDEsIGVuZElkeCkudHJpbSgpO1xuXG4gICAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgICBpZiAodmFsLmNoYXJDb2RlQXQoMCkgPT09IDB4MjIpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWwuaW5kZXhPZignJScpICE9PSAtMSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdmFsO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4ID0gZW5kSWR4ICsgMTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydHMucGFyc2VDb29raWUgPSBwYXJzZUNvb2tpZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvb2tpZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/cookie.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/debounce.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/debounce.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n\n  let timerId;\n  let maxTimerId;\n\n  const maxWait = options?.maxWait ? Math.max(options.maxWait, wait) : 0;\n  const setTimeoutImpl = options?.setTimeoutImpl || setTimeout;\n\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeoutImpl(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeoutImpl(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZGVib3VuY2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZGVib3VuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogSGVhdmlseSBzaW1wbGlmaWVkIGRlYm91bmNlIGZ1bmN0aW9uIGJhc2VkIG9uIGxvZGFzaC5kZWJvdW5jZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgY2FsbGJhY2sgZnVuY3Rpb24gKEBwYXJhbSBmdW4pIGFuZCBkZWxheXMgaXRzIGludm9jYXRpb25cbiAqIGJ5IEBwYXJhbSB3YWl0IG1pbGxpc2Vjb25kcy4gT3B0aW9uYWxseSwgYSBtYXhXYWl0IGNhbiBiZSBzcGVjaWZpZWQgaW4gQHBhcmFtIG9wdGlvbnMsXG4gKiB3aGljaCBlbnN1cmVzIHRoYXQgdGhlIGNhbGxiYWNrIGlzIGludm9rZWQgYXQgbGVhc3Qgb25jZSBhZnRlciB0aGUgc3BlY2lmaWVkIG1heC4gd2FpdCB0aW1lLlxuICpcbiAqIEBwYXJhbSBmdW5jIHRoZSBmdW5jdGlvbiB3aG9zZSBpbnZvY2F0aW9uIGlzIHRvIGJlIGRlYm91bmNlZFxuICogQHBhcmFtIHdhaXQgdGhlIG1pbmltdW0gdGltZSB1bnRpbCB0aGUgZnVuY3Rpb24gaXMgaW52b2tlZCBhZnRlciBpdCB3YXMgY2FsbGVkIG9uY2VcbiAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIG9iamVjdCwgd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGBtYXhXYWl0YCBwcm9wZXJ0eVxuICpcbiAqIEByZXR1cm5zIHRoZSBkZWJvdW5jZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb24sIHdoaWNoIG5lZWRzIHRvIGJlIGNhbGxlZCBhdCBsZWFzdCBvbmNlIHRvIHN0YXJ0IHRoZVxuICogICAgICAgICAgZGVib3VuY2luZyBwcm9jZXNzLiBTdWJzZXF1ZW50IGNhbGxzIHdpbGwgcmVzZXQgdGhlIGRlYm91bmNpbmcgdGltZXIgYW5kLCBpbiBjYXNlIEBwYXJhbWZ1bmNcbiAqICAgICAgICAgIHdhcyBhbHJlYWR5IGludm9rZWQgaW4gdGhlIG1lYW50aW1lLCByZXR1cm4gQHBhcmFtIGZ1bmMncyByZXR1cm4gdmFsdWUuXG4gKiAgICAgICAgICBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGhhcyB0d28gYWRkaXRpb25hbCBwcm9wZXJ0aWVzOlxuICogICAgICAgICAgLSBgZmx1c2hgOiBJbnZva2VzIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gaW1tZWRpYXRlbHkgYW5kIHJldHVybnMgaXRzIHJldHVybiB2YWx1ZVxuICogICAgICAgICAgLSBgY2FuY2VsYDogQ2FuY2VscyB0aGUgZGVib3VuY2luZyBwcm9jZXNzIGFuZCByZXNldHMgdGhlIGRlYm91bmNpbmcgdGltZXJcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICBsZXQgY2FsbGJhY2tSZXR1cm5WYWx1ZTtcblxuICBsZXQgdGltZXJJZDtcbiAgbGV0IG1heFRpbWVySWQ7XG5cbiAgY29uc3QgbWF4V2FpdCA9IG9wdGlvbnM/Lm1heFdhaXQgPyBNYXRoLm1heChvcHRpb25zLm1heFdhaXQsIHdhaXQpIDogMDtcbiAgY29uc3Qgc2V0VGltZW91dEltcGwgPSBvcHRpb25zPy5zZXRUaW1lb3V0SW1wbCB8fCBzZXRUaW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmMoKSB7XG4gICAgY2FuY2VsVGltZXJzKCk7XG4gICAgY2FsbGJhY2tSZXR1cm5WYWx1ZSA9IGZ1bmMoKTtcbiAgICByZXR1cm4gY2FsbGJhY2tSZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbFRpbWVycygpIHtcbiAgICB0aW1lcklkICE9PSB1bmRlZmluZWQgJiYgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIG1heFRpbWVySWQgIT09IHVuZGVmaW5lZCAmJiBjbGVhclRpbWVvdXQobWF4VGltZXJJZCk7XG4gICAgdGltZXJJZCA9IG1heFRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkIHx8IG1heFRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGxiYWNrUmV0dXJuVmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgaWYgKHRpbWVySWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXRJbXBsKGludm9rZUZ1bmMsIHdhaXQpO1xuXG4gICAgaWYgKG1heFdhaXQgJiYgbWF4VGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXhUaW1lcklkID0gc2V0VGltZW91dEltcGwoaW52b2tlRnVuYywgbWF4V2FpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrUmV0dXJuVmFsdWU7XG4gIH1cblxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsVGltZXJzO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/debounce.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-ids.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/debug-ids.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = worldwide.GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(\n  stackParser,\n  resource_paths,\n) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] ,\n      });\n    }\n  }\n\n  return images;\n}\n\nexports.getDebugImagesForResources = getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = getFilenameToDebugIdMap;\n//# sourceMappingURL=debug-ids.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZGVidWctaWRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGtCQUFrQixtQkFBTyxDQUFDLDZGQUFnQjs7QUFFMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUEsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRyxJQUFJOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQywrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2RlYnVnLWlkcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxubGV0IHBhcnNlZFN0YWNrUmVzdWx0cztcbmxldCBsYXN0S2V5c0NvdW50O1xubGV0IGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hcCBvZiBmaWxlbmFtZXMgdG8gZGVidWcgaWRlbnRpZmllcnMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwKHN0YWNrUGFyc2VyKSB7XG4gIGNvbnN0IGRlYnVnSWRNYXAgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5fc2VudHJ5RGVidWdJZHM7XG4gIGlmICghZGVidWdJZE1hcCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGRlYnVnSWRLZXlzID0gT2JqZWN0LmtleXMoZGVidWdJZE1hcCk7XG5cbiAgLy8gSWYgdGhlIGNvdW50IG9mIHJlZ2lzdGVyZWQgZ2xvYmFscyBoYXNuJ3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLCB3ZVxuICAvLyBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlZCByZXN1bHQuXG4gIGlmIChjYWNoZWRGaWxlbmFtZURlYnVnSWRzICYmIGRlYnVnSWRLZXlzLmxlbmd0aCA9PT0gbGFzdEtleXNDb3VudCkge1xuICAgIHJldHVybiBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xuICB9XG5cbiAgbGFzdEtleXNDb3VudCA9IGRlYnVnSWRLZXlzLmxlbmd0aDtcblxuICAvLyBCdWlsZCBhIG1hcCBvZiBmaWxlbmFtZSAtPiBkZWJ1Z19pZC5cbiAgY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcyA9IGRlYnVnSWRLZXlzLnJlZHVjZSgoYWNjLCBzdGFja0tleSkgPT4ge1xuICAgIGlmICghcGFyc2VkU3RhY2tSZXN1bHRzKSB7XG4gICAgICBwYXJzZWRTdGFja1Jlc3VsdHMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZWRTdGFja1Jlc3VsdHNbc3RhY2tLZXldO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgYWNjW3Jlc3VsdFswXV0gPSByZXN1bHRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcnNlZFN0YWNrID0gc3RhY2tQYXJzZXIoc3RhY2tLZXkpO1xuXG4gICAgICBmb3IgKGxldCBpID0gcGFyc2VkU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgc3RhY2tGcmFtZSA9IHBhcnNlZFN0YWNrW2ldO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHN0YWNrRnJhbWU/LmZpbGVuYW1lO1xuICAgICAgICBjb25zdCBkZWJ1Z0lkID0gZGVidWdJZE1hcFtzdGFja0tleV07XG5cbiAgICAgICAgaWYgKGZpbGVuYW1lICYmIGRlYnVnSWQpIHtcbiAgICAgICAgICBhY2NbZmlsZW5hbWVdID0gZGVidWdJZDtcbiAgICAgICAgICBwYXJzZWRTdGFja1Jlc3VsdHNbc3RhY2tLZXldID0gW2ZpbGVuYW1lLCBkZWJ1Z0lkXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBkZWJ1ZyBpbWFnZXMgZm9yIHRoZSBnaXZlbiByZXNvdXJjZXMuXG4gKi9cbmZ1bmN0aW9uIGdldERlYnVnSW1hZ2VzRm9yUmVzb3VyY2VzKFxuICBzdGFja1BhcnNlcixcbiAgcmVzb3VyY2VfcGF0aHMsXG4pIHtcbiAgY29uc3QgZmlsZW5hbWVEZWJ1Z0lkTWFwID0gZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAoc3RhY2tQYXJzZXIpO1xuXG4gIGlmICghZmlsZW5hbWVEZWJ1Z0lkTWFwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgaW1hZ2VzID0gW107XG4gIGZvciAoY29uc3QgcGF0aCBvZiByZXNvdXJjZV9wYXRocykge1xuICAgIGlmIChwYXRoICYmIGZpbGVuYW1lRGVidWdJZE1hcFtwYXRoXSkge1xuICAgICAgaW1hZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiAnc291cmNlbWFwJyxcbiAgICAgICAgY29kZV9maWxlOiBwYXRoLFxuICAgICAgICBkZWJ1Z19pZDogZmlsZW5hbWVEZWJ1Z0lkTWFwW3BhdGhdICxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbWFnZXM7XG59XG5cbmV4cG9ydHMuZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMgPSBnZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcztcbmV4cG9ydHMuZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAgPSBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWlkcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-ids.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/debug-logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst CONSOLE_LEVELS = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] ;\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods\n\n = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = worldwide.GLOBAL_OBJ.console ;\n  const wrappedFuncs = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) ;\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level] ;\n    console[level] = originalConsoleMethod ;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] ;\n    });\n  }\n}\n\nfunction enable() {\n  _getLoggerSettings().enabled = true;\n}\n\nfunction disable() {\n  _getLoggerSettings().enabled = false;\n}\n\nfunction isEnabled() {\n  return _getLoggerSettings().enabled;\n}\n\nfunction log(...args) {\n  _maybeLog('log', ...args);\n}\n\nfunction warn(...args) {\n  _maybeLog('warn', ...args);\n}\n\nfunction error(...args) {\n  _maybeLog('error', ...args);\n}\n\nfunction _maybeLog(level, ...args) {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      worldwide.GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\n\nfunction _getLoggerSettings() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return { enabled: false };\n  }\n\n  return carrier.getGlobalSingleton('loggerSettings', () => ({ enabled: false }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nconst debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n} ;\n\nexports.CONSOLE_LEVELS = CONSOLE_LEVELS;\nexports.consoleSandbox = consoleSandbox;\nexports.debug = debug;\nexports.originalConsoleMethods = originalConsoleMethods;\n//# sourceMappingURL=debug-logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZGVidWctbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFlO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDRGQUFtQjtBQUM5QyxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2Q0FBNkMsT0FBTyxHQUFHLE1BQU07QUFDN0QsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQSwrREFBK0QsZ0JBQWdCO0FBQy9FOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9kZWJ1Zy1sb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vd29ybGR3aWRlLmpzJyk7XG5cbmNvbnN0IENPTlNPTEVfTEVWRUxTID0gW1xuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvZycsXG4gICdhc3NlcnQnLFxuICAndHJhY2UnLFxuXSA7XG5cbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xuY29uc3QgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcblxuLyoqIFRoaXMgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9uLiAqL1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kc1xuXG4gPSB7fTtcblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlIHNlbnRyeSBjb25zb2xlIGluc3RydW1lbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gYWdhaW5zdCB0aGUgb3JpZ2luYWwgYGNvbnNvbGVgIG1lc3NhZ2VzXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIHdvcmxkd2lkZS5HTE9CQUxfT0JKKSkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9XG5cbiAgY29uc3QgY29uc29sZSA9IHdvcmxkd2lkZS5HTE9CQUxfT0JKLmNvbnNvbGUgO1xuICBjb25zdCB3cmFwcGVkRnVuY3MgPSB7fTtcblxuICBjb25zdCB3cmFwcGVkTGV2ZWxzID0gT2JqZWN0LmtleXMob3JpZ2luYWxDb25zb2xlTWV0aG9kcykgO1xuXG4gIC8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG4gIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF07XG4gICAgd3JhcHBlZEZ1bmNzW2xldmVsXSA9IGNvbnNvbGVbbGV2ZWxdIDtcbiAgICBjb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZCA7XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gUmV2ZXJ0IHJlc3RvcmF0aW9uIHRvIHdyYXBwZWQgc3RhdGVcbiAgICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgICAgY29uc29sZVtsZXZlbF0gPSB3cmFwcGVkRnVuY3NbbGV2ZWxdIDtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmFibGUoKSB7XG4gIF9nZXRMb2dnZXJTZXR0aW5ncygpLmVuYWJsZWQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBfZ2V0TG9nZ2VyU2V0dGluZ3MoKS5lbmFibGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIF9nZXRMb2dnZXJTZXR0aW5ncygpLmVuYWJsZWQ7XG59XG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG4gIF9tYXliZUxvZygnbG9nJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHdhcm4oLi4uYXJncykge1xuICBfbWF5YmVMb2coJ3dhcm4nLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gZXJyb3IoLi4uYXJncykge1xuICBfbWF5YmVMb2coJ2Vycm9yJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIF9tYXliZUxvZyhsZXZlbCwgLi4uYXJncykge1xuICBpZiAoIWRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNFbmFibGVkKCkpIHtcbiAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICB3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlW2xldmVsXShgJHtQUkVGSVh9WyR7bGV2ZWx9XTpgLCAuLi5hcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0TG9nZ2VyU2V0dGluZ3MoKSB7XG4gIGlmICghZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgIHJldHVybiB7IGVuYWJsZWQ6IGZhbHNlIH07XG4gIH1cblxuICByZXR1cm4gY2Fycmllci5nZXRHbG9iYWxTaW5nbGV0b24oJ2xvZ2dlclNldHRpbmdzJywgKCkgPT4gKHsgZW5hYmxlZDogZmFsc2UgfSkpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBsb2dnZXIgc2luZ2xldG9uIHdoaWNoIGVpdGhlciBsb2dzIHRoaW5ncyBvciBuby1vcHMgaWYgbG9nZ2luZyBpcyBub3QgZW5hYmxlZC5cbiAqL1xuY29uc3QgZGVidWcgPSB7XG4gIC8qKiBFbmFibGUgbG9nZ2luZy4gKi9cbiAgZW5hYmxlLFxuICAvKiogRGlzYWJsZSBsb2dnaW5nLiAqL1xuICBkaXNhYmxlLFxuICAvKiogQ2hlY2sgaWYgbG9nZ2luZyBpcyBlbmFibGVkLiAqL1xuICBpc0VuYWJsZWQsXG4gIC8qKiBMb2cgYSBtZXNzYWdlLiAqL1xuICBsb2csXG4gIC8qKiBMb2cgYSB3YXJuaW5nLiAqL1xuICB3YXJuLFxuICAvKiogTG9nIGFuIGVycm9yLiAqL1xuICBlcnJvcixcbn0gO1xuXG5leHBvcnRzLkNPTlNPTEVfTEVWRUxTID0gQ09OU09MRV9MRVZFTFM7XG5leHBvcnRzLmNvbnNvbGVTYW5kYm94ID0gY29uc29sZVNhbmRib3g7XG5leHBvcnRzLmRlYnVnID0gZGVidWc7XG5leHBvcnRzLm9yaWdpbmFsQ29uc29sZU1ldGhvZHMgPSBvcmlnaW5hbENvbnNvbGVNZXRob2RzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctbG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/dsn.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\n\n/** Regular expression used to extract org ID from a DSN host. */\nconst ORG_ID_REGEX = /^o(\\d+)\\./;\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    debugLogger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!debugBuild.DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      debugLogger.debug.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    debugLogger.debug.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    debugLogger.debug.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    debugLogger.debug.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Extract the org ID from a DSN host.\n *\n * @param host The host from a DSN\n * @returns The org ID if found, undefined otherwise\n */\nfunction extractOrgIdFromDsnHost(host) {\n  const match = host.match(ORG_ID_REGEX);\n\n  return match?.[1];\n}\n\n/**\n *  Returns the organization ID of the client.\n *\n *  The organization ID is extracted from the DSN. If the client options include a `orgId`, this will always take precedence.\n */\nfunction extractOrgIdFromClient(client) {\n  const options = client.getOptions();\n\n  const { host } = client.getDsn() || {};\n\n  let org_id;\n\n  if (options.orgId) {\n    org_id = String(options.orgId);\n  } else if (host) {\n    org_id = extractOrgIdFromDsnHost(host);\n  }\n\n  return org_id;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n\nexports.dsnFromString = dsnFromString;\nexports.dsnToString = dsnToString;\nexports.extractOrgIdFromClient = extractOrgIdFromClient;\nexports.extractOrgIdFromDsnHost = extractOrgIdFromDsnHost;\nexports.makeDsn = makeDsn;\n//# sourceMappingURL=dsn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/env.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/env.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `debug` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nfunction getSDKSource() {\n  // This comment is used to identify this line in the CDN bundle build step and replace this with \"return 'cdn';\"\n  /* __SENTRY_SDK_SOURCE__ */ return 'npm';\n}\n\nexports.getSDKSource = getSDKSource;\nexports.isBrowserBundle = isBrowserBundle;\n//# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlIQUFpSDtBQUNqSDtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQix1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2Vudi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBkZWJ1Z2AgYW5kIHByZXZlbnRpbmcgbm9kZS1yZWxhdGVkIGNvZGUgZnJvbSBhcHBlYXJpbmcgaW4gYnJvd3NlciBidW5kbGVzLlxuICpcbiAqIEF0dGVudGlvbjpcbiAqIFRoaXMgZmlsZSBzaG91bGQgbm90IGJlIHVzZWQgdG8gZGVmaW5lIGNvbnN0YW50cy9mbGFncyB0aGF0IGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIGZvciB0cmVlLXNoYWtpbmcgY29uZHVjdGVkIGJ5XG4gKiB1c2Vycy4gVGhlc2UgZmxhZ3Mgc2hvdWxkIGxpdmUgaW4gdGhlaXIgcmVzcGVjdGl2ZSBwYWNrYWdlcywgYXMgd2UgaWRlbnRpZmllZCB1c2VyIHRvb2xpbmcgKHNwZWNpZmljYWxseSB3ZWJwYWNrKVxuICogaGF2aW5nIGlzc3VlcyB0cmVlLXNoYWtpbmcgdGhlc2UgY29uc3RhbnRzIGFjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMuXG4gKiBBbiBleGFtcGxlIGZvciB0aGlzIGlzIHRoZSBfX1NFTlRSWV9ERUJVR19fIGNvbnN0YW50LiBJdCBpcyBkZWNsYXJlZCBpbiBlYWNoIHBhY2thZ2UgaW5kaXZpZHVhbGx5IGJlY2F1c2Ugd2Ugd2FudFxuICogdXNlcnMgdG8gYmUgYWJsZSB0byBzaGFrZSBhd2F5IGV4cHJlc3Npb25zIHRoYXQgaXQgZ3VhcmRzLlxuICovXG5cbi8qKlxuICogRmlndXJlcyBvdXQgaWYgd2UncmUgYnVpbGRpbmcgYSBicm93c2VyIGJ1bmRsZS5cbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSBicm93c2VyIGJ1bmRsZSBidWlsZC5cbiAqL1xuZnVuY3Rpb24gaXNCcm93c2VyQnVuZGxlKCkge1xuICByZXR1cm4gdHlwZW9mIF9fU0VOVFJZX0JST1dTRVJfQlVORExFX18gIT09ICd1bmRlZmluZWQnICYmICEhX19TRU5UUllfQlJPV1NFUl9CVU5ETEVfXztcbn1cblxuLyoqXG4gKiBHZXQgc291cmNlIG9mIFNESy5cbiAqL1xuZnVuY3Rpb24gZ2V0U0RLU291cmNlKCkge1xuICAvLyBUaGlzIGNvbW1lbnQgaXMgdXNlZCB0byBpZGVudGlmeSB0aGlzIGxpbmUgaW4gdGhlIENETiBidW5kbGUgYnVpbGQgc3RlcCBhbmQgcmVwbGFjZSB0aGlzIHdpdGggXCJyZXR1cm4gJ2Nkbic7XCJcbiAgLyogX19TRU5UUllfU0RLX1NPVVJDRV9fICovIHJldHVybiAnbnBtJztcbn1cblxuZXhwb3J0cy5nZXRTREtTb3VyY2UgPSBnZXRTREtTb3VyY2U7XG5leHBvcnRzLmlzQnJvd3NlckJ1bmRsZSA9IGlzQnJvd3NlckJ1bmRsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/env.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/envelope.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst dsn = __webpack_require__(/*! ./dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items] ;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] ;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(\n  envelope,\n  callback,\n) {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  const carrier$1 = carrier.getSentryCarrier(worldwide.GLOBAL_OBJ);\n  return carrier$1.encodePolyfill ? carrier$1.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  const carrier$1 = carrier.getSentryCarrier(worldwide.GLOBAL_OBJ);\n  return carrier$1.decodePolyfill ? carrier$1.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize.normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) ;\n  }\n\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(\n  event,\n  sdkInfo,\n  tunnel,\n  dsn$1,\n) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id ,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn$1 && { dsn: dsn.dsnToString(dsn$1) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n\nexports.addItemToEnvelope = addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;\nexports.createEnvelope = createEnvelope;\nexports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = parseEnvelope;\nexports.serializeEnvelope = serializeEnvelope;\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/error.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/error.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * An error emitted by Sentry SDKs and related utilities.\n * @deprecated This class is no longer used and will be removed in a future version. Use `Error` instead.\n */\nclass SentryError extends Error {\n\n   constructor(\n     message,\n    logLevel = 'warn',\n  ) {\n    super(message);this.message = message;\n    this.logLevel = logLevel;\n  }\n}\n\nexports.SentryError = SentryError;\n//# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy5cbiAqIEBkZXByZWNhdGVkIFRoaXMgY2xhc3MgaXMgbm8gbG9uZ2VyIHVzZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBVc2UgYEVycm9yYCBpbnN0ZWFkLlxuICovXG5jbGFzcyBTZW50cnlFcnJvciBleHRlbmRzIEVycm9yIHtcblxuICAgY29uc3RydWN0b3IoXG4gICAgIG1lc3NhZ2UsXG4gICAgbG9nTGV2ZWwgPSAnd2FybicsXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5RXJyb3IgPSBTZW50cnlFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventUtils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/eventUtils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nfunction getPossibleEventMessages(event) {\n  const possibleMessages = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n\nexports.getPossibleEventMessages = getPossibleEventMessages;\n//# sourceMappingURL=eventUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZXZlbnRVdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUJBQW1CLElBQUksb0JBQW9CO0FBQzVFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZXZlbnRVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHBvc3NpYmxlIGV2ZW50IG1lc3NhZ2VzIGZyb20gYSBTZW50cnkgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyhldmVudCkge1xuICBjb25zdCBwb3NzaWJsZU1lc3NhZ2VzID0gW107XG5cbiAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICBwb3NzaWJsZU1lc3NhZ2VzLnB1c2goZXZlbnQubWVzc2FnZSk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVHJ5IGNhdGNoaW5nIHRvIHNhdmUgYnVuZGxlIHNpemVcbiAgICBjb25zdCBsYXN0RXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1tldmVudC5leGNlcHRpb24udmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0RXhjZXB0aW9uPy52YWx1ZSkge1xuICAgICAgcG9zc2libGVNZXNzYWdlcy5wdXNoKGxhc3RFeGNlcHRpb24udmFsdWUpO1xuICAgICAgaWYgKGxhc3RFeGNlcHRpb24udHlwZSkge1xuICAgICAgICBwb3NzaWJsZU1lc3NhZ2VzLnB1c2goYCR7bGFzdEV4Y2VwdGlvbi50eXBlfTogJHtsYXN0RXhjZXB0aW9uLnZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBoZXJlXG4gIH1cblxuICByZXR1cm4gcG9zc2libGVNZXNzYWdlcztcbn1cblxuZXhwb3J0cy5nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMgPSBnZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudFV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = object.extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (is.isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client,\n  mechanism,\n  exception,\n  hint,\n) {\n  if (is.isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if (is.isPlainObject(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: normalize.normalizeToSize(exception , normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception );\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nfunction eventFromUnknownInput(\n  client,\n  stackParser,\n  exception,\n  hint,\n) {\n  const providedMechanism = hint?.data && (hint.data ).mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  misc.addExceptionTypeValue(event, undefined, undefined);\n  misc.addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(\n  stackParser,\n  message,\n  level = 'info',\n  hint,\n  attachStacktrace,\n) {\n  const event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      misc.addExceptionMechanism(event, { synthetic: true });\n    }\n  }\n\n  if (is.isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\nexports.eventFromMessage = eventFromMessage;\nexports.eventFromUnknownInput = eventFromUnknownInput;\nexports.exceptionFromError = exceptionFromError;\nexports.parseStackFrames = parseStackFrames;\n//# sourceMappingURL=eventbuilder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/eventbuilder.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/featureFlags.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/featureFlags.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Ordered LRU cache for storing feature flags in the scope context. The name\n * of each flag in the buffer is unique, and the output of getAll() is ordered\n * from oldest to newest.\n */\n\n/**\n * Max size of the LRU flag buffer stored in Sentry scope and event contexts.\n */\nconst _INTERNAL_FLAG_BUFFER_SIZE = 100;\n\n/**\n * Max number of flag evaluations to record per span.\n */\nconst _INTERNAL_MAX_FLAGS_PER_SPAN = 10;\n\nconst SPAN_FLAG_ATTRIBUTE_PREFIX = 'flag.evaluation.';\n\n/**\n * Copies feature flags that are in current scope context to the event context\n */\nfunction _INTERNAL_copyFlagsFromScopeToEvent(event) {\n  const scope = currentScopes.getCurrentScope();\n  const flagContext = scope.getScopeData().contexts.flags;\n  const flagBuffer = flagContext ? flagContext.values : [];\n\n  if (!flagBuffer.length) {\n    return event;\n  }\n\n  if (event.contexts === undefined) {\n    event.contexts = {};\n  }\n  event.contexts.flags = { values: [...flagBuffer] };\n  return event;\n}\n\n/**\n * Inserts a flag into the current scope's context while maintaining ordered LRU properties.\n * Not thread-safe. After inserting:\n * - The flag buffer is sorted in order of recency, with the newest evaluation at the end.\n * - The names in the buffer are always unique.\n * - The length of the buffer never exceeds `maxSize`.\n *\n * @param name     Name of the feature flag to insert.\n * @param value    Value of the feature flag.\n * @param maxSize  Max number of flags the buffer should store. Default value should always be used in production.\n */\nfunction _INTERNAL_insertFlagToScope(\n  name,\n  value,\n  maxSize = _INTERNAL_FLAG_BUFFER_SIZE,\n) {\n  const scopeContexts = currentScopes.getCurrentScope().getScopeData().contexts;\n  if (!scopeContexts.flags) {\n    scopeContexts.flags = { values: [] };\n  }\n  const flags = scopeContexts.flags.values ;\n  _INTERNAL_insertToFlagBuffer(flags, name, value, maxSize);\n}\n\n/**\n * Exported for tests only. Currently only accepts boolean values (otherwise no-op).\n * Inserts a flag into a FeatureFlag array while maintaining the following properties:\n * - Flags are sorted in order of recency, with the newest evaluation at the end.\n * - The flag names are always unique.\n * - The length of the array never exceeds `maxSize`.\n *\n * @param flags      The buffer to insert the flag into.\n * @param name       Name of the feature flag to insert.\n * @param value      Value of the feature flag.\n * @param maxSize    Max number of flags the buffer should store. Default value should always be used in production.\n */\nfunction _INTERNAL_insertToFlagBuffer(\n  flags,\n  name,\n  value,\n  maxSize,\n) {\n  if (typeof value !== 'boolean') {\n    return;\n  }\n\n  if (flags.length > maxSize) {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.error(`[Feature Flags] insertToFlagBuffer called on a buffer larger than maxSize=${maxSize}`);\n    return;\n  }\n\n  // Check if the flag is already in the buffer - O(n)\n  const index = flags.findIndex(f => f.flag === name);\n\n  if (index !== -1) {\n    // The flag was found, remove it from its current position - O(n)\n    flags.splice(index, 1);\n  }\n\n  if (flags.length === maxSize) {\n    // If at capacity, pop the earliest flag - O(n)\n    flags.shift();\n  }\n\n  // Push the flag to the end - O(1)\n  flags.push({\n    flag: name,\n    result: value,\n  });\n}\n\n/**\n * Records a feature flag evaluation for the active span. This is a no-op for non-boolean values.\n * The flag and its value is stored in span attributes with the `flag.evaluation` prefix. Once the\n * unique flags for a span reaches maxFlagsPerSpan, subsequent flags are dropped.\n *\n * @param name             Name of the feature flag.\n * @param value            Value of the feature flag. Non-boolean values are ignored.\n * @param maxFlagsPerSpan  Max number of flags a buffer should store. Default value should always be used in production.\n */\nfunction _INTERNAL_addFeatureFlagToActiveSpan(\n  name,\n  value,\n  maxFlagsPerSpan = _INTERNAL_MAX_FLAGS_PER_SPAN,\n) {\n  if (typeof value !== 'boolean') {\n    return;\n  }\n\n  const span = spanUtils.getActiveSpan();\n  if (!span) {\n    return;\n  }\n\n  const attributes = spanUtils.spanToJSON(span).data;\n\n  // If the flag already exists, always update it\n  if (`${SPAN_FLAG_ATTRIBUTE_PREFIX}${name}` in attributes) {\n    span.setAttribute(`${SPAN_FLAG_ATTRIBUTE_PREFIX}${name}`, value);\n    return;\n  }\n\n  // Else, add the flag to the span if we have not reached the max number of flags\n  const numOfAddedFlags = Object.keys(attributes).filter(key => key.startsWith(SPAN_FLAG_ATTRIBUTE_PREFIX)).length;\n  if (numOfAddedFlags < maxFlagsPerSpan) {\n    span.setAttribute(`${SPAN_FLAG_ATTRIBUTE_PREFIX}${name}`, value);\n  }\n}\n\nexports._INTERNAL_FLAG_BUFFER_SIZE = _INTERNAL_FLAG_BUFFER_SIZE;\nexports._INTERNAL_MAX_FLAGS_PER_SPAN = _INTERNAL_MAX_FLAGS_PER_SPAN;\nexports._INTERNAL_addFeatureFlagToActiveSpan = _INTERNAL_addFeatureFlagToActiveSpan;\nexports._INTERNAL_copyFlagsFromScopeToEvent = _INTERNAL_copyFlagsFromScopeToEvent;\nexports._INTERNAL_insertFlagToScope = _INTERNAL_insertFlagToScope;\nexports._INTERNAL_insertToFlagBuffer = _INTERNAL_insertToFlagBuffer;\n//# sourceMappingURL=featureFlags.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/featureFlags.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/flushIfServerless.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/flushIfServerless.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst vercelWaitUntil = __webpack_require__(/*! ./vercelWaitUntil.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercelWaitUntil.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nasync function flushWithTimeout(timeout) {\n  try {\n    debugLogger.debug.log('Flushing events...');\n    await exports$1.flush(timeout);\n    debugLogger.debug.log('Done flushing events');\n  } catch (e) {\n    debugLogger.debug.log('Error while flushing events:\\n', e);\n  }\n}\n\n/**\n *  Flushes the event queue with a timeout in serverless environments to ensure that events are sent to Sentry before the\n *  serverless function execution ends.\n *\n * The function is async, but in environments that support a `waitUntil` mechanism, it will run synchronously.\n *\n * This function is aware of the following serverless platforms:\n * - Cloudflare: If a Cloudflare context is provided, it will use `ctx.waitUntil()` to flush events (keeps the `this` context of `ctx`).\n *               If a `cloudflareWaitUntil` function is provided, it will use that to flush events (looses the `this` context of `ctx`).\n * - Vercel: It detects the Vercel environment and uses Vercel's `waitUntil` function.\n * - Other Serverless (AWS Lambda, Google Cloud, etc.): It detects the environment via environment variables\n *   and uses a regular `await flush()`.\n *\n *  @internal This function is supposed for internal Sentry SDK usage only.\n *  @hidden\n */\nasync function flushIfServerless(\n  params\n\n = {},\n) {\n  const { timeout = 2000 } = params;\n\n  if ('cloudflareWaitUntil' in params && typeof params?.cloudflareWaitUntil === 'function') {\n    params.cloudflareWaitUntil(flushWithTimeout(timeout));\n    return;\n  }\n\n  if ('cloudflareCtx' in params && typeof params.cloudflareCtx?.waitUntil === 'function') {\n    params.cloudflareCtx.waitUntil(flushWithTimeout(timeout));\n    return;\n  }\n\n  // @ts-expect-error This is not typed\n  if (worldwide.GLOBAL_OBJ[Symbol.for('@vercel/request-context')]) {\n    // Vercel has a waitUntil equivalent that works without execution context\n    vercelWaitUntil.vercelWaitUntil(flushWithTimeout(timeout));\n    return;\n  }\n\n  if (typeof process === 'undefined') {\n    return;\n  }\n\n  const isServerless =\n    !!process.env.FUNCTIONS_WORKER_RUNTIME || // Azure Functions\n    !!process.env.LAMBDA_TASK_ROOT || // AWS Lambda\n    !!process.env.K_SERVICE || // Google Cloud Run\n    !!process.env.CF_PAGES || // Cloudflare Pages\n    !!process.env.VERCEL ||\n    !!process.env.NETLIFY;\n\n  if (isServerless) {\n    // Use regular flush for environments without a generic waitUntil mechanism\n    await flushWithTimeout(timeout);\n  }\n}\n\nexports.flushIfServerless = flushIfServerless;\n//# sourceMappingURL=flushIfServerless.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZmx1c2hJZlNlcnZlcmxlc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsb0ZBQWU7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsbUdBQW1CO0FBQy9DLHdCQUF3QixtQkFBTyxDQUFDLHlHQUFzQjtBQUN0RCxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQSxVQUFVLGlCQUFpQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvZmx1c2hJZlNlcnZlcmxlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4uL2V4cG9ydHMuanMnKTtcbmNvbnN0IGRlYnVnTG9nZ2VyID0gcmVxdWlyZSgnLi9kZWJ1Zy1sb2dnZXIuanMnKTtcbmNvbnN0IHZlcmNlbFdhaXRVbnRpbCA9IHJlcXVpcmUoJy4vdmVyY2VsV2FpdFVudGlsLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG5hc3luYyBmdW5jdGlvbiBmbHVzaFdpdGhUaW1lb3V0KHRpbWVvdXQpIHtcbiAgdHJ5IHtcbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGV4cG9ydHMkMS5mbHVzaCh0aW1lb3V0KTtcbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coJ0RvbmUgZmx1c2hpbmcgZXZlbnRzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1Zy5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG4vKipcbiAqICBGbHVzaGVzIHRoZSBldmVudCBxdWV1ZSB3aXRoIGEgdGltZW91dCBpbiBzZXJ2ZXJsZXNzIGVudmlyb25tZW50cyB0byBlbnN1cmUgdGhhdCBldmVudHMgYXJlIHNlbnQgdG8gU2VudHJ5IGJlZm9yZSB0aGVcbiAqICBzZXJ2ZXJsZXNzIGZ1bmN0aW9uIGV4ZWN1dGlvbiBlbmRzLlxuICpcbiAqIFRoZSBmdW5jdGlvbiBpcyBhc3luYywgYnV0IGluIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgYSBgd2FpdFVudGlsYCBtZWNoYW5pc20sIGl0IHdpbGwgcnVuIHN5bmNocm9ub3VzbHkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhd2FyZSBvZiB0aGUgZm9sbG93aW5nIHNlcnZlcmxlc3MgcGxhdGZvcm1zOlxuICogLSBDbG91ZGZsYXJlOiBJZiBhIENsb3VkZmxhcmUgY29udGV4dCBpcyBwcm92aWRlZCwgaXQgd2lsbCB1c2UgYGN0eC53YWl0VW50aWwoKWAgdG8gZmx1c2ggZXZlbnRzIChrZWVwcyB0aGUgYHRoaXNgIGNvbnRleHQgb2YgYGN0eGApLlxuICogICAgICAgICAgICAgICBJZiBhIGBjbG91ZGZsYXJlV2FpdFVudGlsYCBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaXQgd2lsbCB1c2UgdGhhdCB0byBmbHVzaCBldmVudHMgKGxvb3NlcyB0aGUgYHRoaXNgIGNvbnRleHQgb2YgYGN0eGApLlxuICogLSBWZXJjZWw6IEl0IGRldGVjdHMgdGhlIFZlcmNlbCBlbnZpcm9ubWVudCBhbmQgdXNlcyBWZXJjZWwncyBgd2FpdFVudGlsYCBmdW5jdGlvbi5cbiAqIC0gT3RoZXIgU2VydmVybGVzcyAoQVdTIExhbWJkYSwgR29vZ2xlIENsb3VkLCBldGMuKTogSXQgZGV0ZWN0cyB0aGUgZW52aXJvbm1lbnQgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICogICBhbmQgdXNlcyBhIHJlZ3VsYXIgYGF3YWl0IGZsdXNoKClgLlxuICpcbiAqICBAaW50ZXJuYWwgVGhpcyBmdW5jdGlvbiBpcyBzdXBwb3NlZCBmb3IgaW50ZXJuYWwgU2VudHJ5IFNESyB1c2FnZSBvbmx5LlxuICogIEBoaWRkZW5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmx1c2hJZlNlcnZlcmxlc3MoXG4gIHBhcmFtc1xuXG4gPSB7fSxcbikge1xuICBjb25zdCB7IHRpbWVvdXQgPSAyMDAwIH0gPSBwYXJhbXM7XG5cbiAgaWYgKCdjbG91ZGZsYXJlV2FpdFVudGlsJyBpbiBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcz8uY2xvdWRmbGFyZVdhaXRVbnRpbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBhcmFtcy5jbG91ZGZsYXJlV2FpdFVudGlsKGZsdXNoV2l0aFRpbWVvdXQodGltZW91dCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICgnY2xvdWRmbGFyZUN0eCcgaW4gcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMuY2xvdWRmbGFyZUN0eD8ud2FpdFVudGlsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcGFyYW1zLmNsb3VkZmxhcmVDdHgud2FpdFVudGlsKGZsdXNoV2l0aFRpbWVvdXQodGltZW91dCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVGhpcyBpcyBub3QgdHlwZWRcbiAgaWYgKHdvcmxkd2lkZS5HTE9CQUxfT0JKW1N5bWJvbC5mb3IoJ0B2ZXJjZWwvcmVxdWVzdC1jb250ZXh0JyldKSB7XG4gICAgLy8gVmVyY2VsIGhhcyBhIHdhaXRVbnRpbCBlcXVpdmFsZW50IHRoYXQgd29ya3Mgd2l0aG91dCBleGVjdXRpb24gY29udGV4dFxuICAgIHZlcmNlbFdhaXRVbnRpbC52ZXJjZWxXYWl0VW50aWwoZmx1c2hXaXRoVGltZW91dCh0aW1lb3V0KSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGlzU2VydmVybGVzcyA9XG4gICAgISFwcm9jZXNzLmVudi5GVU5DVElPTlNfV09SS0VSX1JVTlRJTUUgfHwgLy8gQXp1cmUgRnVuY3Rpb25zXG4gICAgISFwcm9jZXNzLmVudi5MQU1CREFfVEFTS19ST09UIHx8IC8vIEFXUyBMYW1iZGFcbiAgICAhIXByb2Nlc3MuZW52LktfU0VSVklDRSB8fCAvLyBHb29nbGUgQ2xvdWQgUnVuXG4gICAgISFwcm9jZXNzLmVudi5DRl9QQUdFUyB8fCAvLyBDbG91ZGZsYXJlIFBhZ2VzXG4gICAgISFwcm9jZXNzLmVudi5WRVJDRUwgfHxcbiAgICAhIXByb2Nlc3MuZW52Lk5FVExJRlk7XG5cbiAgaWYgKGlzU2VydmVybGVzcykge1xuICAgIC8vIFVzZSByZWd1bGFyIGZsdXNoIGZvciBlbnZpcm9ubWVudHMgd2l0aG91dCBhIGdlbmVyaWMgd2FpdFVudGlsIG1lY2hhbmlzbVxuICAgIGF3YWl0IGZsdXNoV2l0aFRpbWVvdXQodGltZW91dCk7XG4gIH1cbn1cblxuZXhwb3J0cy5mbHVzaElmU2VydmVybGVzcyA9IGZsdXNoSWZTZXJ2ZXJsZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmx1c2hJZlNlcnZlcmxlc3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/flushIfServerless.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * OpenAI Integration Telemetry Attributes\n * Based on OpenTelemetry Semantic Conventions for Generative AI\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/\n */\n\n// =============================================================================\n// OPENTELEMETRY SEMANTIC CONVENTIONS FOR GENAI\n// =============================================================================\n\n/**\n * The Generative AI system being used\n * For OpenAI, this should always be \"openai\"\n */\nconst GEN_AI_SYSTEM_ATTRIBUTE = 'gen_ai.system';\n\n/**\n * The name of the model as requested\n * Examples: \"gpt-4\", \"gpt-3.5-turbo\"\n */\nconst GEN_AI_REQUEST_MODEL_ATTRIBUTE = 'gen_ai.request.model';\n\n/**\n * Whether streaming was enabled for the request\n */\nconst GEN_AI_REQUEST_STREAM_ATTRIBUTE = 'gen_ai.request.stream';\n\n/**\n * The temperature setting for the model request\n */\nconst GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = 'gen_ai.request.temperature';\n\n/**\n * The frequency penalty setting for the model request\n */\nconst GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = 'gen_ai.request.frequency_penalty';\n\n/**\n * The presence penalty setting for the model request\n */\nconst GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = 'gen_ai.request.presence_penalty';\n\n/**\n * The top_p (nucleus sampling) setting for the model request\n */\nconst GEN_AI_REQUEST_TOP_P_ATTRIBUTE = 'gen_ai.request.top_p';\n\n/**\n * Array of reasons why the model stopped generating tokens\n */\nconst GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = 'gen_ai.response.finish_reasons';\n\n/**\n * The name of the model that generated the response\n */\nconst GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * The unique identifier for the response\n */\nconst GEN_AI_RESPONSE_ID_ATTRIBUTE = 'gen_ai.response.id';\n\n/**\n * The number of tokens used in the prompt\n */\nconst GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * The number of tokens used in the response\n */\nconst GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n/**\n * The total number of tokens used (input + output)\n */\nconst GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE = 'gen_ai.usage.total_tokens';\n\n/**\n * The operation name\n */\nconst GEN_AI_OPERATION_NAME_ATTRIBUTE = 'gen_ai.operation.name';\n\n/**\n * The prompt messages\n * Only recorded when recordInputs is enabled\n */\nconst GEN_AI_REQUEST_MESSAGES_ATTRIBUTE = 'gen_ai.request.messages';\n\n/**\n * The response text\n * Only recorded when recordOutputs is enabled\n */\nconst GEN_AI_RESPONSE_TEXT_ATTRIBUTE = 'gen_ai.response.text';\n\n/**\n * The available tools from incoming request\n * Only recorded when recordInputs is enabled\n */\nconst GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE = 'gen_ai.request.available_tools';\n\n/**\n * Whether the response is a streaming response\n */\nconst GEN_AI_RESPONSE_STREAMING_ATTRIBUTE = 'gen_ai.response.streaming';\n\n/**\n * The tool calls from the response\n * Only recorded when recordOutputs is enabled\n */\nconst GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'gen_ai.response.tool_calls';\n\n// =============================================================================\n// OPENAI-SPECIFIC ATTRIBUTES\n// =============================================================================\n\n/**\n * The response ID from OpenAI\n */\nconst OPENAI_RESPONSE_ID_ATTRIBUTE = 'openai.response.id';\n\n/**\n * The response model from OpenAI\n */\nconst OPENAI_RESPONSE_MODEL_ATTRIBUTE = 'openai.response.model';\n\n/**\n * The response timestamp from OpenAI (ISO string)\n */\nconst OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'openai.response.timestamp';\n\n/**\n * The number of completion tokens used\n */\nconst OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'openai.usage.completion_tokens';\n\n/**\n * The number of prompt tokens used\n */\nconst OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'openai.usage.prompt_tokens';\n\n// =============================================================================\n// OPENAI OPERATIONS\n// =============================================================================\n\n/**\n * OpenAI API operations\n */\nconst OPENAI_OPERATIONS = {\n  CHAT: 'chat',\n  RESPONSES: 'responses',\n} ;\n\nexports.GEN_AI_OPERATION_NAME_ATTRIBUTE = GEN_AI_OPERATION_NAME_ATTRIBUTE;\nexports.GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE = GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE;\nexports.GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE;\nexports.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE = GEN_AI_REQUEST_MESSAGES_ATTRIBUTE;\nexports.GEN_AI_REQUEST_MODEL_ATTRIBUTE = GEN_AI_REQUEST_MODEL_ATTRIBUTE;\nexports.GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE;\nexports.GEN_AI_REQUEST_STREAM_ATTRIBUTE = GEN_AI_REQUEST_STREAM_ATTRIBUTE;\nexports.GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE;\nexports.GEN_AI_REQUEST_TOP_P_ATTRIBUTE = GEN_AI_REQUEST_TOP_P_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_ID_ATTRIBUTE = GEN_AI_RESPONSE_ID_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_MODEL_ATTRIBUTE = GEN_AI_RESPONSE_MODEL_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_STREAMING_ATTRIBUTE = GEN_AI_RESPONSE_STREAMING_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_TEXT_ATTRIBUTE = GEN_AI_RESPONSE_TEXT_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE;\nexports.GEN_AI_SYSTEM_ATTRIBUTE = GEN_AI_SYSTEM_ATTRIBUTE;\nexports.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE = GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE;\nexports.OPENAI_OPERATIONS = OPENAI_OPERATIONS;\nexports.OPENAI_RESPONSE_ID_ATTRIBUTE = OPENAI_RESPONSE_ID_ATTRIBUTE;\nexports.OPENAI_RESPONSE_MODEL_ATTRIBUTE = OPENAI_RESPONSE_MODEL_ATTRIBUTE;\nexports.OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE = OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE;\nexports.OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE;\nexports.OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE = OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE;\n//# sourceMappingURL=gen-ai-attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors\n\n(fn, onError, onFinally = () => {}) {\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(\n  value,\n  onError,\n  onFinally,\n) {\n  if (is.isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n\nexports.handleCallbackErrors = handleCallbackErrors;\n//# sourceMappingURL=handleCallbackErrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsV0FBVyxtQkFBTyxDQUFDLCtFQUFTOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9oYW5kbGVDYWxsYmFja0Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzLmpzJyk7XG5cbi8qKlxuICogV3JhcCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggZXJyb3IgaGFuZGxpbmcuXG4gKiBJZiBhbiBlcnJvciBpcyB0aHJvd24sIGl0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBgb25FcnJvcmAgY2FsbGJhY2sgYW5kIHJlLXRocm93bi5cbiAqXG4gKiBJZiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiBpcyBhIHByb21pc2UsIGl0IHdpbGwgYmUgaGFuZGxlZCB3aXRoIGBtYXliZUhhbmRsZVByb21pc2VSZWplY3Rpb25gLlxuICpcbiAqIElmIGFuIGBvbkZpbmFsbHlgIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB0aGlzIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGNhbGxiYWNrIGhhcyBmaW5pc2hlZFxuICogLSBzbyBpZiBpdCByZXR1cm5zIGEgcHJvbWlzZSwgb25jZSB0aGUgcHJvbWlzZSByZXNvbHZlZC9yZWplY3RlZCxcbiAqIGVsc2Ugb25jZSB0aGUgY2FsbGJhY2sgaGFzIGZpbmlzaGVkIGV4ZWN1dGluZy5cbiAqIFRoZSBgb25GaW5hbGx5YCBjYWxsYmFjayB3aWxsIF9hbHdheXNfIGJlIGNhbGxlZCwgbm8gbWF0dGVyIGlmIGFuIGVycm9yIHdhcyB0aHJvd24gb3Igbm90LlxuICovXG5mdW5jdGlvbiBoYW5kbGVDYWxsYmFja0Vycm9yc1xuXG4oZm4sIG9uRXJyb3IsIG9uRmluYWxseSA9ICgpID0+IHt9KSB7XG4gIGxldCBtYXliZVByb21pc2VSZXN1bHQ7XG4gIHRyeSB7XG4gICAgbWF5YmVQcm9taXNlUmVzdWx0ID0gZm4oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIG9uRXJyb3IoZSk7XG4gICAgb25GaW5hbGx5KCk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIHJldHVybiBtYXliZUhhbmRsZVByb21pc2VSZWplY3Rpb24obWF5YmVQcm9taXNlUmVzdWx0LCBvbkVycm9yLCBvbkZpbmFsbHkpO1xufVxuXG4vKipcbiAqIE1heWJlIGhhbmRsZSBhIHByb21pc2UgcmVqZWN0aW9uLlxuICogVGhpcyBleHBlY3RzIHRvIGJlIGdpdmVuIGEgdmFsdWUgdGhhdCBfbWF5XyBiZSBhIHByb21pc2UsIG9yIGFueSBvdGhlciB2YWx1ZS5cbiAqIElmIGl0IGlzIGEgcHJvbWlzZSwgYW5kIGl0IHJlamVjdHMsIGl0IHdpbGwgY2FsbCB0aGUgYG9uRXJyb3JgIGNhbGxiYWNrLlxuICogT3RoZXIgdGhhbiB0aGlzLCBpdCB3aWxsIGdlbmVyYWxseSByZXR1cm4gdGhlIGdpdmVuIHZhbHVlIGFzLWlzLlxuICovXG5mdW5jdGlvbiBtYXliZUhhbmRsZVByb21pc2VSZWplY3Rpb24oXG4gIHZhbHVlLFxuICBvbkVycm9yLFxuICBvbkZpbmFsbHksXG4pIHtcbiAgaWYgKGlzLmlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHRoZSBpc1RoZW5hYmxlIGNoZWNrIHJldHVybnMgdGhlIFwid3JvbmdcIiB0eXBlIGhlcmVcbiAgICByZXR1cm4gdmFsdWUudGhlbihcbiAgICAgIHJlcyA9PiB7XG4gICAgICAgIG9uRmluYWxseSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSxcbiAgICAgIGUgPT4ge1xuICAgICAgICBvbkVycm9yKGUpO1xuICAgICAgICBvbkZpbmFsbHkoKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIG9uRmluYWxseSgpO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydHMuaGFuZGxlQ2FsbGJhY2tFcnJvcnMgPSBoYW5kbGVDYWxsYmFja0Vycm9ycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZUNhbGxiYWNrRXJyb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nfunction hasSpansEnabled(\n  maybeOptions,\n) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || currentScopes.getClient()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n\nexports.hasSpansEnabled = hasSpansEnabled;\n//# sourceMappingURL=hasSpansEnabled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFzU3BhbnNFbmFibGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHNCQUFzQixtQkFBTyxDQUFDLGdHQUFxQjs7QUFFbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9oYXNTcGFuc0VuYWJsZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5cbi8vIFRyZWVzaGFrYWJsZSBndWFyZCB0byByZW1vdmUgYWxsIGNvZGUgcmVsYXRlZCB0byB0cmFjaW5nXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBzcGFuIHJlY29yZGluZyBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAqXG4gKiBTcGFucyBhcmUgcmVjb3JkZWQgd2hlbiBhdCBsZWFzdCBvbmUgb2YgYHRyYWNlc1NhbXBsZVJhdGVgIGFuZCBgdHJhY2VzU2FtcGxlcmBcbiAqIGlzIGRlZmluZWQgaW4gdGhlIFNESyBjb25maWcuIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgbWFrZSBhbnkgYXNzdW1wdGlvbiBhYm91dFxuICogc2FtcGxpbmcgZGVjaXNpb25zLCBpdCBvbmx5IGNoZWNrcyBpZiB0aGUgU0RLIGlzIGNvbmZpZ3VyZWQgdG8gcmVjb3JkIHNwYW5zLlxuICpcbiAqIEltcG9ydGFudDogVGhpcyBmdW5jdGlvbiBvbmx5IGRldGVybWluZXMgaWYgc3BhbiByZWNvcmRpbmcgaXMgZW5hYmxlZC4gVHJhY2VcbiAqIGNvbnRpbnVhdGlvbiBhbmQgcHJvcGFnYXRpb24gaXMgc2VwYXJhdGVseSBjb250cm9sbGVkIGFuZCBub3QgY292ZXJlZCBieSB0aGlzIGZ1bmN0aW9uLlxuICogSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAsIHRyYWNlcyBjYW4gc3RpbGwgYmUgcHJvcGFnYXRlZCAod2hpY2ggaXMgd2hhdFxuICogd2UgcmVmZXIgdG8gYnkgXCJUcmFjaW5nIHdpdGhvdXQgUGVyZm9ybWFuY2VcIilcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL3RlbGVtZXRyeS90cmFjZXMvdHJhY2luZy13aXRob3V0LXBlcmZvcm1hbmNlL1xuICpcbiAqIEBwYXJhbSBtYXliZU9wdGlvbnMgQW4gU0RLIG9wdGlvbnMgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLlxuICogSWYgdGhpcyBvcHRpb24gaXMgbm90IHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gd2lsbCB1c2UgdGhlIGN1cnJlbnQgY2xpZW50J3Mgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gaGFzU3BhbnNFbmFibGVkKFxuICBtYXliZU9wdGlvbnMsXG4pIHtcbiAgaWYgKHR5cGVvZiBfX1NFTlRSWV9UUkFDSU5HX18gPT09ICdib29sZWFuJyAmJiAhX19TRU5UUllfVFJBQ0lOR19fKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IG1heWJlT3B0aW9ucyB8fCBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCk7XG4gIHJldHVybiAoXG4gICAgISFvcHRpb25zICYmXG4gICAgLy8gTm90ZTogVGhpcyBjaGVjayBpcyBgIT0gbnVsbGAsIG1lYW5pbmcgXCJudWxsaXNoXCIuIGAwYCBpcyBub3QgXCJudWxsaXNoXCIsIGB1bmRlZmluZWRgIGFuZCBgbnVsbGAgYXJlLiAoVGhpcyBjb21tZW50IHdhcyBicm91Z2h0IHRvIHlvdSBieSAxNSBtaW51dGVzIG9mIHF1ZXN0aW9uaW5nIGxpZmUpXG4gICAgKG9wdGlvbnMudHJhY2VzU2FtcGxlUmF0ZSAhPSBudWxsIHx8ICEhb3B0aW9ucy50cmFjZXNTYW1wbGVyKVxuICApO1xufVxuXG5leHBvcnRzLmhhc1NwYW5zRW5hYmxlZCA9IGhhc1NwYW5zRW5hYmxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc1NwYW5zRW5hYmxlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasSpansEnabled.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/ipAddress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/ipAddress.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// By default, we want to infer the IP address, unless this is explicitly set to `null`\n// We do this after all other processing is done\n// If `ip_address` is explicitly set to `null` or a value, we leave it as is\n\n/**\n * @internal\n */\nfunction addAutoIpAddressToUser(objWithMaybeUser) {\n  if (objWithMaybeUser.user?.ip_address === undefined) {\n    objWithMaybeUser.user = {\n      ...objWithMaybeUser.user,\n      ip_address: '{{auto}}',\n    };\n  }\n}\n\n/**\n * @internal\n */\nfunction addAutoIpAddressToSession(session) {\n  if ('aggregates' in session) {\n    if (session.attrs?.['ip_address'] === undefined) {\n      session.attrs = {\n        ...session.attrs,\n        ip_address: '{{auto}}',\n      };\n    }\n  } else {\n    if (session.ipAddress === undefined) {\n      session.ipAddress = '{{auto}}';\n    }\n  }\n}\n\nexports.addAutoIpAddressToSession = addAutoIpAddressToSession;\nexports.addAutoIpAddressToUser = addAutoIpAddressToUser;\n//# sourceMappingURL=ipAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXBBZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE1BQU07QUFDN0I7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLDZCQUE2QixNQUFNO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9pcEFkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIEJ5IGRlZmF1bHQsIHdlIHdhbnQgdG8gaW5mZXIgdGhlIElQIGFkZHJlc3MsIHVubGVzcyB0aGlzIGlzIGV4cGxpY2l0bHkgc2V0IHRvIGBudWxsYFxuLy8gV2UgZG8gdGhpcyBhZnRlciBhbGwgb3RoZXIgcHJvY2Vzc2luZyBpcyBkb25lXG4vLyBJZiBgaXBfYWRkcmVzc2AgaXMgZXhwbGljaXRseSBzZXQgdG8gYG51bGxgIG9yIGEgdmFsdWUsIHdlIGxlYXZlIGl0IGFzIGlzXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFkZEF1dG9JcEFkZHJlc3NUb1VzZXIob2JqV2l0aE1heWJlVXNlcikge1xuICBpZiAob2JqV2l0aE1heWJlVXNlci51c2VyPy5pcF9hZGRyZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICBvYmpXaXRoTWF5YmVVc2VyLnVzZXIgPSB7XG4gICAgICAuLi5vYmpXaXRoTWF5YmVVc2VyLnVzZXIsXG4gICAgICBpcF9hZGRyZXNzOiAne3thdXRvfX0nLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYWRkQXV0b0lwQWRkcmVzc1RvU2Vzc2lvbihzZXNzaW9uKSB7XG4gIGlmICgnYWdncmVnYXRlcycgaW4gc2Vzc2lvbikge1xuICAgIGlmIChzZXNzaW9uLmF0dHJzPy5bJ2lwX2FkZHJlc3MnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXNzaW9uLmF0dHJzID0ge1xuICAgICAgICAuLi5zZXNzaW9uLmF0dHJzLFxuICAgICAgICBpcF9hZGRyZXNzOiAne3thdXRvfX0nLFxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNlc3Npb24uaXBBZGRyZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlc3Npb24uaXBBZGRyZXNzID0gJ3t7YXV0b319JztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5hZGRBdXRvSXBBZGRyZXNzVG9TZXNzaW9uID0gYWRkQXV0b0lwQWRkcmVzc1RvU2Vzc2lvbjtcbmV4cG9ydHMuYWRkQXV0b0lwQWRkcmVzc1RvVXNlciA9IGFkZEF1dG9JcEFkZHJlc3NUb1VzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcEFkZHJlc3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/ipAddress.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/is.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isParameterizedString(wat) {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isVueViewModel(wat) {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat ).__isVue || (wat )._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nfunction isRequest(request) {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n\nexports.isDOMError = isDOMError;\nexports.isDOMException = isDOMException;\nexports.isElement = isElement;\nexports.isError = isError;\nexports.isErrorEvent = isErrorEvent;\nexports.isEvent = isEvent;\nexports.isInstanceOf = isInstanceOf;\nexports.isParameterizedString = isParameterizedString;\nexports.isPlainObject = isPlainObject;\nexports.isPrimitive = isPrimitive;\nexports.isRegExp = isRegExp;\nexports.isRequest = isRequest;\nexports.isString = isString;\nexports.isSyntheticEvent = isSyntheticEvent;\nexports.isThenable = isThenable;\nexports.isVueViewModel = isVueViewModel;\n//# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/isBrowser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/isBrowser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node = __webpack_require__(/*! ./node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/node.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/**\n * Returns true if we are in the browser.\n */\nfunction isBrowser() {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!node.isNodeEnv() || isElectronNodeRenderer());\n}\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer() {\n  const process = (worldwide.GLOBAL_OBJ ).process;\n  return process?.type === 'renderer';\n}\n\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=isBrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXNCcm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxtRkFBVztBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9pc0Jyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG5vZGUgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vd29ybGR3aWRlLmpzJyk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBpbiB0aGUgYnJvd3Nlci5cbiAqL1xuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAoIW5vZGUuaXNOb2RlRW52KCkgfHwgaXNFbGVjdHJvbk5vZGVSZW5kZXJlcigpKTtcbn1cblxuLy8gRWxlY3Ryb24gcmVuZGVyZXJzIHdpdGggbm9kZUludGVncmF0aW9uIGVuYWJsZWQgYXJlIGRldGVjdGVkIGFzIE5vZGUuanMgc28gd2Ugc3BlY2lmaWNhbGx5IHRlc3QgZm9yIHRoZW1cbmZ1bmN0aW9uIGlzRWxlY3Ryb25Ob2RlUmVuZGVyZXIoKSB7XG4gIGNvbnN0IHByb2Nlc3MgPSAod29ybGR3aWRlLkdMT0JBTF9PQkogKS5wcm9jZXNzO1xuICByZXR1cm4gcHJvY2Vzcz8udHlwZSA9PT0gJ3JlbmRlcmVyJztcbn1cblxuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Jyb3dzZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/isBrowser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nfunction isSentryRequestUrl(url, client) {\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url, tunnel) {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url, dsn) {\n  return dsn ? url.includes(dsn.host) : false;\n}\n\nfunction removeTrailingSlash(str) {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n\nexports.isSentryRequestUrl = isSentryRequestUrl;\n//# sourceMappingURL=isSentryRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2lzU2VudHJ5UmVxdWVzdFVybC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB1cmwgcG9pbnRzIHRvIFNlbnRyeSBzZXJ2ZXJcbiAqXG4gKiBAcGFyYW0gdXJsIHVybCB0byB2ZXJpZnlcbiAqL1xuZnVuY3Rpb24gaXNTZW50cnlSZXF1ZXN0VXJsKHVybCwgY2xpZW50KSB7XG4gIGNvbnN0IGRzbiA9IGNsaWVudD8uZ2V0RHNuKCk7XG4gIGNvbnN0IHR1bm5lbCA9IGNsaWVudD8uZ2V0T3B0aW9ucygpLnR1bm5lbDtcbiAgcmV0dXJuIGNoZWNrRHNuKHVybCwgZHNuKSB8fCBjaGVja1R1bm5lbCh1cmwsIHR1bm5lbCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVHVubmVsKHVybCwgdHVubmVsKSB7XG4gIGlmICghdHVubmVsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2godXJsKSA9PT0gcmVtb3ZlVHJhaWxpbmdTbGFzaCh0dW5uZWwpO1xufVxuXG5mdW5jdGlvbiBjaGVja0Rzbih1cmwsIGRzbikge1xuICByZXR1cm4gZHNuID8gdXJsLmluY2x1ZGVzKGRzbi5ob3N0KSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHN0cikge1xuICByZXR1cm4gc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJy8nID8gc3RyLnNsaWNlKDAsIC0xKSA6IHN0cjtcbn1cblxuZXhwb3J0cy5pc1NlbnRyeVJlcXVlc3RVcmwgPSBpc1NlbnRyeVJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NlbnRyeVJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/lru.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/lru.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** A simple Least Recently Used map */\nclass LRUMap {\n\n   constructor(  _maxSize) {this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n\n  /** Get the current size of the cache */\n   get size() {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n   get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n   set(key, value) {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n   remove(key) {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n   clear() {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n   keys() {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n   values() {\n    const values = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n\nexports.LRUMap = LRUMap;\n//# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbHJ1LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYztBQUNkIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9scnUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKiBBIHNpbXBsZSBMZWFzdCBSZWNlbnRseSBVc2VkIG1hcCAqL1xuY2xhc3MgTFJVTWFwIHtcblxuICAgY29uc3RydWN0b3IoICBfbWF4U2l6ZSkge3RoaXMuX21heFNpemUgPSBfbWF4U2l6ZTtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgc2l6ZSBvZiB0aGUgY2FjaGUgKi9cbiAgIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZS5zaXplO1xuICB9XG5cbiAgLyoqIEdldCBhbiBlbnRyeSBvciB1bmRlZmluZWQgaWYgaXQgd2FzIG5vdCBpbiB0aGUgY2FjaGUuIFJlLWluc2VydHMgdG8gdXBkYXRlIHRoZSByZWNlbnRseSB1c2VkIG9yZGVyICovXG4gICBnZXQoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFuZCByZS1pbnNlcnQgdG8gdXBkYXRlIHRoZSBvcmRlclxuICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMuX2NhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKiogSW5zZXJ0IGFuIGVudHJ5IGFuZCBldmljdCBhbiBvbGRlciBlbnRyeSBpZiB3ZSd2ZSByZWFjaGVkIG1heFNpemUgKi9cbiAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlLnNpemUgPj0gdGhpcy5fbWF4U2l6ZSkge1xuICAgICAgLy8ga2V5cygpIHJldHVybnMgYW4gaXRlcmF0b3IgaW4gaW5zZXJ0aW9uIG9yZGVyIHNvIGtleXMoKS5uZXh0KCkgZ2l2ZXMgdXMgdGhlIG9sZGVzdCBrZXlcbiAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZSh0aGlzLl9jYWNoZS5rZXlzKCkubmV4dCgpLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5fY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqIFJlbW92ZSBhbiBlbnRyeSBhbmQgcmV0dXJuIHRoZSBlbnRyeSBpZiBpdCB3YXMgaW4gdGhlIGNhY2hlICovXG4gICByZW1vdmUoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKiogQ2xlYXIgYWxsIGVudHJpZXMgKi9cbiAgIGNsZWFyKCkge1xuICAgIHRoaXMuX2NhY2hlLmNsZWFyKCk7XG4gIH1cblxuICAvKiogR2V0IGFsbCB0aGUga2V5cyAqL1xuICAga2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9jYWNoZS5rZXlzKCkpO1xuICB9XG5cbiAgLyoqIEdldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgdmFsdWVzKCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIHRoaXMuX2NhY2hlLmZvckVhY2godmFsdWUgPT4gdmFsdWVzLnB1c2godmFsdWUpKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG5cbmV4cG9ydHMuTFJVTWFwID0gTFJVTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/lru.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nfunction merge(initialObj, mergeObj, levels = 2) {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWVyZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWVyZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogU2hhbGxvdyBtZXJnZSB0d28gb2JqZWN0cy5cbiAqIERvZXMgbm90IG11dGF0ZSB0aGUgcGFzc2VkIGluIG9iamVjdHMuXG4gKiBVbmRlZmluZWQvZW1wdHkgdmFsdWVzIGluIHRoZSBtZXJnZSBvYmplY3Qgd2lsbCBvdmVyd3JpdGUgZXhpc3RpbmcgdmFsdWVzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgbWVyZ2VzIDIgbGV2ZWxzIGRlZXAuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGluaXRpYWxPYmosIG1lcmdlT2JqLCBsZXZlbHMgPSAyKSB7XG4gIC8vIElmIHRoZSBtZXJnZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCBvciB3ZSBoYXZlIG5vIG1lcmdlIGxldmVscyBsZWZ0LFxuICAvLyB3ZSBqdXN0IHNldCB0aGUgdmFsdWUgdG8gdGhlIG1lcmdlIHZhbHVlXG4gIGlmICghbWVyZ2VPYmogfHwgdHlwZW9mIG1lcmdlT2JqICE9PSAnb2JqZWN0JyB8fCBsZXZlbHMgPD0gMCkge1xuICAgIHJldHVybiBtZXJnZU9iajtcbiAgfVxuXG4gIC8vIElmIHRoZSBtZXJnZSBvYmplY3QgaXMgYW4gZW1wdHkgb2JqZWN0LCBhbmQgdGhlIGluaXRpYWwgb2JqZWN0IGlzIG5vdCB1bmRlZmluZWQsIHdlIHJldHVybiB0aGUgaW5pdGlhbCBvYmplY3RcbiAgaWYgKGluaXRpYWxPYmogJiYgT2JqZWN0LmtleXMobWVyZ2VPYmopLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBpbml0aWFsT2JqO1xuICB9XG5cbiAgLy8gQ2xvbmUgb2JqZWN0XG4gIGNvbnN0IG91dHB1dCA9IHsgLi4uaW5pdGlhbE9iaiB9O1xuXG4gIC8vIE1lcmdlIHZhbHVlcyBpbnRvIG91dHB1dCwgcmVzdXJzaXZlbHlcbiAgZm9yIChjb25zdCBrZXkgaW4gbWVyZ2VPYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lcmdlT2JqLCBrZXkpKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IG1lcmdlKG91dHB1dFtrZXldLCBtZXJnZU9ialtrZXldLCBsZXZlbHMgLSAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/meta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst traceData = __webpack_require__(/*! ./traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\n\n/**\n * Returns a string of meta tags that represent the current trace data.\n *\n * You can use this to propagate a trace from your server-side rendered Html to the browser.\n * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the\n * current trace data state.\n *\n * @example\n * Usage example:\n *\n * ```js\n * function renderHtml() {\n *   return `\n *     <head>\n *       ${getTraceMetaTags()}\n *     </head>\n *   `;\n * }\n * ```\n *\n */\nfunction getTraceMetaTags(traceData$1) {\n  return Object.entries(traceData$1 || traceData.getTraceData())\n    .map(([key, value]) => `<meta name=\"${key}\" content=\"${value}\"/>`)\n    .join('\\n');\n}\n\nexports.getTraceMetaTags = getTraceMetaTags;\n//# sourceMappingURL=meta.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWV0YS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxJQUFJLGFBQWEsTUFBTTtBQUNqRTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWV0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgdHJhY2VEYXRhID0gcmVxdWlyZSgnLi90cmFjZURhdGEuanMnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIG9mIG1ldGEgdGFncyB0aGF0IHJlcHJlc2VudCB0aGUgY3VycmVudCB0cmFjZSBkYXRhLlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoaXMgdG8gcHJvcGFnYXRlIGEgdHJhY2UgZnJvbSB5b3VyIHNlcnZlci1zaWRlIHJlbmRlcmVkIEh0bWwgdG8gdGhlIGJyb3dzZXIuXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdXAgdG8gdHdvIG1ldGEgdGFncywgYHNlbnRyeS10cmFjZWAgYW5kIGBiYWdnYWdlYCwgZGVwZW5kaW5nIG9uIHRoZVxuICogY3VycmVudCB0cmFjZSBkYXRhIHN0YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBVc2FnZSBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiByZW5kZXJIdG1sKCkge1xuICogICByZXR1cm4gYFxuICogICAgIDxoZWFkPlxuICogICAgICAgJHtnZXRUcmFjZU1ldGFUYWdzKCl9XG4gKiAgICAgPC9oZWFkPlxuICogICBgO1xuICogfVxuICogYGBgXG4gKlxuICovXG5mdW5jdGlvbiBnZXRUcmFjZU1ldGFUYWdzKHRyYWNlRGF0YSQxKSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyh0cmFjZURhdGEkMSB8fCB0cmFjZURhdGEuZ2V0VHJhY2VEYXRhKCkpXG4gICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgPG1ldGEgbmFtZT1cIiR7a2V5fVwiIGNvbnRlbnQ9XCIke3ZhbHVlfVwiLz5gKVxuICAgIC5qb2luKCdcXG4nKTtcbn1cblxuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gZ2V0VHJhY2VNZXRhVGFncztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGEuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/misc.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nfunction getCrypto() {\n  const gbl = worldwide.GLOBAL_OBJ ;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nfunction uuid4(crypto = getCrypto()) {\n  let getRandomByte = () => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0];\n      };\n    }\n  } catch {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] ) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c ) ^ ((getRandomByte() & 15) >> ((c ) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event) {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\nfunction _parseInt(input) {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame, linesOfContext = 5) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line) => string.snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = string.snipLine(lines[lineIndex], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line) => string.snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    object.addNonEnumerableProperty(exception , '__sentry_captured__', true);\n  } catch {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception) {\n  try {\n    return (exception ).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n\nexports.addContextToFrame = addContextToFrame;\nexports.addExceptionMechanism = addExceptionMechanism;\nexports.addExceptionTypeValue = addExceptionTypeValue;\nexports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;\nexports.getEventDescription = getEventDescription;\nexports.parseSemver = parseSemver;\nexports.uuid4 = uuid4;\n//# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/node-stack-trace.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/node-stack-trace.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\n/**\n * Does this filename look like it's part of the app code?\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n  const DATA_URI_MATCH = /at (?:async )?(.+?) \\(data:(.*?),/;\n\n  // eslint-disable-next-line complexity\n  return (line) => {\n    const dataUriMatch = line.match(DATA_URI_MATCH);\n    if (dataUriMatch) {\n      return {\n        filename: `<data:${dataUriMatch[2]}>`,\n        function: dataUriMatch[1],\n      };\n    }\n\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || stacktrace.UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\n\nexports.filenameIsInApp = filenameIsInApp;\nexports.node = node;\nexports.nodeStackLineParser = nodeStackLineParser;\n//# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbm9kZS1zdGFjay10cmFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQkFBbUIsbUJBQU8sQ0FBQywrRkFBaUI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQ0FBa0MsR0FBRztBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0JBQWdCO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMsU0FBUyxHQUFHLFdBQVc7QUFDNUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLFlBQVk7QUFDWiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL25vZGUtc3RhY2stdHJhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHN0YWNrdHJhY2UgPSByZXF1aXJlKCcuL3N0YWNrdHJhY2UuanMnKTtcblxuLyoqXG4gKiBEb2VzIHRoaXMgZmlsZW5hbWUgbG9vayBsaWtlIGl0J3MgcGFydCBvZiB0aGUgYXBwIGNvZGU/XG4gKi9cbmZ1bmN0aW9uIGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUgPSBmYWxzZSkge1xuICBjb25zdCBpc0ludGVybmFsID1cbiAgICBpc05hdGl2ZSB8fFxuICAgIChmaWxlbmFtZSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSBsaW51eCBwYXRoXG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLycpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiBpdCdzIGFuIGFic29sdXRlIHdpbmRvd3MgcGF0aFxuICAgICAgIWZpbGVuYW1lLm1hdGNoKC9eW0EtWl06LykgJiZcbiAgICAgIC8vIEl0J3Mgbm90IGludGVybmFsIGlmIHRoZSBwYXRoIGlzIHN0YXJ0aW5nIHdpdGggYSBkb3RcbiAgICAgICFmaWxlbmFtZS5zdGFydHNXaXRoKCcuJykgJiZcbiAgICAgIC8vIEl0J3Mgbm90IGludGVybmFsIGlmIHRoZSBmcmFtZSBoYXMgYSBwcm90b2NvbC4gSW4gbm9kZSwgdGhpcyBpcyB1c3VhbGx5IHRoZSBjYXNlIGlmIHRoZSBmaWxlIGdvdCBwcmUtcHJvY2Vzc2VkIHdpdGggYSBidW5kbGVyIGxpa2Ugd2VicGFja1xuICAgICAgIWZpbGVuYW1lLm1hdGNoKC9eW2EtekEtWl0oW2EtekEtWjAtOS5cXC0rXSkqOlxcL1xcLy8pKTsgLy8gU2NoZW1hIGZyb206IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNjQxNzgyXG5cbiAgLy8gaW5fYXBwIGlzIGFsbCB0aGF0J3Mgbm90IGFuIGludGVybmFsIE5vZGUgZnVuY3Rpb24gb3IgYSBtb2R1bGUgd2l0aGluIG5vZGVfbW9kdWxlc1xuICAvLyBub3RlIHRoYXQgaXNOYXRpdmUgYXBwZWFycyB0byByZXR1cm4gdHJ1ZSBldmVuIGZvciBub2RlIGNvcmUgbGlicmFyaWVzXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLW5vZGUvaXNzdWVzLzE3NlxuXG4gIHJldHVybiAhaXNJbnRlcm5hbCAmJiBmaWxlbmFtZSAhPT0gdW5kZWZpbmVkICYmICFmaWxlbmFtZS5pbmNsdWRlcygnbm9kZV9tb2R1bGVzLycpO1xufVxuXG4vKiogTm9kZSBTdGFjayBsaW5lIHBhcnNlciAqL1xuZnVuY3Rpb24gbm9kZShnZXRNb2R1bGUpIHtcbiAgY29uc3QgRklMRU5BTUVfTUFUQ0ggPSAvXlxccypbLV17NCx9JC87XG4gIGNvbnN0IEZVTExfTUFUQ0ggPSAvYXQgKD86YXN5bmMgKT8oPzooLis/KVxccytcXCgpPyg/OiguKyk6KFxcZCspOihcXGQrKT98KFteKV0rKSlcXCk/LztcbiAgY29uc3QgREFUQV9VUklfTUFUQ0ggPSAvYXQgKD86YXN5bmMgKT8oLis/KSBcXChkYXRhOiguKj8pLC87XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgcmV0dXJuIChsaW5lKSA9PiB7XG4gICAgY29uc3QgZGF0YVVyaU1hdGNoID0gbGluZS5tYXRjaChEQVRBX1VSSV9NQVRDSCk7XG4gICAgaWYgKGRhdGFVcmlNYXRjaCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZW5hbWU6IGA8ZGF0YToke2RhdGFVcmlNYXRjaFsyXX0+YCxcbiAgICAgICAgZnVuY3Rpb246IGRhdGFVcmlNYXRjaFsxXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgbGluZU1hdGNoID0gbGluZS5tYXRjaChGVUxMX01BVENIKTtcblxuICAgIGlmIChsaW5lTWF0Y2gpIHtcbiAgICAgIGxldCBvYmplY3Q7XG4gICAgICBsZXQgbWV0aG9kO1xuICAgICAgbGV0IGZ1bmN0aW9uTmFtZTtcbiAgICAgIGxldCB0eXBlTmFtZTtcbiAgICAgIGxldCBtZXRob2ROYW1lO1xuXG4gICAgICBpZiAobGluZU1hdGNoWzFdKSB7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IGxpbmVNYXRjaFsxXTtcblxuICAgICAgICBsZXQgbWV0aG9kU3RhcnQgPSBmdW5jdGlvbk5hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZVttZXRob2RTdGFydCAtIDFdID09PSAnLicpIHtcbiAgICAgICAgICBtZXRob2RTdGFydC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZFN0YXJ0ID4gMCkge1xuICAgICAgICAgIG9iamVjdCA9IGZ1bmN0aW9uTmFtZS5zbGljZSgwLCBtZXRob2RTdGFydCk7XG4gICAgICAgICAgbWV0aG9kID0gZnVuY3Rpb25OYW1lLnNsaWNlKG1ldGhvZFN0YXJ0ICsgMSk7XG4gICAgICAgICAgY29uc3Qgb2JqZWN0RW5kID0gb2JqZWN0LmluZGV4T2YoJy5Nb2R1bGUnKTtcbiAgICAgICAgICBpZiAob2JqZWN0RW5kID4gMCkge1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lLnNsaWNlKG9iamVjdEVuZCArIDEpO1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnNsaWNlKDAsIG9iamVjdEVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHR5cGVOYW1lID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgIHR5cGVOYW1lID0gb2JqZWN0O1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kID09PSAnPGFub255bW91cz4nKSB7XG4gICAgICAgIG1ldGhvZE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lIHx8IHN0YWNrdHJhY2UuVU5LTk9XTl9GVU5DVElPTjtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gdHlwZU5hbWUgPyBgJHt0eXBlTmFtZX0uJHttZXRob2ROYW1lfWAgOiBtZXRob2ROYW1lO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbMl0/LnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSA/IGxpbmVNYXRjaFsyXS5zbGljZSg3KSA6IGxpbmVNYXRjaFsyXTtcbiAgICAgIGNvbnN0IGlzTmF0aXZlID0gbGluZU1hdGNoWzVdID09PSAnbmF0aXZlJztcblxuICAgICAgLy8gSWYgaXQncyBhIFdpbmRvd3MgcGF0aCwgdHJpbSB0aGUgbGVhZGluZyBzbGFzaCBzbyB0aGF0IGAvQzovZm9vYCBiZWNvbWVzIGBDOi9mb29gXG4gICAgICBpZiAoZmlsZW5hbWU/Lm1hdGNoKC9cXC9bQS1aXTovKSkge1xuICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lLnNsaWNlKDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWZpbGVuYW1lICYmIGxpbmVNYXRjaFs1XSAmJiAhaXNOYXRpdmUpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbNV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSA/IGRlY29kZVVSSShmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIG1vZHVsZTogZ2V0TW9kdWxlID8gZ2V0TW9kdWxlKGZpbGVuYW1lKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZnVuY3Rpb246IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgbGluZW5vOiBfcGFyc2VJbnRPclVuZGVmaW5lZChsaW5lTWF0Y2hbM10pLFxuICAgICAgICBjb2xubzogX3BhcnNlSW50T3JVbmRlZmluZWQobGluZU1hdGNoWzRdKSxcbiAgICAgICAgaW5fYXBwOiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUgfHwgJycsIGlzTmF0aXZlKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubWF0Y2goRklMRU5BTUVfTUFUQ0gpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogbGluZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuLyoqXG4gKiBOb2RlLmpzIHN0YWNrIGxpbmUgcGFyc2VyXG4gKlxuICogVGhpcyBpcyBpbiBAc2VudHJ5L2NvcmUgc28gaXQgY2FuIGJlIHVzZWQgZnJvbSB0aGUgRWxlY3Ryb24gU0RLIGluIHRoZSBicm93c2VyIGZvciB3aGVuIGBub2RlSW50ZWdyYXRpb24gPT0gdHJ1ZWAuXG4gKiBUaGlzIGFsbG93cyBpdCB0byBiZSB1c2VkIHdpdGhvdXQgcmVmZXJlbmNpbmcgb3IgaW1wb3J0aW5nIGFueSBub2RlIHNwZWNpZmljIGNvZGUgd2hpY2ggY2F1c2VzIGJ1bmRsZXJzIHRvIGNvbXBsYWluXG4gKi9cbmZ1bmN0aW9uIG5vZGVTdGFja0xpbmVQYXJzZXIoZ2V0TW9kdWxlKSB7XG4gIHJldHVybiBbOTAsIG5vZGUoZ2V0TW9kdWxlKV07XG59XG5cbmZ1bmN0aW9uIF9wYXJzZUludE9yVW5kZWZpbmVkKGlucHV0KSB7XG4gIHJldHVybiBwYXJzZUludChpbnB1dCB8fCAnJywgMTApIHx8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0cy5maWxlbmFtZUlzSW5BcHAgPSBmaWxlbmFtZUlzSW5BcHA7XG5leHBvcnRzLm5vZGUgPSBub2RlO1xuZXhwb3J0cy5ub2RlU3RhY2tMaW5lUGFyc2VyID0gbm9kZVN0YWNrTGluZVBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc3RhY2stdHJhY2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/node-stack-trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/node.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/node.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst env = __webpack_require__(/*! ./env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/env.js\");\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the `debug` singleton, or b) put your function elsewhere.\n */\n\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !env.isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @param existingModule module to use for requiring\n * @returns possibly required module\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction loadModule(moduleName, existingModule = module) {\n  let mod;\n\n  try {\n    mod = dynamicRequire(existingModule, moduleName);\n  } catch {\n    // no-empty\n  }\n\n  if (!mod) {\n    try {\n      const { cwd } = dynamicRequire(existingModule, 'process');\n      mod = dynamicRequire(existingModule, `${cwd()}/node_modules/${moduleName}`) ;\n    } catch {\n      // no-empty\n    }\n  }\n\n  return mod;\n}\n\nexports.isNodeEnv = isNodeEnv;\nexports.loadModule = loadModule;\n//# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbm9kZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsWUFBWSxtQkFBTyxDQUFDLGlGQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1GQUFtRixnQkFBZ0I7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQiw4Q0FBOEMsTUFBTSxnQkFBZ0IsV0FBVztBQUMvRSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZW52ID0gcmVxdWlyZSgnLi9lbnYuanMnKTtcblxuLyoqXG4gKiBOT1RFOiBJbiBvcmRlciB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMsIGlmIHlvdSBhZGQgYSBmdW5jdGlvbiB0byB0aGlzIG1vZHVsZSBhbmQgaXQgbmVlZHMgdG8gcHJpbnQgc29tZXRoaW5nLFxuICogeW91IG11c3QgZWl0aGVyIGEpIHVzZSBgY29uc29sZS5sb2dgIHJhdGhlciB0aGFuIHRoZSBgZGVidWdgIHNpbmdsZXRvbiwgb3IgYikgcHV0IHlvdXIgZnVuY3Rpb24gZWxzZXdoZXJlLlxuICovXG5cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgLy8gZXhwbGljaXRseSBjaGVjayBmb3IgYnJvd3NlciBidW5kbGVzIGFzIHRob3NlIGNhbiBiZSBvcHRpbWl6ZWQgc3RhdGljYWxseVxuICAvLyBieSB0ZXJzZXIvcm9sbHVwLlxuICByZXR1cm4gKFxuICAgICFlbnYuaXNCcm93c2VyQnVuZGxlKCkgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSdcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXF1aXJlcyBhIG1vZHVsZSB3aGljaCBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBidW5kbGVyIG1pbmlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdCBUaGUgbW9kdWxlIHBhdGggdG8gcmVzb2x2ZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgcmV0dXJuIG1vZC5yZXF1aXJlKHJlcXVlc3QpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgZHluYW1pY2FsbHkgbG9hZGluZyBtb2R1bGUgdGhhdCBzaG91bGQgd29yayB3aXRoIGxpbmtlZCBkZXBlbmRlbmNpZXMuXG4gKiBUaGUgcHJvYmxlbSBpcyB0aGF0IHdlIF9zaG91bGRfIGJlIHVzaW5nIGByZXF1aXJlKHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lLCB7IHBhdGhzOiBbY3dkKCldIH0pKWBcbiAqIEhvd2V2ZXIgaXQncyBfbm90IHBvc3NpYmxlXyB0byBkbyB0aGF0IHdpdGggV2VicGFjaywgYXMgaXQgaGFzIHRvIGtub3cgYWxsIHRoZSBkZXBlbmRlbmNpZXMgZHVyaW5nXG4gKiBidWlsZCB0aW1lLiBgcmVxdWlyZS5yZXNvbHZlYCBpcyBhbHNvIG5vdCBhdmFpbGFibGUgaW4gYW55IG90aGVyIHdheSwgc28gd2UgY2Fubm90IGNyZWF0ZSxcbiAqIGEgZmFrZSBoZWxwZXIgbGlrZSB3ZSBkbyB3aXRoIGBkeW5hbWljUmVxdWlyZWAuXG4gKlxuICogV2UgYWx3YXlzIHByZWZlciB0byB1c2UgbG9jYWwgcGFja2FnZSwgdGh1cyB0aGUgdmFsdWUgaXMgbm90IHJldHVybmVkIGVhcmx5IGZyb20gZWFjaCBgdHJ5L2NhdGNoYCBibG9jay5cbiAqIFRoYXQgaXMgdG8gbWltaWMgdGhlIGJlaGF2aW9yIG9mIGByZXF1aXJlLnJlc29sdmVgIGV4YWN0bHkuXG4gKlxuICogQHBhcmFtIG1vZHVsZU5hbWUgbW9kdWxlIG5hbWUgdG8gcmVxdWlyZVxuICogQHBhcmFtIGV4aXN0aW5nTW9kdWxlIG1vZHVsZSB0byB1c2UgZm9yIHJlcXVpcmluZ1xuICogQHJldHVybnMgcG9zc2libHkgcmVxdWlyZWQgbW9kdWxlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBsb2FkTW9kdWxlKG1vZHVsZU5hbWUsIGV4aXN0aW5nTW9kdWxlID0gbW9kdWxlKSB7XG4gIGxldCBtb2Q7XG5cbiAgdHJ5IHtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShleGlzdGluZ01vZHVsZSwgbW9kdWxlTmFtZSk7XG4gIH0gY2F0Y2gge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICBpZiAoIW1vZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGN3ZCB9ID0gZHluYW1pY1JlcXVpcmUoZXhpc3RpbmdNb2R1bGUsICdwcm9jZXNzJyk7XG4gICAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShleGlzdGluZ01vZHVsZSwgYCR7Y3dkKCl9L25vZGVfbW9kdWxlcy8ke21vZHVsZU5hbWV9YCkgO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gbm8tZW1wdHlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuXG5leHBvcnRzLmlzTm9kZUVudiA9IGlzTm9kZUVudjtcbmV4cG9ydHMubG9hZE1vZHVsZSA9IGxvYWRNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/node.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/normalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\");\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object,\n  // Default Node.js REPL depth\n  depth = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize = 100 * 1024,\n) {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized ;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key,\n  value,\n  depth = +Infinity,\n  maxProperties = +Infinity,\n  memo = memoBuilder(),\n) {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value ;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value )['__sentry_skip_normalization__']) {\n    return value ;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value )['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value )['__sentry_override_normalization_depth__'] )\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value ;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) ;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = object.convertToPlainObject(value );\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value,\n) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value )._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (is.isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (is.isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${stacktrace.getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder() {\n  const inner = new WeakSet();\n  function memoize(obj) {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj) {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n\nexports.normalize = normalize;\nexports.normalizeToSize = normalizeToSize;\nexports.normalizeUrlToBase = normalizeUrlToBase;\n//# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/object.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst browser = __webpack_require__(/*! ./browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/browser.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] ;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) ;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch {\n    debugBuild.DEBUG_BUILD && debugLogger.debug.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value)\n\n {\n  if (is.isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (is.isEvent(value)) {\n    const newObj\n\n = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && is.isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return is.isElement(target) ? browser.htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj )[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return string.truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return string.truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal ;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue ;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue ;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input) {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input ).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case is.isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat ).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n\nexports.addNonEnumerableProperty = addNonEnumerableProperty;\nexports.convertToPlainObject = convertToPlainObject;\nexports.dropUndefinedKeys = dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;\nexports.fill = fill;\nexports.getOriginalFunction = getOriginalFunction;\nexports.markFunctionWrapped = markFunctionWrapped;\nexports.objectify = objectify;\n//# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/openai/constants.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst OPENAI_INTEGRATION_NAME = 'OpenAI';\n\n// https://platform.openai.com/docs/quickstart?api-mode=responses\n// https://platform.openai.com/docs/quickstart?api-mode=chat\nconst INSTRUMENTED_METHODS = ['responses.create', 'chat.completions.create'] ;\nconst RESPONSES_TOOL_CALL_EVENT_TYPES = [\n  'response.output_item.added',\n  'response.function_call_arguments.delta',\n  'response.function_call_arguments.done',\n  'response.output_item.done',\n] ;\nconst RESPONSE_EVENT_TYPES = [\n  'response.created',\n  'response.in_progress',\n  'response.failed',\n  'response.completed',\n  'response.incomplete',\n  'response.queued',\n  'response.output_text.delta',\n  ...RESPONSES_TOOL_CALL_EVENT_TYPES,\n] ;\n\nexports.INSTRUMENTED_METHODS = INSTRUMENTED_METHODS;\nexports.OPENAI_INTEGRATION_NAME = OPENAI_INTEGRATION_NAME;\nexports.RESPONSES_TOOL_CALL_EVENT_TYPES = RESPONSES_TOOL_CALL_EVENT_TYPES;\nexports.RESPONSE_EVENT_TYPES = RESPONSE_EVENT_TYPES;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvb3BlbmFpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2Qyw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL29wZW5haS9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IE9QRU5BSV9JTlRFR1JBVElPTl9OQU1FID0gJ09wZW5BSSc7XG5cbi8vIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL3F1aWNrc3RhcnQ/YXBpLW1vZGU9cmVzcG9uc2VzXG4vLyBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9xdWlja3N0YXJ0P2FwaS1tb2RlPWNoYXRcbmNvbnN0IElOU1RSVU1FTlRFRF9NRVRIT0RTID0gWydyZXNwb25zZXMuY3JlYXRlJywgJ2NoYXQuY29tcGxldGlvbnMuY3JlYXRlJ10gO1xuY29uc3QgUkVTUE9OU0VTX1RPT0xfQ0FMTF9FVkVOVF9UWVBFUyA9IFtcbiAgJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJyxcbiAgJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhJyxcbiAgJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRvbmUnLFxuICAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZScsXG5dIDtcbmNvbnN0IFJFU1BPTlNFX0VWRU5UX1RZUEVTID0gW1xuICAncmVzcG9uc2UuY3JlYXRlZCcsXG4gICdyZXNwb25zZS5pbl9wcm9ncmVzcycsXG4gICdyZXNwb25zZS5mYWlsZWQnLFxuICAncmVzcG9uc2UuY29tcGxldGVkJyxcbiAgJ3Jlc3BvbnNlLmluY29tcGxldGUnLFxuICAncmVzcG9uc2UucXVldWVkJyxcbiAgJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhJyxcbiAgLi4uUkVTUE9OU0VTX1RPT0xfQ0FMTF9FVkVOVF9UWVBFUyxcbl0gO1xuXG5leHBvcnRzLklOU1RSVU1FTlRFRF9NRVRIT0RTID0gSU5TVFJVTUVOVEVEX01FVEhPRFM7XG5leHBvcnRzLk9QRU5BSV9JTlRFR1JBVElPTl9OQU1FID0gT1BFTkFJX0lOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLlJFU1BPTlNFU19UT09MX0NBTExfRVZFTlRfVFlQRVMgPSBSRVNQT05TRVNfVE9PTF9DQUxMX0VWRU5UX1RZUEVTO1xuZXhwb3J0cy5SRVNQT05TRV9FVkVOVF9UWVBFUyA9IFJFU1BPTlNFX0VWRU5UX1RZUEVTO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/openai/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst currentScopes = __webpack_require__(/*! ../../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst spanstatus = __webpack_require__(/*! ../../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ../../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst genAiAttributes = __webpack_require__(/*! ../gen-ai-attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js\");\nconst streaming = __webpack_require__(/*! ./streaming.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/streaming.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/utils.js\");\n\n/**\n * Extract request attributes from method arguments\n */\nfunction extractRequestAttributes(args, methodPath) {\n  const attributes = {\n    [genAiAttributes.GEN_AI_SYSTEM_ATTRIBUTE]: 'openai',\n    [genAiAttributes.GEN_AI_OPERATION_NAME_ATTRIBUTE]: utils.getOperationName(methodPath),\n  };\n\n  // Chat completion API accepts web_search_options and tools as parameters\n  // we append web search options to the available tools to capture all tool calls\n  if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n    const params = args[0] ;\n\n    const tools = Array.isArray(params.tools) ? params.tools : [];\n    const hasWebSearchOptions = params.web_search_options && typeof params.web_search_options === 'object';\n    const webSearchOptions = hasWebSearchOptions\n      ? [{ type: 'web_search_options', ...(params.web_search_options ) }]\n      : [];\n\n    const availableTools = [...tools, ...webSearchOptions];\n\n    if (availableTools.length > 0) {\n      attributes[genAiAttributes.GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE] = JSON.stringify(availableTools);\n    }\n  }\n\n  if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n    const params = args[0] ;\n\n    attributes[genAiAttributes.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = params.model ?? 'unknown';\n    if ('temperature' in params) attributes[genAiAttributes.GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE] = params.temperature;\n    if ('top_p' in params) attributes[genAiAttributes.GEN_AI_REQUEST_TOP_P_ATTRIBUTE] = params.top_p;\n    if ('frequency_penalty' in params)\n      attributes[genAiAttributes.GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE] = params.frequency_penalty;\n    if ('presence_penalty' in params) attributes[genAiAttributes.GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE] = params.presence_penalty;\n    if ('stream' in params) attributes[genAiAttributes.GEN_AI_REQUEST_STREAM_ATTRIBUTE] = params.stream;\n  } else {\n    attributes[genAiAttributes.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = 'unknown';\n  }\n\n  return attributes;\n}\n\n/**\n * Add attributes for Chat Completion responses\n */\nfunction addChatCompletionAttributes(span, response, recordOutputs) {\n  utils.setCommonResponseAttributes(span, response.id, response.model, response.created);\n  if (response.usage) {\n    utils.setTokenUsageAttributes(\n      span,\n      response.usage.prompt_tokens,\n      response.usage.completion_tokens,\n      response.usage.total_tokens,\n    );\n  }\n  if (Array.isArray(response.choices)) {\n    const finishReasons = response.choices\n      .map(choice => choice.finish_reason)\n      .filter((reason) => reason !== null);\n    if (finishReasons.length > 0) {\n      span.setAttributes({\n        [genAiAttributes.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]: JSON.stringify(finishReasons),\n      });\n    }\n\n    // Extract tool calls from all choices (only if recordOutputs is true)\n    if (recordOutputs) {\n      const toolCalls = response.choices\n        .map(choice => choice.message?.tool_calls)\n        .filter(calls => Array.isArray(calls) && calls.length > 0)\n        .flat();\n\n      if (toolCalls.length > 0) {\n        span.setAttributes({\n          [genAiAttributes.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(toolCalls),\n        });\n      }\n    }\n  }\n}\n\n/**\n * Add attributes for Responses API responses\n */\nfunction addResponsesApiAttributes(span, response, recordOutputs) {\n  utils.setCommonResponseAttributes(span, response.id, response.model, response.created_at);\n  if (response.status) {\n    span.setAttributes({\n      [genAiAttributes.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]: JSON.stringify([response.status]),\n    });\n  }\n  if (response.usage) {\n    utils.setTokenUsageAttributes(\n      span,\n      response.usage.input_tokens,\n      response.usage.output_tokens,\n      response.usage.total_tokens,\n    );\n  }\n\n  // Extract function calls from output (only if recordOutputs is true)\n  if (recordOutputs) {\n    const responseWithOutput = response ;\n    if (Array.isArray(responseWithOutput.output) && responseWithOutput.output.length > 0) {\n      // Filter for function_call type objects in the output array\n      const functionCalls = responseWithOutput.output.filter(\n        (item) =>\n          typeof item === 'object' && item !== null && (item ).type === 'function_call',\n      );\n\n      if (functionCalls.length > 0) {\n        span.setAttributes({\n          [genAiAttributes.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(functionCalls),\n        });\n      }\n    }\n  }\n}\n\n/**\n * Add response attributes to spans\n * This currently supports both Chat Completion and Responses API responses\n */\nfunction addResponseAttributes(span, result, recordOutputs) {\n  if (!result || typeof result !== 'object') return;\n\n  const response = result ;\n\n  if (utils.isChatCompletionResponse(response)) {\n    addChatCompletionAttributes(span, response, recordOutputs);\n    if (recordOutputs && response.choices?.length) {\n      const responseTexts = response.choices.map(choice => choice.message?.content || '');\n      span.setAttributes({ [genAiAttributes.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: JSON.stringify(responseTexts) });\n    }\n  } else if (utils.isResponsesApiResponse(response)) {\n    addResponsesApiAttributes(span, response, recordOutputs);\n    if (recordOutputs && response.output_text) {\n      span.setAttributes({ [genAiAttributes.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: response.output_text });\n    }\n  }\n}\n\n// Extract and record AI request inputs, if present. This is intentionally separate from response attributes.\nfunction addRequestAttributes(span, params) {\n  if ('messages' in params) {\n    span.setAttributes({ [genAiAttributes.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(params.messages) });\n  }\n  if ('input' in params) {\n    span.setAttributes({ [genAiAttributes.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(params.input) });\n  }\n}\n\nfunction getOptionsFromIntegration() {\n  const scope = currentScopes.getCurrentScope();\n  const client = scope.getClient();\n  const integration = client?.getIntegrationByName(constants.OPENAI_INTEGRATION_NAME) ;\n  const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n  return {\n    recordInputs: integration?.options?.recordInputs ?? shouldRecordInputsAndOutputs,\n    recordOutputs: integration?.options?.recordOutputs ?? shouldRecordInputsAndOutputs,\n  };\n}\n\n/**\n * Instrument a method with Sentry spans\n * Following Sentry AI Agents Manual Instrumentation conventions\n * @see https://docs.sentry.io/platforms/javascript/guides/node/tracing/instrumentation/ai-agents-module/#manual-instrumentation\n */\nfunction instrumentMethod(\n  originalMethod,\n  methodPath,\n  context,\n  options,\n) {\n  return async function instrumentedMethod(...args) {\n    const finalOptions = options || getOptionsFromIntegration();\n    const requestAttributes = extractRequestAttributes(args, methodPath);\n    const model = (requestAttributes[genAiAttributes.GEN_AI_REQUEST_MODEL_ATTRIBUTE] ) || 'unknown';\n    const operationName = utils.getOperationName(methodPath);\n\n    const params = args[0] ;\n    const isStreamRequested = params && typeof params === 'object' && params.stream === true;\n\n    if (isStreamRequested) {\n      // For streaming responses, use manual span management to properly handle the async generator lifecycle\n      return trace.startSpanManual(\n        {\n          name: `${operationName} ${model} stream-response`,\n          op: utils.getSpanOperation(methodPath),\n          attributes: requestAttributes ,\n        },\n        async (span) => {\n          try {\n            if (finalOptions.recordInputs && args[0] && typeof args[0] === 'object') {\n              addRequestAttributes(span, args[0] );\n            }\n\n            const result = await originalMethod.apply(context, args);\n\n            return streaming.instrumentStream(\n              result ,\n              span,\n              finalOptions.recordOutputs ?? false,\n            ) ;\n          } catch (error) {\n            // For streaming requests that fail before stream creation, we still want to record\n            // them as streaming requests but end the span gracefully\n            span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'internal_error' });\n            exports$1.captureException(error, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            span.end();\n            throw error;\n          }\n        },\n      );\n    } else {\n      //  Non-streaming responses\n      return trace.startSpan(\n        {\n          name: `${operationName} ${model}`,\n          op: utils.getSpanOperation(methodPath),\n          attributes: requestAttributes ,\n        },\n        async (span) => {\n          try {\n            if (finalOptions.recordInputs && args[0] && typeof args[0] === 'object') {\n              addRequestAttributes(span, args[0] );\n            }\n\n            const result = await originalMethod.apply(context, args);\n            addResponseAttributes(span, result, finalOptions.recordOutputs);\n            return result;\n          } catch (error) {\n            exports$1.captureException(error);\n            throw error;\n          }\n        },\n      );\n    }\n  };\n}\n\n/**\n * Create a deep proxy for OpenAI client instrumentation\n */\nfunction createDeepProxy(target, currentPath = '', options) {\n  return new Proxy(target, {\n    get(obj, prop) {\n      const value = (obj )[prop];\n      const methodPath = utils.buildMethodPath(currentPath, String(prop));\n\n      if (typeof value === 'function' && utils.shouldInstrument(methodPath)) {\n        return instrumentMethod(value , methodPath, obj, options);\n      }\n\n      if (typeof value === 'function') {\n        // Bind non-instrumented functions to preserve the original `this` context,\n        // which is required for accessing private class fields (e.g. #baseURL) in OpenAI SDK v5.\n        return value.bind(obj);\n      }\n\n      if (value && typeof value === 'object') {\n        return createDeepProxy(value , methodPath, options);\n      }\n\n      return value;\n    },\n  }) ;\n}\n\n/**\n * Instrument an OpenAI client with Sentry tracing\n * Can be used across Node.js, Cloudflare Workers, and Vercel Edge\n */\nfunction instrumentOpenAiClient(client, options) {\n  return createDeepProxy(client, '', options);\n}\n\nexports.instrumentOpenAiClient = instrumentOpenAiClient;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/streaming.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/openai/streaming.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst exports$1 = __webpack_require__(/*! ../../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst spanstatus = __webpack_require__(/*! ../../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst genAiAttributes = __webpack_require__(/*! ../gen-ai-attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/utils.js\");\n\n/**\n * State object used to accumulate information from a stream of OpenAI events/chunks.\n */\n\n/**\n * Processes tool calls from a chat completion chunk delta.\n * Follows the pattern: accumulate by index, then convert to array at the end.\n *\n * @param toolCalls - Array of tool calls from the delta.\n * @param state - The current streaming state to update.\n *\n *  @see https://platform.openai.com/docs/guides/function-calling#streaming\n */\nfunction processChatCompletionToolCalls(toolCalls, state) {\n  for (const toolCall of toolCalls) {\n    const index = toolCall.index;\n    if (index === undefined || !toolCall.function) continue;\n\n    // Initialize tool call if this is the first chunk for this index\n    if (!(index in state.chatCompletionToolCalls)) {\n      state.chatCompletionToolCalls[index] = {\n        ...toolCall,\n        function: {\n          name: toolCall.function.name,\n          arguments: toolCall.function.arguments || '',\n        },\n      };\n    } else {\n      // Accumulate function arguments from subsequent chunks\n      const existingToolCall = state.chatCompletionToolCalls[index];\n      if (toolCall.function.arguments && existingToolCall?.function) {\n        existingToolCall.function.arguments += toolCall.function.arguments;\n      }\n    }\n  }\n}\n\n/**\n * Processes a single OpenAI ChatCompletionChunk event, updating the streaming state.\n *\n * @param chunk - The ChatCompletionChunk event to process.\n * @param state - The current streaming state to update.\n * @param recordOutputs - Whether to record output text fragments.\n */\nfunction processChatCompletionChunk(chunk, state, recordOutputs) {\n  state.responseId = chunk.id ?? state.responseId;\n  state.responseModel = chunk.model ?? state.responseModel;\n  state.responseTimestamp = chunk.created ?? state.responseTimestamp;\n\n  if (chunk.usage) {\n    // For stream responses, the input tokens remain constant across all events in the stream.\n    // Output tokens, however, are only finalized in the last event.\n    // Since we can't guarantee that the last event will include usage data or even be a typed event,\n    // we update the output token values on every event that includes them.\n    // This ensures that output token usage is always set, even if the final event lacks it.\n    state.promptTokens = chunk.usage.prompt_tokens;\n    state.completionTokens = chunk.usage.completion_tokens;\n    state.totalTokens = chunk.usage.total_tokens;\n  }\n\n  for (const choice of chunk.choices ?? []) {\n    if (recordOutputs) {\n      if (choice.delta?.content) {\n        state.responseTexts.push(choice.delta.content);\n      }\n\n      // Handle tool calls from delta\n      if (choice.delta?.tool_calls) {\n        processChatCompletionToolCalls(choice.delta.tool_calls, state);\n      }\n    }\n    if (choice.finish_reason) {\n      state.finishReasons.push(choice.finish_reason);\n    }\n  }\n}\n\n/**\n * Processes a single OpenAI Responses API streaming event, updating the streaming state and span.\n *\n * @param streamEvent - The event to process (may be an error or unknown object).\n * @param state - The current streaming state to update.\n * @param recordOutputs - Whether to record output text fragments.\n * @param span - The span to update with error status if needed.\n */\nfunction processResponsesApiEvent(\n  streamEvent,\n  state,\n  recordOutputs,\n  span,\n) {\n  if (!(streamEvent && typeof streamEvent === 'object')) {\n    state.eventTypes.push('unknown:non-object');\n    return;\n  }\n  if (streamEvent instanceof Error) {\n    span.setStatus({ code: spanstatus.SPAN_STATUS_ERROR, message: 'internal_error' });\n    exports$1.captureException(streamEvent, {\n      mechanism: {\n        handled: false,\n      },\n    });\n    return;\n  }\n\n  if (!('type' in streamEvent)) return;\n  const event = streamEvent ;\n\n  if (!constants.RESPONSE_EVENT_TYPES.includes(event.type)) {\n    state.eventTypes.push(event.type);\n    return;\n  }\n\n  // Handle output text delta\n  if (recordOutputs) {\n    // Handle tool call events for Responses API\n    if (event.type === 'response.output_item.done' && 'item' in event) {\n      state.responsesApiToolCalls.push(event.item);\n    }\n\n    if (event.type === 'response.output_text.delta' && 'delta' in event && event.delta) {\n      state.responseTexts.push(event.delta);\n      return;\n    }\n  }\n\n  if ('response' in event) {\n    const { response } = event ;\n    state.responseId = response.id ?? state.responseId;\n    state.responseModel = response.model ?? state.responseModel;\n    state.responseTimestamp = response.created_at ?? state.responseTimestamp;\n\n    if (response.usage) {\n      // For stream responses, the input tokens remain constant across all events in the stream.\n      // Output tokens, however, are only finalized in the last event.\n      // Since we can't guarantee that the last event will include usage data or even be a typed event,\n      // we update the output token values on every event that includes them.\n      // This ensures that output token usage is always set, even if the final event lacks it.\n      state.promptTokens = response.usage.input_tokens;\n      state.completionTokens = response.usage.output_tokens;\n      state.totalTokens = response.usage.total_tokens;\n    }\n\n    if (response.status) {\n      state.finishReasons.push(response.status);\n    }\n\n    if (recordOutputs && response.output_text) {\n      state.responseTexts.push(response.output_text);\n    }\n  }\n}\n\n/**\n * Instruments a stream of OpenAI events, updating the provided span with relevant attributes and\n * optionally recording output text. This function yields each event from the input stream as it is processed.\n *\n * @template T - The type of events in the stream.\n * @param stream - The async iterable stream of events to instrument.\n * @param span - The span to add attributes to and to finish at the end of the stream.\n * @param recordOutputs - Whether to record output text fragments in the span.\n * @returns An async generator yielding each event from the input stream.\n */\nasync function* instrumentStream(\n  stream,\n  span,\n  recordOutputs,\n) {\n  const state = {\n    eventTypes: [],\n    responseTexts: [],\n    finishReasons: [],\n    responseId: '',\n    responseModel: '',\n    responseTimestamp: 0,\n    promptTokens: undefined,\n    completionTokens: undefined,\n    totalTokens: undefined,\n    chatCompletionToolCalls: {},\n    responsesApiToolCalls: [],\n  };\n\n  try {\n    for await (const event of stream) {\n      if (utils.isChatCompletionChunk(event)) {\n        processChatCompletionChunk(event , state, recordOutputs);\n      } else if (utils.isResponsesApiStreamEvent(event)) {\n        processResponsesApiEvent(event , state, recordOutputs, span);\n      }\n      yield event;\n    }\n  } finally {\n    utils.setCommonResponseAttributes(span, state.responseId, state.responseModel, state.responseTimestamp);\n    utils.setTokenUsageAttributes(span, state.promptTokens, state.completionTokens, state.totalTokens);\n\n    span.setAttributes({\n      [genAiAttributes.GEN_AI_RESPONSE_STREAMING_ATTRIBUTE]: true,\n    });\n\n    if (state.finishReasons.length) {\n      span.setAttributes({\n        [genAiAttributes.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]: JSON.stringify(state.finishReasons),\n      });\n    }\n\n    if (recordOutputs && state.responseTexts.length) {\n      span.setAttributes({\n        [genAiAttributes.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: state.responseTexts.join(''),\n      });\n    }\n\n    // Set tool calls attribute if any were accumulated\n    const chatCompletionToolCallsArray = Object.values(state.chatCompletionToolCalls);\n    const allToolCalls = [...chatCompletionToolCallsArray, ...state.responsesApiToolCalls];\n\n    if (allToolCalls.length > 0) {\n      span.setAttributes({\n        [genAiAttributes.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(allToolCalls),\n      });\n    }\n\n    span.end();\n  }\n}\n\nexports.instrumentStream = instrumentStream;\n//# sourceMappingURL=streaming.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvb3BlbmFpL3N0cmVhbWluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBa0I7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsNkdBQTZCO0FBQ3hELHdCQUF3QixtQkFBTyxDQUFDLDhHQUF5QjtBQUN6RCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBZ0I7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLDRGQUFZOztBQUVsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0RBQStEO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL29wZW5haS9zdHJlYW1pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4uLy4uL2V4cG9ydHMuanMnKTtcbmNvbnN0IHNwYW5zdGF0dXMgPSByZXF1aXJlKCcuLi8uLi90cmFjaW5nL3NwYW5zdGF0dXMuanMnKTtcbmNvbnN0IGdlbkFpQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL2dlbi1haS1hdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG5cbi8qKlxuICogU3RhdGUgb2JqZWN0IHVzZWQgdG8gYWNjdW11bGF0ZSBpbmZvcm1hdGlvbiBmcm9tIGEgc3RyZWFtIG9mIE9wZW5BSSBldmVudHMvY2h1bmtzLlxuICovXG5cbi8qKlxuICogUHJvY2Vzc2VzIHRvb2wgY2FsbHMgZnJvbSBhIGNoYXQgY29tcGxldGlvbiBjaHVuayBkZWx0YS5cbiAqIEZvbGxvd3MgdGhlIHBhdHRlcm46IGFjY3VtdWxhdGUgYnkgaW5kZXgsIHRoZW4gY29udmVydCB0byBhcnJheSBhdCB0aGUgZW5kLlxuICpcbiAqIEBwYXJhbSB0b29sQ2FsbHMgLSBBcnJheSBvZiB0b29sIGNhbGxzIGZyb20gdGhlIGRlbHRhLlxuICogQHBhcmFtIHN0YXRlIC0gVGhlIGN1cnJlbnQgc3RyZWFtaW5nIHN0YXRlIHRvIHVwZGF0ZS5cbiAqXG4gKiAgQHNlZSBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZyNzdHJlYW1pbmdcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc0NoYXRDb21wbGV0aW9uVG9vbENhbGxzKHRvb2xDYWxscywgc3RhdGUpIHtcbiAgZm9yIChjb25zdCB0b29sQ2FsbCBvZiB0b29sQ2FsbHMpIHtcbiAgICBjb25zdCBpbmRleCA9IHRvb2xDYWxsLmluZGV4O1xuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8ICF0b29sQ2FsbC5mdW5jdGlvbikgY29udGludWU7XG5cbiAgICAvLyBJbml0aWFsaXplIHRvb2wgY2FsbCBpZiB0aGlzIGlzIHRoZSBmaXJzdCBjaHVuayBmb3IgdGhpcyBpbmRleFxuICAgIGlmICghKGluZGV4IGluIHN0YXRlLmNoYXRDb21wbGV0aW9uVG9vbENhbGxzKSkge1xuICAgICAgc3RhdGUuY2hhdENvbXBsZXRpb25Ub29sQ2FsbHNbaW5kZXhdID0ge1xuICAgICAgICAuLi50b29sQ2FsbCxcbiAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICBuYW1lOiB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgIGFyZ3VtZW50czogdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzIHx8ICcnLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWNjdW11bGF0ZSBmdW5jdGlvbiBhcmd1bWVudHMgZnJvbSBzdWJzZXF1ZW50IGNodW5rc1xuICAgICAgY29uc3QgZXhpc3RpbmdUb29sQ2FsbCA9IHN0YXRlLmNoYXRDb21wbGV0aW9uVG9vbENhbGxzW2luZGV4XTtcbiAgICAgIGlmICh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgJiYgZXhpc3RpbmdUb29sQ2FsbD8uZnVuY3Rpb24pIHtcbiAgICAgICAgZXhpc3RpbmdUb29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgKz0gdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhIHNpbmdsZSBPcGVuQUkgQ2hhdENvbXBsZXRpb25DaHVuayBldmVudCwgdXBkYXRpbmcgdGhlIHN0cmVhbWluZyBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0gY2h1bmsgLSBUaGUgQ2hhdENvbXBsZXRpb25DaHVuayBldmVudCB0byBwcm9jZXNzLlxuICogQHBhcmFtIHN0YXRlIC0gVGhlIGN1cnJlbnQgc3RyZWFtaW5nIHN0YXRlIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSByZWNvcmRPdXRwdXRzIC0gV2hldGhlciB0byByZWNvcmQgb3V0cHV0IHRleHQgZnJhZ21lbnRzLlxuICovXG5mdW5jdGlvbiBwcm9jZXNzQ2hhdENvbXBsZXRpb25DaHVuayhjaHVuaywgc3RhdGUsIHJlY29yZE91dHB1dHMpIHtcbiAgc3RhdGUucmVzcG9uc2VJZCA9IGNodW5rLmlkID8/IHN0YXRlLnJlc3BvbnNlSWQ7XG4gIHN0YXRlLnJlc3BvbnNlTW9kZWwgPSBjaHVuay5tb2RlbCA/PyBzdGF0ZS5yZXNwb25zZU1vZGVsO1xuICBzdGF0ZS5yZXNwb25zZVRpbWVzdGFtcCA9IGNodW5rLmNyZWF0ZWQgPz8gc3RhdGUucmVzcG9uc2VUaW1lc3RhbXA7XG5cbiAgaWYgKGNodW5rLnVzYWdlKSB7XG4gICAgLy8gRm9yIHN0cmVhbSByZXNwb25zZXMsIHRoZSBpbnB1dCB0b2tlbnMgcmVtYWluIGNvbnN0YW50IGFjcm9zcyBhbGwgZXZlbnRzIGluIHRoZSBzdHJlYW0uXG4gICAgLy8gT3V0cHV0IHRva2VucywgaG93ZXZlciwgYXJlIG9ubHkgZmluYWxpemVkIGluIHRoZSBsYXN0IGV2ZW50LlxuICAgIC8vIFNpbmNlIHdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBsYXN0IGV2ZW50IHdpbGwgaW5jbHVkZSB1c2FnZSBkYXRhIG9yIGV2ZW4gYmUgYSB0eXBlZCBldmVudCxcbiAgICAvLyB3ZSB1cGRhdGUgdGhlIG91dHB1dCB0b2tlbiB2YWx1ZXMgb24gZXZlcnkgZXZlbnQgdGhhdCBpbmNsdWRlcyB0aGVtLlxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IG91dHB1dCB0b2tlbiB1c2FnZSBpcyBhbHdheXMgc2V0LCBldmVuIGlmIHRoZSBmaW5hbCBldmVudCBsYWNrcyBpdC5cbiAgICBzdGF0ZS5wcm9tcHRUb2tlbnMgPSBjaHVuay51c2FnZS5wcm9tcHRfdG9rZW5zO1xuICAgIHN0YXRlLmNvbXBsZXRpb25Ub2tlbnMgPSBjaHVuay51c2FnZS5jb21wbGV0aW9uX3Rva2VucztcbiAgICBzdGF0ZS50b3RhbFRva2VucyA9IGNodW5rLnVzYWdlLnRvdGFsX3Rva2VucztcbiAgfVxuXG4gIGZvciAoY29uc3QgY2hvaWNlIG9mIGNodW5rLmNob2ljZXMgPz8gW10pIHtcbiAgICBpZiAocmVjb3JkT3V0cHV0cykge1xuICAgICAgaWYgKGNob2ljZS5kZWx0YT8uY29udGVudCkge1xuICAgICAgICBzdGF0ZS5yZXNwb25zZVRleHRzLnB1c2goY2hvaWNlLmRlbHRhLmNvbnRlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgdG9vbCBjYWxscyBmcm9tIGRlbHRhXG4gICAgICBpZiAoY2hvaWNlLmRlbHRhPy50b29sX2NhbGxzKSB7XG4gICAgICAgIHByb2Nlc3NDaGF0Q29tcGxldGlvblRvb2xDYWxscyhjaG9pY2UuZGVsdGEudG9vbF9jYWxscywgc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hvaWNlLmZpbmlzaF9yZWFzb24pIHtcbiAgICAgIHN0YXRlLmZpbmlzaFJlYXNvbnMucHVzaChjaG9pY2UuZmluaXNoX3JlYXNvbik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIGEgc2luZ2xlIE9wZW5BSSBSZXNwb25zZXMgQVBJIHN0cmVhbWluZyBldmVudCwgdXBkYXRpbmcgdGhlIHN0cmVhbWluZyBzdGF0ZSBhbmQgc3Bhbi5cbiAqXG4gKiBAcGFyYW0gc3RyZWFtRXZlbnQgLSBUaGUgZXZlbnQgdG8gcHJvY2VzcyAobWF5IGJlIGFuIGVycm9yIG9yIHVua25vd24gb2JqZWN0KS5cbiAqIEBwYXJhbSBzdGF0ZSAtIFRoZSBjdXJyZW50IHN0cmVhbWluZyBzdGF0ZSB0byB1cGRhdGUuXG4gKiBAcGFyYW0gcmVjb3JkT3V0cHV0cyAtIFdoZXRoZXIgdG8gcmVjb3JkIG91dHB1dCB0ZXh0IGZyYWdtZW50cy5cbiAqIEBwYXJhbSBzcGFuIC0gVGhlIHNwYW4gdG8gdXBkYXRlIHdpdGggZXJyb3Igc3RhdHVzIGlmIG5lZWRlZC5cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1Jlc3BvbnNlc0FwaUV2ZW50KFxuICBzdHJlYW1FdmVudCxcbiAgc3RhdGUsXG4gIHJlY29yZE91dHB1dHMsXG4gIHNwYW4sXG4pIHtcbiAgaWYgKCEoc3RyZWFtRXZlbnQgJiYgdHlwZW9mIHN0cmVhbUV2ZW50ID09PSAnb2JqZWN0JykpIHtcbiAgICBzdGF0ZS5ldmVudFR5cGVzLnB1c2goJ3Vua25vd246bm9uLW9iamVjdCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3RyZWFtRXZlbnQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHNwYW4uc2V0U3RhdHVzKHsgY29kZTogc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludGVybmFsX2Vycm9yJyB9KTtcbiAgICBleHBvcnRzJDEuY2FwdHVyZUV4Y2VwdGlvbihzdHJlYW1FdmVudCwge1xuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoISgndHlwZScgaW4gc3RyZWFtRXZlbnQpKSByZXR1cm47XG4gIGNvbnN0IGV2ZW50ID0gc3RyZWFtRXZlbnQgO1xuXG4gIGlmICghY29uc3RhbnRzLlJFU1BPTlNFX0VWRU5UX1RZUEVTLmluY2x1ZGVzKGV2ZW50LnR5cGUpKSB7XG4gICAgc3RhdGUuZXZlbnRUeXBlcy5wdXNoKGV2ZW50LnR5cGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEhhbmRsZSBvdXRwdXQgdGV4dCBkZWx0YVxuICBpZiAocmVjb3JkT3V0cHV0cykge1xuICAgIC8vIEhhbmRsZSB0b29sIGNhbGwgZXZlbnRzIGZvciBSZXNwb25zZXMgQVBJXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdyZXNwb25zZS5vdXRwdXRfaXRlbS5kb25lJyAmJiAnaXRlbScgaW4gZXZlbnQpIHtcbiAgICAgIHN0YXRlLnJlc3BvbnNlc0FwaVRvb2xDYWxscy5wdXNoKGV2ZW50Lml0ZW0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnICYmICdkZWx0YScgaW4gZXZlbnQgJiYgZXZlbnQuZGVsdGEpIHtcbiAgICAgIHN0YXRlLnJlc3BvbnNlVGV4dHMucHVzaChldmVudC5kZWx0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCdyZXNwb25zZScgaW4gZXZlbnQpIHtcbiAgICBjb25zdCB7IHJlc3BvbnNlIH0gPSBldmVudCA7XG4gICAgc3RhdGUucmVzcG9uc2VJZCA9IHJlc3BvbnNlLmlkID8/IHN0YXRlLnJlc3BvbnNlSWQ7XG4gICAgc3RhdGUucmVzcG9uc2VNb2RlbCA9IHJlc3BvbnNlLm1vZGVsID8/IHN0YXRlLnJlc3BvbnNlTW9kZWw7XG4gICAgc3RhdGUucmVzcG9uc2VUaW1lc3RhbXAgPSByZXNwb25zZS5jcmVhdGVkX2F0ID8/IHN0YXRlLnJlc3BvbnNlVGltZXN0YW1wO1xuXG4gICAgaWYgKHJlc3BvbnNlLnVzYWdlKSB7XG4gICAgICAvLyBGb3Igc3RyZWFtIHJlc3BvbnNlcywgdGhlIGlucHV0IHRva2VucyByZW1haW4gY29uc3RhbnQgYWNyb3NzIGFsbCBldmVudHMgaW4gdGhlIHN0cmVhbS5cbiAgICAgIC8vIE91dHB1dCB0b2tlbnMsIGhvd2V2ZXIsIGFyZSBvbmx5IGZpbmFsaXplZCBpbiB0aGUgbGFzdCBldmVudC5cbiAgICAgIC8vIFNpbmNlIHdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBsYXN0IGV2ZW50IHdpbGwgaW5jbHVkZSB1c2FnZSBkYXRhIG9yIGV2ZW4gYmUgYSB0eXBlZCBldmVudCxcbiAgICAgIC8vIHdlIHVwZGF0ZSB0aGUgb3V0cHV0IHRva2VuIHZhbHVlcyBvbiBldmVyeSBldmVudCB0aGF0IGluY2x1ZGVzIHRoZW0uXG4gICAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdCBvdXRwdXQgdG9rZW4gdXNhZ2UgaXMgYWx3YXlzIHNldCwgZXZlbiBpZiB0aGUgZmluYWwgZXZlbnQgbGFja3MgaXQuXG4gICAgICBzdGF0ZS5wcm9tcHRUb2tlbnMgPSByZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnM7XG4gICAgICBzdGF0ZS5jb21wbGV0aW9uVG9rZW5zID0gcmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2VucztcbiAgICAgIHN0YXRlLnRvdGFsVG9rZW5zID0gcmVzcG9uc2UudXNhZ2UudG90YWxfdG9rZW5zO1xuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgIHN0YXRlLmZpbmlzaFJlYXNvbnMucHVzaChyZXNwb25zZS5zdGF0dXMpO1xuICAgIH1cblxuICAgIGlmIChyZWNvcmRPdXRwdXRzICYmIHJlc3BvbnNlLm91dHB1dF90ZXh0KSB7XG4gICAgICBzdGF0ZS5yZXNwb25zZVRleHRzLnB1c2gocmVzcG9uc2Uub3V0cHV0X3RleHQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluc3RydW1lbnRzIGEgc3RyZWFtIG9mIE9wZW5BSSBldmVudHMsIHVwZGF0aW5nIHRoZSBwcm92aWRlZCBzcGFuIHdpdGggcmVsZXZhbnQgYXR0cmlidXRlcyBhbmRcbiAqIG9wdGlvbmFsbHkgcmVjb3JkaW5nIG91dHB1dCB0ZXh0LiBUaGlzIGZ1bmN0aW9uIHlpZWxkcyBlYWNoIGV2ZW50IGZyb20gdGhlIGlucHV0IHN0cmVhbSBhcyBpdCBpcyBwcm9jZXNzZWQuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiBldmVudHMgaW4gdGhlIHN0cmVhbS5cbiAqIEBwYXJhbSBzdHJlYW0gLSBUaGUgYXN5bmMgaXRlcmFibGUgc3RyZWFtIG9mIGV2ZW50cyB0byBpbnN0cnVtZW50LlxuICogQHBhcmFtIHNwYW4gLSBUaGUgc3BhbiB0byBhZGQgYXR0cmlidXRlcyB0byBhbmQgdG8gZmluaXNoIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmVhbS5cbiAqIEBwYXJhbSByZWNvcmRPdXRwdXRzIC0gV2hldGhlciB0byByZWNvcmQgb3V0cHV0IHRleHQgZnJhZ21lbnRzIGluIHRoZSBzcGFuLlxuICogQHJldHVybnMgQW4gYXN5bmMgZ2VuZXJhdG9yIHlpZWxkaW5nIGVhY2ggZXZlbnQgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLlxuICovXG5hc3luYyBmdW5jdGlvbiogaW5zdHJ1bWVudFN0cmVhbShcbiAgc3RyZWFtLFxuICBzcGFuLFxuICByZWNvcmRPdXRwdXRzLFxuKSB7XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIGV2ZW50VHlwZXM6IFtdLFxuICAgIHJlc3BvbnNlVGV4dHM6IFtdLFxuICAgIGZpbmlzaFJlYXNvbnM6IFtdLFxuICAgIHJlc3BvbnNlSWQ6ICcnLFxuICAgIHJlc3BvbnNlTW9kZWw6ICcnLFxuICAgIHJlc3BvbnNlVGltZXN0YW1wOiAwLFxuICAgIHByb21wdFRva2VuczogdW5kZWZpbmVkLFxuICAgIGNvbXBsZXRpb25Ub2tlbnM6IHVuZGVmaW5lZCxcbiAgICB0b3RhbFRva2VuczogdW5kZWZpbmVkLFxuICAgIGNoYXRDb21wbGV0aW9uVG9vbENhbGxzOiB7fSxcbiAgICByZXNwb25zZXNBcGlUb29sQ2FsbHM6IFtdLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIGlmICh1dGlscy5pc0NoYXRDb21wbGV0aW9uQ2h1bmsoZXZlbnQpKSB7XG4gICAgICAgIHByb2Nlc3NDaGF0Q29tcGxldGlvbkNodW5rKGV2ZW50ICwgc3RhdGUsIHJlY29yZE91dHB1dHMpO1xuICAgICAgfSBlbHNlIGlmICh1dGlscy5pc1Jlc3BvbnNlc0FwaVN0cmVhbUV2ZW50KGV2ZW50KSkge1xuICAgICAgICBwcm9jZXNzUmVzcG9uc2VzQXBpRXZlbnQoZXZlbnQgLCBzdGF0ZSwgcmVjb3JkT3V0cHV0cywgc3Bhbik7XG4gICAgICB9XG4gICAgICB5aWVsZCBldmVudDtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgdXRpbHMuc2V0Q29tbW9uUmVzcG9uc2VBdHRyaWJ1dGVzKHNwYW4sIHN0YXRlLnJlc3BvbnNlSWQsIHN0YXRlLnJlc3BvbnNlTW9kZWwsIHN0YXRlLnJlc3BvbnNlVGltZXN0YW1wKTtcbiAgICB1dGlscy5zZXRUb2tlblVzYWdlQXR0cmlidXRlcyhzcGFuLCBzdGF0ZS5wcm9tcHRUb2tlbnMsIHN0YXRlLmNvbXBsZXRpb25Ub2tlbnMsIHN0YXRlLnRvdGFsVG9rZW5zKTtcblxuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICBbZ2VuQWlBdHRyaWJ1dGVzLkdFTl9BSV9SRVNQT05TRV9TVFJFQU1JTkdfQVRUUklCVVRFXTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGlmIChzdGF0ZS5maW5pc2hSZWFzb25zLmxlbmd0aCkge1xuICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgW2dlbkFpQXR0cmlidXRlcy5HRU5fQUlfUkVTUE9OU0VfRklOSVNIX1JFQVNPTlNfQVRUUklCVVRFXTogSlNPTi5zdHJpbmdpZnkoc3RhdGUuZmluaXNoUmVhc29ucyksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVjb3JkT3V0cHV0cyAmJiBzdGF0ZS5yZXNwb25zZVRleHRzLmxlbmd0aCkge1xuICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgW2dlbkFpQXR0cmlidXRlcy5HRU5fQUlfUkVTUE9OU0VfVEVYVF9BVFRSSUJVVEVdOiBzdGF0ZS5yZXNwb25zZVRleHRzLmpvaW4oJycpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRvb2wgY2FsbHMgYXR0cmlidXRlIGlmIGFueSB3ZXJlIGFjY3VtdWxhdGVkXG4gICAgY29uc3QgY2hhdENvbXBsZXRpb25Ub29sQ2FsbHNBcnJheSA9IE9iamVjdC52YWx1ZXMoc3RhdGUuY2hhdENvbXBsZXRpb25Ub29sQ2FsbHMpO1xuICAgIGNvbnN0IGFsbFRvb2xDYWxscyA9IFsuLi5jaGF0Q29tcGxldGlvblRvb2xDYWxsc0FycmF5LCAuLi5zdGF0ZS5yZXNwb25zZXNBcGlUb29sQ2FsbHNdO1xuXG4gICAgaWYgKGFsbFRvb2xDYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICBbZ2VuQWlBdHRyaWJ1dGVzLkdFTl9BSV9SRVNQT05TRV9UT09MX0NBTExTX0FUVFJJQlVURV06IEpTT04uc3RyaW5naWZ5KGFsbFRvb2xDYWxscyksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzcGFuLmVuZCgpO1xuICB9XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFN0cmVhbSA9IGluc3RydW1lbnRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/streaming.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/openai/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst genAiAttributes = __webpack_require__(/*! ../gen-ai-attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/gen-ai-attributes.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/constants.js\");\n\n/**\n * Maps OpenAI method paths to Sentry operation names\n */\nfunction getOperationName(methodPath) {\n  if (methodPath.includes('chat.completions')) {\n    return genAiAttributes.OPENAI_OPERATIONS.CHAT;\n  }\n  if (methodPath.includes('responses')) {\n    return genAiAttributes.OPENAI_OPERATIONS.RESPONSES;\n  }\n  return methodPath.split('.').pop() || 'unknown';\n}\n\n/**\n * Get the span operation for OpenAI methods\n * Following Sentry's convention: \"gen_ai.{operation_name}\"\n */\nfunction getSpanOperation(methodPath) {\n  return `gen_ai.${getOperationName(methodPath)}`;\n}\n\n/**\n * Check if a method path should be instrumented\n */\nfunction shouldInstrument(methodPath) {\n  return constants.INSTRUMENTED_METHODS.includes(methodPath );\n}\n\n/**\n * Build method path from current traversal\n */\nfunction buildMethodPath(currentPath, prop) {\n  return currentPath ? `${currentPath}.${prop}` : prop;\n}\n\n/**\n * Check if response is a Chat Completion object\n */\nfunction isChatCompletionResponse(response) {\n  return (\n    response !== null &&\n    typeof response === 'object' &&\n    'object' in response &&\n    (response ).object === 'chat.completion'\n  );\n}\n\n/**\n * Check if response is a Responses API object\n */\nfunction isResponsesApiResponse(response) {\n  return (\n    response !== null &&\n    typeof response === 'object' &&\n    'object' in response &&\n    (response ).object === 'response'\n  );\n}\n\n/**\n * Check if streaming event is from the Responses API\n */\nfunction isResponsesApiStreamEvent(event) {\n  return (\n    event !== null &&\n    typeof event === 'object' &&\n    'type' in event &&\n    typeof (event ).type === 'string' &&\n    ((event ).type ).startsWith('response.')\n  );\n}\n\n/**\n * Check if streaming event is a chat completion chunk\n */\nfunction isChatCompletionChunk(event) {\n  return (\n    event !== null &&\n    typeof event === 'object' &&\n    'object' in event &&\n    (event ).object === 'chat.completion.chunk'\n  );\n}\n\n/**\n * Set token usage attributes\n * @param span - The span to add attributes to\n * @param promptTokens - The number of prompt tokens\n * @param completionTokens - The number of completion tokens\n * @param totalTokens - The number of total tokens\n */\nfunction setTokenUsageAttributes(\n  span,\n  promptTokens,\n  completionTokens,\n  totalTokens,\n) {\n  if (promptTokens !== undefined) {\n    span.setAttributes({\n      [genAiAttributes.OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE]: promptTokens,\n      [genAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE]: promptTokens,\n    });\n  }\n  if (completionTokens !== undefined) {\n    span.setAttributes({\n      [genAiAttributes.OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE]: completionTokens,\n      [genAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE]: completionTokens,\n    });\n  }\n  if (totalTokens !== undefined) {\n    span.setAttributes({\n      [genAiAttributes.GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE]: totalTokens,\n    });\n  }\n}\n\n/**\n * Set common response attributes\n * @param span - The span to add attributes to\n * @param id - The response id\n * @param model - The response model\n * @param timestamp - The response timestamp\n */\nfunction setCommonResponseAttributes(span, id, model, timestamp) {\n  span.setAttributes({\n    [genAiAttributes.OPENAI_RESPONSE_ID_ATTRIBUTE]: id,\n    [genAiAttributes.GEN_AI_RESPONSE_ID_ATTRIBUTE]: id,\n  });\n  span.setAttributes({\n    [genAiAttributes.OPENAI_RESPONSE_MODEL_ATTRIBUTE]: model,\n    [genAiAttributes.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]: model,\n  });\n  span.setAttributes({\n    [genAiAttributes.OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE]: new Date(timestamp * 1000).toISOString(),\n  });\n}\n\nexports.buildMethodPath = buildMethodPath;\nexports.getOperationName = getOperationName;\nexports.getSpanOperation = getSpanOperation;\nexports.isChatCompletionChunk = isChatCompletionChunk;\nexports.isChatCompletionResponse = isChatCompletionResponse;\nexports.isResponsesApiResponse = isResponsesApiResponse;\nexports.isResponsesApiStreamEvent = isResponsesApiStreamEvent;\nexports.setCommonResponseAttributes = setCommonResponseAttributes;\nexports.setTokenUsageAttributes = setTokenUsageAttributes;\nexports.shouldInstrument = shouldInstrument;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvb3BlbmFpL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLHdCQUF3QixtQkFBTyxDQUFDLDhHQUF5QjtBQUN6RCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLGVBQWU7QUFDMUQ7QUFDQTtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFlBQVksR0FBRyxLQUFLO0FBQzlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLDZCQUE2QjtBQUM3QixnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsK0JBQStCO0FBQy9CLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvb3BlbmFpL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBnZW5BaUF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9nZW4tYWktYXR0cmlidXRlcy5qcycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcblxuLyoqXG4gKiBNYXBzIE9wZW5BSSBtZXRob2QgcGF0aHMgdG8gU2VudHJ5IG9wZXJhdGlvbiBuYW1lc1xuICovXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25OYW1lKG1ldGhvZFBhdGgpIHtcbiAgaWYgKG1ldGhvZFBhdGguaW5jbHVkZXMoJ2NoYXQuY29tcGxldGlvbnMnKSkge1xuICAgIHJldHVybiBnZW5BaUF0dHJpYnV0ZXMuT1BFTkFJX09QRVJBVElPTlMuQ0hBVDtcbiAgfVxuICBpZiAobWV0aG9kUGF0aC5pbmNsdWRlcygncmVzcG9uc2VzJykpIHtcbiAgICByZXR1cm4gZ2VuQWlBdHRyaWJ1dGVzLk9QRU5BSV9PUEVSQVRJT05TLlJFU1BPTlNFUztcbiAgfVxuICByZXR1cm4gbWV0aG9kUGF0aC5zcGxpdCgnLicpLnBvcCgpIHx8ICd1bmtub3duJztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNwYW4gb3BlcmF0aW9uIGZvciBPcGVuQUkgbWV0aG9kc1xuICogRm9sbG93aW5nIFNlbnRyeSdzIGNvbnZlbnRpb246IFwiZ2VuX2FpLntvcGVyYXRpb25fbmFtZX1cIlxuICovXG5mdW5jdGlvbiBnZXRTcGFuT3BlcmF0aW9uKG1ldGhvZFBhdGgpIHtcbiAgcmV0dXJuIGBnZW5fYWkuJHtnZXRPcGVyYXRpb25OYW1lKG1ldGhvZFBhdGgpfWA7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBtZXRob2QgcGF0aCBzaG91bGQgYmUgaW5zdHJ1bWVudGVkXG4gKi9cbmZ1bmN0aW9uIHNob3VsZEluc3RydW1lbnQobWV0aG9kUGF0aCkge1xuICByZXR1cm4gY29uc3RhbnRzLklOU1RSVU1FTlRFRF9NRVRIT0RTLmluY2x1ZGVzKG1ldGhvZFBhdGggKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBtZXRob2QgcGF0aCBmcm9tIGN1cnJlbnQgdHJhdmVyc2FsXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTWV0aG9kUGF0aChjdXJyZW50UGF0aCwgcHJvcCkge1xuICByZXR1cm4gY3VycmVudFBhdGggPyBgJHtjdXJyZW50UGF0aH0uJHtwcm9wfWAgOiBwcm9wO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHJlc3BvbnNlIGlzIGEgQ2hhdCBDb21wbGV0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBpc0NoYXRDb21wbGV0aW9uUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgcmV0dXJuIChcbiAgICByZXNwb25zZSAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiByZXNwb25zZSA9PT0gJ29iamVjdCcgJiZcbiAgICAnb2JqZWN0JyBpbiByZXNwb25zZSAmJlxuICAgIChyZXNwb25zZSApLm9iamVjdCA9PT0gJ2NoYXQuY29tcGxldGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiByZXNwb25zZSBpcyBhIFJlc3BvbnNlcyBBUEkgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGlzUmVzcG9uc2VzQXBpUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgcmV0dXJuIChcbiAgICByZXNwb25zZSAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiByZXNwb25zZSA9PT0gJ29iamVjdCcgJiZcbiAgICAnb2JqZWN0JyBpbiByZXNwb25zZSAmJlxuICAgIChyZXNwb25zZSApLm9iamVjdCA9PT0gJ3Jlc3BvbnNlJ1xuICApO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHN0cmVhbWluZyBldmVudCBpcyBmcm9tIHRoZSBSZXNwb25zZXMgQVBJXG4gKi9cbmZ1bmN0aW9uIGlzUmVzcG9uc2VzQXBpU3RyZWFtRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICBldmVudCAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAndHlwZScgaW4gZXZlbnQgJiZcbiAgICB0eXBlb2YgKGV2ZW50ICkudHlwZSA9PT0gJ3N0cmluZycgJiZcbiAgICAoKGV2ZW50ICkudHlwZSApLnN0YXJ0c1dpdGgoJ3Jlc3BvbnNlLicpXG4gICk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgc3RyZWFtaW5nIGV2ZW50IGlzIGEgY2hhdCBjb21wbGV0aW9uIGNodW5rXG4gKi9cbmZ1bmN0aW9uIGlzQ2hhdENvbXBsZXRpb25DaHVuayhldmVudCkge1xuICByZXR1cm4gKFxuICAgIGV2ZW50ICE9PSBudWxsICYmXG4gICAgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJlxuICAgICdvYmplY3QnIGluIGV2ZW50ICYmXG4gICAgKGV2ZW50ICkub2JqZWN0ID09PSAnY2hhdC5jb21wbGV0aW9uLmNodW5rJ1xuICApO1xufVxuXG4vKipcbiAqIFNldCB0b2tlbiB1c2FnZSBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0gc3BhbiAtIFRoZSBzcGFuIHRvIGFkZCBhdHRyaWJ1dGVzIHRvXG4gKiBAcGFyYW0gcHJvbXB0VG9rZW5zIC0gVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zXG4gKiBAcGFyYW0gY29tcGxldGlvblRva2VucyAtIFRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnNcbiAqIEBwYXJhbSB0b3RhbFRva2VucyAtIFRoZSBudW1iZXIgb2YgdG90YWwgdG9rZW5zXG4gKi9cbmZ1bmN0aW9uIHNldFRva2VuVXNhZ2VBdHRyaWJ1dGVzKFxuICBzcGFuLFxuICBwcm9tcHRUb2tlbnMsXG4gIGNvbXBsZXRpb25Ub2tlbnMsXG4gIHRvdGFsVG9rZW5zLFxuKSB7XG4gIGlmIChwcm9tcHRUb2tlbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICBbZ2VuQWlBdHRyaWJ1dGVzLk9QRU5BSV9VU0FHRV9QUk9NUFRfVE9LRU5TX0FUVFJJQlVURV06IHByb21wdFRva2VucyxcbiAgICAgIFtnZW5BaUF0dHJpYnV0ZXMuR0VOX0FJX1VTQUdFX0lOUFVUX1RPS0VOU19BVFRSSUJVVEVdOiBwcm9tcHRUb2tlbnMsXG4gICAgfSk7XG4gIH1cbiAgaWYgKGNvbXBsZXRpb25Ub2tlbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICBbZ2VuQWlBdHRyaWJ1dGVzLk9QRU5BSV9VU0FHRV9DT01QTEVUSU9OX1RPS0VOU19BVFRSSUJVVEVdOiBjb21wbGV0aW9uVG9rZW5zLFxuICAgICAgW2dlbkFpQXR0cmlidXRlcy5HRU5fQUlfVVNBR0VfT1VUUFVUX1RPS0VOU19BVFRSSUJVVEVdOiBjb21wbGV0aW9uVG9rZW5zLFxuICAgIH0pO1xuICB9XG4gIGlmICh0b3RhbFRva2VucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgIFtnZW5BaUF0dHJpYnV0ZXMuR0VOX0FJX1VTQUdFX1RPVEFMX1RPS0VOU19BVFRSSUJVVEVdOiB0b3RhbFRva2VucyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFNldCBjb21tb24gcmVzcG9uc2UgYXR0cmlidXRlc1xuICogQHBhcmFtIHNwYW4gLSBUaGUgc3BhbiB0byBhZGQgYXR0cmlidXRlcyB0b1xuICogQHBhcmFtIGlkIC0gVGhlIHJlc3BvbnNlIGlkXG4gKiBAcGFyYW0gbW9kZWwgLSBUaGUgcmVzcG9uc2UgbW9kZWxcbiAqIEBwYXJhbSB0aW1lc3RhbXAgLSBUaGUgcmVzcG9uc2UgdGltZXN0YW1wXG4gKi9cbmZ1bmN0aW9uIHNldENvbW1vblJlc3BvbnNlQXR0cmlidXRlcyhzcGFuLCBpZCwgbW9kZWwsIHRpbWVzdGFtcCkge1xuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtnZW5BaUF0dHJpYnV0ZXMuT1BFTkFJX1JFU1BPTlNFX0lEX0FUVFJJQlVURV06IGlkLFxuICAgIFtnZW5BaUF0dHJpYnV0ZXMuR0VOX0FJX1JFU1BPTlNFX0lEX0FUVFJJQlVURV06IGlkLFxuICB9KTtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbZ2VuQWlBdHRyaWJ1dGVzLk9QRU5BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEVdOiBtb2RlbCxcbiAgICBbZ2VuQWlBdHRyaWJ1dGVzLkdFTl9BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEVdOiBtb2RlbCxcbiAgfSk7XG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2dlbkFpQXR0cmlidXRlcy5PUEVOQUlfUkVTUE9OU0VfVElNRVNUQU1QX0FUVFJJQlVURV06IG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gIH0pO1xufVxuXG5leHBvcnRzLmJ1aWxkTWV0aG9kUGF0aCA9IGJ1aWxkTWV0aG9kUGF0aDtcbmV4cG9ydHMuZ2V0T3BlcmF0aW9uTmFtZSA9IGdldE9wZXJhdGlvbk5hbWU7XG5leHBvcnRzLmdldFNwYW5PcGVyYXRpb24gPSBnZXRTcGFuT3BlcmF0aW9uO1xuZXhwb3J0cy5pc0NoYXRDb21wbGV0aW9uQ2h1bmsgPSBpc0NoYXRDb21wbGV0aW9uQ2h1bms7XG5leHBvcnRzLmlzQ2hhdENvbXBsZXRpb25SZXNwb25zZSA9IGlzQ2hhdENvbXBsZXRpb25SZXNwb25zZTtcbmV4cG9ydHMuaXNSZXNwb25zZXNBcGlSZXNwb25zZSA9IGlzUmVzcG9uc2VzQXBpUmVzcG9uc2U7XG5leHBvcnRzLmlzUmVzcG9uc2VzQXBpU3RyZWFtRXZlbnQgPSBpc1Jlc3BvbnNlc0FwaVN0cmVhbUV2ZW50O1xuZXhwb3J0cy5zZXRDb21tb25SZXNwb25zZUF0dHJpYnV0ZXMgPSBzZXRDb21tb25SZXNwb25zZUF0dHJpYnV0ZXM7XG5leHBvcnRzLnNldFRva2VuVXNhZ2VBdHRyaWJ1dGVzID0gc2V0VG9rZW5Vc2FnZUF0dHJpYnV0ZXM7XG5leHBvcnRzLnNob3VsZEluc3RydW1lbnQgPSBzaG91bGRJbnN0cnVtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/openai/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parameterize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n *\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nfunction parameterize(strings, ...values) {\n  const formatted = new String(String.raw(strings, ...values)) ;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n\n/**\n * Tagged template function which returns parameterized representation of the message.\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nconst fmt = parameterize;\n\nexports.fmt = fmt;\nexports.parameterize = parameterize;\n//# sourceMappingURL=parameterize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyYW1ldGVyaXplLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQSw0REFBNEQsR0FBRyxNQUFNLEdBQUc7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWCxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL3BhcmFtZXRlcml6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUYWdnZWQgdGVtcGxhdGUgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBwYXJhbWV0ZXJpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXNzYWdlXG4gKiBGb3IgZXhhbXBsZTogcGFyYW1ldGVyaXplYFRoaXMgaXMgYSBsb2cgc3RhdGVtZW50IHdpdGggJHt4fSBhbmQgJHt5fSBwYXJhbXNgLCB3b3VsZCByZXR1cm46XG4gKiBcIl9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fXCI6ICdUaGlzIGlzIGEgbG9nIHN0YXRlbWVudCB3aXRoICVzIGFuZCAlcyBwYXJhbXMnLFxuICogXCJfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfX1wiOiBbJ2ZpcnN0JywgJ3NlY29uZCddXG4gKlxuICogQHBhcmFtIHN0cmluZ3MgQW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcyBzcGxpdHRlZCBiZXR3ZWVuIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gdmFsdWVzIEV4cHJlc3Npb25zIGV4dHJhY3RlZCBmcm9tIHRlbXBsYXRlIHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIEEgYFBhcmFtZXRlcml6ZWRTdHJpbmdgIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byBgY2FwdHVyZU1lc3NhZ2VgIG9yIFNlbnRyeS5sb2dnZXIuWCBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBwYXJhbWV0ZXJpemUoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IG5ldyBTdHJpbmcoU3RyaW5nLnJhdyhzdHJpbmdzLCAuLi52YWx1ZXMpKSA7XG4gIGZvcm1hdHRlZC5fX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyA9IHN0cmluZ3Muam9pbignXFx4MDAnKS5yZXBsYWNlKC8lL2csICclJScpLnJlcGxhY2UoL1xcMC9nLCAnJXMnKTtcbiAgZm9ybWF0dGVkLl9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fID0gdmFsdWVzO1xuICByZXR1cm4gZm9ybWF0dGVkO1xufVxuXG4vKipcbiAqIFRhZ2dlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHBhcmFtZXRlcml6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHN0cmluZ3MgQW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcyBzcGxpdHRlZCBiZXR3ZWVuIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gdmFsdWVzIEV4cHJlc3Npb25zIGV4dHJhY3RlZCBmcm9tIHRlbXBsYXRlIHN0cmluZ1xuICogQHJldHVybnMgQSBgUGFyYW1ldGVyaXplZFN0cmluZ2Agb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIGBjYXB0dXJlTWVzc2FnZWAgb3IgU2VudHJ5LmxvZ2dlci5YIG1ldGhvZHMuXG4gKi9cbmNvbnN0IGZtdCA9IHBhcmFtZXRlcml6ZTtcblxuZXhwb3J0cy5mbXQgPSBmbXQ7XG5leHBvcnRzLnBhcmFtZXRlcml6ZSA9IHBhcmFtZXRlcml6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcmFtZXRlcml6ZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n\nexports.parseSampleRate = parseSampleRate;\n//# sourceMappingURL=parseSampleRate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL3BhcnNlU2FtcGxlUmF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBQYXJzZSBhIHNhbXBsZSByYXRlIGZyb20gYSBnaXZlbiB2YWx1ZS5cbiAqIFRoaXMgd2lsbCBlaXRoZXIgcmV0dXJuIGEgYm9vbGVhbiBvciBudW1iZXIgc2FtcGxlIHJhdGUsIGlmIHRoZSBzYW1wbGUgcmF0ZSBpcyB2YWxpZCAoYmV0d2VlbiAwIGFuZCAxKS5cbiAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCwgd2UgdHJ5IHRvIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gKlxuICogQW55IGludmFsaWQgc2FtcGxlIHJhdGUgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2FtcGxlUmF0ZShzYW1wbGVSYXRlKSB7XG4gIGlmICh0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIE51bWJlcihzYW1wbGVSYXRlKTtcbiAgfVxuXG4gIGNvbnN0IHJhdGUgPSB0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHNhbXBsZVJhdGUpIDogc2FtcGxlUmF0ZTtcbiAgaWYgKHR5cGVvZiByYXRlICE9PSAnbnVtYmVyJyB8fCBpc05hTihyYXRlKSB8fCByYXRlIDwgMCB8fCByYXRlID4gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gcmF0ZTtcbn1cblxuZXhwb3J0cy5wYXJzZVNhbXBsZVJhdGUgPSBwYXJzZVNhbXBsZVJhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZVNhbXBsZVJhdGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/path.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/path.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve(...args) {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join(...args) {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n\nexports.basename = basename;\nexports.dirname = dirname;\nexports.isAbsolute = isAbsolute;\nexports.join = join;\nexports.normalizePath = normalizePath;\nexports.relative = relative;\nexports.resolve = resolve;\n//# sourceMappingURL=path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbURBQW1ELElBQUk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsc0JBQXNCO0FBQ2pGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDLDhCQUE4QjtBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsS0FBSyxHQUFHLGFBQWE7QUFDM0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9CQUFvQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsVUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQyxzQkFBc0I7QUFDdEQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsZUFBZTtBQUNmLGtCQUFrQjtBQUNsQixZQUFZO0FBQ1oscUJBQXFCO0FBQ3JCLGdCQUFnQjtBQUNoQixlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL3BhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIFNsaWdodGx5IG1vZGlmaWVkIChubyBJRTggc3VwcG9ydCwgRVM2KSBhbmQgdHJhbnNjcmliZWQgdG8gVHlwZVNjcmlwdFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NhbHZpbm1ldGNhbGYvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL2Jsb2IvNjNhYjhhYWNkMDEzNzY3NDQ1Y2EyOTllNDY4ZDlhNjBhOTUzMjhkNy9zcmMvZXM2L3BhdGguanNcbi8vXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICBsZXQgdXAgPSAwO1xuICBmb3IgKGxldCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG5jb25zdCBzcGxpdFBhdGhSZSA9IC9eKFxcUys6XFxcXHxcXC8/KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXi9cXFxcXSs/fCkoXFwuW14uL1xcXFxdKnwpKSg/OlsvXFxcXF0qKSQvO1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBzcGxpdFBhdGgoZmlsZW5hbWUpIHtcbiAgLy8gVHJ1bmNhdGUgZmlsZXMgbmFtZXMgZ3JlYXRlciB0aGFuIDEwMjQgY2hhcmFjdGVycyB0byBhdm9pZCByZWdleCBkb3NcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzg3MzcjZGlzY3Vzc2lvbl9yMTI4NTcxOTE3MlxuICBjb25zdCB0cnVuY2F0ZWQgPSBmaWxlbmFtZS5sZW5ndGggPiAxMDI0ID8gYDx0cnVuY2F0ZWQ+JHtmaWxlbmFtZS5zbGljZSgtMTAyNCl9YCA6IGZpbGVuYW1lO1xuICBjb25zdCBwYXJ0cyA9IHNwbGl0UGF0aFJlLmV4ZWModHJ1bmNhdGVkKTtcbiAgcmV0dXJuIHBhcnRzID8gcGFydHMuc2xpY2UoMSkgOiBbXTtcbn1cblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiByZXNvbHZlKC4uLmFyZ3MpIHtcbiAgbGV0IHJlc29sdmVkUGF0aCA9ICcnO1xuICBsZXQgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSBhcmdzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIGNvbnN0IHBhdGggPSBpID49IDAgPyBhcmdzW2ldIDogJy8nO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBlbnRyaWVzXG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBgJHtwYXRofS8ke3Jlc29sdmVkUGF0aH1gO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoXG4gICAgcmVzb2x2ZWRQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gISFwKSxcbiAgICAhcmVzb2x2ZWRBYnNvbHV0ZSxcbiAgKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuIChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoIHx8ICcuJztcbn1cblxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiB0cmltKGFycikge1xuICBsZXQgc3RhcnQgPSAwO1xuICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgaWYgKGFycltzdGFydF0gIT09ICcnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBsZXQgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbn1cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgZnJvbSA9IHJlc29sdmUoZnJvbSkuc2xpY2UoMSk7XG4gIHRvID0gcmVzb2x2ZSh0bykuc2xpY2UoMSk7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuICBjb25zdCBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIGNvbnN0IHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgbGV0IHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBsZXQgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICBjb25zdCBpc1BhdGhBYnNvbHV0ZSA9IGlzQWJzb2x1dGUocGF0aCk7XG4gIGNvbnN0IHRyYWlsaW5nU2xhc2ggPSBwYXRoLnNsaWNlKC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVBcnJheShcbiAgICBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gISFwKSxcbiAgICAhaXNQYXRoQWJzb2x1dGUsXG4gICkuam9pbignLycpO1xuXG4gIGlmICghbm9ybWFsaXplZFBhdGggJiYgIWlzUGF0aEFic29sdXRlKSB7XG4gICAgbm9ybWFsaXplZFBhdGggPSAnLic7XG4gIH1cbiAgaWYgKG5vcm1hbGl6ZWRQYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBub3JtYWxpemVkUGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzUGF0aEFic29sdXRlID8gJy8nIDogJycpICsgbm9ybWFsaXplZFBhdGg7XG59XG5cbi8vIHBvc2l4IHZlcnNpb25cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBwb3NpeCB2ZXJzaW9uXG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGpvaW4oLi4uYXJncykge1xuICByZXR1cm4gbm9ybWFsaXplUGF0aChhcmdzLmpvaW4oJy8nKSk7XG59XG5cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKTtcbiAgY29uc3Qgcm9vdCA9IHJlc3VsdFswXSB8fCAnJztcbiAgbGV0IGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc2xpY2UoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3QgKyBkaXI7XG59XG5cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gIGxldCBmID0gc3BsaXRQYXRoKHBhdGgpWzJdIHx8ICcnO1xuICBpZiAoZXh0ICYmIGYuc2xpY2UoZXh0Lmxlbmd0aCAqIC0xKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc2xpY2UoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn1cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGJhc2VuYW1lO1xuZXhwb3J0cy5kaXJuYW1lID0gZGlybmFtZTtcbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGlzQWJzb2x1dGU7XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gbm9ybWFsaXplUGF0aDtcbmV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHJlc29sdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/path.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst eventProcessors = __webpack_require__(/*! ../eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\nconst debugIds = __webpack_require__(/*! ./debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-ids.js\");\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/normalize.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\nconst time = __webpack_require__(/*! ./time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nfunction prepareEvent(\n  options,\n  event,\n  hint,\n  scope,\n  client,\n  isolationScope,\n) {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;\n  const prepared = {\n    ...event,\n    event_id: event.event_id || hint.event_id || misc.uuid4(),\n    timestamp: event.timestamp || time.dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    misc.addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = currentScopes.getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent.applyScopeDataToEvent(prepared, data);\n\n  const eventProcessors$1 = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = eventProcessors.notifyEventProcessors(eventProcessors$1, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event, options) {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || constants.DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = string.truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nfunction applyDebugIds(event, stackParser) {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = debugIds.getFilenameToDebugIdMap(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nfunction applyDebugMeta(event) {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event, integrationNames) {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event, depth, maxBreadth) {\n  if (!event) {\n    return null;\n  }\n\n  const normalized = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize.normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize.normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize.normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize.normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize.normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize.normalize(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize.normalize(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope$1, captureContext) {\n  if (!captureContext) {\n    return scope$1;\n  }\n\n  const finalScope = scope$1 ? scope$1.clone() : new scope.Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nfunction parseEventHintOrCaptureContext(\n  hint,\n) {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint) {\n  return hint instanceof scope.Scope || typeof hint === 'function';\n}\n\nconst captureContextKeys = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] ;\n\nfunction hintIsScopeContext(hint) {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key ));\n}\n\nexports.applyClientOptions = applyClientOptions;\nexports.applyDebugIds = applyDebugIds;\nexports.applyDebugMeta = applyDebugMeta;\nexports.parseEventHintOrCaptureContext = parseEventHintOrCaptureContext;\nexports.prepareEvent = prepareEvent;\n//# sourceMappingURL=prepareEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/promisebuffer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/promisebuffer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst syncpromise = __webpack_require__(/*! ./syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\");\n\nconst SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return syncpromise.rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new syncpromise.SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void syncpromise.resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n\nexports.SENTRY_BUFFER_FULL_ERROR = SENTRY_BUFFER_FULL_ERROR;\nexports.makePromiseBuffer = makePromiseBuffer;\n//# sourceMappingURL=promisebuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcHJvbWlzZWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxvQkFBb0IsbUJBQU8sQ0FBQyxpR0FBa0I7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEMseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9wcm9taXNlYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBzeW5jcHJvbWlzZSA9IHJlcXVpcmUoJy4vc3luY3Byb21pc2UuanMnKTtcblxuY29uc3QgU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SID0gU3ltYm9sLmZvcignU2VudHJ5QnVmZmVyRnVsbEVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBuZXcgUHJvbWlzZUJ1ZmZlciBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGxpbWl0XG4gKiBAcGFyYW0gbGltaXQgbWF4IG51bWJlciBvZiBwcm9taXNlcyB0aGF0IGNhbiBiZSBzdG9yZWQgaW4gdGhlIGJ1ZmZlclxuICovXG5mdW5jdGlvbiBtYWtlUHJvbWlzZUJ1ZmZlcihsaW1pdCkge1xuICBjb25zdCBidWZmZXIgPSBbXTtcblxuICBmdW5jdGlvbiBpc1JlYWR5KCkge1xuICAgIHJldHVybiBsaW1pdCA9PT0gdW5kZWZpbmVkIHx8IGJ1ZmZlci5sZW5ndGggPCBsaW1pdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBwcm9taXNlIGZyb20gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAqIEByZXR1cm5zIFJlbW92ZWQgcHJvbWlzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbW92ZSh0YXNrKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zcGxpY2UoYnVmZmVyLmluZGV4T2YodGFzayksIDEpWzBdIHx8IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHByb21pc2UgKHJlcHJlc2VudGluZyBhbiBpbi1mbGlnaHQgYWN0aW9uKSB0byB0aGUgcXVldWUsIGFuZCBzZXQgaXQgdG8gcmVtb3ZlIGl0c2VsZiBvbiBmdWxmaWxsbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHRhc2tQcm9kdWNlciBBIGZ1bmN0aW9uIHByb2R1Y2luZyBhbnkgUHJvbWlzZUxpa2U8VD47IEluIHByZXZpb3VzIHZlcnNpb25zIHRoaXMgdXNlZCB0byBiZSBgdGFzazpcbiAgICogICAgICAgIFByb21pc2VMaWtlPFQ+YCwgYnV0IHVuZGVyIHRoYXQgbW9kZWwsIFByb21pc2VzIHdlcmUgaW5zdGFudGx5IGNyZWF0ZWQgb24gdGhlIGNhbGwtc2l0ZSBhbmQgdGhlaXIgZXhlY3V0b3JcbiAgICogICAgICAgIGZ1bmN0aW9ucyB0aGVyZWZvcmUgcmFuIGltbWVkaWF0ZWx5LiBUaHVzLCBldmVuIGlmIHRoZSBidWZmZXIgd2FzIGZ1bGwsIHRoZSBhY3Rpb24gc3RpbGwgaGFwcGVuZWQuIEJ5XG4gICAqICAgICAgICByZXF1aXJpbmcgdGhlIHByb21pc2UgdG8gYmUgd3JhcHBlZCBpbiBhIGZ1bmN0aW9uLCB3ZSBjYW4gZGVmZXIgcHJvbWlzZSBjcmVhdGlvbiB1bnRpbCBhZnRlciB0aGUgYnVmZmVyXG4gICAqICAgICAgICBsaW1pdCBjaGVjay5cbiAgICogQHJldHVybnMgVGhlIG9yaWdpbmFsIHByb21pc2UuXG4gICAqL1xuICBmdW5jdGlvbiBhZGQodGFza1Byb2R1Y2VyKSB7XG4gICAgaWYgKCFpc1JlYWR5KCkpIHtcbiAgICAgIHJldHVybiBzeW5jcHJvbWlzZS5yZWplY3RlZFN5bmNQcm9taXNlKFNFTlRSWV9CVUZGRVJfRlVMTF9FUlJPUik7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgdGhlIHRhc2sgYW5kIGFkZCBpdHMgcHJvbWlzZSB0byB0aGUgcXVldWVcbiAgICBjb25zdCB0YXNrID0gdGFza1Byb2R1Y2VyKCk7XG4gICAgaWYgKGJ1ZmZlci5pbmRleE9mKHRhc2spID09PSAtMSkge1xuICAgICAgYnVmZmVyLnB1c2godGFzayk7XG4gICAgfVxuICAgIHZvaWQgdGFza1xuICAgICAgLnRoZW4oKCkgPT4gcmVtb3ZlKHRhc2spKVxuICAgICAgLy8gVXNlIGB0aGVuKG51bGwsIHJlamVjdGlvbkhhbmRsZXIpYCByYXRoZXIgdGhhbiBgY2F0Y2gocmVqZWN0aW9uSGFuZGxlcilgIHNvIHRoYXQgd2UgY2FuIHVzZSBgUHJvbWlzZUxpa2VgXG4gICAgICAvLyByYXRoZXIgdGhhbiBgUHJvbWlzZWAuIGBQcm9taXNlTGlrZWAgZG9lc24ndCBoYXZlIGEgYC5jYXRjaGAgbWV0aG9kLCBtYWtpbmcgaXRzIHBvbHlmaWxsIHNtYWxsZXIuIChFUzUgZGlkbid0XG4gICAgICAvLyBoYXZlIHByb21pc2VzLCBzbyBUUyBoYXMgdG8gcG9seWZpbGwgd2hlbiBkb3duLWNvbXBpbGluZy4pXG4gICAgICAudGhlbihudWxsLCAoKSA9PlxuICAgICAgICByZW1vdmUodGFzaykudGhlbihudWxsLCAoKSA9PiB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSB0byBhZGQgYW5vdGhlciBjYXRjaCBoZXJlIGJlY2F1c2UgYHJlbW92ZSgpYCBzdGFydHMgYSBuZXcgcHJvbWlzZSBjaGFpbi5cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIHJldHVybiB0YXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgcXVldWUgdG8gcmVzb2x2ZSBvciBmb3IgdGltZW91dCB0byBleHBpcmUsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cbiAgICpcbiAgICogQHBhcmFtIHRpbWVvdXQgVGhlIHRpbWUsIGluIG1zLCBhZnRlciB3aGljaCB0byByZXNvbHZlIHRvIGBmYWxzZWAgaWYgdGhlIHF1ZXVlIGlzIHN0aWxsIG5vbi1lbXB0eS4gUGFzc2luZyBgMGAgKG9yXG4gICAqIG5vdCBwYXNzaW5nIGFueXRoaW5nKSB3aWxsIG1ha2UgdGhlIHByb21pc2Ugd2FpdCBhcyBsb25nIGFzIGl0IHRha2VzIGZvciB0aGUgcXVldWUgdG8gZHJhaW4gYmVmb3JlIHJlc29sdmluZyB0b1xuICAgKiBgdHJ1ZWAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCB3aWxsIHJlc29sdmUgdG8gYHRydWVgIGlmIHRoZSBxdWV1ZSBpcyBhbHJlYWR5IGVtcHR5IG9yIGRyYWlucyBiZWZvcmUgdGhlIHRpbWVvdXQsIGFuZFxuICAgKiBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZnVuY3Rpb24gZHJhaW4odGltZW91dCkge1xuICAgIHJldHVybiBuZXcgc3luY3Byb21pc2UuU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGNvdW50ZXIgPSBidWZmZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoIWNvdW50ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdhaXQgZm9yIGB0aW1lb3V0YCBtcyBhbmQgdGhlbiByZXNvbHZlIHRvIGBmYWxzZWAgKGlmIG5vdCBjYW5jZWxsZWQgZmlyc3QpXG4gICAgICBjb25zdCBjYXB0dXJlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRpbWVvdXQgJiYgdGltZW91dCA+IDApIHtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGltZW91dCk7XG5cbiAgICAgIC8vIGlmIGFsbCBwcm9taXNlcyByZXNvbHZlIGluIHRpbWUsIGNhbmNlbCB0aGUgdGltZXIgYW5kIHJlc29sdmUgdG8gYHRydWVgXG4gICAgICBidWZmZXIuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgdm9pZCBzeW5jcHJvbWlzZS5yZXNvbHZlZFN5bmNQcm9taXNlKGl0ZW0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICghLS1jb3VudGVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FwdHVyZWRTZXRUaW1lb3V0KTtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgICQ6IGJ1ZmZlcixcbiAgICBhZGQsXG4gICAgZHJhaW4sXG4gIH07XG59XG5cbmV4cG9ydHMuU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SID0gU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SO1xuZXhwb3J0cy5tYWtlUHJvbWlzZUJ1ZmZlciA9IG1ha2VQcm9taXNlQnVmZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZWJ1ZmZlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/promisebuffer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/propagationContext.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/misc.js\");\n\n/**\n * Generate a random, valid trace ID.\n */\nfunction generateTraceId() {\n  return misc.uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nfunction generateSpanId() {\n  return misc.uuid4().substring(16);\n}\n\nexports.generateSpanId = generateSpanId;\nexports.generateTraceId = generateTraceId;\n//# sourceMappingURL=propagationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcHJvcGFnYXRpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxtRkFBVzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9wcm9wYWdhdGlvbkNvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG1pc2MgPSByZXF1aXJlKCcuL21pc2MuanMnKTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgdHJhY2UgSUQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVHJhY2VJZCgpIHtcbiAgcmV0dXJuIG1pc2MudXVpZDQoKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgc3BhbiBJRC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTcGFuSWQoKSB7XG4gIHJldHVybiBtaXNjLnV1aWQ0KCkuc3Vic3RyaW5nKDE2KTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZVNwYW5JZCA9IGdlbmVyYXRlU3BhbklkO1xuZXhwb3J0cy5nZW5lcmF0ZVRyYWNlSWQgPSBnZW5lcmF0ZVRyYWNlSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wYWdhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/ratelimit.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/ratelimit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(\n  limits,\n  { statusCode, headers },\n  now = Date.now(),\n) {\n  const updatedRateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) ;\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n\nexports.DEFAULT_RETRY_AFTER = DEFAULT_RETRY_AFTER;\nexports.disabledUntil = disabledUntil;\nexports.isRateLimited = isRateLimited;\nexports.parseRetryAfterHeader = parseRetryAfterHeader;\nexports.updateRateLimits = updateRateLimits;\n//# sourceMappingURL=ratelimit.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcmF0ZWxpbWl0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsT0FBTztBQUN6QztBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxxQkFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsV0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQiw2QkFBNkI7QUFDN0Isd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9yYXRlbGltaXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIEludGVudGlvbmFsbHkga2VlcGluZyB0aGUga2V5IGJyb2FkLCBhcyB3ZSBkb24ndCBrbm93IGZvciBzdXJlIHdoYXQgcmF0ZSBsaW1pdCBoZWFkZXJzIGdldCByZXR1cm5lZCBmcm9tIGJhY2tlbmRcblxuY29uc3QgREVGQVVMVF9SRVRSWV9BRlRFUiA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuXG4vKipcbiAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAqIEBwYXJhbSBub3cgY3VycmVudCB1bml4IHRpbWVzdGFtcFxuICpcbiAqL1xuZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKGhlYWRlciwgbm93ID0gRGF0ZS5ub3coKSkge1xuICBjb25zdCBoZWFkZXJEZWxheSA9IHBhcnNlSW50KGAke2hlYWRlcn1gLCAxMCk7XG4gIGlmICghaXNOYU4oaGVhZGVyRGVsYXkpKSB7XG4gICAgcmV0dXJuIGhlYWRlckRlbGF5ICogMTAwMDtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlckRhdGUgPSBEYXRlLnBhcnNlKGAke2hlYWRlcn1gKTtcbiAgaWYgKCFpc05hTihoZWFkZXJEYXRlKSkge1xuICAgIHJldHVybiBoZWFkZXJEYXRlIC0gbm93O1xuICB9XG5cbiAgcmV0dXJuIERFRkFVTFRfUkVUUllfQUZURVI7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZSB0aGF0IHRoZSBnaXZlbiBjYXRlZ29yeSBpcyBkaXNhYmxlZCB1bnRpbCBmb3IgcmF0ZSBsaW1pdGluZy5cbiAqIEluIGNhc2Ugbm8gY2F0ZWdvcnktc3BlY2lmaWMgbGltaXQgaXMgc2V0IGJ1dCBhIGdlbmVyYWwgcmF0ZSBsaW1pdCBhY3Jvc3MgYWxsIGNhdGVnb3JpZXMgaXMgYWN0aXZlLFxuICogdGhhdCB0aW1lIGlzIHJldHVybmVkLlxuICpcbiAqIEByZXR1cm4gdGhlIHRpbWUgaW4gbXMgdGhhdCB0aGUgY2F0ZWdvcnkgaXMgZGlzYWJsZWQgdW50aWwgb3IgMCBpZiB0aGVyZSdzIG5vIGFjdGl2ZSByYXRlIGxpbWl0LlxuICovXG5mdW5jdGlvbiBkaXNhYmxlZFVudGlsKGxpbWl0cywgZGF0YUNhdGVnb3J5KSB7XG4gIHJldHVybiBsaW1pdHNbZGF0YUNhdGVnb3J5XSB8fCBsaW1pdHMuYWxsIHx8IDA7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2F0ZWdvcnkgaXMgcmF0ZSBsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIGlzUmF0ZUxpbWl0ZWQobGltaXRzLCBkYXRhQ2F0ZWdvcnksIG5vdyA9IERhdGUubm93KCkpIHtcbiAgcmV0dXJuIGRpc2FibGVkVW50aWwobGltaXRzLCBkYXRhQ2F0ZWdvcnkpID4gbm93O1xufVxuXG4vKipcbiAqIFVwZGF0ZSByYXRlbGltaXRzIGZyb20gaW5jb21pbmcgaGVhZGVycy5cbiAqXG4gKiBAcmV0dXJuIHRoZSB1cGRhdGVkIFJhdGVMaW1pdHMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiB1cGRhdGVSYXRlTGltaXRzKFxuICBsaW1pdHMsXG4gIHsgc3RhdHVzQ29kZSwgaGVhZGVycyB9LFxuICBub3cgPSBEYXRlLm5vdygpLFxuKSB7XG4gIGNvbnN0IHVwZGF0ZWRSYXRlTGltaXRzID0ge1xuICAgIC4uLmxpbWl0cyxcbiAgfTtcblxuICAvLyBcIlRoZSBuYW1lIGlzIGNhc2UtaW5zZW5zaXRpdmUuXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hlYWRlcnMvZ2V0XG4gIGNvbnN0IHJhdGVMaW1pdEhlYWRlciA9IGhlYWRlcnM/LlsneC1zZW50cnktcmF0ZS1saW1pdHMnXTtcbiAgY29uc3QgcmV0cnlBZnRlckhlYWRlciA9IGhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXTtcblxuICBpZiAocmF0ZUxpbWl0SGVhZGVyKSB7XG4gICAgLyoqXG4gICAgICogcmF0ZSBsaW1pdCBoZWFkZXJzIGFyZSBvZiB0aGUgZm9ybVxuICAgICAqICAgICA8aGVhZGVyPiw8aGVhZGVyPiwuLlxuICAgICAqIHdoZXJlIGVhY2ggPGhlYWRlcj4gaXMgb2YgdGhlIGZvcm1cbiAgICAgKiAgICAgPHJldHJ5X2FmdGVyPjogPGNhdGVnb3JpZXM+OiA8c2NvcGU+OiA8cmVhc29uX2NvZGU+OiA8bmFtZXNwYWNlcz5cbiAgICAgKiB3aGVyZVxuICAgICAqICAgICA8cmV0cnlfYWZ0ZXI+IGlzIGEgZGVsYXkgaW4gc2Vjb25kc1xuICAgICAqICAgICA8Y2F0ZWdvcmllcz4gaXMgdGhlIGV2ZW50IHR5cGUocykgKGVycm9yLCB0cmFuc2FjdGlvbiwgZXRjKSBiZWluZyByYXRlIGxpbWl0ZWQgYW5kIGlzIG9mIHRoZSBmb3JtXG4gICAgICogICAgICAgICA8Y2F0ZWdvcnk+OzxjYXRlZ29yeT47Li4uXG4gICAgICogICAgIDxzY29wZT4gaXMgd2hhdCdzIGJlaW5nIGxpbWl0ZWQgKG9yZywgcHJvamVjdCwgb3Iga2V5KSAtIGlnbm9yZWQgYnkgU0RLXG4gICAgICogICAgIDxyZWFzb25fY29kZT4gaXMgYW4gYXJiaXRyYXJ5IHN0cmluZyBsaWtlIFwib3JnX3F1b3RhXCIgLSBpZ25vcmVkIGJ5IFNES1xuICAgICAqICAgICA8bmFtZXNwYWNlcz4gU2VtaWNvbG9uLXNlcGFyYXRlZCBsaXN0IG9mIG1ldHJpYyBuYW1lc3BhY2UgaWRlbnRpZmllcnMuIERlZmluZXMgd2hpY2ggbmFtZXNwYWNlKHMpIHdpbGwgYmUgYWZmZWN0ZWQuXG4gICAgICogICAgICAgICBPbmx5IHByZXNlbnQgaWYgcmF0ZSBsaW1pdCBhcHBsaWVzIHRvIHRoZSBtZXRyaWNfYnVja2V0IGRhdGEgY2F0ZWdvcnkuXG4gICAgICovXG4gICAgZm9yIChjb25zdCBsaW1pdCBvZiByYXRlTGltaXRIZWFkZXIudHJpbSgpLnNwbGl0KCcsJykpIHtcbiAgICAgIGNvbnN0IFtyZXRyeUFmdGVyLCBjYXRlZ29yaWVzLCAsICwgbmFtZXNwYWNlc10gPSBsaW1pdC5zcGxpdCgnOicsIDUpIDtcbiAgICAgIGNvbnN0IGhlYWRlckRlbGF5ID0gcGFyc2VJbnQocmV0cnlBZnRlciwgMTApO1xuICAgICAgY29uc3QgZGVsYXkgPSAoIWlzTmFOKGhlYWRlckRlbGF5KSA/IGhlYWRlckRlbGF5IDogNjApICogMTAwMDsgLy8gNjBzZWMgZGVmYXVsdFxuICAgICAgaWYgKCFjYXRlZ29yaWVzKSB7XG4gICAgICAgIHVwZGF0ZWRSYXRlTGltaXRzLmFsbCA9IG5vdyArIGRlbGF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzLnNwbGl0KCc7JykpIHtcbiAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09ICdtZXRyaWNfYnVja2V0Jykge1xuICAgICAgICAgICAgLy8gbmFtZXNwYWNlcyB3aWxsIGJlIHByZXNlbnQgd2hlbiBjYXRlZ29yeSA9PT0gJ21ldHJpY19idWNrZXQnXG4gICAgICAgICAgICBpZiAoIW5hbWVzcGFjZXMgfHwgbmFtZXNwYWNlcy5zcGxpdCgnOycpLmluY2x1ZGVzKCdjdXN0b20nKSkge1xuICAgICAgICAgICAgICB1cGRhdGVkUmF0ZUxpbWl0c1tjYXRlZ29yeV0gPSBub3cgKyBkZWxheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZFJhdGVMaW1pdHNbY2F0ZWdvcnldID0gbm93ICsgZGVsYXk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHJldHJ5QWZ0ZXJIZWFkZXIpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIocmV0cnlBZnRlckhlYWRlciwgbm93KTtcbiAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MjkpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyA2MCAqIDEwMDA7XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZFJhdGVMaW1pdHM7XG59XG5cbmV4cG9ydHMuREVGQVVMVF9SRVRSWV9BRlRFUiA9IERFRkFVTFRfUkVUUllfQUZURVI7XG5leHBvcnRzLmRpc2FibGVkVW50aWwgPSBkaXNhYmxlZFVudGlsO1xuZXhwb3J0cy5pc1JhdGVMaW1pdGVkID0gaXNSYXRlTGltaXRlZDtcbmV4cG9ydHMucGFyc2VSZXRyeUFmdGVySGVhZGVyID0gcGFyc2VSZXRyeUFmdGVySGVhZGVyO1xuZXhwb3J0cy51cGRhdGVSYXRlTGltaXRzID0gdXBkYXRlUmF0ZUxpbWl0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhdGVsaW1pdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/ratelimit.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/request.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/request.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\nfunction winterCGHeadersToDict(winterCGHeaders) {\n  const headers = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nfunction headersToDict(reqHeaders) {\n  const headers = Object.create(null);\n\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nfunction winterCGRequestToRequestData(req) {\n  const headers = winterCGHeadersToDict(req.headers);\n\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers,\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nfunction httpRequestToRequestData(request\n\n) {\n  const headers = request.headers || {};\n\n  // Check for x-forwarded-host first, then fall back to host header\n  const forwardedHost = typeof headers['x-forwarded-host'] === 'string' ? headers['x-forwarded-host'] : undefined;\n  const host = forwardedHost || (typeof headers.host === 'string' ? headers.host : undefined);\n\n  // Check for x-forwarded-proto first, then fall back to existing protocol detection\n  const forwardedProto = typeof headers['x-forwarded-proto'] === 'string' ? headers['x-forwarded-proto'] : undefined;\n  const protocol = forwardedProto || request.protocol || (request.socket?.encrypted ? 'https' : 'http');\n\n  const url = request.url || '';\n\n  const absoluteUrl = getAbsoluteUrl({\n    url,\n    host,\n    protocol,\n  });\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = (request ).body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = (request ).cookies;\n\n  return {\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(url),\n    headers: headersToDict(headers),\n    cookies,\n    data,\n  };\n}\n\nfunction getAbsoluteUrl({\n  url,\n  protocol,\n  host,\n}\n\n) {\n  if (url?.startsWith('http')) {\n    return url;\n  }\n\n  if (url && host) {\n    return `${protocol}://${host}${url}`;\n  }\n\n  return undefined;\n}\n\n/** Extract the query params from an URL. */\nfunction extractQueryParamsFromUrl(url) {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://s.io').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch {\n    return undefined;\n  }\n}\n\nexports.extractQueryParamsFromUrl = extractQueryParamsFromUrl;\nexports.headersToDict = headersToDict;\nexports.httpRequestToRequestData = httpRequestToRequestData;\nexports.winterCGHeadersToDict = winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = winterCGRequestToRequestData;\n//# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVMsS0FBSyxLQUFLLEVBQUUsSUFBSTtBQUN2Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMscUJBQXFCO0FBQ3JCLGdDQUFnQztBQUNoQyw2QkFBNkI7QUFDN0Isb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9yZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgYSBgSGVhZGVyc2Agb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byBhIHNpbXBsZSBrZXktdmFsdWUgZGljdC5cbiAqIFRoZSBoZWFkZXIga2V5cyB3aWxsIGJlIGxvd2VyIGNhc2U6IGUuZy4gQSBcIkNvbnRlbnQtVHlwZVwiIGhlYWRlciB3aWxsIGJlIHN0b3JlZCBhcyBcImNvbnRlbnQtdHlwZVwiLlxuICovXG5mdW5jdGlvbiB3aW50ZXJDR0hlYWRlcnNUb0RpY3Qod2ludGVyQ0dIZWFkZXJzKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgdHJ5IHtcbiAgICB3aW50ZXJDR0hlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gV2UgY2hlY2sgdGhhdCB2YWx1ZSBpcyBhIHN0cmluZyBldmVuIHRob3VnaCBpdCBtaWdodCBiZSByZWR1bmRhbnQgdG8gbWFrZSBzdXJlIHByb3RvdHlwZSBwb2xsdXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCB7XG4gICAgLy8ganVzdCByZXR1cm4gdGhlIGVtcHR5IGhlYWRlcnNcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzO1xufVxuXG4vKipcbiAqIENvbnZlcnQgY29tbW9uIHJlcXVlc3QgaGVhZGVycyB0byBhIHNpbXBsZSBkaWN0aW9uYXJ5LlxuICovXG5mdW5jdGlvbiBoZWFkZXJzVG9EaWN0KHJlcUhlYWRlcnMpIHtcbiAgY29uc3QgaGVhZGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdHJ5IHtcbiAgICBPYmplY3QuZW50cmllcyhyZXFIZWFkZXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIHtcbiAgICAvLyBqdXN0IHJldHVybiB0aGUgZW1wdHkgaGVhZGVyc1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBgUmVxdWVzdGAgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byB0aGUgZm9ybWF0IHRoYXQgdGhlIGBSZXF1ZXN0RGF0YWAgaW50ZWdyYXRpb24gdW5kZXJzdGFuZHMuXG4gKi9cbmZ1bmN0aW9uIHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB3aW50ZXJDR0hlYWRlcnNUb0RpY3QocmVxLmhlYWRlcnMpO1xuXG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIHVybDogcmVxLnVybCxcbiAgICBxdWVyeV9zdHJpbmc6IGV4dHJhY3RRdWVyeVBhcmFtc0Zyb21VcmwocmVxLnVybCksXG4gICAgaGVhZGVycyxcbiAgICAvLyBUT0RPOiBDYW4gd2UgZXh0cmFjdCBib2R5IGRhdGEgZnJvbSB0aGUgcmVxdWVzdD9cbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgSFRUUCByZXF1ZXN0IG9iamVjdCB0byBSZXF1ZXN0RXZlbnREYXRhIHRvIGJlIHBhc3NlZCBhcyBub3JtYWxpemVkUmVxdWVzdC5cbiAqIEluc3RlYWQgb2YgYWxsb3dpbmcgYFBvbHltb3JwaGljUmVxdWVzdGAgdG8gYmUgcGFzc2VkLFxuICogd2Ugd2FudCB0byBiZSBtb3JlIHNwZWNpZmljIGFuZCBnZW5lcmFsbHkgcmVxdWlyZSBhIGh0dHAuSW5jb21pbmdNZXNzYWdlLWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxdWVzdFxuXG4pIHtcbiAgY29uc3QgaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycyB8fCB7fTtcblxuICAvLyBDaGVjayBmb3IgeC1mb3J3YXJkZWQtaG9zdCBmaXJzdCwgdGhlbiBmYWxsIGJhY2sgdG8gaG9zdCBoZWFkZXJcbiAgY29uc3QgZm9yd2FyZGVkSG9zdCA9IHR5cGVvZiBoZWFkZXJzWyd4LWZvcndhcmRlZC1ob3N0J10gPT09ICdzdHJpbmcnID8gaGVhZGVyc1sneC1mb3J3YXJkZWQtaG9zdCddIDogdW5kZWZpbmVkO1xuICBjb25zdCBob3N0ID0gZm9yd2FyZGVkSG9zdCB8fCAodHlwZW9mIGhlYWRlcnMuaG9zdCA9PT0gJ3N0cmluZycgPyBoZWFkZXJzLmhvc3QgOiB1bmRlZmluZWQpO1xuXG4gIC8vIENoZWNrIGZvciB4LWZvcndhcmRlZC1wcm90byBmaXJzdCwgdGhlbiBmYWxsIGJhY2sgdG8gZXhpc3RpbmcgcHJvdG9jb2wgZGV0ZWN0aW9uXG4gIGNvbnN0IGZvcndhcmRlZFByb3RvID0gdHlwZW9mIGhlYWRlcnNbJ3gtZm9yd2FyZGVkLXByb3RvJ10gPT09ICdzdHJpbmcnID8gaGVhZGVyc1sneC1mb3J3YXJkZWQtcHJvdG8nXSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgcHJvdG9jb2wgPSBmb3J3YXJkZWRQcm90byB8fCByZXF1ZXN0LnByb3RvY29sIHx8IChyZXF1ZXN0LnNvY2tldD8uZW5jcnlwdGVkID8gJ2h0dHBzJyA6ICdodHRwJyk7XG5cbiAgY29uc3QgdXJsID0gcmVxdWVzdC51cmwgfHwgJyc7XG5cbiAgY29uc3QgYWJzb2x1dGVVcmwgPSBnZXRBYnNvbHV0ZVVybCh7XG4gICAgdXJsLFxuICAgIGhvc3QsXG4gICAgcHJvdG9jb2wsXG4gIH0pO1xuXG4gIC8vIFRoaXMgaXMgbm9uLXN0YW5kYXJkLCBidXQgbWF5IGJlIHNvbWV0aW1lcyBzZXRcbiAgLy8gSXQgbWF5IGJlIG92ZXJ3cml0dGVuIGxhdGVyIGJ5IG91ciBvd24gYm9keSBoYW5kbGluZ1xuICBjb25zdCBkYXRhID0gKHJlcXVlc3QgKS5ib2R5IHx8IHVuZGVmaW5lZDtcblxuICAvLyBUaGlzIGlzIG5vbi1zdGFuZGFyZCwgYnV0IG1heSBiZSBzZXQgb24gZS5nLiBOZXh0LmpzIG9yIEV4cHJlc3MgcmVxdWVzdHNcbiAgY29uc3QgY29va2llcyA9IChyZXF1ZXN0ICkuY29va2llcztcblxuICByZXR1cm4ge1xuICAgIHVybDogYWJzb2x1dGVVcmwsXG4gICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICBxdWVyeV9zdHJpbmc6IGV4dHJhY3RRdWVyeVBhcmFtc0Zyb21VcmwodXJsKSxcbiAgICBoZWFkZXJzOiBoZWFkZXJzVG9EaWN0KGhlYWRlcnMpLFxuICAgIGNvb2tpZXMsXG4gICAgZGF0YSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QWJzb2x1dGVVcmwoe1xuICB1cmwsXG4gIHByb3RvY29sLFxuICBob3N0LFxufVxuXG4pIHtcbiAgaWYgKHVybD8uc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGlmICh1cmwgJiYgaG9zdCkge1xuICAgIHJldHVybiBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHt1cmx9YDtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKiBFeHRyYWN0IHRoZSBxdWVyeSBwYXJhbXMgZnJvbSBhbiBVUkwuICovXG5mdW5jdGlvbiBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsKHVybCkge1xuICAvLyB1cmwgaXMgcGF0aCBhbmQgcXVlcnkgc3RyaW5nXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGUgYFVSTGAgY29uc3RydWN0b3IgY2FuJ3QgaGFuZGxlIGludGVybmFsIFVSTHMgb2YgdGhlIGZvcm0gYC9zb21lL3BhdGgvaGVyZWAsIHNvIHN0aWNrIGEgZHVtbXkgcHJvdG9jb2wgYW5kXG4gICAgLy8gaG9zdG5hbWUgYXMgdGhlIGJhc2UuIFNpbmNlIHRoZSBwb2ludCBoZXJlIGlzIGp1c3QgdG8gZ3JhYiB0aGUgcXVlcnkgc3RyaW5nLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IHdlIHVzZS5cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkwodXJsLCAnaHR0cDovL3MuaW8nKS5zZWFyY2guc2xpY2UoMSk7XG4gICAgcmV0dXJuIHF1ZXJ5UGFyYW1zLmxlbmd0aCA/IHF1ZXJ5UGFyYW1zIDogdW5kZWZpbmVkO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydHMuZXh0cmFjdFF1ZXJ5UGFyYW1zRnJvbVVybCA9IGV4dHJhY3RRdWVyeVBhcmFtc0Zyb21Vcmw7XG5leHBvcnRzLmhlYWRlcnNUb0RpY3QgPSBoZWFkZXJzVG9EaWN0O1xuZXhwb3J0cy5odHRwUmVxdWVzdFRvUmVxdWVzdERhdGEgPSBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGE7XG5leHBvcnRzLndpbnRlckNHSGVhZGVyc1RvRGljdCA9IHdpbnRlckNHSGVhZGVyc1RvRGljdDtcbmV4cG9ydHMud2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YSA9IHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/request.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst version = __webpack_require__(/*! ./version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/version.js\");\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nfunction applySdkMetadata(options, name, names = [name], source = 'npm') {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: version.SDK_VERSION,\n      })),\n      version: version.SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n\nexports.applySdkMetadata = applySdkMetadata;\n//# sourceMappingURL=sdkMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2RrTWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMseUZBQWM7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLEtBQUs7QUFDdEM7QUFDQSxpQkFBaUIsT0FBTyxXQUFXLEtBQUs7QUFDeEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zZGtNZXRhZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgdmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbi5qcycpO1xuXG4vKipcbiAqIEEgYnVpbGRlciBmb3IgdGhlIFNESyBtZXRhZGF0YSBpbiB0aGUgb3B0aW9ucyBmb3IgdGhlIFNESyBpbml0aWFsaXphdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIGlkZW50aWNhbCB0byBgYnVpbGRNZXRhZGF0YWAgaW4gUmVtaXggYW5kIE5leHRKUyBhbmQgU3ZlbHRlS2l0LlxuICogV2UgZG9uJ3QgZXh0cmFjdCBpdCBmb3IgYnVuZGxlIHNpemUgcmVhc29ucy5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzc0MDRcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzQxOTZcbiAqXG4gKiBJZiB5b3UgbWFrZSBjaGFuZ2VzIHRvIHRoaXMgZnVuY3Rpb24gY29uc2lkZXIgdXBkYXRpbmcgdGhlIG90aGVycyBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFNESyBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgbXV0YXRlZFxuICogQHBhcmFtIG5hbWVzIGxpc3Qgb2YgcGFja2FnZSBuYW1lc1xuICovXG5mdW5jdGlvbiBhcHBseVNka01ldGFkYXRhKG9wdGlvbnMsIG5hbWUsIG5hbWVzID0gW25hbWVdLCBzb3VyY2UgPSAnbnBtJykge1xuICBjb25zdCBtZXRhZGF0YSA9IG9wdGlvbnMuX21ldGFkYXRhIHx8IHt9O1xuXG4gIGlmICghbWV0YWRhdGEuc2RrKSB7XG4gICAgbWV0YWRhdGEuc2RrID0ge1xuICAgICAgbmFtZTogYHNlbnRyeS5qYXZhc2NyaXB0LiR7bmFtZX1gLFxuICAgICAgcGFja2FnZXM6IG5hbWVzLm1hcChuYW1lID0+ICh7XG4gICAgICAgIG5hbWU6IGAke3NvdXJjZX06QHNlbnRyeS8ke25hbWV9YCxcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbi5TREtfVkVSU0lPTixcbiAgICAgIH0pKSxcbiAgICAgIHZlcnNpb246IHZlcnNpb24uU0RLX1ZFUlNJT04sXG4gICAgfTtcbiAgfVxuXG4gIG9wdGlvbnMuX21ldGFkYXRhID0gbWV0YWRhdGE7XG59XG5cbmV4cG9ydHMuYXBwbHlTZGtNZXRhZGF0YSA9IGFwcGx5U2RrTWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGtNZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/severity.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/severity.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) ;\n}\n\nexports.severityLevelFromString = severityLevelFromString;\n//# sourceMappingURL=severity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2V2ZXJpdHkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL3NldmVyaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nLWJhc2VkIGxldmVsIGludG8gYSBgU2V2ZXJpdHlMZXZlbGAsIG5vcm1hbGl6aW5nIGl0IGFsb25nIHRoZSB3YXkuXG4gKlxuICogQHBhcmFtIGxldmVsIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBkZXNpcmVkIGBTZXZlcml0eUxldmVsYC5cbiAqIEByZXR1cm5zIFRoZSBgU2V2ZXJpdHlMZXZlbGAgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gc3RyaW5nLCBvciAnbG9nJyBpZiB0aGUgc3RyaW5nIGlzbid0IGEgdmFsaWQgbGV2ZWwuXG4gKi9cbmZ1bmN0aW9uIHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSB7XG4gIHJldHVybiAoXG4gICAgbGV2ZWwgPT09ICd3YXJuJyA/ICd3YXJuaW5nJyA6IFsnZmF0YWwnLCAnZXJyb3InLCAnd2FybmluZycsICdsb2cnLCAnaW5mbycsICdkZWJ1ZyddLmluY2x1ZGVzKGxldmVsKSA/IGxldmVsIDogJ2xvZydcbiAgKSA7XG59XG5cbmV4cG9ydHMuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcgPSBzZXZlcml0eUxldmVsRnJvbVN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/severity.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/should-ignore-span.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/should-ignore-span.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\");\n\n/**\n * Check if a span should be ignored based on the ignoreSpans configuration.\n */\nfunction shouldIgnoreSpan(\n  span,\n  ignoreSpans,\n) {\n  if (!ignoreSpans?.length || !span.description) {\n    return false;\n  }\n\n  for (const pattern of ignoreSpans) {\n    if (isStringOrRegExp(pattern)) {\n      if (string.isMatchingPattern(span.description, pattern)) {\n        return true;\n      }\n      continue;\n    }\n\n    if (!pattern.name && !pattern.op) {\n      continue;\n    }\n\n    const nameMatches = pattern.name ? string.isMatchingPattern(span.description, pattern.name) : true;\n    const opMatches = pattern.op ? span.op && string.isMatchingPattern(span.op, pattern.op) : true;\n\n    // This check here is only correct because we can guarantee that we ran `isMatchingPattern`\n    // for at least one of `nameMatches` and `opMatches`. So in contrary to how this looks,\n    // not both op and name actually have to match. This is the most efficient way to check\n    // for all combinations of name and op patterns.\n    if (nameMatches && opMatches) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Takes a list of spans, and a span that was dropped, and re-parents the child spans of the dropped span to the parent of the dropped span, if possible.\n * This mutates the spans array in place!\n */\nfunction reparentChildSpans(spans, dropSpan) {\n  const droppedSpanParentId = dropSpan.parent_span_id;\n  const droppedSpanId = dropSpan.span_id;\n\n  // This should generally not happen, as we do not apply this on root spans\n  // but to be safe, we just bail in this case\n  if (!droppedSpanParentId) {\n    return;\n  }\n\n  for (const span of spans) {\n    if (span.parent_span_id === droppedSpanId) {\n      span.parent_span_id = droppedSpanParentId;\n    }\n  }\n}\n\nfunction isStringOrRegExp(value) {\n  return typeof value === 'string' || value instanceof RegExp;\n}\n\nexports.reparentChildSpans = reparentChildSpans;\nexports.shouldIgnoreSpan = shouldIgnoreSpan;\n//# sourceMappingURL=should-ignore-span.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2hvdWxkLWlnbm9yZS1zcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGVBQWUsbUJBQU8sQ0FBQyx1RkFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zaG91bGQtaWdub3JlLXNwYW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHN0cmluZyA9IHJlcXVpcmUoJy4vc3RyaW5nLmpzJyk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzcGFuIHNob3VsZCBiZSBpZ25vcmVkIGJhc2VkIG9uIHRoZSBpZ25vcmVTcGFucyBjb25maWd1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVTcGFuKFxuICBzcGFuLFxuICBpZ25vcmVTcGFucyxcbikge1xuICBpZiAoIWlnbm9yZVNwYW5zPy5sZW5ndGggfHwgIXNwYW4uZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgaWdub3JlU3BhbnMpIHtcbiAgICBpZiAoaXNTdHJpbmdPclJlZ0V4cChwYXR0ZXJuKSkge1xuICAgICAgaWYgKHN0cmluZy5pc01hdGNoaW5nUGF0dGVybihzcGFuLmRlc2NyaXB0aW9uLCBwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghcGF0dGVybi5uYW1lICYmICFwYXR0ZXJuLm9wKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lTWF0Y2hlcyA9IHBhdHRlcm4ubmFtZSA/IHN0cmluZy5pc01hdGNoaW5nUGF0dGVybihzcGFuLmRlc2NyaXB0aW9uLCBwYXR0ZXJuLm5hbWUpIDogdHJ1ZTtcbiAgICBjb25zdCBvcE1hdGNoZXMgPSBwYXR0ZXJuLm9wID8gc3Bhbi5vcCAmJiBzdHJpbmcuaXNNYXRjaGluZ1BhdHRlcm4oc3Bhbi5vcCwgcGF0dGVybi5vcCkgOiB0cnVlO1xuXG4gICAgLy8gVGhpcyBjaGVjayBoZXJlIGlzIG9ubHkgY29ycmVjdCBiZWNhdXNlIHdlIGNhbiBndWFyYW50ZWUgdGhhdCB3ZSByYW4gYGlzTWF0Y2hpbmdQYXR0ZXJuYFxuICAgIC8vIGZvciBhdCBsZWFzdCBvbmUgb2YgYG5hbWVNYXRjaGVzYCBhbmQgYG9wTWF0Y2hlc2AuIFNvIGluIGNvbnRyYXJ5IHRvIGhvdyB0aGlzIGxvb2tzLFxuICAgIC8vIG5vdCBib3RoIG9wIGFuZCBuYW1lIGFjdHVhbGx5IGhhdmUgdG8gbWF0Y2guIFRoaXMgaXMgdGhlIG1vc3QgZWZmaWNpZW50IHdheSB0byBjaGVja1xuICAgIC8vIGZvciBhbGwgY29tYmluYXRpb25zIG9mIG5hbWUgYW5kIG9wIHBhdHRlcm5zLlxuICAgIGlmIChuYW1lTWF0Y2hlcyAmJiBvcE1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIGxpc3Qgb2Ygc3BhbnMsIGFuZCBhIHNwYW4gdGhhdCB3YXMgZHJvcHBlZCwgYW5kIHJlLXBhcmVudHMgdGhlIGNoaWxkIHNwYW5zIG9mIHRoZSBkcm9wcGVkIHNwYW4gdG8gdGhlIHBhcmVudCBvZiB0aGUgZHJvcHBlZCBzcGFuLCBpZiBwb3NzaWJsZS5cbiAqIFRoaXMgbXV0YXRlcyB0aGUgc3BhbnMgYXJyYXkgaW4gcGxhY2UhXG4gKi9cbmZ1bmN0aW9uIHJlcGFyZW50Q2hpbGRTcGFucyhzcGFucywgZHJvcFNwYW4pIHtcbiAgY29uc3QgZHJvcHBlZFNwYW5QYXJlbnRJZCA9IGRyb3BTcGFuLnBhcmVudF9zcGFuX2lkO1xuICBjb25zdCBkcm9wcGVkU3BhbklkID0gZHJvcFNwYW4uc3Bhbl9pZDtcblxuICAvLyBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGhhcHBlbiwgYXMgd2UgZG8gbm90IGFwcGx5IHRoaXMgb24gcm9vdCBzcGFuc1xuICAvLyBidXQgdG8gYmUgc2FmZSwgd2UganVzdCBiYWlsIGluIHRoaXMgY2FzZVxuICBpZiAoIWRyb3BwZWRTcGFuUGFyZW50SWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IHNwYW4gb2Ygc3BhbnMpIHtcbiAgICBpZiAoc3Bhbi5wYXJlbnRfc3Bhbl9pZCA9PT0gZHJvcHBlZFNwYW5JZCkge1xuICAgICAgc3Bhbi5wYXJlbnRfc3Bhbl9pZCA9IGRyb3BwZWRTcGFuUGFyZW50SWQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nT3JSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHA7XG59XG5cbmV4cG9ydHMucmVwYXJlbnRDaGlsZFNwYW5zID0gcmVwYXJlbnRDaGlsZFNwYW5zO1xuZXhwb3J0cy5zaG91bGRJZ25vcmVTcGFuID0gc2hvdWxkSWdub3JlU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNob3VsZC1pZ25vcmUtc3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/should-ignore-span.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _setSpanForScope(scope, span) {\n  if (span) {\n    object.addNonEnumerableProperty(scope , SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope )[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _getSpanForScope(scope) {\n  return scope[SCOPE_SPAN_FIELD];\n}\n\nexports._getSpanForScope = _getSpanForScope;\nexports._setSpanForScope = _setSpanForScope;\n//# sourceMappingURL=spanOnScope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3Bhbk9uU2NvcGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZUFBZSxtQkFBTyxDQUFDLHVGQUFhOztBQUVwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zcGFuT25TY29wZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi9vYmplY3QuanMnKTtcblxuY29uc3QgU0NPUEVfU1BBTl9GSUVMRCA9ICdfc2VudHJ5U3Bhbic7XG5cbi8qKlxuICogU2V0IHRoZSBhY3RpdmUgc3BhbiBmb3IgYSBnaXZlbiBzY29wZS5cbiAqIE5PVEU6IFRoaXMgc2hvdWxkIE5PVCBiZSB1c2VkIGRpcmVjdGx5LCBidXQgaXMgb25seSB1c2VkIGludGVybmFsbHkgYnkgdGhlIHRyYWNlIG1ldGhvZHMuXG4gKi9cbmZ1bmN0aW9uIF9zZXRTcGFuRm9yU2NvcGUoc2NvcGUsIHNwYW4pIHtcbiAgaWYgKHNwYW4pIHtcbiAgICBvYmplY3QuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHNjb3BlICwgU0NPUEVfU1BBTl9GSUVMRCwgc3Bhbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgIGRlbGV0ZSAoc2NvcGUgKVtTQ09QRV9TUEFOX0ZJRUxEXTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgYWN0aXZlIHNwYW4gZm9yIGEgZ2l2ZW4gc2NvcGUuXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBOT1QgYmUgdXNlZCBkaXJlY3RseSwgYnV0IGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSB0cmFjZSBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBfZ2V0U3BhbkZvclNjb3BlKHNjb3BlKSB7XG4gIHJldHVybiBzY29wZVtTQ09QRV9TUEFOX0ZJRUxEXTtcbn1cblxuZXhwb3J0cy5fZ2V0U3BhbkZvclNjb3BlID0gX2dldFNwYW5Gb3JTY29wZTtcbmV4cG9ydHMuX3NldFNwYW5Gb3JTY29wZSA9IF9zZXRTcGFuRm9yU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuT25TY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst spanstatus = __webpack_require__(/*! ../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst utils = __webpack_require__(/*! ../tracing/utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/object.js\");\nconst propagationContext = __webpack_require__(/*! ./propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\nconst time = __webpack_require__(/*! ./time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\");\nconst tracing = __webpack_require__(/*! ./tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanOnScope = __webpack_require__(/*! ./spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nfunction spanToTransactionTraceContext(span) {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nfunction spanToTraceContext(span) {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = utils.getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || propagationContext.generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nfunction spanToTraceHeader(span) {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return tracing.generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nfunction convertSpanLinksForEnvelope(links) {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nfunction spanTimeInputToSeconds(input) {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return time.timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext )?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n  const castSpan = span ;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span) {\n  return typeof (span ).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nfunction spanIsSampled(span) {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nfunction getStatusMessage(status) {\n  if (!status || status.code === spanstatus.SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === spanstatus.SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n/**\n * Adds an opaque child span reference to a span.\n */\nfunction addChildSpanToSpan(span, childSpan) {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  object.addNonEnumerableProperty(childSpan , ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    object.addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nfunction removeChildSpanFromSpan(span, childSpan) {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nfunction getSpanDescendants(span) {\n  const resultSet = new Set();\n\n  function addSpanChildren(span) {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nfunction getRootSpan(span) {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return spanOnScope._getSpanForScope(currentScopes.getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nfunction showSpanDropWarning() {\n  if (!hasShownSpanDropWarning) {\n    debugLogger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nfunction updateSpanName(span, name) {\n  span.updateName(name);\n  span.setAttributes({\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n\nexports.TRACE_FLAG_NONE = TRACE_FLAG_NONE;\nexports.TRACE_FLAG_SAMPLED = TRACE_FLAG_SAMPLED;\nexports.addChildSpanToSpan = addChildSpanToSpan;\nexports.convertSpanLinksForEnvelope = convertSpanLinksForEnvelope;\nexports.getActiveSpan = getActiveSpan;\nexports.getRootSpan = getRootSpan;\nexports.getSpanDescendants = getSpanDescendants;\nexports.getStatusMessage = getStatusMessage;\nexports.removeChildSpanFromSpan = removeChildSpanFromSpan;\nexports.showSpanDropWarning = showSpanDropWarning;\nexports.spanIsSampled = spanIsSampled;\nexports.spanTimeInputToSeconds = spanTimeInputToSeconds;\nexports.spanToJSON = spanToJSON;\nexports.spanToTraceContext = spanToTraceContext;\nexports.spanToTraceHeader = spanToTraceHeader;\nexports.spanToTransactionTraceContext = spanToTransactionTraceContext;\nexports.updateSpanName = updateSpanName;\n//# sourceMappingURL=spanUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/stacktrace.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser(...parsers) {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack, skipFirstLines = 0, framesToPop = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      let line = lines[i] ;\n      // Truncate lines over 1kb because many of the regular expressions use\n      // backtracking which results in run time that increases exponentially\n      // with input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        line = line.slice(0, 1024);\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nfunction getFramesFromEvent(event) {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\nexports.UNKNOWN_FUNCTION = UNKNOWN_FUNCTION;\nexports.createStackParser = createStackParser;\nexports.getFramesFromEvent = getFramesFromEvent;\nexports.getFunctionName = getFunctionName;\nexports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;\n//# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/stacktrace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/string.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (is.isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(\n  value,\n  pattern,\n  requireExactStringMatch = false,\n) {\n  if (!is.isString(value)) {\n    return false;\n  }\n\n  if (is.isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (is.isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(\n  testString,\n  patterns = [],\n  requireExactStringMatch = false,\n) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n\nexports.isMatchingPattern = isMatchingPattern;\nexports.safeJoin = safeJoin;\nexports.snipLine = snipLine;\nexports.stringMatchesSomePattern = stringMatchesSomePattern;\nexports.truncate = truncate;\n//# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFdBQVcsbUJBQU8sQ0FBQywrRUFBUzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxrQkFBa0I7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsTUFBTSxFQUFFLFFBQVE7QUFDakM7QUFDQTtBQUNBLGtCQUFrQixLQUFLO0FBQ3ZCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixnQ0FBZ0M7QUFDaEMsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zdHJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzID0gcmVxdWlyZSgnLi9pcy5qcycpO1xuXG4vKipcbiAqIFRydW5jYXRlcyBnaXZlbiBzdHJpbmcgdG8gdGhlIG1heGltdW0gY2hhcmFjdGVycyBjb3VudFxuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmcgKDAgPSB1bmxpbWl0ZWQpXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5mdW5jdGlvbiB0cnVuY2F0ZShzdHIsIG1heCA9IDApIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IG1heCA9PT0gMCkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0ci5sZW5ndGggPD0gbWF4ID8gc3RyIDogYCR7c3RyLnNsaWNlKDAsIG1heCl9Li4uYDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGJhc2ljYWxseSBqdXN0IGB0cmltX2xpbmVgIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5L2Jsb2IvbWFzdGVyL3NyYy9zZW50cnkvbGFuZy9qYXZhc2NyaXB0L3Byb2Nlc3Nvci5weSNMNjdcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5mdW5jdGlvbiBzbmlwTGluZShsaW5lLCBjb2xubykge1xuICBsZXQgbmV3TGluZSA9IGxpbmU7XG4gIGNvbnN0IGxpbmVMZW5ndGggPSBuZXdMaW5lLmxlbmd0aDtcbiAgaWYgKGxpbmVMZW5ndGggPD0gMTUwKSB7XG4gICAgcmV0dXJuIG5ld0xpbmU7XG4gIH1cbiAgaWYgKGNvbG5vID4gbGluZUxlbmd0aCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGNvbG5vID0gbGluZUxlbmd0aDtcbiAgfVxuXG4gIGxldCBzdGFydCA9IE1hdGgubWF4KGNvbG5vIC0gNjAsIDApO1xuICBpZiAoc3RhcnQgPCA1KSB7XG4gICAgc3RhcnQgPSAwO1xuICB9XG5cbiAgbGV0IGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgMTQwLCBsaW5lTGVuZ3RoKTtcbiAgaWYgKGVuZCA+IGxpbmVMZW5ndGggLSA1KSB7XG4gICAgZW5kID0gbGluZUxlbmd0aDtcbiAgfVxuICBpZiAoZW5kID09PSBsaW5lTGVuZ3RoKSB7XG4gICAgc3RhcnQgPSBNYXRoLm1heChlbmQgLSAxNDAsIDApO1xuICB9XG5cbiAgbmV3TGluZSA9IG5ld0xpbmUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gIGlmIChzdGFydCA+IDApIHtcbiAgICBuZXdMaW5lID0gYCd7c25pcH0gJHtuZXdMaW5lfWA7XG4gIH1cbiAgaWYgKGVuZCA8IGxpbmVMZW5ndGgpIHtcbiAgICBuZXdMaW5lICs9ICcge3NuaXB9JztcbiAgfVxuXG4gIHJldHVybiBuZXdMaW5lO1xufVxuXG4vKipcbiAqIEpvaW4gdmFsdWVzIGluIGFycmF5XG4gKiBAcGFyYW0gaW5wdXQgYXJyYXkgb2YgdmFsdWVzIHRvIGJlIGpvaW5lZCB0b2dldGhlclxuICogQHBhcmFtIGRlbGltaXRlciBzdHJpbmcgdG8gYmUgcGxhY2VkIGluLWJldHdlZW4gdmFsdWVzXG4gKiBAcmV0dXJucyBKb2luZWQgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIHNhZmVKb2luKGlucHV0LCBkZWxpbWl0ZXIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gaW5wdXRbaV07XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRvIGZpeCBhIFZ1ZTMtc3BlY2lmaWMgYnVnIHRoYXQgY2F1c2VzIGFuIGluZmluaXRlIGxvb3Agb2ZcbiAgICAgIC8vIGNvbnNvbGUgd2FybmluZ3MuIFRoaXMgaGFwcGVucyB3aGVuIGEgVnVlIHRlbXBsYXRlIGlzIHJlbmRlcmVkIHdpdGhcbiAgICAgIC8vIGFuIHVuZGVjbGFyZWQgdmFyaWFibGUsIHdoaWNoIHdlIHRyeSB0byBzdHJpbmdpZnksIHVsdGltYXRlbHkgY2F1c2luZ1xuICAgICAgLy8gVnVlIHRvIGlzc3VlIGFub3RoZXIgd2FybmluZyB3aGljaCByZXBlYXRzIGluZGVmaW5pdGVseS5cbiAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzg5ODFcbiAgICAgIGlmIChpcy5pc1Z1ZVZpZXdNb2RlbCh2YWx1ZSkpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goJ1tWdWVWaWV3TW9kZWxdJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaChTdHJpbmcodmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIG91dHB1dC5wdXNoKCdbdmFsdWUgY2Fubm90IGJlIHNlcmlhbGl6ZWRdJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dC5qb2luKGRlbGltaXRlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3Igc3RyaW5nXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdG8gdGVzdFxuICogQHBhcmFtIHBhdHRlcm4gRWl0aGVyIGEgcmVnZXggb3IgYSBzdHJpbmcgYWdhaW5zdCB3aGljaCBgdmFsdWVgIHdpbGwgYmUgbWF0Y2hlZFxuICogQHBhcmFtIHJlcXVpcmVFeGFjdFN0cmluZ01hdGNoIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBtYXRjaCBgcGF0dGVybmAgZXhhY3RseS4gSWYgZmFsc2UsIGB2YWx1ZWAgd2lsbCBtYXRjaFxuICogYHBhdHRlcm5gIGlmIGl0IGNvbnRhaW5zIGBwYXR0ZXJuYC4gT25seSBhcHBsaWVzIHRvIHN0cmluZy10eXBlIHBhdHRlcm5zLlxuICovXG5mdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybihcbiAgdmFsdWUsXG4gIHBhdHRlcm4sXG4gIHJlcXVpcmVFeGFjdFN0cmluZ01hdGNoID0gZmFsc2UsXG4pIHtcbiAgaWYgKCFpcy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXMuaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHZhbHVlKTtcbiAgfVxuICBpZiAoaXMuaXNTdHJpbmcocGF0dGVybikpIHtcbiAgICByZXR1cm4gcmVxdWlyZUV4YWN0U3RyaW5nTWF0Y2ggPyB2YWx1ZSA9PT0gcGF0dGVybiA6IHZhbHVlLmluY2x1ZGVzKHBhdHRlcm4pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRlc3QgdGhlIGdpdmVuIHN0cmluZyBhZ2FpbnN0IGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIHJlZ2V4ZXMuIEJ5IGRlZmF1bHQsIHN0cmluZyBtYXRjaGluZyBpcyBkb25lIG9uIGFcbiAqIHN1YnN0cmluZy1pbmNsdXNpb24gYmFzaXMgcmF0aGVyIHRoYW4gYSBzdHJpY3QgZXF1YWxpdHkgYmFzaXNcbiAqXG4gKiBAcGFyYW0gdGVzdFN0cmluZyBUaGUgc3RyaW5nIHRvIHRlc3RcbiAqIEBwYXJhbSBwYXR0ZXJucyBUaGUgcGF0dGVybnMgYWdhaW5zdCB3aGljaCB0byB0ZXN0IHRoZSBzdHJpbmdcbiAqIEBwYXJhbSByZXF1aXJlRXhhY3RTdHJpbmdNYXRjaCBJZiB0cnVlLCBgdGVzdFN0cmluZ2AgbXVzdCBtYXRjaCBvbmUgb2YgdGhlIGdpdmVuIHN0cmluZyBwYXR0ZXJucyBleGFjdGx5IGluIG9yZGVyIHRvXG4gKiBjb3VudC4gSWYgZmFsc2UsIGB0ZXN0U3RyaW5nYCB3aWxsIG1hdGNoIGEgc3RyaW5nIHBhdHRlcm4gaWYgaXQgY29udGFpbnMgdGhhdCBwYXR0ZXJuLlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuKFxuICB0ZXN0U3RyaW5nLFxuICBwYXR0ZXJucyA9IFtdLFxuICByZXF1aXJlRXhhY3RTdHJpbmdNYXRjaCA9IGZhbHNlLFxuKSB7XG4gIHJldHVybiBwYXR0ZXJucy5zb21lKHBhdHRlcm4gPT4gaXNNYXRjaGluZ1BhdHRlcm4odGVzdFN0cmluZywgcGF0dGVybiwgcmVxdWlyZUV4YWN0U3RyaW5nTWF0Y2gpKTtcbn1cblxuZXhwb3J0cy5pc01hdGNoaW5nUGF0dGVybiA9IGlzTWF0Y2hpbmdQYXR0ZXJuO1xuZXhwb3J0cy5zYWZlSm9pbiA9IHNhZmVKb2luO1xuZXhwb3J0cy5zbmlwTGluZSA9IHNuaXBMaW5lO1xuZXhwb3J0cy5zdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4gPSBzdHJpbmdNYXRjaGVzU29tZVBhdHRlcm47XG5leHBvcnRzLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/string.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/supports.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/supports.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst WINDOW = worldwide.GLOBAL_OBJ ;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  return 'history' in WINDOW && !!WINDOW.history;\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nconst supportsFetch = _isFetchSupported;\n\nfunction _isFetchSupported() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement ) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      debugBuild.DEBUG_BUILD && debugLogger.debug.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' ,\n    });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexports.isNativeFunction = isNativeFunction;\nexports.supportsDOMError = supportsDOMError;\nexports.supportsDOMException = supportsDOMException;\nexports.supportsErrorEvent = supportsErrorEvent;\nexports.supportsFetch = supportsFetch;\nexports.supportsHistory = supportsHistory;\nexports.supportsNativeFetch = supportsNativeFetch;\nexports.supportsReferrerPolicy = supportsReferrerPolicy;\nexports.supportsReportingObserver = supportsReportingObserver;\n//# sourceMappingURL=supports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/supports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/syncpromise.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/is.js\");\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** SyncPromise internal states */\nconst STATE_PENDING = 0;\nconst STATE_RESOLVED = 1;\nconst STATE_REJECTED = 2;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n\n   constructor(executor) {\n    this._state = STATE_PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n   then(\n    onfulfilled,\n    onrejected,\n  ) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result );\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n   catch(\n    onrejected,\n  ) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n   finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val );\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n   _executeHandlers() {\n    if (this._state === STATE_PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === STATE_RESOLVED) {\n        handler[1](this._value );\n      }\n\n      if (this._state === STATE_REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n   _runExecutor(executor) {\n    const setResult = (state, value) => {\n      if (this._state !== STATE_PENDING) {\n        return;\n      }\n\n      if (is.isThenable(value)) {\n        void (value ).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value) => {\n      setResult(STATE_RESOLVED, value);\n    };\n\n    const reject = (reason) => {\n      setResult(STATE_REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n\nexports.SyncPromise = SyncPromise;\nexports.rejectedSyncPromise = rejectedSyncPromise;\nexports.resolvedSyncPromise = resolvedSyncPromise;\n//# sourceMappingURL=syncpromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3luY3Byb21pc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsV0FBVyxtQkFBTyxDQUFDLCtFQUFTOztBQUU1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zeW5jcHJvbWlzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzLmpzJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqIFN5bmNQcm9taXNlIGludGVybmFsIHN0YXRlcyAqL1xuY29uc3QgU1RBVEVfUEVORElORyA9IDA7XG5jb25zdCBTVEFURV9SRVNPTFZFRCA9IDE7XG5jb25zdCBTVEFURV9SRUpFQ1RFRCA9IDI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlc29sdmVkIHN5bmMgcHJvbWlzZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIHJlc29sdmUgdGhlIHByb21pc2Ugd2l0aFxuICogQHJldHVybnMgdGhlIHJlc29sdmVkIHN5bmMgcHJvbWlzZVxuICovXG5mdW5jdGlvbiByZXNvbHZlZFN5bmNQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgU3luY1Byb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSByZWplY3RlZCBzeW5jIHByb21pc2UuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byByZWplY3QgdGhlIHByb21pc2Ugd2l0aFxuICogQHJldHVybnMgdGhlIHJlamVjdGVkIHN5bmMgcHJvbWlzZVxuICovXG5mdW5jdGlvbiByZWplY3RlZFN5bmNQcm9taXNlKHJlYXNvbikge1xuICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlbmFibGUgY2xhc3MgdGhhdCBiZWhhdmVzIGxpa2UgYSBQcm9taXNlIGFuZCBmb2xsb3dzIGl0J3MgaW50ZXJmYWNlXG4gKiBidXQgaXMgbm90IGFzeW5jIGludGVybmFsbHlcbiAqL1xuY2xhc3MgU3luY1Byb21pc2Uge1xuXG4gICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIHRoaXMuX3N0YXRlID0gU1RBVEVfUEVORElORztcbiAgICB0aGlzLl9oYW5kbGVycyA9IFtdO1xuXG4gICAgdGhpcy5fcnVuRXhlY3V0b3IoZXhlY3V0b3IpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB0aGVuKFxuICAgIG9uZnVsZmlsbGVkLFxuICAgIG9ucmVqZWN0ZWQsXG4gICkge1xuICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlcnMucHVzaChbXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZXN1bHQgPT4ge1xuICAgICAgICAgIGlmICghb25mdWxmaWxsZWQpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IMKvXFxfKOODhClfL8KvXG4gICAgICAgICAgICAvLyBUT0RPOiBGSVhNRVxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShvbmZ1bGZpbGxlZChyZXN1bHQpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgICBpZiAoIW9ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXNvbHZlKG9ucmVqZWN0ZWQocmVhc29uKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVycygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBjYXRjaChcbiAgICBvbnJlamVjdGVkLFxuICApIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbCA9PiB2YWwsIG9ucmVqZWN0ZWQpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBmaW5hbGx5KG9uZmluYWxseSkge1xuICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHZhbDtcbiAgICAgIGxldCBpc1JlamVjdGVkO1xuXG4gICAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgICB2YWx1ZSA9PiB7XG4gICAgICAgICAgaXNSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIHZhbCA9IHZhbHVlO1xuICAgICAgICAgIGlmIChvbmZpbmFsbHkpIHtcbiAgICAgICAgICAgIG9uZmluYWxseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVhc29uID0+IHtcbiAgICAgICAgICBpc1JlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWwgPSByZWFzb247XG4gICAgICAgICAgaWYgKG9uZmluYWxseSkge1xuICAgICAgICAgICAgb25maW5hbGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKS50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGlzUmVqZWN0ZWQpIHtcbiAgICAgICAgICByZWplY3QodmFsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHZhbCApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogRXhjdXRlIHRoZSByZXNvbHZlL3JlamVjdCBoYW5kbGVycy4gKi9cbiAgIF9leGVjdXRlSGFuZGxlcnMoKSB7XG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSBTVEFURV9QRU5ESU5HKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGVkSGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVycy5zbGljZSgpO1xuICAgIHRoaXMuX2hhbmRsZXJzID0gW107XG5cbiAgICBjYWNoZWRIYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJbMF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFNUQVRFX1JFU09MVkVEKSB7XG4gICAgICAgIGhhbmRsZXJbMV0odGhpcy5fdmFsdWUgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBTVEFURV9SRUpFQ1RFRCkge1xuICAgICAgICBoYW5kbGVyWzJdKHRoaXMuX3ZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlclswXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICAvKiogUnVuIHRoZSBleGVjdXRvciBmb3IgdGhlIFN5bmNQcm9taXNlLiAqL1xuICAgX3J1bkV4ZWN1dG9yKGV4ZWN1dG9yKSB7XG4gICAgY29uc3Qgc2V0UmVzdWx0ID0gKHN0YXRlLCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSBTVEFURV9QRU5ESU5HKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzLmlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgIHZvaWQgKHZhbHVlICkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG4gICAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnMoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzb2x2ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgc2V0UmVzdWx0KFNUQVRFX1JFU09MVkVELCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlamVjdCA9IChyZWFzb24pID0+IHtcbiAgICAgIHNldFJlc3VsdChTVEFURV9SRUpFQ1RFRCwgcmVhc29uKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLlN5bmNQcm9taXNlID0gU3luY1Byb21pc2U7XG5leHBvcnRzLnJlamVjdGVkU3luY1Byb21pc2UgPSByZWplY3RlZFN5bmNQcm9taXNlO1xuZXhwb3J0cy5yZXNvbHZlZFN5bmNQcm9taXNlID0gcmVzb2x2ZWRTeW5jUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bmNwcm9taXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/syncpromise.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/time.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nfunction dateTimestampInSeconds() {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc() {\n  const { performance } = worldwide.GLOBAL_OBJ ;\n  // Some browser and environments don't have a performance or timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  if (!performance?.now || !performance.timeOrigin) {\n    return dateTimestampInSeconds;\n  }\n\n  const timeOrigin = performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\nlet _cachedTimestampInSeconds;\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nfunction timestampInSeconds() {\n  // We store this in a closure so that we don't have to create a new function every time this is called.\n  const func = _cachedTimestampInSeconds ?? (_cachedTimestampInSeconds = createUnixTimestampInSecondsFunc());\n  return func();\n}\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin() {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = worldwide.GLOBAL_OBJ ;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nfunction browserPerformanceTimeOrigin() {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n\nexports.browserPerformanceTimeOrigin = browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = dateTimestampInSeconds;\nexports.timestampInSeconds = timestampInSeconds;\n//# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/time.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/traceData.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst baggage = __webpack_require__(/*! ./baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst tracing = __webpack_require__(/*! ./tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js\");\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nfunction getTraceData(options = {}) {\n  const client = options.client || currentScopes.getClient();\n  if (!exports$1.isEnabled() || !client) {\n    return {};\n  }\n\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = options.scope || currentScopes.getCurrentScope();\n  const span = options.span || spanUtils.getActiveSpan();\n  const sentryTrace = span ? spanUtils.spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(client, scope);\n  const baggage$1 = baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n\n  const isValidSentryTraceHeader = tracing.TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    debugLogger.debug.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  return {\n    'sentry-trace': sentryTrace,\n    baggage: baggage$1,\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope) {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return tracing.generateSentryTraceHeader(traceId, propagationSpanId, sampled);\n}\n\nexports.getTraceData = getTraceData;\n//# sourceMappingURL=traceData.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhY2VEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGNBQWMsbUJBQU8sQ0FBQywwR0FBMEI7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQWU7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsZ0dBQXFCO0FBQ25ELGtCQUFrQixtQkFBTyxDQUFDLG9GQUFlO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLG1HQUFtQjtBQUMvQyxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDMUMsK0JBQStCLG1CQUFPLENBQUMsa0lBQXNDO0FBQzdFLGdCQUFnQixtQkFBTyxDQUFDLHlGQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHlGQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNDQUFzQztBQUNoRDtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhY2VEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2FzeW5jQ29udGV4dC9pbmRleC5qcycpO1xuY29uc3QgY2FycmllciA9IHJlcXVpcmUoJy4uL2NhcnJpZXIuanMnKTtcbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBleHBvcnRzJDEgPSByZXF1aXJlKCcuLi9leHBvcnRzLmpzJyk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IHJlcXVpcmUoJy4vZGVidWctbG9nZ2VyLmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuL3NwYW5VdGlscy5qcycpO1xuY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IHJlcXVpcmUoJy4uL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcycpO1xuY29uc3QgYmFnZ2FnZSA9IHJlcXVpcmUoJy4vYmFnZ2FnZS5qcycpO1xuY29uc3QgdHJhY2luZyA9IHJlcXVpcmUoJy4vdHJhY2luZy5qcycpO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRyYWNlIHByb3BhZ2F0aW9uIGRhdGEgZnJvbSB0aGUgY3VycmVudCBzcGFuIG9yIGZyb20gdGhlIGNsaWVudCdzIHNjb3BlICh2aWEgdHJhbnNhY3Rpb24gb3IgcHJvcGFnYXRpb25cbiAqIGNvbnRleHQpIGFuZCBzZXJpYWxpemVzIGl0IHRvIGBzZW50cnktdHJhY2VgIGFuZCBgYmFnZ2FnZWAgdmFsdWVzIHRvIHN0cmluZ3MuIFRoZXNlIHZhbHVlcyBjYW4gYmUgdXNlZCB0byBwcm9wYWdhdGVcbiAqIGEgdHJhY2UgdmlhIG91ciB0cmFjaW5nIEh0dHAgaGVhZGVycyBvciBIdG1sIGA8bWV0YT5gIHRhZ3MuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbHNvIGFwcGxpZXMgc29tZSB2YWxpZGF0aW9uIHRvIHRoZSBnZW5lcmF0ZWQgc2VudHJ5LXRyYWNlIGFuZCBiYWdnYWdlIHZhbHVlcyB0byBlbnN1cmUgdGhhdFxuICogb25seSB2YWxpZCBzdHJpbmdzIGFyZSByZXR1cm5lZC5cbiAqXG4gKiBAcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHJhY2luZyBkYXRhIHZhbHVlcy4gVGhlIG9iamVjdCBrZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgdHJhY2luZyBrZXkgdG8gYmUgdXNlZCBhcyBoZWFkZXJcbiAqIG9yIG1ldGEgdGFnIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlRGF0YShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgY2xpZW50ID0gb3B0aW9ucy5jbGllbnQgfHwgY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgaWYgKCFleHBvcnRzJDEuaXNFbmFibGVkKCkgfHwgIWNsaWVudCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGNhcnJpZXIkMSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gaW5kZXguZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKTtcbiAgaWYgKGFjcy5nZXRUcmFjZURhdGEpIHtcbiAgICByZXR1cm4gYWNzLmdldFRyYWNlRGF0YShvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IHNjb3BlID0gb3B0aW9ucy5zY29wZSB8fCBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpO1xuICBjb25zdCBzcGFuID0gb3B0aW9ucy5zcGFuIHx8IHNwYW5VdGlscy5nZXRBY3RpdmVTcGFuKCk7XG4gIGNvbnN0IHNlbnRyeVRyYWNlID0gc3BhbiA/IHNwYW5VdGlscy5zcGFuVG9UcmFjZUhlYWRlcihzcGFuKSA6IHNjb3BlVG9UcmFjZUhlYWRlcihzY29wZSk7XG4gIGNvbnN0IGRzYyA9IHNwYW4gPyBkeW5hbWljU2FtcGxpbmdDb250ZXh0LmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKSA6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZShjbGllbnQsIHNjb3BlKTtcbiAgY29uc3QgYmFnZ2FnZSQxID0gYmFnZ2FnZS5keW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyKGRzYyk7XG5cbiAgY29uc3QgaXNWYWxpZFNlbnRyeVRyYWNlSGVhZGVyID0gdHJhY2luZy5UUkFDRVBBUkVOVF9SRUdFWFAudGVzdChzZW50cnlUcmFjZSk7XG4gIGlmICghaXNWYWxpZFNlbnRyeVRyYWNlSGVhZGVyKSB7XG4gICAgZGVidWdMb2dnZXIuZGVidWcud2FybignSW52YWxpZCBzZW50cnktdHJhY2UgZGF0YS4gQ2Fubm90IGdlbmVyYXRlIHRyYWNlIGRhdGEnKTtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4ge1xuICAgICdzZW50cnktdHJhY2UnOiBzZW50cnlUcmFjZSxcbiAgICBiYWdnYWdlOiBiYWdnYWdlJDEsXG4gIH07XG59XG5cbi8qKlxuICogR2V0IGEgc2VudHJ5LXRyYWNlIGhlYWRlciB2YWx1ZSBmb3IgdGhlIGdpdmVuIHNjb3BlLlxuICovXG5mdW5jdGlvbiBzY29wZVRvVHJhY2VIZWFkZXIoc2NvcGUpIHtcbiAgY29uc3QgeyB0cmFjZUlkLCBzYW1wbGVkLCBwcm9wYWdhdGlvblNwYW5JZCB9ID0gc2NvcGUuZ2V0UHJvcGFnYXRpb25Db250ZXh0KCk7XG4gIHJldHVybiB0cmFjaW5nLmdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIodHJhY2VJZCwgcHJvcGFnYXRpb25TcGFuSWQsIHNhbXBsZWQpO1xufVxuXG5leHBvcnRzLmdldFRyYWNlRGF0YSA9IGdldFRyYWNlRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlRGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/tracing.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst debugLogger = __webpack_require__(/*! ./debug-logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/debug-logger.js\");\nconst baggage = __webpack_require__(/*! ./baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/baggage.js\");\nconst dsn = __webpack_require__(/*! ./dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/dsn.js\");\nconst parseSampleRate = __webpack_require__(/*! ./parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst propagationContext = __webpack_require__(/*! ./propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/propagationContext.js\");\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(\n  sentryTrace,\n  baggage$1,\n) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext(baggage$1);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: propagationContext.generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(\n  traceId = propagationContext.generateTraceId(),\n  spanId = propagationContext.generateSpanId(),\n  sampled,\n) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData,\n  dsc,\n) {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate.parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate.parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n\n/**\n * Determines whether a new trace should be continued based on the provided baggage org ID and the client's `strictTraceContinuation` option.\n * If the trace should not be continued, a new trace will be started.\n *\n * The result is dependent on the `strictTraceContinuation` option in the client.\n * See https://develop.sentry.dev/sdk/telemetry/traces/#stricttracecontinuation\n */\nfunction shouldContinueTrace(client, baggageOrgId) {\n  const clientOrgId = dsn.extractOrgIdFromClient(client);\n\n  // Case: baggage orgID and Client orgID don't match - always start new trace\n  if (baggageOrgId && clientOrgId && baggageOrgId !== clientOrgId) {\n    debugLogger.debug.log(\n      `Won't continue trace because org IDs don't match (incoming baggage: ${baggageOrgId}, SDK options: ${clientOrgId})`,\n    );\n    return false;\n  }\n\n  const strictTraceContinuation = client.getOptions().strictTraceContinuation || false; // default for `strictTraceContinuation` is `false`\n\n  if (strictTraceContinuation) {\n    // With strict continuation enabled, don't continue trace if:\n    // - Baggage has orgID, but Client doesn't have one\n    // - Client has orgID, but baggage doesn't have one\n    if ((baggageOrgId && !clientOrgId) || (!baggageOrgId && clientOrgId)) {\n      debugLogger.debug.log(\n        `Starting a new trace because strict trace continuation is enabled but one org ID is missing (incoming baggage: ${baggageOrgId}, Sentry client: ${clientOrgId})`,\n      );\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.TRACEPARENT_REGEXP = TRACEPARENT_REGEXP;\nexports.extractTraceparentData = extractTraceparentData;\nexports.generateSentryTraceHeader = generateSentryTraceHeader;\nexports.propagationContextFromHeaders = propagationContextFromHeaders;\nexports.shouldContinueTrace = shouldContinueTrace;\n//# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/tracing.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/transactionEvent.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/transactionEvent.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nfunction convertTransactionEventToSpanJson(event) {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n    exclusive_time: data?.[semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nfunction convertSpanJsonToTransactionEvent(span) {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n\nexports.convertSpanJsonToTransactionEvent = convertSpanJsonToTransactionEvent;\nexports.convertTransactionEventToSpanJson = convertTransactionEventToSpanJson;\n//# sourceMappingURL=transactionEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhbnNhY3Rpb25FdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwyQkFBMkIsbUJBQU8sQ0FBQywwR0FBMEI7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw4REFBOEQ7O0FBRXhFO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxRUFBcUU7QUFDeEcsdUNBQXVDLDZFQUE2RTtBQUNwSCxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhbnNhY3Rpb25FdmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJyk7XG5cbi8qKlxuICogQ29udmVydHMgYSB0cmFuc2FjdGlvbiBldmVudCB0byBhIHNwYW4gSlNPTiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUcmFuc2FjdGlvbkV2ZW50VG9TcGFuSnNvbihldmVudCkge1xuICBjb25zdCB7IHRyYWNlX2lkLCBwYXJlbnRfc3Bhbl9pZCwgc3Bhbl9pZCwgc3RhdHVzLCBvcmlnaW4sIGRhdGEsIG9wIH0gPSBldmVudC5jb250ZXh0cz8udHJhY2UgPz8ge307XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBkYXRhID8/IHt9LFxuICAgIGRlc2NyaXB0aW9uOiBldmVudC50cmFuc2FjdGlvbixcbiAgICBvcCxcbiAgICBwYXJlbnRfc3Bhbl9pZCxcbiAgICBzcGFuX2lkOiBzcGFuX2lkID8/ICcnLFxuICAgIHN0YXJ0X3RpbWVzdGFtcDogZXZlbnQuc3RhcnRfdGltZXN0YW1wID8/IDAsXG4gICAgc3RhdHVzLFxuICAgIHRpbWVzdGFtcDogZXZlbnQudGltZXN0YW1wLFxuICAgIHRyYWNlX2lkOiB0cmFjZV9pZCA/PyAnJyxcbiAgICBvcmlnaW4sXG4gICAgcHJvZmlsZV9pZDogZGF0YT8uW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRF0gLFxuICAgIGV4Y2x1c2l2ZV90aW1lOiBkYXRhPy5bc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRV0gLFxuICAgIG1lYXN1cmVtZW50czogZXZlbnQubWVhc3VyZW1lbnRzLFxuICAgIGlzX3NlZ21lbnQ6IHRydWUsXG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzcGFuIEpTT04gb2JqZWN0IHRvIGEgdHJhbnNhY3Rpb24gZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRTcGFuSnNvblRvVHJhbnNhY3Rpb25FdmVudChzcGFuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ3RyYW5zYWN0aW9uJyxcbiAgICB0aW1lc3RhbXA6IHNwYW4udGltZXN0YW1wLFxuICAgIHN0YXJ0X3RpbWVzdGFtcDogc3Bhbi5zdGFydF90aW1lc3RhbXAsXG4gICAgdHJhbnNhY3Rpb246IHNwYW4uZGVzY3JpcHRpb24sXG4gICAgY29udGV4dHM6IHtcbiAgICAgIHRyYWNlOiB7XG4gICAgICAgIHRyYWNlX2lkOiBzcGFuLnRyYWNlX2lkLFxuICAgICAgICBzcGFuX2lkOiBzcGFuLnNwYW5faWQsXG4gICAgICAgIHBhcmVudF9zcGFuX2lkOiBzcGFuLnBhcmVudF9zcGFuX2lkLFxuICAgICAgICBvcDogc3Bhbi5vcCxcbiAgICAgICAgc3RhdHVzOiBzcGFuLnN0YXR1cyxcbiAgICAgICAgb3JpZ2luOiBzcGFuLm9yaWdpbixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIC4uLnNwYW4uZGF0YSxcbiAgICAgICAgICAuLi4oc3Bhbi5wcm9maWxlX2lkICYmIHsgW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRF06IHNwYW4ucHJvZmlsZV9pZCB9KSxcbiAgICAgICAgICAuLi4oc3Bhbi5leGNsdXNpdmVfdGltZSAmJiB7IFtzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FXTogc3Bhbi5leGNsdXNpdmVfdGltZSB9KSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBtZWFzdXJlbWVudHM6IHNwYW4ubWVhc3VyZW1lbnRzLFxuICB9O1xufVxuXG5leHBvcnRzLmNvbnZlcnRTcGFuSnNvblRvVHJhbnNhY3Rpb25FdmVudCA9IGNvbnZlcnRTcGFuSnNvblRvVHJhbnNhY3Rpb25FdmVudDtcbmV4cG9ydHMuY29udmVydFRyYW5zYWN0aW9uRXZlbnRUb1NwYW5Kc29uID0gY29udmVydFRyYW5zYWN0aW9uRXZlbnRUb1NwYW5Kc29uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb25FdmVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/transactionEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/url.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/url.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nfunction isURLObjectRelative(url) {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nfunction parseStringToURLObject(url, urlBase) {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL ).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlStringFromUrlObject(url) {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject,\n  kind,\n  request,\n  routeName,\n) {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nfunction getHttpSpanDetailsFromUrlObject(\n  urlObject,\n  kind,\n  spanOrigin,\n  request,\n  routeName,\n) {\n  const attributes = {\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return (urlPath.split(/[?#]/, 1) )[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n\nexports.getHttpSpanDetailsFromUrlObject = getHttpSpanDetailsFromUrlObject;\nexports.getSanitizedUrlString = getSanitizedUrlString;\nexports.getSanitizedUrlStringFromUrlObject = getSanitizedUrlStringFromUrlObject;\nexports.isURLObjectRelative = isURLObjectRelative;\nexports.parseStringToURLObject = parseStringToURLObject;\nexports.parseUrl = parseUrl;\nexports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;\n//# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVksUUFBUSxFQUFFLE1BQU07QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1QkFBdUI7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSxjQUFjLFNBQVMsVUFBVSxFQUFFLGFBQWEsRUFBRSxLQUFLO0FBQ25FOztBQUVBLHVDQUF1QztBQUN2Qyw2QkFBNkI7QUFDN0IsMENBQTBDO0FBQzFDLDJCQUEyQjtBQUMzQiw4QkFBOEI7QUFDOUIsZ0JBQWdCO0FBQ2hCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdXJsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBzZW1hbnRpY0F0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnKTtcblxuLy8gQ3VyaW91cyBhYm91dCBgdGhpc21lc3NhZ2U6L2A/IFNlZTogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzI1NTcuaHRtbFxuLy8gID4gV2hlbiB0aGUgbWV0aG9kcyBhYm92ZSBkbyBub3QgeWllbGQgYW4gYWJzb2x1dGUgVVJJLCBhIGJhc2UgVVJMXG4vLyAgPiBvZiBcInRoaXNtZXNzYWdlOi9cIiBNVVNUIGJlIGVtcGxveWVkLiBUaGlzIGJhc2UgVVJMIGhhcyBiZWVuXG4vLyAgPiBkZWZpbmVkIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mIHJlc29sdmluZyByZWxhdGl2ZSByZWZlcmVuY2VzXG4vLyAgPiB3aXRoaW4gYSBtdWx0aXBhcnQvcmVsYXRlZCBzdHJ1Y3R1cmUgd2hlbiBubyBvdGhlciBiYXNlIFVSSSBpc1xuLy8gID4gc3BlY2lmaWVkLlxuLy9cbi8vIFdlIG5lZWQgdG8gcHJvdmlkZSBhIGJhc2UgVVJMIHRvIGBwYXJzZVN0cmluZ1RvVVJMT2JqZWN0YCBiZWNhdXNlIHRoZSBmZXRjaCBBUEkgZ2l2ZXMgdXMgYVxuLy8gcmVsYXRpdmUgVVJMIHNvbWV0aW1lcy5cbi8vXG4vLyBUaGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBwcm92aWRlIGEgYmFzZSBVUkwgdG8gYHBhcnNlU3RyaW5nVG9VUkxPYmplY3RgXG4vLyBiZWNhdXNlIHRoZSByZWxhdGl2ZSBVUkwgaXMgbm90IHZhbGlkIG9uIGl0cyBvd24uXG5jb25zdCBERUZBVUxUX0JBU0VfVVJMID0gJ3RoaXNtZXNzYWdlOi8nO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgVVJMIG9iamVjdCBpcyByZWxhdGl2ZVxuICpcbiAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIG9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgVVJMIG9iamVjdCBpcyByZWxhdGl2ZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMT2JqZWN0UmVsYXRpdmUodXJsKSB7XG4gIHJldHVybiAnaXNSZWxhdGl2ZScgaW4gdXJsO1xufVxuXG4vKipcbiAqIFBhcnNlcyBzdHJpbmcgdG8gYSBVUkwgb2JqZWN0XG4gKlxuICogQHBhcmFtIHVybCAtIFRoZSBVUkwgdG8gcGFyc2VcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgVVJMIG9iamVjdCBvciB1bmRlZmluZWQgaWYgdGhlIFVSTCBpcyBpbnZhbGlkXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nVG9VUkxPYmplY3QodXJsLCB1cmxCYXNlKSB7XG4gIGNvbnN0IGlzUmVsYXRpdmUgPSB1cmwuaW5kZXhPZignOi8vJykgPD0gMCAmJiB1cmwuaW5kZXhPZignLy8nKSAhPT0gMDtcbiAgY29uc3QgYmFzZSA9IHVybEJhc2UgPz8gKGlzUmVsYXRpdmUgPyBERUZBVUxUX0JBU0VfVVJMIDogdW5kZWZpbmVkKTtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYGNhblBhcnNlYCB0byBzaG9ydC1jaXJjdWl0IHRoZSBVUkwgY29uc3RydWN0b3IgaWYgaXQncyBub3QgYSB2YWxpZCBVUkxcbiAgICAvLyBUaGlzIGlzIGZhc3RlciB0aGFuIHRyeWluZyB0byBjb25zdHJ1Y3QgdGhlIFVSTCBhbmQgY2F0Y2hpbmcgdGhlIGVycm9yXG4gICAgLy8gTm9kZSAyMCssIENocm9tZSAxMjArLCBGaXJlZm94IDExNSssIFNhZmFyaSAxNytcbiAgICBpZiAoJ2NhblBhcnNlJyBpbiBVUkwgJiYgIShVUkwgKS5jYW5QYXJzZSh1cmwsIGJhc2UpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxVcmxPYmplY3QgPSBuZXcgVVJMKHVybCwgYmFzZSk7XG4gICAgaWYgKGlzUmVsYXRpdmUpIHtcbiAgICAgIC8vIEJlY2F1c2Ugd2UgdXNlZCBhIGZha2UgYmFzZSBVUkwsIHdlIG5lZWQgdG8gcmV0dXJuIGEgcmVsYXRpdmUgVVJMIG9iamVjdC5cbiAgICAgIC8vIFdlIGNhbm5vdCByZXR1cm4gYW55dGhpbmcgYWJvdXQgdGhlIG9yaWdpbiwgaG9zdCwgZXRjLiBiZWNhdXNlIGl0IHdpbGwgcmVmZXIgdG8gdGhlIGZha2UgYmFzZSBVUkwuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1JlbGF0aXZlLFxuICAgICAgICBwYXRobmFtZTogZnVsbFVybE9iamVjdC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiBmdWxsVXJsT2JqZWN0LnNlYXJjaCxcbiAgICAgICAgaGFzaDogZnVsbFVybE9iamVjdC5oYXNoLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bGxVcmxPYmplY3Q7XG4gIH0gY2F0Y2gge1xuICAgIC8vIGVtcHR5IGJvZHlcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogVGFrZXMgYSBVUkwgb2JqZWN0IGFuZCByZXR1cm5zIGEgc2FuaXRpemVkIHN0cmluZyB3aGljaCBpcyBzYWZlIHRvIHVzZSBhcyBzcGFuIG5hbWVcbiAqIHNlZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2RhdGEtaGFuZGxpbmcvI3N0cnVjdHVyaW5nLWRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCh1cmwpIHtcbiAgaWYgKGlzVVJMT2JqZWN0UmVsYXRpdmUodXJsKSkge1xuICAgIHJldHVybiB1cmwucGF0aG5hbWU7XG4gIH1cblxuICBjb25zdCBuZXdVcmwgPSBuZXcgVVJMKHVybCk7XG4gIG5ld1VybC5zZWFyY2ggPSAnJztcbiAgbmV3VXJsLmhhc2ggPSAnJztcbiAgaWYgKFsnODAnLCAnNDQzJ10uaW5jbHVkZXMobmV3VXJsLnBvcnQpKSB7XG4gICAgbmV3VXJsLnBvcnQgPSAnJztcbiAgfVxuICBpZiAobmV3VXJsLnBhc3N3b3JkKSB7XG4gICAgbmV3VXJsLnBhc3N3b3JkID0gJyVmaWx0ZXJlZCUnO1xuICB9XG4gIGlmIChuZXdVcmwudXNlcm5hbWUpIHtcbiAgICBuZXdVcmwudXNlcm5hbWUgPSAnJWZpbHRlcmVkJSc7XG4gIH1cblxuICByZXR1cm4gbmV3VXJsLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGdldEh0dHBTcGFuTmFtZUZyb21VcmxPYmplY3QoXG4gIHVybE9iamVjdCxcbiAga2luZCxcbiAgcmVxdWVzdCxcbiAgcm91dGVOYW1lLFxuKSB7XG4gIGNvbnN0IG1ldGhvZCA9IHJlcXVlc3Q/Lm1ldGhvZD8udG9VcHBlckNhc2UoKSA/PyAnR0VUJztcbiAgY29uc3Qgcm91dGUgPSByb3V0ZU5hbWVcbiAgICA/IHJvdXRlTmFtZVxuICAgIDogdXJsT2JqZWN0XG4gICAgICA/IGtpbmQgPT09ICdjbGllbnQnXG4gICAgICAgID8gZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCh1cmxPYmplY3QpXG4gICAgICAgIDogdXJsT2JqZWN0LnBhdGhuYW1lXG4gICAgICA6ICcvJztcblxuICByZXR1cm4gYCR7bWV0aG9kfSAke3JvdXRlfWA7XG59XG5cbi8qKlxuICogVGFrZXMgYSBwYXJzZWQgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNldCBvZiBhdHRyaWJ1dGVzIGZvciB0aGUgc3BhblxuICogdGhhdCByZXByZXNlbnRzIHRoZSBIVFRQIHJlcXVlc3QgZm9yIHRoYXQgdXJsLiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggc2VydmVyXG4gKiBhbmQgY2xpZW50IGh0dHAgc3BhbnMuXG4gKlxuICogRm9sbG93cyBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L2h0dHAvLlxuICpcbiAqIEBwYXJhbSB1cmxPYmplY3QgLSBzZWUge0BsaW5rIHBhcnNlU3RyaW5nVG9VUkxPYmplY3R9XG4gKiBAcGFyYW0ga2luZCAtIFRoZSB0eXBlIG9mIEhUVFAgb3BlcmF0aW9uIChzZXJ2ZXIgb3IgY2xpZW50KVxuICogQHBhcmFtIHNwYW5PcmlnaW4gLSBUaGUgb3JpZ2luIG9mIHRoZSBzcGFuXG4gKiBAcGFyYW0gcmVxdWVzdCAtIFRoZSByZXF1ZXN0IG9iamVjdCwgc2VlIHtAbGluayBQYXJ0aWFsUmVxdWVzdH1cbiAqIEBwYXJhbSByb3V0ZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcm91dGUsIG11c3QgYmUgbG93IGNhcmRpbmFsaXR5XG4gKiBAcmV0dXJucyBUaGUgc3BhbiBuYW1lIGFuZCBhdHRyaWJ1dGVzIGZvciB0aGUgSFRUUCBvcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0SHR0cFNwYW5EZXRhaWxzRnJvbVVybE9iamVjdChcbiAgdXJsT2JqZWN0LFxuICBraW5kLFxuICBzcGFuT3JpZ2luLFxuICByZXF1ZXN0LFxuICByb3V0ZU5hbWUsXG4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogc3Bhbk9yaWdpbixcbiAgICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogJ3VybCcsXG4gIH07XG5cbiAgaWYgKHJvdXRlTmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYmFzZWQgb24gaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9odHRwL2h0dHAtc3BhbnMvI25hbWVcbiAgICBhdHRyaWJ1dGVzW2tpbmQgPT09ICdzZXJ2ZXInID8gJ2h0dHAucm91dGUnIDogJ3VybC50ZW1wbGF0ZSddID0gcm91dGVOYW1lO1xuICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSA9ICdyb3V0ZSc7XG4gIH1cblxuICBpZiAocmVxdWVzdD8ubWV0aG9kKSB7XG4gICAgYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX0hUVFBfUkVRVUVTVF9NRVRIT0RdID0gcmVxdWVzdC5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIGlmICh1cmxPYmplY3QpIHtcbiAgICBpZiAodXJsT2JqZWN0LnNlYXJjaCkge1xuICAgICAgYXR0cmlidXRlc1sndXJsLnF1ZXJ5J10gPSB1cmxPYmplY3Quc2VhcmNoO1xuICAgIH1cbiAgICBpZiAodXJsT2JqZWN0Lmhhc2gpIHtcbiAgICAgIGF0dHJpYnV0ZXNbJ3VybC5mcmFnbWVudCddID0gdXJsT2JqZWN0Lmhhc2g7XG4gICAgfVxuICAgIGlmICh1cmxPYmplY3QucGF0aG5hbWUpIHtcbiAgICAgIGF0dHJpYnV0ZXNbJ3VybC5wYXRoJ10gPSB1cmxPYmplY3QucGF0aG5hbWU7XG4gICAgICBpZiAodXJsT2JqZWN0LnBhdGhuYW1lID09PSAnLycpIHtcbiAgICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0VdID0gJ3JvdXRlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWlzVVJMT2JqZWN0UmVsYXRpdmUodXJsT2JqZWN0KSkge1xuICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMXSA9IHVybE9iamVjdC5ocmVmO1xuICAgICAgaWYgKHVybE9iamVjdC5wb3J0KSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbJ3VybC5wb3J0J10gPSB1cmxPYmplY3QucG9ydDtcbiAgICAgIH1cbiAgICAgIGlmICh1cmxPYmplY3QucHJvdG9jb2wpIHtcbiAgICAgICAgYXR0cmlidXRlc1sndXJsLnNjaGVtZSddID0gdXJsT2JqZWN0LnByb3RvY29sO1xuICAgICAgfVxuICAgICAgaWYgKHVybE9iamVjdC5ob3N0bmFtZSkge1xuICAgICAgICBhdHRyaWJ1dGVzW2tpbmQgPT09ICdzZXJ2ZXInID8gJ3NlcnZlci5hZGRyZXNzJyA6ICd1cmwuZG9tYWluJ10gPSB1cmxPYmplY3QuaG9zdG5hbWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtnZXRIdHRwU3Bhbk5hbWVGcm9tVXJsT2JqZWN0KHVybE9iamVjdCwga2luZCwgcmVxdWVzdCwgcm91dGVOYW1lKSwgYXR0cmlidXRlc107XG59XG5cbi8qKlxuICogUGFyc2VzIHN0cmluZyBmb3JtIG9mIFVSTCBpbnRvIGFuIG9iamVjdFxuICogLy8gYm9ycm93ZWQgZnJvbSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1CXG4gKiAvLyBpbnRlbnRpb25hbGx5IHVzaW5nIHJlZ2V4IGFuZCBub3QgPGEvPiBocmVmIHBhcnNpbmcgdHJpY2sgYmVjYXVzZSBSZWFjdCBOYXRpdmUgYW5kIG90aGVyXG4gKiAvLyBlbnZpcm9ubWVudHMgd2hlcmUgRE9NIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGVcbiAqIEByZXR1cm5zIHBhcnNlZCBVUkwgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICBjb25zdCBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICBjb25zdCBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICByZXR1cm4ge1xuICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdLFxuICAgIHByb3RvY29sOiBtYXRjaFsyXSxcbiAgICBzZWFyY2g6IHF1ZXJ5LFxuICAgIGhhc2g6IGZyYWdtZW50LFxuICAgIHJlbGF0aXZlOiBtYXRjaFs1XSArIHF1ZXJ5ICsgZnJhZ21lbnQsIC8vIGV2ZXJ5dGhpbmcgbWludXMgb3JpZ2luXG4gIH07XG59XG5cbi8qKlxuICogU3RyaXAgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgZnJhZ21lbnQgb2ZmIG9mIGEgZ2l2ZW4gVVJMIG9yIHBhdGggKGlmIHByZXNlbnQpXG4gKlxuICogQHBhcmFtIHVybFBhdGggRnVsbCBVUkwgb3IgcGF0aCwgaW5jbHVkaW5nIHBvc3NpYmxlIHF1ZXJ5IHN0cmluZyBhbmQvb3IgZnJhZ21lbnRcbiAqIEByZXR1cm5zIFVSTCBvciBwYXRoIHdpdGhvdXQgcXVlcnkgc3RyaW5nIG9yIGZyYWdtZW50XG4gKi9cbmZ1bmN0aW9uIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCh1cmxQYXRoKSB7XG4gIHJldHVybiAodXJsUGF0aC5zcGxpdCgvWz8jXS8sIDEpIClbMF07XG59XG5cbi8qKlxuICogVGFrZXMgYSBVUkwgb2JqZWN0IGFuZCByZXR1cm5zIGEgc2FuaXRpemVkIHN0cmluZyB3aGljaCBpcyBzYWZlIHRvIHVzZSBhcyBzcGFuIG5hbWVcbiAqIHNlZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2RhdGEtaGFuZGxpbmcvI3N0cnVjdHVyaW5nLWRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHVybCkge1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0LCBwYXRoIH0gPSB1cmw7XG5cbiAgY29uc3QgZmlsdGVyZWRIb3N0ID1cbiAgICBob3N0XG4gICAgICAvLyBBbHdheXMgZmlsdGVyIG91dCBhdXRob3JpdHlcbiAgICAgID8ucmVwbGFjZSgvXi4qQC8sICdbZmlsdGVyZWRdOltmaWx0ZXJlZF1AJylcbiAgICAgIC8vIERvbid0IHNob3cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgICAgIC8vIFRPRE86IFVzZSBuZXcgVVJMIGdsb2JhbCBpZiBpdCBleGlzdHNcbiAgICAgIC5yZXBsYWNlKC8oOjgwKSQvLCAnJylcbiAgICAgIC5yZXBsYWNlKC8oOjQ0MykkLywgJycpIHx8ICcnO1xuXG4gIHJldHVybiBgJHtwcm90b2NvbCA/IGAke3Byb3RvY29sfTovL2AgOiAnJ30ke2ZpbHRlcmVkSG9zdH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5nZXRIdHRwU3BhbkRldGFpbHNGcm9tVXJsT2JqZWN0ID0gZ2V0SHR0cFNwYW5EZXRhaWxzRnJvbVVybE9iamVjdDtcbmV4cG9ydHMuZ2V0U2FuaXRpemVkVXJsU3RyaW5nID0gZ2V0U2FuaXRpemVkVXJsU3RyaW5nO1xuZXhwb3J0cy5nZXRTYW5pdGl6ZWRVcmxTdHJpbmdGcm9tVXJsT2JqZWN0ID0gZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdDtcbmV4cG9ydHMuaXNVUkxPYmplY3RSZWxhdGl2ZSA9IGlzVVJMT2JqZWN0UmVsYXRpdmU7XG5leHBvcnRzLnBhcnNlU3RyaW5nVG9VUkxPYmplY3QgPSBwYXJzZVN0cmluZ1RvVVJMT2JqZWN0O1xuZXhwb3J0cy5wYXJzZVVybCA9IHBhcnNlVXJsO1xuZXhwb3J0cy5zdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgPSBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/url.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai-attributes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/vercel-ai-attributes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/* eslint-disable max-lines */\n/**\n * AI SDK Telemetry Attributes\n * Based on https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\n\n\n// =============================================================================\n// SHARED ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n * `streamText` function - `ai.streamText` span\n *\n * The prompt that was used when calling the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nconst AI_PROMPT_ATTRIBUTE = 'ai.prompt';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The object that was generated (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nconst AI_RESPONSE_OBJECT_ATTRIBUTE = 'ai.response.object';\n\n// =============================================================================\n// GENERATETEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The text that was generated\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_RESPONSE_TEXT_ATTRIBUTE = 'ai.response.text';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The tool calls that were made as part of the generation (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'ai.response.toolCalls';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The messages that were passed into the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_PROMPT_MESSAGES_ATTRIBUTE = 'ai.prompt.messages';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * Array of stringified tool definitions\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_PROMPT_TOOLS_ATTRIBUTE = 'ai.prompt.tools';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The id of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_MODEL_ID_ATTRIBUTE = 'ai.model.id';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The provider of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_MODEL_PROVIDER_ATTRIBUTE = 'ai.model.provider';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * Provider specific metadata returned with the generation response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE = 'ai.response.providerMetadata';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = 'ai.telemetry.functionId';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'ai.usage.completionTokens';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'ai.usage.promptTokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n// =============================================================================\n// TOOL CALL SPANS\n// =============================================================================\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The name of the tool\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_NAME_ATTRIBUTE = 'ai.toolCall.name';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The id of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_ID_ATTRIBUTE = 'ai.toolCall.id';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The parameters of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_ARGS_ATTRIBUTE = 'ai.toolCall.args';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The result of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_RESULT_ATTRIBUTE = 'ai.toolCall.result';\n\n// =============================================================================\n// PROVIDER METADATA\n// =============================================================================\n\n/**\n * OpenAI Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/openai/src/openai-chat-language-model.ts#L397-L416\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/openai/src/responses/openai-responses-language-model.ts#L377C7-L384\n */\n\nexports.AI_MODEL_ID_ATTRIBUTE = AI_MODEL_ID_ATTRIBUTE;\nexports.AI_MODEL_PROVIDER_ATTRIBUTE = AI_MODEL_PROVIDER_ATTRIBUTE;\nexports.AI_PROMPT_ATTRIBUTE = AI_PROMPT_ATTRIBUTE;\nexports.AI_PROMPT_MESSAGES_ATTRIBUTE = AI_PROMPT_MESSAGES_ATTRIBUTE;\nexports.AI_PROMPT_TOOLS_ATTRIBUTE = AI_PROMPT_TOOLS_ATTRIBUTE;\nexports.AI_RESPONSE_OBJECT_ATTRIBUTE = AI_RESPONSE_OBJECT_ATTRIBUTE;\nexports.AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE = AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE;\nexports.AI_RESPONSE_TEXT_ATTRIBUTE = AI_RESPONSE_TEXT_ATTRIBUTE;\nexports.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = AI_RESPONSE_TOOL_CALLS_ATTRIBUTE;\nexports.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE;\nexports.AI_TOOL_CALL_ARGS_ATTRIBUTE = AI_TOOL_CALL_ARGS_ATTRIBUTE;\nexports.AI_TOOL_CALL_ID_ATTRIBUTE = AI_TOOL_CALL_ID_ATTRIBUTE;\nexports.AI_TOOL_CALL_NAME_ATTRIBUTE = AI_TOOL_CALL_NAME_ATTRIBUTE;\nexports.AI_TOOL_CALL_RESULT_ATTRIBUTE = AI_TOOL_CALL_RESULT_ATTRIBUTE;\nexports.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE;\nexports.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = AI_USAGE_PROMPT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_MODEL_ATTRIBUTE = GEN_AI_RESPONSE_MODEL_ATTRIBUTE;\nexports.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE;\n//# sourceMappingURL=vercel-ai-attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai-attributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/vercel-ai.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst vercelAiAttributes = __webpack_require__(/*! ./vercel-ai-attributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai-attributes.js\");\n\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n * This is supposed to be used in `client.on('spanStart', ...)\n */\nfunction onVercelAiSpanStart(span) {\n  const { data: attributes, description: name } = spanUtils.spanToJSON(span);\n\n  if (!name) {\n    return;\n  }\n\n  // Tool call spans\n  // https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n  if (attributes[vercelAiAttributes.AI_TOOL_CALL_NAME_ATTRIBUTE] && attributes[vercelAiAttributes.AI_TOOL_CALL_ID_ATTRIBUTE] && name === 'ai.toolCall') {\n    processToolCallSpan(span, attributes);\n    return;\n  }\n\n  // The AI and Provider must be defined for generate, stream, and embed spans.\n  // The id of the model\n  const aiModelId = attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE];\n  // the provider of the model\n  const aiModelProvider = attributes[vercelAiAttributes.AI_MODEL_PROVIDER_ATTRIBUTE];\n  if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n    return;\n  }\n\n  processGenerateSpan(span, name, attributes);\n}\n\nfunction vercelAiEventProcessor(event) {\n  if (event.type === 'transaction' && event.spans) {\n    // Map to accumulate token data by parent span ID\n    const tokenAccumulator = new Map();\n\n    // First pass: process all spans and accumulate token data\n    for (const span of event.spans) {\n      processEndedVercelAiSpan(span);\n\n      // Accumulate token data for parent spans\n      accumulateTokensForParent(span, tokenAccumulator);\n    }\n\n    // Second pass: apply accumulated token data to parent spans\n    for (const span of event.spans) {\n      if (span.op !== 'gen_ai.invoke_agent') {\n        continue;\n      }\n\n      applyAccumulatedTokens(span, tokenAccumulator);\n    }\n  }\n\n  return event;\n}\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n */\nfunction processEndedVercelAiSpan(span) {\n  const { data: attributes, origin } = span;\n\n  if (origin !== 'auto.vercelai.otel') {\n    return;\n  }\n\n  renameAttributeKey(attributes, vercelAiAttributes.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE, vercelAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE);\n  renameAttributeKey(attributes, vercelAiAttributes.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE, vercelAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE);\n\n  if (\n    typeof attributes[vercelAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] === 'number' &&\n    typeof attributes[vercelAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] === 'number'\n  ) {\n    attributes['gen_ai.usage.total_tokens'] =\n      attributes[vercelAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] + attributes[vercelAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n  }\n\n  // Rename AI SDK attributes to standardized gen_ai attributes\n  renameAttributeKey(attributes, vercelAiAttributes.AI_PROMPT_MESSAGES_ATTRIBUTE, 'gen_ai.request.messages');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_RESPONSE_TEXT_ATTRIBUTE, 'gen_ai.response.text');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE, 'gen_ai.response.tool_calls');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_RESPONSE_OBJECT_ATTRIBUTE, 'gen_ai.response.object');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_PROMPT_TOOLS_ATTRIBUTE, 'gen_ai.request.available_tools');\n\n  renameAttributeKey(attributes, vercelAiAttributes.AI_TOOL_CALL_ARGS_ATTRIBUTE, 'gen_ai.tool.input');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_TOOL_CALL_RESULT_ATTRIBUTE, 'gen_ai.tool.output');\n\n  addProviderMetadataToAttributes(attributes);\n\n  // Change attributes namespaced with `ai.X` to `vercel.ai.X`\n  for (const key of Object.keys(attributes)) {\n    if (key.startsWith('ai.')) {\n      renameAttributeKey(attributes, key, `vercel.${key}`);\n    }\n  }\n}\n\n/**\n * Renames an attribute key in the provided attributes object if the old key exists.\n * This function safely handles null and undefined values.\n */\nfunction renameAttributeKey(attributes, oldKey, newKey) {\n  if (attributes[oldKey] != null) {\n    attributes[newKey] = attributes[oldKey];\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete attributes[oldKey];\n  }\n}\n\nfunction processToolCallSpan(span, attributes) {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n  span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.execute_tool');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_TOOL_CALL_NAME_ATTRIBUTE, 'gen_ai.tool.name');\n  renameAttributeKey(attributes, vercelAiAttributes.AI_TOOL_CALL_ID_ATTRIBUTE, 'gen_ai.tool.call.id');\n  // https://opentelemetry.io/docs/specs/semconv/registry/attributes/gen-ai/#gen-ai-tool-type\n  if (!attributes['gen_ai.tool.type']) {\n    span.setAttribute('gen_ai.tool.type', 'function');\n  }\n  const toolName = attributes['gen_ai.tool.name'];\n  if (toolName) {\n    span.updateName(`execute_tool ${toolName}`);\n  }\n}\n\nfunction processGenerateSpan(span, name, attributes) {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n\n  const nameWthoutAi = name.replace('ai.', '');\n  span.setAttribute('ai.pipeline.name', nameWthoutAi);\n  span.updateName(nameWthoutAi);\n\n  // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n  const functionId = attributes[vercelAiAttributes.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE];\n  if (functionId && typeof functionId === 'string' && name.split('.').length - 1 === 1) {\n    span.updateName(`${nameWthoutAi} ${functionId}`);\n    span.setAttribute('gen_ai.function_id', functionId);\n  }\n\n  if (attributes[vercelAiAttributes.AI_PROMPT_ATTRIBUTE]) {\n    span.setAttribute('gen_ai.prompt', attributes[vercelAiAttributes.AI_PROMPT_ATTRIBUTE]);\n  }\n  if (attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE] && !attributes[vercelAiAttributes.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]) {\n    span.setAttribute(vercelAiAttributes.GEN_AI_RESPONSE_MODEL_ATTRIBUTE, attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]);\n  }\n  span.setAttribute('ai.streaming', name.includes('stream'));\n\n  // Generate Spans\n  if (name === 'ai.generateText') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateText.doGenerate') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_text');\n    span.updateName(`generate_text ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamText') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamText.doStream') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_text');\n    span.updateName(`stream_text ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.generateObject') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateObject.doGenerate') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_object');\n    span.updateName(`generate_object ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamObject') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamObject.doStream') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_object');\n    span.updateName(`stream_object ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embed') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embed.doEmbed') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed');\n    span.updateName(`embed ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embedMany') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embedMany.doEmbed') {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed_many');\n    span.updateName(`embed_many ${attributes[vercelAiAttributes.AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name.startsWith('ai.stream')) {\n    span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n    return;\n  }\n}\n\n/**\n * Add event processors to the given client to process Vercel AI spans.\n */\nfunction addVercelAiProcessors(client) {\n  client.on('spanStart', onVercelAiSpanStart);\n  // Note: We cannot do this on `spanEnd`, because the span cannot be mutated anymore at this point\n  client.addEventProcessor(Object.assign(vercelAiEventProcessor, { id: 'VercelAiEventProcessor' }));\n}\n\n/**\n * Accumulates token data from a span to its parent in the token accumulator map.\n * This function extracts token usage from the current span and adds it to the\n * accumulated totals for its parent span.\n */\nfunction accumulateTokensForParent(span, tokenAccumulator) {\n  const parentSpanId = span.parent_span_id;\n  if (!parentSpanId) {\n    return;\n  }\n\n  const inputTokens = span.data[vercelAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n  const outputTokens = span.data[vercelAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE];\n\n  if (typeof inputTokens === 'number' || typeof outputTokens === 'number') {\n    const existing = tokenAccumulator.get(parentSpanId) || { inputTokens: 0, outputTokens: 0 };\n\n    if (typeof inputTokens === 'number') {\n      existing.inputTokens += inputTokens;\n    }\n    if (typeof outputTokens === 'number') {\n      existing.outputTokens += outputTokens;\n    }\n\n    tokenAccumulator.set(parentSpanId, existing);\n  }\n}\n\n/**\n * Applies accumulated token data to the `gen_ai.invoke_agent` span.\n * Only immediate children of the `gen_ai.invoke_agent` span are considered,\n * since aggregation will automatically occur for each parent span.\n */\nfunction applyAccumulatedTokens(span, tokenAccumulator) {\n  const accumulated = tokenAccumulator.get(span.span_id);\n  if (!accumulated) {\n    return;\n  }\n\n  if (accumulated.inputTokens > 0) {\n    span.data[vercelAiAttributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] = accumulated.inputTokens;\n  }\n  if (accumulated.outputTokens > 0) {\n    span.data[vercelAiAttributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] = accumulated.outputTokens;\n  }\n  if (accumulated.inputTokens > 0 || accumulated.outputTokens > 0) {\n    span.data['gen_ai.usage.total_tokens'] = accumulated.inputTokens + accumulated.outputTokens;\n  }\n}\n\nfunction addProviderMetadataToAttributes(attributes) {\n  const providerMetadata = attributes[vercelAiAttributes.AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE] ;\n  if (providerMetadata) {\n    try {\n      const providerMetadataObject = JSON.parse(providerMetadata) ;\n      if (providerMetadataObject.openai) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.openai.cachedPromptTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.reasoning',\n          providerMetadataObject.openai.reasoningTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.prediction_accepted',\n          providerMetadataObject.openai.acceptedPredictionTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.prediction_rejected',\n          providerMetadataObject.openai.rejectedPredictionTokens,\n        );\n        setAttributeIfDefined(attributes, 'gen_ai.conversation.id', providerMetadataObject.openai.responseId);\n      }\n\n      if (providerMetadataObject.anthropic) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.anthropic.cacheReadInputTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_write',\n          providerMetadataObject.anthropic.cacheCreationInputTokens,\n        );\n      }\n\n      if (providerMetadataObject.bedrock?.usage) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.bedrock.usage.cacheReadInputTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_write',\n          providerMetadataObject.bedrock.usage.cacheWriteInputTokens,\n        );\n      }\n\n      if (providerMetadataObject.deepseek) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.deepseek.promptCacheHitTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_miss',\n          providerMetadataObject.deepseek.promptCacheMissTokens,\n        );\n      }\n    } catch {\n      // Ignore\n    }\n  }\n}\n\n/**\n * Sets an attribute only if the value is not null or undefined.\n */\nfunction setAttributeIfDefined(attributes, key, value) {\n  if (value != null) {\n    attributes[key] = value;\n  }\n}\n\nexports.addVercelAiProcessors = addVercelAiProcessors;\n//# sourceMappingURL=vercel-ai.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdmVyY2VsLWFpLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDMUMsMkJBQTJCLG1CQUFPLENBQUMsbUhBQTJCOztBQUU5RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMkJBQTJCOztBQUVyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxFQUFFLFdBQVc7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMscURBQXFEO0FBQzFGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxxREFBcUQ7QUFDeEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDLHFEQUFxRDtBQUM1RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMscURBQXFEO0FBQzFGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixxREFBcUQ7QUFDbEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLHFEQUFxRDtBQUN2RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLDhCQUE4QjtBQUNqRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy92ZXJjZWwtYWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHNlbWFudGljQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL3NlbWFudGljQXR0cmlidXRlcy5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi9zcGFuVXRpbHMuanMnKTtcbmNvbnN0IHZlcmNlbEFpQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vdmVyY2VsLWFpLWF0dHJpYnV0ZXMuanMnKTtcblxuZnVuY3Rpb24gYWRkT3JpZ2luVG9TcGFuKHNwYW4sIG9yaWdpbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sIG9yaWdpbik7XG59XG5cbi8qKlxuICogUG9zdC1wcm9jZXNzIHNwYW5zIGVtaXR0ZWQgYnkgdGhlIFZlcmNlbCBBSSBTREsuXG4gKiBUaGlzIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gYGNsaWVudC5vbignc3BhblN0YXJ0JywgLi4uKVxuICovXG5mdW5jdGlvbiBvblZlcmNlbEFpU3BhblN0YXJ0KHNwYW4pIHtcbiAgY29uc3QgeyBkYXRhOiBhdHRyaWJ1dGVzLCBkZXNjcmlwdGlvbjogbmFtZSB9ID0gc3BhblV0aWxzLnNwYW5Ub0pTT04oc3Bhbik7XG5cbiAgaWYgKCFuYW1lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVG9vbCBjYWxsIHNwYW5zXG4gIC8vIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSN0b29sLWNhbGwtc3BhbnNcbiAgaWYgKGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1RPT0xfQ0FMTF9OQU1FX0FUVFJJQlVURV0gJiYgYXR0cmlidXRlc1t2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfVE9PTF9DQUxMX0lEX0FUVFJJQlVURV0gJiYgbmFtZSA9PT0gJ2FpLnRvb2xDYWxsJykge1xuICAgIHByb2Nlc3NUb29sQ2FsbFNwYW4oc3BhbiwgYXR0cmlidXRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIEFJIGFuZCBQcm92aWRlciBtdXN0IGJlIGRlZmluZWQgZm9yIGdlbmVyYXRlLCBzdHJlYW0sIGFuZCBlbWJlZCBzcGFucy5cbiAgLy8gVGhlIGlkIG9mIHRoZSBtb2RlbFxuICBjb25zdCBhaU1vZGVsSWQgPSBhdHRyaWJ1dGVzW3ZlcmNlbEFpQXR0cmlidXRlcy5BSV9NT0RFTF9JRF9BVFRSSUJVVEVdO1xuICAvLyB0aGUgcHJvdmlkZXIgb2YgdGhlIG1vZGVsXG4gIGNvbnN0IGFpTW9kZWxQcm92aWRlciA9IGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX01PREVMX1BST1ZJREVSX0FUVFJJQlVURV07XG4gIGlmICh0eXBlb2YgYWlNb2RlbElkICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgYWlNb2RlbFByb3ZpZGVyICE9PSAnc3RyaW5nJyB8fCAhYWlNb2RlbElkIHx8ICFhaU1vZGVsUHJvdmlkZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzR2VuZXJhdGVTcGFuKHNwYW4sIG5hbWUsIGF0dHJpYnV0ZXMpO1xufVxuXG5mdW5jdGlvbiB2ZXJjZWxBaUV2ZW50UHJvY2Vzc29yKGV2ZW50KSB7XG4gIGlmIChldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nICYmIGV2ZW50LnNwYW5zKSB7XG4gICAgLy8gTWFwIHRvIGFjY3VtdWxhdGUgdG9rZW4gZGF0YSBieSBwYXJlbnQgc3BhbiBJRFxuICAgIGNvbnN0IHRva2VuQWNjdW11bGF0b3IgPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBGaXJzdCBwYXNzOiBwcm9jZXNzIGFsbCBzcGFucyBhbmQgYWNjdW11bGF0ZSB0b2tlbiBkYXRhXG4gICAgZm9yIChjb25zdCBzcGFuIG9mIGV2ZW50LnNwYW5zKSB7XG4gICAgICBwcm9jZXNzRW5kZWRWZXJjZWxBaVNwYW4oc3Bhbik7XG5cbiAgICAgIC8vIEFjY3VtdWxhdGUgdG9rZW4gZGF0YSBmb3IgcGFyZW50IHNwYW5zXG4gICAgICBhY2N1bXVsYXRlVG9rZW5zRm9yUGFyZW50KHNwYW4sIHRva2VuQWNjdW11bGF0b3IpO1xuICAgIH1cblxuICAgIC8vIFNlY29uZCBwYXNzOiBhcHBseSBhY2N1bXVsYXRlZCB0b2tlbiBkYXRhIHRvIHBhcmVudCBzcGFuc1xuICAgIGZvciAoY29uc3Qgc3BhbiBvZiBldmVudC5zcGFucykge1xuICAgICAgaWYgKHNwYW4ub3AgIT09ICdnZW5fYWkuaW52b2tlX2FnZW50Jykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlBY2N1bXVsYXRlZFRva2VucyhzcGFuLCB0b2tlbkFjY3VtdWxhdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqIFBvc3QtcHJvY2VzcyBzcGFucyBlbWl0dGVkIGJ5IHRoZSBWZXJjZWwgQUkgU0RLLlxuICovXG5mdW5jdGlvbiBwcm9jZXNzRW5kZWRWZXJjZWxBaVNwYW4oc3Bhbikge1xuICBjb25zdCB7IGRhdGE6IGF0dHJpYnV0ZXMsIG9yaWdpbiB9ID0gc3BhbjtcblxuICBpZiAob3JpZ2luICE9PSAnYXV0by52ZXJjZWxhaS5vdGVsJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCB2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfVVNBR0VfQ09NUExFVElPTl9UT0tFTlNfQVRUUklCVVRFLCB2ZXJjZWxBaUF0dHJpYnV0ZXMuR0VOX0FJX1VTQUdFX09VVFBVVF9UT0tFTlNfQVRUUklCVVRFKTtcbiAgcmVuYW1lQXR0cmlidXRlS2V5KGF0dHJpYnV0ZXMsIHZlcmNlbEFpQXR0cmlidXRlcy5BSV9VU0FHRV9QUk9NUFRfVE9LRU5TX0FUVFJJQlVURSwgdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9VU0FHRV9JTlBVVF9UT0tFTlNfQVRUUklCVVRFKTtcblxuICBpZiAoXG4gICAgdHlwZW9mIGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9VU0FHRV9PVVRQVVRfVE9LRU5TX0FUVFJJQlVURV0gPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9VU0FHRV9JTlBVVF9UT0tFTlNfQVRUUklCVVRFXSA9PT0gJ251bWJlcidcbiAgKSB7XG4gICAgYXR0cmlidXRlc1snZ2VuX2FpLnVzYWdlLnRvdGFsX3Rva2VucyddID1cbiAgICAgIGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9VU0FHRV9PVVRQVVRfVE9LRU5TX0FUVFJJQlVURV0gKyBhdHRyaWJ1dGVzW3ZlcmNlbEFpQXR0cmlidXRlcy5HRU5fQUlfVVNBR0VfSU5QVVRfVE9LRU5TX0FUVFJJQlVURV07XG4gIH1cblxuICAvLyBSZW5hbWUgQUkgU0RLIGF0dHJpYnV0ZXMgdG8gc3RhbmRhcmRpemVkIGdlbl9haSBhdHRyaWJ1dGVzXG4gIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCB2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfUFJPTVBUX01FU1NBR0VTX0FUVFJJQlVURSwgJ2dlbl9haS5yZXF1ZXN0Lm1lc3NhZ2VzJyk7XG4gIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCB2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfUkVTUE9OU0VfVEVYVF9BVFRSSUJVVEUsICdnZW5fYWkucmVzcG9uc2UudGV4dCcpO1xuICByZW5hbWVBdHRyaWJ1dGVLZXkoYXR0cmlidXRlcywgdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1JFU1BPTlNFX1RPT0xfQ0FMTFNfQVRUUklCVVRFLCAnZ2VuX2FpLnJlc3BvbnNlLnRvb2xfY2FsbHMnKTtcbiAgcmVuYW1lQXR0cmlidXRlS2V5KGF0dHJpYnV0ZXMsIHZlcmNlbEFpQXR0cmlidXRlcy5BSV9SRVNQT05TRV9PQkpFQ1RfQVRUUklCVVRFLCAnZ2VuX2FpLnJlc3BvbnNlLm9iamVjdCcpO1xuICByZW5hbWVBdHRyaWJ1dGVLZXkoYXR0cmlidXRlcywgdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1BST01QVF9UT09MU19BVFRSSUJVVEUsICdnZW5fYWkucmVxdWVzdC5hdmFpbGFibGVfdG9vbHMnKTtcblxuICByZW5hbWVBdHRyaWJ1dGVLZXkoYXR0cmlidXRlcywgdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1RPT0xfQ0FMTF9BUkdTX0FUVFJJQlVURSwgJ2dlbl9haS50b29sLmlucHV0Jyk7XG4gIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCB2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfVE9PTF9DQUxMX1JFU1VMVF9BVFRSSUJVVEUsICdnZW5fYWkudG9vbC5vdXRwdXQnKTtcblxuICBhZGRQcm92aWRlck1ldGFkYXRhVG9BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuXG4gIC8vIENoYW5nZSBhdHRyaWJ1dGVzIG5hbWVzcGFjZWQgd2l0aCBgYWkuWGAgdG8gYHZlcmNlbC5haS5YYFxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKSkge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnYWkuJykpIHtcbiAgICAgIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCBrZXksIGB2ZXJjZWwuJHtrZXl9YCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVuYW1lcyBhbiBhdHRyaWJ1dGUga2V5IGluIHRoZSBwcm92aWRlZCBhdHRyaWJ1dGVzIG9iamVjdCBpZiB0aGUgb2xkIGtleSBleGlzdHMuXG4gKiBUaGlzIGZ1bmN0aW9uIHNhZmVseSBoYW5kbGVzIG51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmFtZUF0dHJpYnV0ZUtleShhdHRyaWJ1dGVzLCBvbGRLZXksIG5ld0tleSkge1xuICBpZiAoYXR0cmlidXRlc1tvbGRLZXldICE9IG51bGwpIHtcbiAgICBhdHRyaWJ1dGVzW25ld0tleV0gPSBhdHRyaWJ1dGVzW29sZEtleV07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW29sZEtleV07XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1Rvb2xDYWxsU3BhbihzcGFuLCBhdHRyaWJ1dGVzKSB7XG4gIGFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by52ZXJjZWxhaS5vdGVsJyk7XG4gIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZ2VuX2FpLmV4ZWN1dGVfdG9vbCcpO1xuICByZW5hbWVBdHRyaWJ1dGVLZXkoYXR0cmlidXRlcywgdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1RPT0xfQ0FMTF9OQU1FX0FUVFJJQlVURSwgJ2dlbl9haS50b29sLm5hbWUnKTtcbiAgcmVuYW1lQXR0cmlidXRlS2V5KGF0dHJpYnV0ZXMsIHZlcmNlbEFpQXR0cmlidXRlcy5BSV9UT09MX0NBTExfSURfQVRUUklCVVRFLCAnZ2VuX2FpLnRvb2wuY2FsbC5pZCcpO1xuICAvLyBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L3JlZ2lzdHJ5L2F0dHJpYnV0ZXMvZ2VuLWFpLyNnZW4tYWktdG9vbC10eXBlXG4gIGlmICghYXR0cmlidXRlc1snZ2VuX2FpLnRvb2wudHlwZSddKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2dlbl9haS50b29sLnR5cGUnLCAnZnVuY3Rpb24nKTtcbiAgfVxuICBjb25zdCB0b29sTmFtZSA9IGF0dHJpYnV0ZXNbJ2dlbl9haS50b29sLm5hbWUnXTtcbiAgaWYgKHRvb2xOYW1lKSB7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBleGVjdXRlX3Rvb2wgJHt0b29sTmFtZX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzR2VuZXJhdGVTcGFuKHNwYW4sIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLnZlcmNlbGFpLm90ZWwnKTtcblxuICBjb25zdCBuYW1lV3Rob3V0QWkgPSBuYW1lLnJlcGxhY2UoJ2FpLicsICcnKTtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2FpLnBpcGVsaW5lLm5hbWUnLCBuYW1lV3Rob3V0QWkpO1xuICBzcGFuLnVwZGF0ZU5hbWUobmFtZVd0aG91dEFpKTtcblxuICAvLyBJZiBhIFRlbGVtZXRyeSBuYW1lIGlzIHNldCBhbmQgaXQgaXMgYSBwaXBlbGluZSBzcGFuLCB1c2UgdGhhdCBhcyB0aGUgb3BlcmF0aW9uIG5hbWVcbiAgY29uc3QgZnVuY3Rpb25JZCA9IGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1RFTEVNRVRSWV9GVU5DVElPTl9JRF9BVFRSSUJVVEVdO1xuICBpZiAoZnVuY3Rpb25JZCAmJiB0eXBlb2YgZnVuY3Rpb25JZCA9PT0gJ3N0cmluZycgJiYgbmFtZS5zcGxpdCgnLicpLmxlbmd0aCAtIDEgPT09IDEpIHtcbiAgICBzcGFuLnVwZGF0ZU5hbWUoYCR7bmFtZVd0aG91dEFpfSAke2Z1bmN0aW9uSWR9YCk7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2dlbl9haS5mdW5jdGlvbl9pZCcsIGZ1bmN0aW9uSWQpO1xuICB9XG5cbiAgaWYgKGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX1BST01QVF9BVFRSSUJVVEVdKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2dlbl9haS5wcm9tcHQnLCBhdHRyaWJ1dGVzW3ZlcmNlbEFpQXR0cmlidXRlcy5BSV9QUk9NUFRfQVRUUklCVVRFXSk7XG4gIH1cbiAgaWYgKGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX01PREVMX0lEX0FUVFJJQlVURV0gJiYgIWF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEVdKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUodmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEUsIGF0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX01PREVMX0lEX0FUVFJJQlVURV0pO1xuICB9XG4gIHNwYW4uc2V0QXR0cmlidXRlKCdhaS5zdHJlYW1pbmcnLCBuYW1lLmluY2x1ZGVzKCdzdHJlYW0nKSk7XG5cbiAgLy8gR2VuZXJhdGUgU3BhbnNcbiAgaWYgKG5hbWUgPT09ICdhaS5nZW5lcmF0ZVRleHQnKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdnZW5fYWkuaW52b2tlX2FnZW50Jyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5nZW5lcmF0ZVRleHQuZG9HZW5lcmF0ZScpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2dlbl9haS5nZW5lcmF0ZV90ZXh0Jyk7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBnZW5lcmF0ZV90ZXh0ICR7YXR0cmlidXRlc1t2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfTU9ERUxfSURfQVRUUklCVVRFXX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2FpLnN0cmVhbVRleHQnKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdnZW5fYWkuaW52b2tlX2FnZW50Jyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5zdHJlYW1UZXh0LmRvU3RyZWFtJykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZ2VuX2FpLnN0cmVhbV90ZXh0Jyk7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBzdHJlYW1fdGV4dCAke2F0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX01PREVMX0lEX0FUVFJJQlVURV19YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5nZW5lcmF0ZU9iamVjdCcpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2dlbl9haS5pbnZva2VfYWdlbnQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2FpLmdlbmVyYXRlT2JqZWN0LmRvR2VuZXJhdGUnKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdnZW5fYWkuZ2VuZXJhdGVfb2JqZWN0Jyk7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBnZW5lcmF0ZV9vYmplY3QgJHthdHRyaWJ1dGVzW3ZlcmNlbEFpQXR0cmlidXRlcy5BSV9NT0RFTF9JRF9BVFRSSUJVVEVdfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnYWkuc3RyZWFtT2JqZWN0Jykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZ2VuX2FpLmludm9rZV9hZ2VudCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnYWkuc3RyZWFtT2JqZWN0LmRvU3RyZWFtJykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZ2VuX2FpLnN0cmVhbV9vYmplY3QnKTtcbiAgICBzcGFuLnVwZGF0ZU5hbWUoYHN0cmVhbV9vYmplY3QgJHthdHRyaWJ1dGVzW3ZlcmNlbEFpQXR0cmlidXRlcy5BSV9NT0RFTF9JRF9BVFRSSUJVVEVdfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnYWkuZW1iZWQnKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdnZW5fYWkuaW52b2tlX2FnZW50Jyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5lbWJlZC5kb0VtYmVkJykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZ2VuX2FpLmVtYmVkJyk7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBlbWJlZCAke2F0dHJpYnV0ZXNbdmVyY2VsQWlBdHRyaWJ1dGVzLkFJX01PREVMX0lEX0FUVFJJQlVURV19YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5lbWJlZE1hbnknKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdnZW5fYWkuaW52b2tlX2FnZW50Jyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdhaS5lbWJlZE1hbnkuZG9FbWJlZCcpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2dlbl9haS5lbWJlZF9tYW55Jyk7XG4gICAgc3Bhbi51cGRhdGVOYW1lKGBlbWJlZF9tYW55ICR7YXR0cmlidXRlc1t2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfTU9ERUxfSURfQVRUUklCVVRFXX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmFtZS5zdGFydHNXaXRoKCdhaS5zdHJlYW0nKSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnYWkucnVuJyk7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8qKlxuICogQWRkIGV2ZW50IHByb2Nlc3NvcnMgdG8gdGhlIGdpdmVuIGNsaWVudCB0byBwcm9jZXNzIFZlcmNlbCBBSSBzcGFucy5cbiAqL1xuZnVuY3Rpb24gYWRkVmVyY2VsQWlQcm9jZXNzb3JzKGNsaWVudCkge1xuICBjbGllbnQub24oJ3NwYW5TdGFydCcsIG9uVmVyY2VsQWlTcGFuU3RhcnQpO1xuICAvLyBOb3RlOiBXZSBjYW5ub3QgZG8gdGhpcyBvbiBgc3BhbkVuZGAsIGJlY2F1c2UgdGhlIHNwYW4gY2Fubm90IGJlIG11dGF0ZWQgYW55bW9yZSBhdCB0aGlzIHBvaW50XG4gIGNsaWVudC5hZGRFdmVudFByb2Nlc3NvcihPYmplY3QuYXNzaWduKHZlcmNlbEFpRXZlbnRQcm9jZXNzb3IsIHsgaWQ6ICdWZXJjZWxBaUV2ZW50UHJvY2Vzc29yJyB9KSk7XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgdG9rZW4gZGF0YSBmcm9tIGEgc3BhbiB0byBpdHMgcGFyZW50IGluIHRoZSB0b2tlbiBhY2N1bXVsYXRvciBtYXAuXG4gKiBUaGlzIGZ1bmN0aW9uIGV4dHJhY3RzIHRva2VuIHVzYWdlIGZyb20gdGhlIGN1cnJlbnQgc3BhbiBhbmQgYWRkcyBpdCB0byB0aGVcbiAqIGFjY3VtdWxhdGVkIHRvdGFscyBmb3IgaXRzIHBhcmVudCBzcGFuLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVG9rZW5zRm9yUGFyZW50KHNwYW4sIHRva2VuQWNjdW11bGF0b3IpIHtcbiAgY29uc3QgcGFyZW50U3BhbklkID0gc3Bhbi5wYXJlbnRfc3Bhbl9pZDtcbiAgaWYgKCFwYXJlbnRTcGFuSWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnB1dFRva2VucyA9IHNwYW4uZGF0YVt2ZXJjZWxBaUF0dHJpYnV0ZXMuR0VOX0FJX1VTQUdFX0lOUFVUX1RPS0VOU19BVFRSSUJVVEVdO1xuICBjb25zdCBvdXRwdXRUb2tlbnMgPSBzcGFuLmRhdGFbdmVyY2VsQWlBdHRyaWJ1dGVzLkdFTl9BSV9VU0FHRV9PVVRQVVRfVE9LRU5TX0FUVFJJQlVURV07XG5cbiAgaWYgKHR5cGVvZiBpbnB1dFRva2VucyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG91dHB1dFRva2VucyA9PT0gJ251bWJlcicpIHtcbiAgICBjb25zdCBleGlzdGluZyA9IHRva2VuQWNjdW11bGF0b3IuZ2V0KHBhcmVudFNwYW5JZCkgfHwgeyBpbnB1dFRva2VuczogMCwgb3V0cHV0VG9rZW5zOiAwIH07XG5cbiAgICBpZiAodHlwZW9mIGlucHV0VG9rZW5zID09PSAnbnVtYmVyJykge1xuICAgICAgZXhpc3RpbmcuaW5wdXRUb2tlbnMgKz0gaW5wdXRUb2tlbnM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3V0cHV0VG9rZW5zID09PSAnbnVtYmVyJykge1xuICAgICAgZXhpc3Rpbmcub3V0cHV0VG9rZW5zICs9IG91dHB1dFRva2VucztcbiAgICB9XG5cbiAgICB0b2tlbkFjY3VtdWxhdG9yLnNldChwYXJlbnRTcGFuSWQsIGV4aXN0aW5nKTtcbiAgfVxufVxuXG4vKipcbiAqIEFwcGxpZXMgYWNjdW11bGF0ZWQgdG9rZW4gZGF0YSB0byB0aGUgYGdlbl9haS5pbnZva2VfYWdlbnRgIHNwYW4uXG4gKiBPbmx5IGltbWVkaWF0ZSBjaGlsZHJlbiBvZiB0aGUgYGdlbl9haS5pbnZva2VfYWdlbnRgIHNwYW4gYXJlIGNvbnNpZGVyZWQsXG4gKiBzaW5jZSBhZ2dyZWdhdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgb2NjdXIgZm9yIGVhY2ggcGFyZW50IHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5QWNjdW11bGF0ZWRUb2tlbnMoc3BhbiwgdG9rZW5BY2N1bXVsYXRvcikge1xuICBjb25zdCBhY2N1bXVsYXRlZCA9IHRva2VuQWNjdW11bGF0b3IuZ2V0KHNwYW4uc3Bhbl9pZCk7XG4gIGlmICghYWNjdW11bGF0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYWNjdW11bGF0ZWQuaW5wdXRUb2tlbnMgPiAwKSB7XG4gICAgc3Bhbi5kYXRhW3ZlcmNlbEFpQXR0cmlidXRlcy5HRU5fQUlfVVNBR0VfSU5QVVRfVE9LRU5TX0FUVFJJQlVURV0gPSBhY2N1bXVsYXRlZC5pbnB1dFRva2VucztcbiAgfVxuICBpZiAoYWNjdW11bGF0ZWQub3V0cHV0VG9rZW5zID4gMCkge1xuICAgIHNwYW4uZGF0YVt2ZXJjZWxBaUF0dHJpYnV0ZXMuR0VOX0FJX1VTQUdFX09VVFBVVF9UT0tFTlNfQVRUUklCVVRFXSA9IGFjY3VtdWxhdGVkLm91dHB1dFRva2VucztcbiAgfVxuICBpZiAoYWNjdW11bGF0ZWQuaW5wdXRUb2tlbnMgPiAwIHx8IGFjY3VtdWxhdGVkLm91dHB1dFRva2VucyA+IDApIHtcbiAgICBzcGFuLmRhdGFbJ2dlbl9haS51c2FnZS50b3RhbF90b2tlbnMnXSA9IGFjY3VtdWxhdGVkLmlucHV0VG9rZW5zICsgYWNjdW11bGF0ZWQub3V0cHV0VG9rZW5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFByb3ZpZGVyTWV0YWRhdGFUb0F0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0gYXR0cmlidXRlc1t2ZXJjZWxBaUF0dHJpYnV0ZXMuQUlfUkVTUE9OU0VfUFJPVklERVJfTUVUQURBVEFfQVRUUklCVVRFXSA7XG4gIGlmIChwcm92aWRlck1ldGFkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyTWV0YWRhdGFPYmplY3QgPSBKU09OLnBhcnNlKHByb3ZpZGVyTWV0YWRhdGEpIDtcbiAgICAgIGlmIChwcm92aWRlck1ldGFkYXRhT2JqZWN0Lm9wZW5haSkge1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoXG4gICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAnZ2VuX2FpLnVzYWdlLmlucHV0X3Rva2Vucy5jYWNoZWQnLFxuICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGFPYmplY3Qub3BlbmFpLmNhY2hlZFByb21wdFRva2VucyxcbiAgICAgICAgKTtcbiAgICAgICAgc2V0QXR0cmlidXRlSWZEZWZpbmVkKFxuICAgICAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICAgICAgJ2dlbl9haS51c2FnZS5vdXRwdXRfdG9rZW5zLnJlYXNvbmluZycsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5vcGVuYWkucmVhc29uaW5nVG9rZW5zLFxuICAgICAgICApO1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoXG4gICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAnZ2VuX2FpLnVzYWdlLm91dHB1dF90b2tlbnMucHJlZGljdGlvbl9hY2NlcHRlZCcsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5vcGVuYWkuYWNjZXB0ZWRQcmVkaWN0aW9uVG9rZW5zLFxuICAgICAgICApO1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoXG4gICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAnZ2VuX2FpLnVzYWdlLm91dHB1dF90b2tlbnMucHJlZGljdGlvbl9yZWplY3RlZCcsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5vcGVuYWkucmVqZWN0ZWRQcmVkaWN0aW9uVG9rZW5zLFxuICAgICAgICApO1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoYXR0cmlidXRlcywgJ2dlbl9haS5jb252ZXJzYXRpb24uaWQnLCBwcm92aWRlck1ldGFkYXRhT2JqZWN0Lm9wZW5haS5yZXNwb25zZUlkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVyTWV0YWRhdGFPYmplY3QuYW50aHJvcGljKSB7XG4gICAgICAgIHNldEF0dHJpYnV0ZUlmRGVmaW5lZChcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICdnZW5fYWkudXNhZ2UuaW5wdXRfdG9rZW5zLmNhY2hlZCcsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5hbnRocm9waWMuY2FjaGVSZWFkSW5wdXRUb2tlbnMsXG4gICAgICAgICk7XG4gICAgICAgIHNldEF0dHJpYnV0ZUlmRGVmaW5lZChcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICdnZW5fYWkudXNhZ2UuaW5wdXRfdG9rZW5zLmNhY2hlX3dyaXRlJyxcbiAgICAgICAgICBwcm92aWRlck1ldGFkYXRhT2JqZWN0LmFudGhyb3BpYy5jYWNoZUNyZWF0aW9uSW5wdXRUb2tlbnMsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm92aWRlck1ldGFkYXRhT2JqZWN0LmJlZHJvY2s/LnVzYWdlKSB7XG4gICAgICAgIHNldEF0dHJpYnV0ZUlmRGVmaW5lZChcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICdnZW5fYWkudXNhZ2UuaW5wdXRfdG9rZW5zLmNhY2hlZCcsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5iZWRyb2NrLnVzYWdlLmNhY2hlUmVhZElucHV0VG9rZW5zLFxuICAgICAgICApO1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoXG4gICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAnZ2VuX2FpLnVzYWdlLmlucHV0X3Rva2Vucy5jYWNoZV93cml0ZScsXG4gICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YU9iamVjdC5iZWRyb2NrLnVzYWdlLmNhY2hlV3JpdGVJbnB1dFRva2VucyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVyTWV0YWRhdGFPYmplY3QuZGVlcHNlZWspIHtcbiAgICAgICAgc2V0QXR0cmlidXRlSWZEZWZpbmVkKFxuICAgICAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICAgICAgJ2dlbl9haS51c2FnZS5pbnB1dF90b2tlbnMuY2FjaGVkJyxcbiAgICAgICAgICBwcm92aWRlck1ldGFkYXRhT2JqZWN0LmRlZXBzZWVrLnByb21wdENhY2hlSGl0VG9rZW5zLFxuICAgICAgICApO1xuICAgICAgICBzZXRBdHRyaWJ1dGVJZkRlZmluZWQoXG4gICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAnZ2VuX2FpLnVzYWdlLmlucHV0X3Rva2Vucy5jYWNoZV9taXNzJyxcbiAgICAgICAgICBwcm92aWRlck1ldGFkYXRhT2JqZWN0LmRlZXBzZWVrLnByb21wdENhY2hlTWlzc1Rva2VucyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElnbm9yZVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNldHMgYW4gYXR0cmlidXRlIG9ubHkgaWYgdGhlIHZhbHVlIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlSWZEZWZpbmVkKGF0dHJpYnV0ZXMsIGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnRzLmFkZFZlcmNlbEFpUHJvY2Vzc29ycyA9IGFkZFZlcmNlbEFpUHJvY2Vzc29ycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcmNlbC1haS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercel-ai.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercelWaitUntil.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/vercelWaitUntil.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\");\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nfunction vercelWaitUntil(task) {\n  const vercelRequestContextGlobal =\n    // @ts-expect-error This is not typed\n    worldwide.GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx = vercelRequestContextGlobal?.get?.();\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n\nexports.vercelWaitUntil = vercelWaitUntil;\n//# sourceMappingURL=vercelWaitUntil.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdmVyY2VsV2FpdFVudGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGtCQUFrQixtQkFBTyxDQUFDLDZGQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdmVyY2VsV2FpdFVudGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgZGVsYXlzIGNsb3Npbmcgb2YgYSBWZXJjZWwgbGFtYmRhIHVudGlsIHRoZSBwcm92aWRlZCBwcm9taXNlIGlzIHJlc29sdmVkLlxuICpcbiAqIFZlbmRvcmVkIGZyb20gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHZlcmNlbC9mdW5jdGlvbnNcbiAqL1xuZnVuY3Rpb24gdmVyY2VsV2FpdFVudGlsKHRhc2spIHtcbiAgY29uc3QgdmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwgPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVGhpcyBpcyBub3QgdHlwZWRcbiAgICB3b3JsZHdpZGUuR0xPQkFMX09CSltTeW1ib2wuZm9yKCdAdmVyY2VsL3JlcXVlc3QtY29udGV4dCcpXTtcblxuICBjb25zdCBjdHggPSB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbD8uZ2V0Py4oKTtcblxuICBpZiAoY3R4Py53YWl0VW50aWwpIHtcbiAgICBjdHgud2FpdFVudGlsKHRhc2spO1xuICB9XG59XG5cbmV4cG9ydHMudmVyY2VsV2FpdFVudGlsID0gdmVyY2VsV2FpdFVudGlsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyY2VsV2FpdFVudGlsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/vercelWaitUntil.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// This is a magic string replaced by rollup\n\nconst SDK_VERSION = \"10.3.0\" ;\n\nexports.SDK_VERSION = SDK_VERSION;\n//# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTs7QUFFQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIFRoaXMgaXMgYSBtYWdpYyBzdHJpbmcgcmVwbGFjZWQgYnkgcm9sbHVwXG5cbmNvbnN0IFNES19WRVJTSU9OID0gXCIxMC4zLjBcIiA7XG5cbmV4cG9ydHMuU0RLX1ZFUlNJT04gPSBTREtfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/worldwide.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Internal global with common properties and Sentry extensions  */\n\n/** Get's the global object for the current JavaScript runtime */\nconst GLOBAL_OBJ = globalThis ;\n\nexports.GLOBAL_OBJ = GLOBAL_OBJ;\n//# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvd29ybGR3aWRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy93b3JsZHdpZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKiBJbnRlcm5hbCBnbG9iYWwgd2l0aCBjb21tb24gcHJvcGVydGllcyBhbmQgU2VudHJ5IGV4dGVuc2lvbnMgICovXG5cbi8qKiBHZXQncyB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBydW50aW1lICovXG5jb25zdCBHTE9CQUxfT0JKID0gZ2xvYmFsVGhpcyA7XG5cbmV4cG9ydHMuR0xPQkFMX09CSiA9IEdMT0JBTF9PQko7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JsZHdpZGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/worldwide.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/vendor/escapeStringForRegex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/vendor/escapeStringForRegex.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n\nexports.escapeStringForRegex = escapeStringForRegex;\n//# sourceMappingURL=escapeStringForRegex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3ZlbmRvci9lc2NhcGVTdHJpbmdGb3JSZWdleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cCBidXQgd2l0aCBtb2RpZmljYXRpb25zIHRvOlxuLy8gICBhKSByZWR1Y2UgdGhlIHNpemUgYnkgc2tpcHBpbmcgdGhlIHJ1bnRpbWUgdHlwZSAtIGNoZWNraW5nXG4vLyAgIGIpIGVuc3VyZSBpdCBnZXRzIGRvd24gLSBjb21waWxlZCBmb3Igb2xkIHZlcnNpb25zIG9mIE5vZGUodGhlIHB1Ymxpc2hlZCBwYWNrYWdlIG9ubHkgc3VwcG9ydHMgTm9kZSAxNCspLlxuLy9cbi8vIE1JVCBMaWNlbnNlXG4vL1xuLy8gQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoaHR0cHM6Ly9zaW5kcmVzb3JodXMuY29tKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZFxuLy8gZG9jdW1lbnRhdGlvbiBmaWxlcyh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuLy8gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZCAvIG9yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kXG4vLyB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2Zcbi8vIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE9cbi8vIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5JTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbi8vIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1Ncbi8vIElOIFRIRSBTT0ZUV0FSRS5cblxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZywgZXNjYXBlIGNoYXJhY3RlcnMgd2hpY2ggaGF2ZSBtZWFuaW5nIGluIHRoZSByZWdleCBncmFtbWFyLCBzdWNoIHRoYXQgdGhlIHJlc3VsdCBpcyBzYWZlIHRvIGZlZWQgdG9cbiAqIGBuZXcgUmVnRXhwKClgLlxuICpcbiAqIEBwYXJhbSByZWdleFN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZVxuICogQHJldHVybnMgQW4gdmVyc2lvbiBvZiB0aGUgc3RyaW5nIHdpdGggYWxsIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycyBlc2NhcGVkXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZ0ZvclJlZ2V4KHJlZ2V4U3RyaW5nKSB7XG4gIC8vIGVzY2FwZSB0aGUgaHlwaGVuIHNlcGFyYXRlbHkgc28gd2UgY2FuIGFsc28gcmVwbGFjZSBpdCB3aXRoIGEgdW5pY29kZSBsaXRlcmFsIGh5cGhlbiwgdG8gYXZvaWQgdGhlIHByb2JsZW1zXG4gIC8vIGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2lzc3Vlcy8yMC5cbiAgcmV0dXJuIHJlZ2V4U3RyaW5nLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJykucmVwbGFjZSgvLS9nLCAnXFxcXHgyZCcpO1xufVxuXG5leHBvcnRzLmVzY2FwZVN0cmluZ0ZvclJlZ2V4ID0gZXNjYXBlU3RyaW5nRm9yUmVnZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc2NhcGVTdHJpbmdGb3JSZWdleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/vendor/getIpAddress.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/vendor/getIpAddress.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nconst ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nfunction getClientIPAddress(headers) {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc, val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value) {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str) {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n\nexports.getClientIPAddress = getClientIPAddress;\nexports.ipHeaderNames = ipHeaderNames;\n//# sourceMappingURL=getIpAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdmVuZG9yL2dldElwQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREOztBQUU1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRkFBMEYsRUFBRSx3QkFBd0IsSUFBSSxHQUFHLEVBQUUsY0FBYyxJQUFJLGtCQUFrQixJQUFJLEdBQUcsRUFBRSxxRkFBcUYsRUFBRSxhQUFhLElBQUksa0JBQWtCLElBQUksR0FBRyxFQUFFLHNGQUFzRixFQUFFLGdCQUFnQixJQUFJLEVBQUUsSUFBSSxrQkFBa0IsSUFBSSxHQUFHLEVBQUUsa0JBQWtCLElBQUksRUFBRSxJQUFJLG1GQUFtRixFQUFFLGdCQUFnQixJQUFJLEVBQUUsSUFBSSxrQkFBa0IsSUFBSSxHQUFHLEVBQUUsa0JBQWtCLElBQUksRUFBRSxJQUFJLG1GQUFtRixFQUFFLGdCQUFnQixJQUFJLEVBQUUsSUFBSSxrQkFBa0IsSUFBSSxHQUFHLEVBQUUsa0JBQWtCLElBQUksRUFBRSxJQUFJLG1GQUFtRixFQUFFLGdCQUFnQixJQUFJLEVBQUUsSUFBSSxrQkFBa0IsSUFBSSxHQUFHLEVBQUUsa0JBQWtCLElBQUksRUFBRSxJQUFJLG1GQUFtRixFQUFFLGdCQUFnQixJQUFJLEVBQUUsSUFBSSwwQkFBMEIsSUFBSSxFQUFFLElBQUksbUZBQW1GLEVBQUUsZ0JBQWdCLElBQUksRUFBRSxJQUFJLHFCQUFxQixHQUFHO0FBQ2x1QztBQUNBOztBQUVBLDBCQUEwQjtBQUMxQixxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3ZlbmRvci9nZXRJcEFkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIFZlbmRvcmVkIC8gbW9kaWZpZWQgZnJvbSBAc2VyZ2lvZHhhL3JlbWl4LXV0aWxzXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJnaW9keGEvcmVtaXgtdXRpbHMvYmxvYi8wMmFmODBlMTI4MjlhNTM2OTZiZmE4ZjNjMjM2Mzk3NWNmNTlmNTVlL3NyYy9zZXJ2ZXIvZ2V0LWNsaWVudC1pcC1hZGRyZXNzLnRzXG4vLyBNSVQgTGljZW5zZVxuXG4vLyBDb3B5cmlnaHQgKGMpIDIwMjEgU2VyZ2lvIFhhbGFtYnLDrVxuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbi8vIFRoZSBoZWFkZXJzIHRvIGNoZWNrLCBpbiBwcmlvcml0eSBvcmRlclxuY29uc3QgaXBIZWFkZXJOYW1lcyA9IFtcbiAgJ1gtQ2xpZW50LUlQJyxcbiAgJ1gtRm9yd2FyZGVkLUZvcicsXG4gICdGbHktQ2xpZW50LUlQJyxcbiAgJ0NGLUNvbm5lY3RpbmctSVAnLFxuICAnRmFzdGx5LUNsaWVudC1JcCcsXG4gICdUcnVlLUNsaWVudC1JcCcsXG4gICdYLVJlYWwtSVAnLFxuICAnWC1DbHVzdGVyLUNsaWVudC1JUCcsXG4gICdYLUZvcndhcmRlZCcsXG4gICdGb3J3YXJkZWQtRm9yJyxcbiAgJ0ZvcndhcmRlZCcsXG4gICdYLVZlcmNlbC1Gb3J3YXJkZWQtRm9yJyxcbl07XG5cbi8qKlxuICogR2V0IHRoZSBJUCBhZGRyZXNzIG9mIHRoZSBjbGllbnQgc2VuZGluZyBhIHJlcXVlc3QuXG4gKlxuICogSXQgcmVjZWl2ZXMgYSBSZXF1ZXN0IGhlYWRlcnMgb2JqZWN0IGFuZCB1c2UgaXQgdG8gZ2V0IHRoZVxuICogSVAgYWRkcmVzcyBmcm9tIG9uZSBvZiB0aGUgZm9sbG93aW5nIGhlYWRlcnMgaW4gb3JkZXIuXG4gKlxuICogSWYgdGhlIElQIGFkZHJlc3MgaXMgdmFsaWQsIGl0IHdpbGwgYmUgcmV0dXJuZWQuIE90aGVyd2lzZSwgbnVsbCB3aWxsIGJlXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBJZiB0aGUgaGVhZGVyIHZhbHVlcyBjb250YWlucyBtb3JlIHRoYW4gb25lIElQIGFkZHJlc3MsIHRoZSBmaXJzdCB2YWxpZCBvbmVcbiAqIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudElQQWRkcmVzcyhoZWFkZXJzKSB7XG4gIC8vIFRoaXMgd2lsbCBlbmQgdXAgYmVpbmcgQXJyYXk8c3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQgfCBudWxsPiBiZWNhdXNlIG9mIHRoZSB2YXJpb3VzIHBvc3NpYmxlIHZhbHVlcyBhIGhlYWRlclxuICAvLyBjYW4gdGFrZVxuICBjb25zdCBoZWFkZXJWYWx1ZXMgPSBpcEhlYWRlck5hbWVzLm1hcCgoaGVhZGVyTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJhd1ZhbHVlID0gaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICBjb25zdCB2YWx1ZSA9IEFycmF5LmlzQXJyYXkocmF3VmFsdWUpID8gcmF3VmFsdWUuam9pbignOycpIDogcmF3VmFsdWU7XG5cbiAgICBpZiAoaGVhZGVyTmFtZSA9PT0gJ0ZvcndhcmRlZCcpIHtcbiAgICAgIHJldHVybiBwYXJzZUZvcndhcmRlZEhlYWRlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlPy5zcGxpdCgnLCcpLm1hcCgodikgPT4gdi50cmltKCkpO1xuICB9KTtcblxuICAvLyBGbGF0dGVuIHRoZSBhcnJheSBhbmQgZmlsdGVyIG91dCBhbnkgZmFsc3kgZW50cmllc1xuICBjb25zdCBmbGF0dGVuZWRIZWFkZXJWYWx1ZXMgPSBoZWFkZXJWYWx1ZXMucmVkdWNlKChhY2MsIHZhbCkgPT4ge1xuICAgIGlmICghdmFsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBhY2MuY29uY2F0KHZhbCk7XG4gIH0sIFtdKTtcblxuICAvLyBGaW5kIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBpcyBhIHZhbGlkIElQIGFkZHJlc3MsIGlmIGFueVxuICBjb25zdCBpcEFkZHJlc3MgPSBmbGF0dGVuZWRIZWFkZXJWYWx1ZXMuZmluZChpcCA9PiBpcCAhPT0gbnVsbCAmJiBpc0lQKGlwKSk7XG5cbiAgcmV0dXJuIGlwQWRkcmVzcyB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZvcndhcmRlZEhlYWRlcih2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKGNvbnN0IHBhcnQgb2YgdmFsdWUuc3BsaXQoJzsnKSkge1xuICAgIGlmIChwYXJ0LnN0YXJ0c1dpdGgoJ2Zvcj0nKSkge1xuICAgICAgcmV0dXJuIHBhcnQuc2xpY2UoNCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vXG4vKipcbiAqIEN1c3RvbSBtZXRob2QgaW5zdGVhZCBvZiBpbXBvcnRpbmcgdGhpcyBmcm9tIGBuZXRgIHBhY2thZ2UsIGFzIHRoaXMgb25seSBleGlzdHMgaW4gbm9kZVxuICogQWNjZXB0czpcbiAqIDEyNy4wLjAuMVxuICogMTkyLjE2OC4xLjFcbiAqIDE5Mi4xNjguMS4yNTVcbiAqIDI1NS4yNTUuMjU1LjI1NVxuICogMTAuMS4xLjFcbiAqIDAuMC4wLjBcbiAqIDJiMDE6Y2IxOTo4MzUwOmVkMDA6ZDBkZDpmYTViOmRlMzE6OGJlNVxuICpcbiAqIFJlamVjdHM6XG4gKiAxLjEuMS4wMVxuICogMzAuMTY4LjEuMjU1LjFcbiAqIDEyNy4xXG4gKiAxOTIuMTY4LjEuMjU2XG4gKiAtMS4yLjMuNFxuICogMS4xLjEuMS5cbiAqIDMuLi4zXG4gKiAxOTIuMTY4LjEuMDk5XG4gKi9cbmZ1bmN0aW9uIGlzSVAoc3RyKSB7XG4gIGNvbnN0IHJlZ2V4ID1cbiAgICAvKD86Xig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M30kKXwoPzpeKD86KD86W2EtZkEtRlxcZF17MSw0fTopezd9KD86W2EtZkEtRlxcZF17MSw0fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7Nn0oPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318OlthLWZBLUZcXGRdezEsNH18Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezV9KD86Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSwyfXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7NH0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCwxfTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsM318Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezN9KD86KD86OlthLWZBLUZcXGRdezEsNH0pezAsMn06KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDR9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXsyfSg/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDN9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw1fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7MX0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCw0fTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsNn18Oil8KD86Oig/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDV9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw3fXw6KSkpKD86JVswLTlhLXpBLVpdezEsfSk/JCkvO1xuICByZXR1cm4gcmVnZXgudGVzdChzdHIpO1xufVxuXG5leHBvcnRzLmdldENsaWVudElQQWRkcmVzcyA9IGdldENsaWVudElQQWRkcmVzcztcbmV4cG9ydHMuaXBIZWFkZXJOYW1lcyA9IGlwSGVhZGVyTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRJcEFkZHJlc3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/vendor/getIpAddress.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method,\n      } ,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    core.captureException(error, {\n      mechanism: {\n        handled: false,\n      },\n    });\n\n    core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n  });\n}\n\nexports.captureRequestError = captureRequestError;\n//# sourceMappingURL=captureRequestError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQXdCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBLEdBQUc7QUFDSDs7QUFFQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL2NhcHR1cmVSZXF1ZXN0RXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHJlc3BvbnNlRW5kID0gcmVxdWlyZSgnLi91dGlscy9yZXNwb25zZUVuZC5qcycpO1xuXG4vKipcbiAqIFJlcG9ydHMgZXJyb3JzIHBhc3NlZCB0byB0aGUgdGhlIE5leHQuanMgYG9uUmVxdWVzdEVycm9yYCBpbnN0cnVtZW50YXRpb24gaG9vay5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZVJlcXVlc3RFcnJvcihlcnJvciwgcmVxdWVzdCwgZXJyb3JDb250ZXh0KSB7XG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHtcbiAgICAgICAgaGVhZGVyczogY29yZS5oZWFkZXJzVG9EaWN0KHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICB9ICxcbiAgICB9KTtcblxuICAgIHNjb3BlLnNldENvbnRleHQoJ25leHRqcycsIHtcbiAgICAgIHJlcXVlc3RfcGF0aDogcmVxdWVzdC5wYXRoLFxuICAgICAgcm91dGVyX2tpbmQ6IGVycm9yQ29udGV4dC5yb3V0ZXJLaW5kLFxuICAgICAgcm91dGVyX3BhdGg6IGVycm9yQ29udGV4dC5yb3V0ZVBhdGgsXG4gICAgICByb3V0ZV90eXBlOiBlcnJvckNvbnRleHQucm91dGVUeXBlLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGVycm9yQ29udGV4dC5yb3V0ZVBhdGgpO1xuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuY2FwdHVyZVJlcXVlc3RFcnJvciA9IGNhcHR1cmVSZXF1ZXN0RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlUmVxdWVzdEVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUVoRixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL2RlYnVnLWJ1aWxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(instrument)/./node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nasync function devErrorSymbolicationEventProcessor(event, hint) {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n\n      const nextjsVersion = globalWithInjectedValues.next?.version || '0.0.0';\n      const parsedNextjsVersion = nextjsVersion ? core.parseSemver(nextjsVersion) : {};\n\n      let resolvedFrames\n\n;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException )),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file || undefined,\n              lineno:\n                resolvedFrame.originalStackFrame.lineNumber || resolvedFrame.originalStackFrame.line1 || undefined,\n              colno: resolvedFrame.originalStackFrame.column || resolvedFrame.originalStackFrame.column1 || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame,\n  error,\n) {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key ] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames,\n) {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n            line1: frame.lineNumber ?? 0,\n            column1: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame)\n\n {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n\nexports.devErrorSymbolicationEventProcessor = devErrorSymbolicationEventProcessor;\n//# sourceMappingURL=devErrorSymbolicationEventProcessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGV2RXJyb3JTeW1ib2xpY2F0aW9uRXZlbnRQcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLHlCQUF5QixtQkFBTyxDQUFDLHVHQUFtQjtBQUNwRCxtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBa0I7O0FBRTdDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixpREFBaUQ7QUFDckU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFDbEQsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxFQUFFLFNBQVMsaUNBQWlDLGtCQUFrQjtBQUN2RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEVBQUUsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsWUFBWSxJQUFJLElBQUksTUFBTSxJQUFJO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9kZXZFcnJvclN5bWJvbGljYXRpb25FdmVudFByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgc3RhY2tUcmFjZVBhcnNlciA9IHJlcXVpcmUoJ3N0YWNrdHJhY2UtcGFyc2VyJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBnbG9iYWxXaXRoSW5qZWN0ZWRWYWx1ZXMgPSBjb3JlLkdMT0JBTF9PQkpcblxuO1xuXG4vKipcbiAqIEV2ZW50IHByb2Nlc3NvciB0aGF0IHdpbGwgc3ltYm9saWNhdGUgZXJyb3JzIGJ5IHVzaW5nIHRoZSB3ZWJwYWNrL25leHRqcyBkZXYgc2VydmVyIHRoYXQgaXMgdXNlZCB0byBzaG93IHN0YWNrIHRyYWNlc1xuICogaW4gdGhlIGRldiBvdmVybGF5LlxuICovXG5hc3luYyBmdW5jdGlvbiBkZXZFcnJvclN5bWJvbGljYXRpb25FdmVudFByb2Nlc3NvcihldmVudCwgaGludCkge1xuICAvLyBGaWx0ZXIgb3V0IHNwYW5zIGZvciByZXF1ZXN0cyByZXNvbHZpbmcgc291cmNlIG1hcHMgZm9yIHN0YWNrIGZyYW1lcyBpbiBkZXYgbW9kZVxuICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RyYW5zYWN0aW9uJykge1xuICAgIGV2ZW50LnNwYW5zID0gZXZlbnQuc3BhbnM/LmZpbHRlcihzcGFuID0+IHtcbiAgICAgIGNvbnN0IGh0dHBVcmxBdHRyaWJ1dGUgPSBzcGFuLmRhdGE/LlsnaHR0cC51cmwnXTtcbiAgICAgIGlmICh0eXBlb2YgaHR0cFVybEF0dHJpYnV0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuICFodHRwVXJsQXR0cmlidXRlLmluY2x1ZGVzKCdfX25leHRqc19vcmlnaW5hbC1zdGFjay1mcmFtZScpOyAvLyBjb3VsZCBhbHNvIGJlIF9fbmV4dGpzX29yaWdpbmFsLXN0YWNrLWZyYW1lcyAocGx1cmFsKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIER1ZSB0byBjaGFuZ2VzIGFjcm9zcyBOZXh0LmpzIHZlcnNpb25zLCB0aGVyZSBhcmUgYSBtaWxsaW9uIHRoaW5ncyB0aGF0IGNhbiBnbyB3cm9uZyBoZXJlIHNvIHdlIGp1c3QgdHJ5LWNhdGNoIHRoZVxuICAvLyBlbnRpcmUgZXZlbnQgcHJvY2Vzc29yLiBTeW1ib2xpY2F0ZWQgc3RhY2sgdHJhY2VzIGFyZSBqdXN0IGEgbmljZSB0byBoYXZlLlxuICB0cnkge1xuICAgIGlmIChoaW50Lm9yaWdpbmFsRXhjZXB0aW9uICYmIGhpbnQub3JpZ2luYWxFeGNlcHRpb24gaW5zdGFuY2VvZiBFcnJvciAmJiBoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLnN0YWNrKSB7XG4gICAgICBjb25zdCBmcmFtZXMgPSBzdGFja1RyYWNlUGFyc2VyLnBhcnNlKGhpbnQub3JpZ2luYWxFeGNlcHRpb24uc3RhY2spO1xuXG4gICAgICBjb25zdCBuZXh0anNWZXJzaW9uID0gZ2xvYmFsV2l0aEluamVjdGVkVmFsdWVzLm5leHQ/LnZlcnNpb24gfHwgJzAuMC4wJztcbiAgICAgIGNvbnN0IHBhcnNlZE5leHRqc1ZlcnNpb24gPSBuZXh0anNWZXJzaW9uID8gY29yZS5wYXJzZVNlbXZlcihuZXh0anNWZXJzaW9uKSA6IHt9O1xuXG4gICAgICBsZXQgcmVzb2x2ZWRGcmFtZXNcblxuO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgaWYgKHBhcnNlZE5leHRqc1ZlcnNpb24ubWFqb3IgPiAxNSB8fCAocGFyc2VkTmV4dGpzVmVyc2lvbi5tYWpvciA9PT0gMTUgJiYgcGFyc2VkTmV4dGpzVmVyc2lvbi5taW5vciA+PSAyKSkge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgcmVzb2x2ZVN0YWNrRnJhbWVzKGZyYW1lcyk7XG4gICAgICAgIGlmIChyID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkRnJhbWVzID0gcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVkRnJhbWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgZnJhbWVzLm1hcChmcmFtZSA9PiByZXNvbHZlU3RhY2tGcmFtZShmcmFtZSwgaGludC5vcmlnaW5hbEV4Y2VwdGlvbiApKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbj8udmFsdWVzPy5bMF0/LnN0YWNrdHJhY2U/LmZyYW1lcykge1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5tYXAoXG4gICAgICAgICAgKGZyYW1lLCBpLCBmcmFtZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkRnJhbWUgPSByZXNvbHZlZEZyYW1lc1tmcmFtZXMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgICAgaWYgKCFyZXNvbHZlZEZyYW1lPy5vcmlnaW5hbFN0YWNrRnJhbWUgfHwgIXJlc29sdmVkRnJhbWUub3JpZ2luYWxDb2RlRnJhbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5mcmFtZSxcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybTogZnJhbWUuZmlsZW5hbWU/LnN0YXJ0c1dpdGgoJ25vZGU6aW50ZXJuYWwnKSA/ICdub2RlanMnIDogdW5kZWZpbmVkLCAvLyBzaW1wbGUgaGFjayB0aGF0IHdpbGwgcHJldmVudCBhIHNvdXJjZSBtYXBwaW5nIGVycm9yIGZyb20gc2hvd2luZyB1cFxuICAgICAgICAgICAgICAgIGluX2FwcDogZmFsc2UsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHsgY29udGV4dExpbmUsIHByZUNvbnRleHRMaW5lcywgcG9zdENvbnRleHRMaW5lcyB9ID0gcGFyc2VPcmlnaW5hbENvZGVGcmFtZShcbiAgICAgICAgICAgICAgcmVzb2x2ZWRGcmFtZS5vcmlnaW5hbENvZGVGcmFtZSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmZyYW1lLFxuICAgICAgICAgICAgICBwcmVfY29udGV4dDogcHJlQ29udGV4dExpbmVzLFxuICAgICAgICAgICAgICBjb250ZXh0X2xpbmU6IGNvbnRleHRMaW5lLFxuICAgICAgICAgICAgICBwb3N0X2NvbnRleHQ6IHBvc3RDb250ZXh0TGluZXMsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uOiByZXNvbHZlZEZyYW1lLm9yaWdpbmFsU3RhY2tGcmFtZS5tZXRob2ROYW1lLFxuICAgICAgICAgICAgICBmaWxlbmFtZTogcmVzb2x2ZWRGcmFtZS5vcmlnaW5hbFN0YWNrRnJhbWUuZmlsZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxpbmVubzpcbiAgICAgICAgICAgICAgICByZXNvbHZlZEZyYW1lLm9yaWdpbmFsU3RhY2tGcmFtZS5saW5lTnVtYmVyIHx8IHJlc29sdmVkRnJhbWUub3JpZ2luYWxTdGFja0ZyYW1lLmxpbmUxIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgY29sbm86IHJlc29sdmVkRnJhbWUub3JpZ2luYWxTdGFja0ZyYW1lLmNvbHVtbiB8fCByZXNvbHZlZEZyYW1lLm9yaWdpbmFsU3RhY2tGcmFtZS5jb2x1bW4xIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIHJldHVybiBldmVudDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVN0YWNrRnJhbWUoXG4gIGZyYW1lLFxuICBlcnJvcixcbikge1xuICB0cnkge1xuICAgIGlmICghKGZyYW1lLmZpbGU/LnN0YXJ0c1dpdGgoJ3dlYnBhY2staW50ZXJuYWw6JykgfHwgZnJhbWUuZmlsZT8uc3RhcnRzV2l0aCgnZmlsZTonKSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdpc1NlcnZlcicsIFN0cmluZyhmYWxzZSkpOyAvLyBkb2Vzbid0IG1hdHRlciBzaW5jZSBpdCBpcyBvdmVyd3JpdHRlbiBieSBpc0FwcERpcmVjdG9yeVxuICAgIHBhcmFtcy5hcHBlbmQoJ2lzRWRnZVNlcnZlcicsIFN0cmluZyhmYWxzZSkpOyAvLyBkb2Vzbid0IG1hdHRlciBzaW5jZSBpdCBpcyBvdmVyd3JpdHRlbiBieSBpc0FwcERpcmVjdG9yeVxuICAgIHBhcmFtcy5hcHBlbmQoJ2lzQXBwRGlyZWN0b3J5JywgU3RyaW5nKHRydWUpKTsgLy8gd2lsbCBmb3JjZSBzZXJ2ZXIgdG8gZG8gbW9yZSB0aG9yb3VnaCBjaGVja2luZ1xuICAgIHBhcmFtcy5hcHBlbmQoJ2Vycm9yTWVzc2FnZScsIGVycm9yLnRvU3RyaW5nKCkpO1xuICAgIE9iamVjdC5rZXlzKGZyYW1lKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBwYXJhbXMuYXBwZW5kKGtleSwgKGZyYW1lW2tleSBdID8/ICcnKS50b1N0cmluZygpKTtcbiAgICB9KTtcblxuICAgIGxldCBiYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9zZW50cnlCYXNlUGF0aCA/PyBnbG9iYWxXaXRoSW5qZWN0ZWRWYWx1ZXMuX3NlbnRyeUJhc2VQYXRoID8/ICcnO1xuXG4gICAgLy8gUHJlZml4IHRoZSBiYXNlcGF0aCB3aXRoIGEgc2xhc2ggaWYgaXQgZG9lc24ndCBoYXZlIG9uZVxuICAgIGlmIChiYXNlUGF0aCAhPT0gJycgJiYgIWJhc2VQYXRoLm1hdGNoKC9eXFwvLykpIHtcbiAgICAgIGJhc2VQYXRoID0gYC8ke2Jhc2VQYXRofWA7XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCAzMDAwKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjb3JlLnN1cHByZXNzVHJhY2luZygoKSA9PlxuICAgICAgZmV0Y2goXG4gICAgICAgIGAke1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICAgICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnIDogJycgLy8gVE9ETzogaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHVzZXJzIGRlZmluZSBhIGRpZmZlcmVudCBwb3J0XG4gICAgICAgIH0ke2Jhc2VQYXRofS9fX25leHRqc19vcmlnaW5hbC1zdGFjay1mcmFtZT8ke3BhcmFtcy50b1N0cmluZygpfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICB9LFxuICAgICAgKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICBpZiAoIXJlcy5vayB8fCByZXMuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9yaWdpbmFsQ29kZUZyYW1lOiBib2R5Lm9yaWdpbmFsQ29kZUZyYW1lLFxuICAgICAgb3JpZ2luYWxTdGFja0ZyYW1lOiBib2R5Lm9yaWdpbmFsU3RhY2tGcmFtZSxcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmVycm9yKCdGYWlsZWQgdG8gc3ltYm9saWNhdGUgZXZlbnQgd2l0aCBOZXh0LmpzIGRldiBzZXJ2ZXInLCBlKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlU3RhY2tGcmFtZXMoXG4gIGZyYW1lcyxcbikge1xuICB0cnkge1xuICAgIGNvbnN0IHBvc3RCb2R5ID0ge1xuICAgICAgZnJhbWVzOiBmcmFtZXNcbiAgICAgICAgLmZpbHRlcihmcmFtZSA9PiB7XG4gICAgICAgICAgcmV0dXJuICEhZnJhbWUuZmlsZTtcbiAgICAgICAgfSlcbiAgICAgICAgLm1hcChmcmFtZSA9PiB7XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Jsb2IvZGYwNTczYTQ3OGJhYThiNTU0NzhhNzk2M2M0NzNkZGRkNTlhNWU0MC9wYWNrYWdlcy9uZXh0L3NyYy9jbGllbnQvY29tcG9uZW50cy9yZWFjdC1kZXYtb3ZlcmxheS9zZXJ2ZXIvbWlkZGxld2FyZS10dXJib3BhY2sudHMjTDEyOVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgZnJhbWUuZmlsZSA9IGZyYW1lLmZpbGUucmVwbGFjZSgvXnJzYzpcXC9cXC9SZWFjdFxcL1teL10rXFwvLywgJycpLnJlcGxhY2UoL1xcP1xcZCskLywgJycpO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGU6IGZyYW1lLmZpbGUsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiBmcmFtZS5tZXRob2ROYW1lID8/ICc8dW5rbm93bj4nLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBbXSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGZyYW1lLmxpbmVOdW1iZXIgPz8gMCxcbiAgICAgICAgICAgIGNvbHVtbjogZnJhbWUuY29sdW1uID8/IDAsXG4gICAgICAgICAgICBsaW5lMTogZnJhbWUubGluZU51bWJlciA/PyAwLFxuICAgICAgICAgICAgY29sdW1uMTogZnJhbWUuY29sdW1uID8/IDAsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICBpc1NlcnZlcjogZmFsc2UsXG4gICAgICBpc0VkZ2VTZXJ2ZXI6IGZhbHNlLFxuICAgICAgaXNBcHBEaXJlY3Rvcnk6IHRydWUsXG4gICAgfTtcblxuICAgIGxldCBiYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9zZW50cnlCYXNlUGF0aCA/PyBnbG9iYWxXaXRoSW5qZWN0ZWRWYWx1ZXMuX3NlbnRyeUJhc2VQYXRoID8/ICcnO1xuXG4gICAgLy8gUHJlZml4IHRoZSBiYXNlcGF0aCB3aXRoIGEgc2xhc2ggaWYgaXQgZG9lc24ndCBoYXZlIG9uZVxuICAgIGlmIChiYXNlUGF0aCAhPT0gJycgJiYgIWJhc2VQYXRoLm1hdGNoKC9eXFwvLykpIHtcbiAgICAgIGJhc2VQYXRoID0gYC8ke2Jhc2VQYXRofWA7XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCAzMDAwKTtcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNvcmUuc3VwcHJlc3NUcmFjaW5nKCgpID0+XG4gICAgICBmZXRjaChcbiAgICAgICAgYCR7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcgOiAnJyAvLyBUT0RPOiBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdXNlcnMgZGVmaW5lIGEgZGlmZmVyZW50IHBvcnRcbiAgICAgICAgfSR7YmFzZVBhdGh9L19fbmV4dGpzX29yaWdpbmFsLXN0YWNrLWZyYW1lc2AsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwb3N0Qm9keSksXG4gICAgICAgIH0sXG4gICAgICApLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIGlmICghcmVzLm9rIHx8IHJlcy5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICByZXR1cm4gYm9keS5tYXAoZnJhbWUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3JpZ2luYWxDb2RlRnJhbWU6IGZyYW1lLnZhbHVlLm9yaWdpbmFsQ29kZUZyYW1lLFxuICAgICAgICBvcmlnaW5hbFN0YWNrRnJhbWU6IGZyYW1lLnZhbHVlLm9yaWdpbmFsU3RhY2tGcmFtZSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcuZXJyb3IoJ0ZhaWxlZCB0byBzeW1ib2xpY2F0ZSBldmVudCB3aXRoIE5leHQuanMgZGV2IHNlcnZlcicsIGUpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlT3JpZ2luYWxDb2RlRnJhbWUoY29kZUZyYW1lKVxuXG4ge1xuICBjb25zdCBwcmVQcm9jZXNzZWRMaW5lcyA9IGNvZGVGcmFtZVxuICAgIC8vIFJlbW92ZSBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnMgdGhhdCBhcmUgdXNlZCBmb3Igc3ludGF4IGhpZ2hsaWdodGluZ1xuICAgIC5yZXBsYWNlKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICAgIC9bXFx1MDAxYlxcdTAwOWJdW1soKSM7P10qKD86WzAtOV17MSw0fSg/OjtbMC05XXswLDR9KSopP1swLTlBLU9SWmNmLW5xcnk9PjxdL2csIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yOTQ5NzY4MFxuICAgICAgJycsXG4gICAgKVxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAvLyBSZW1vdmUgbGluZSB0aGF0IGlzIHN1cHBvc2VkIHRvIGluZGljYXRlIHdoZXJlIHRoZSBlcnJvciBoYXBwZW5lZFxuICAgIC5maWx0ZXIobGluZSA9PiAhbGluZS5tYXRjaCgvXlxccypcXHwvKSlcbiAgICAvLyBGaW5kIHRoZSBlcnJvciBsaW5lXG4gICAgLm1hcChsaW5lID0+ICh7XG4gICAgICBsaW5lLFxuICAgICAgaXNFcnJvckxpbmU6ICEhbGluZS5tYXRjaCgvXj4vKSxcbiAgICB9KSlcbiAgICAvLyBSZW1vdmUgdGhlIGxlYWRpbmcgcGFydCB0aGF0IGlzIGp1c3QgZm9yIHByZXR0aWVyIG91dHB1dFxuICAgIC5tYXAobGluZU9iaiA9PiAoe1xuICAgICAgLi4ubGluZU9iaixcbiAgICAgIGxpbmU6IGxpbmVPYmoubGluZS5yZXBsYWNlKC9eLipcXHwvLCAnJyksXG4gICAgfSkpO1xuXG4gIGNvbnN0IHByZUNvbnRleHRMaW5lcyA9IFtdO1xuICBsZXQgY29udGV4dExpbmUgPSB1bmRlZmluZWQ7XG4gIGNvbnN0IHBvc3RDb250ZXh0TGluZXMgPSBbXTtcblxuICBsZXQgcmVhY2hlZENvbnRleHRMaW5lID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBwcmVQcm9jZXNzZWRMaW5lIG9mIHByZVByb2Nlc3NlZExpbmVzKSB7XG4gICAgaWYgKHByZVByb2Nlc3NlZExpbmUuaXNFcnJvckxpbmUpIHtcbiAgICAgIGNvbnRleHRMaW5lID0gcHJlUHJvY2Vzc2VkTGluZS5saW5lO1xuICAgICAgcmVhY2hlZENvbnRleHRMaW5lID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHJlYWNoZWRDb250ZXh0TGluZSkge1xuICAgICAgcG9zdENvbnRleHRMaW5lcy5wdXNoKHByZVByb2Nlc3NlZExpbmUubGluZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZUNvbnRleHRMaW5lcy5wdXNoKHByZVByb2Nlc3NlZExpbmUubGluZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0TGluZSxcbiAgICBwcmVDb250ZXh0TGluZXMsXG4gICAgcG9zdENvbnRleHRMaW5lcyxcbiAgfTtcbn1cblxuZXhwb3J0cy5kZXZFcnJvclN5bWJvbGljYXRpb25FdmVudFByb2Nlc3NvciA9IGRldkVycm9yU3ltYm9saWNhdGlvbkV2ZW50UHJvY2Vzc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV2RXJyb3JTeW1ib2xpY2F0aW9uRXZlbnRQcm9jZXNzb3IuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n\nexports.getVercelEnv = getVercelEnv;\n//# sourceMappingURL=getVercelEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZ2V0VmVyY2VsRW52LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0M7O0FBRUEsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogUmV0dXJucyBhbiBlbnZpcm9ubWVudCBzZXR0aW5nIHZhbHVlIGRldGVybWluZWQgYnkgVmVyY2VsJ3MgYFZFUkNFTF9FTlZgIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIEBwYXJhbSBpc0NsaWVudCBGbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdG8gdXNlIHRoZSBgTkVYVF9QVUJMSUNfYCBwcmVmaXhlZCB2ZXJzaW9uIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmVyY2VsRW52KGlzQ2xpZW50KSB7XG4gIGNvbnN0IHZlcmNlbEVudlZhciA9IGlzQ2xpZW50ID8gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVkVSQ0VMX0VOViA6IHByb2Nlc3MuZW52LlZFUkNFTF9FTlY7XG4gIHJldHVybiB2ZXJjZWxFbnZWYXIgPyBgdmVyY2VsLSR7dmVyY2VsRW52VmFyfWAgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuZ2V0VmVyY2VsRW52ID0gZ2V0VmVyY2VsRW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VmVyY2VsRW52LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject ).digest ,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    typeof (subject ).digest === 'string' &&\n    (subject ).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;\n//# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxrREFBa0Q7QUFDbEc7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIG5vdC1mb3VuZCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9ub3Rmb3VuZCNub3Rmb3VuZFxuICovXG5mdW5jdGlvbiBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICBbJ05FWFRfTk9UX0ZPVU5EJywgJ05FWFRfSFRUUF9FUlJPUl9GQUxMQkFDSzs0MDQnXS5pbmNsdWRlcyhcbiAgICAgIChzdWJqZWN0ICkuZGlnZXN0ICxcbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyByZWRpcmVjdCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9yZWRpcmVjdCNyZWRpcmVjdFxuICovXG5mdW5jdGlvbiBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnRzLmlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IgPSBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yO1xuZXhwb3J0cy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yID0gaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\n\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;\n//# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLGlIQUF5Qjs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0I7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLG1CQUFtQjtBQUMxRDs7QUFFQTtBQUNBO0FBQ0EsdUVBQXVFLElBQUk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vX2Vycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcz8uc3RhdHVzQ29kZSB8fCBjb250ZXh0T3JQcm9wcy5zdGF0dXNDb2RlO1xuICBpZiAoc3RhdHVzQ29kZSAmJiBzdGF0dXNDb2RlIDwgNTAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLy8gSW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgdGhlIHN1Z2dlc3RlZCBgX2Vycm9yLmpzYCBwYWdlIGluIHdoaWNoIHRoaXMgZnVuY3Rpb24gaXMgbWVhbnQgdG8gYmUgdXNlZCwgdGhlcmUgd2FzIGFcbiAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy84NTkyIHdoaWNoIGludm9sdmVkIGFuIGV4dHJhIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiwgaW4gdGhlXG4gIC8vIGN1c3RvbSBlcnJvciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QsIGp1c3QgaW4gY2FzZSBpdCBoYWRuJ3QgYmVlbiBjYWxsZWQgYnkgYGdldEluaXRpYWxQcm9wc2AuIE5vdyB0aGF0IHRoYXRcbiAgLy8gaXNzdWUgaGFzIGJlZW4gZml4ZWQsIHRoZSBzZWNvbmQgY2FsbCBpcyB1bm5lY2Vzc2FyeSwgYnV0IHNpbmNlIGl0IGxpdmVzIGluIHVzZXIgY29kZSByYXRoZXIgdGhhbiBvdXIgY29kZSwgdXNlcnNcbiAgLy8gaGF2ZSB0byBiZSB0aGUgb25lcyB0byBnZXQgcmlkIG9mIGl0LCBhbmQgZ3VhcmFuZXRlZWRseSwgbm90IGFsbCBvZiB0aGVtIHdpbGwuIFNvLCByYXRoZXIgdGhhbiBjYXB0dXJlIHRoZSBlcnJvclxuICAvLyB0d2ljZSwgd2UganVzdCBiYWlsIGlmIHdlIHNlbnNlIHdlJ3JlIGluIHRoYXQgbm93LWV4dHJhbmVvdXMgc2Vjb25kIGNhbGwuIChXZSBjYW4gdGVsbCB3aGljaCBmdW5jdGlvbiB3ZSdyZSBpblxuICAvLyBiZWNhdXNlIE5leHRqcyBwYXNzZXMgYHBhdGhuYW1lYCB0byBgZ2V0SW5pdGlhbFByb3BzYCBidXQgbm90IHRvIGByZW5kZXJgLilcbiAgaWYgKCFjb250ZXh0T3JQcm9wcy5wYXRobmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBpZiAocmVxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSk7XG4gICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoeyBub3JtYWxpemVkUmVxdWVzdCB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlyZC1wYXJ0eSBsaWJyYXJpZXMgKG9yIHVzZXJzIHRoZW1zZWx2ZXMpIHRocm93IHNvbWV0aGluZyBmYWxzeSwgd2Ugd2FudCB0byBjYXB0dXJlIGl0IGFzIGEgbWVzc2FnZSAod2hpY2hcbiAgICAvLyBpcyB3aGF0IHBhc3NpbmcgYSBzdHJpbmcgdG8gYGNhcHR1cmVFeGNlcHRpb25gIHdpbGwgd2luZCB1cCBkb2luZylcbiAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyIHx8IGBfZXJyb3IuanMgY2FsbGVkIHdpdGggZmFsc3kgZXJyb3IgKCR7ZXJyfSlgLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGZ1bmN0aW9uOiAnX2Vycm9yLmdldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xufVxuXG5leHBvcnRzLmNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24gPSBjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Vycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ../utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nfunction wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n  return new Proxy(apiHandler, {\n    apply: (\n      wrappingTarget,\n      thisArg,\n      args,\n    ) => {\n      tracingUtils.dropNextjsRootContext();\n      return tracingUtils.escapeNextjsTracing(() => {\n        const [req, res] = args;\n\n        if (!req) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n\n        return core.withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = core.getActiveSpan()\n            ? (_opts, callback) => callback()\n            : core.continueTrace;\n\n          return continueTraceIfNoActiveSpan(\n            {\n              sentryTrace:\n                req.headers && core.isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n              baggage: req.headers?.baggage,\n            },\n            () => {\n              const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n              const normalizedRequest = core.httpRequestToRequestData(req);\n\n              isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n              isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n\n              return core.startSpanManual(\n                {\n                  name: `${reqMethod}${parameterizedRoute}`,\n                  op: 'http.server',\n                  forceTransaction: true,\n                  attributes: {\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',\n                  },\n                },\n                async span => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  res.end = new Proxy(res.end, {\n                    apply(target, thisArg, argArray) {\n                      core.setHttpStatus(span, res.statusCode);\n                      span.end();\n                      core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                      return target.apply(thisArg, argArray);\n                    },\n                  });\n                  try {\n                    return await wrappingTarget.apply(thisArg, args);\n                  } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = core.objectify(e);\n\n                    core.captureException(objectifiedErr, {\n                      mechanism: {\n                        type: 'instrument',\n                        handled: false,\n                        data: {\n                          wrapped_handler: wrappingTarget.name,\n                          function: 'withSentry',\n                        },\n                      },\n                    });\n\n                    core.setHttpStatus(span, 500);\n                    span.end();\n\n                    // we need to await the flush here to ensure that the error is captured\n                    // as the runtime freezes as soon as the error is thrown below\n                    await responseEnd.flushSafelyWithTimeout();\n\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                  }\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;\n//# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(\n  handler,\n  vercelCronsConfig,\n) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args ;\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = core.captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            core.captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;\n//# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMkNBQTJDO0FBQzNDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIFNlbnRyeSBjcm9ucyBpbnN0cnVtZW50YXRpb24gYnkgYXV0b21hdGljYWxseSBzZW5kaW5nIGNoZWNrLWlucyBmb3IgdGhlIGdpdmVuIFZlcmNlbCBjcm9ucyBjb25maWcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyhcbiAgaGFuZGxlcixcbiAgdmVyY2VsQ3JvbnNDb25maWcsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShoYW5kbGVyLCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhcHBseTogKG9yaWdpbmFsRnVuY3Rpb24sIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmICghYXJncz8uWzBdKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbcmVxXSA9IGFyZ3MgO1xuXG4gICAgICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgY29uc3QgY3JvbnNLZXkgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLm5leHRVcmwucGF0aG5hbWUgOiByZXEudXJsO1xuICAgICAgY29uc3QgdXNlckFnZW50SGVhZGVyID0gJ25leHRVcmwnIGluIHJlcSA/IHJlcS5oZWFkZXJzLmdldCgndXNlci1hZ2VudCcpIDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcblxuICAgICAgaWYgKFxuICAgICAgICAhdmVyY2VsQ3JvbnNDb25maWcgfHwgLy8gZG8gbm90aGluZyBpZiB2ZXJjZWwgY3JvbnMgY29uZmlnIGlzIG1pc3NpbmdcbiAgICAgICAgIXVzZXJBZ2VudEhlYWRlcj8uaW5jbHVkZXMoJ3ZlcmNlbC1jcm9uJykgLy8gZG8gbm90aGluZyBpZiBlbmRwb2ludCBpcyBub3QgY2FsbGVkIGZyb20gdmVyY2VsIGNyb25zXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcmNlbENyb24gPSB2ZXJjZWxDcm9uc0NvbmZpZy5maW5kKHZlcmNlbENyb24gPT4gdmVyY2VsQ3Jvbi5wYXRoID09PSBjcm9uc0tleSk7XG5cbiAgICAgIGlmICghdmVyY2VsQ3Jvbj8ucGF0aCB8fCAhdmVyY2VsQ3Jvbi5zY2hlZHVsZSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSB2ZXJjZWxDcm9uLnBhdGg7XG5cbiAgICAgIGNvbnN0IGNoZWNrSW5JZCA9IGNvcmUuY2FwdHVyZUNoZWNrSW4oXG4gICAgICAgIHtcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYXhSdW50aW1lOiA2MCAqIDEyLCAvLyAobWludXRlcykgc28gMTIgaG91cnMgLSBqdXN0IGEgdmVyeSBoaWdoIGFyYml0cmFyeSBudW1iZXIgc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgYWN0dWFsIGR1cmF0aW9uIG9mIHRoZSB1c2VycyBjcm9uIGpvYlxuICAgICAgICAgIHNjaGVkdWxlOiB7XG4gICAgICAgICAgICB0eXBlOiAnY3JvbnRhYicsXG4gICAgICAgICAgICB2YWx1ZTogdmVyY2VsQ3Jvbi5zY2hlZHVsZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKSAvIDEwMDA7XG5cbiAgICAgIGNvbnN0IGhhbmRsZUVycm9yQ2FzZSA9ICgpID0+IHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbWF5YmVQcm9taXNlUmVzdWx0ID0gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbWF5YmVQcm9taXNlUmVzdWx0ID09PSAnb2JqZWN0JyAmJiBtYXliZVByb21pc2VSZXN1bHQgIT09IG51bGwgJiYgJ3RoZW4nIGluIG1heWJlUHJvbWlzZVJlc3VsdCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlUmVzdWx0KS50aGVuKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJdCBpcyB2ZXJ5IGltcG9ydGFudCB0aGF0IHdlIHJldHVybiB0aGUgb3JpZ2luYWwgcHJvbWlzZSBoZXJlLCBiZWNhdXNlIE5leHQuanMgYXR0YWNoZXMgdmFyaW91cyBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHRvIHRoYXQgcHJvbWlzZSBhbmQgd2lsbCB0aHJvdyBpZiB0aGV5IGFyZSBub3Qgb24gdGhlIHJldHVybmVkIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ29rJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zID0gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps ).pageProps) {\n            (appGetInitialProps ).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps ).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps ).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5R0FBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbUhBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBhcHAgKFwiX2FwcC5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0FwcEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnQXBwR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQuY3R4O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2FwcCcsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LmN0eC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGFwcEdldEluaXRpYWxQcm9wcyxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGFwcEdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgYXBwR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gUGVyIGRlZmluaXRpb24sIGBwYWdlUHJvcHNgIGlzIG5vdCBvcHRpb25hbCwgaG93ZXZlciBhbiBpbmNyZWFzZWQgYW1vdW50IG9mIHVzZXJzIGRvZXNuJ3Qgc2VlbSB0byBjYWxsXG4gICAgICAgICAgLy8gYEFwcC5nZXRJbml0aWFsUHJvcHMoYXBwQ29udGV4dClgIGluIHRoZWlyIGN1c3RvbSBgX2FwcGAgcGFnZXMgd2hpY2ggaXMgcmVxdWlyZWQgYXMgcGVyXG4gICAgICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWFwcCAtIHJlc3VsdGluZyBpbiBtaXNzaW5nIGBwYWdlUHJvcHNgLlxuICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiwgd2UganVzdCBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYHBhZ2VQcm9wc2AgZG9lc24ndCBleGlzdCBleHBsaWNpdGx5LlxuICAgICAgICAgIGlmICghKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcykge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwcEdldEluaXRpYWxQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps,\n) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlHQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtSEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsNkNBQTZDO0FBQzdDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZG9jdW1lbnQgKFwiX2RvY3VtZW50LmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZG9jdW1lbnQnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps,\n) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlHQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtSEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZXJyb3IgcGFnZSAoXCJfZXJyb3IuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdFcnJvckdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19lcnJvcicsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogZXJyb3JHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvckdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgZXJyb3JHZXRJbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5R0FBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbUhBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogaW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gKGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSkgPz8ge307IC8vIE5leHQuanMgYWxsb3dzIHVuZGVmaW5lZCB0byBiZSByZXR1cm5lZCBmcm9tIGEgZ2V0SW5pdGlhbFByb3BzRnVuY3Rpb24uXG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChpbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps,\n  parameterizedRoute,\n) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }\n\n = await (tracedGetServerSideProps.apply(thisArg, args) );\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props )._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props )._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;\n//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5R0FBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbUhBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMgVGhlIHVzZXIncyBgZ2V0U2VydmVyU2lkZVByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0dldFNlcnZlclNpZGVQcm9wcyxcbiAgcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFNlcnZlclNpZGVQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIGNvbnN0IHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IHBhcmFtZXRlcml6ZWRSb3V0ZSxcbiAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRTZXJ2ZXJTaWRlUHJvcHMnLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YTogc2VydmVyU2lkZVByb3BzLFxuICAgICAgICBiYWdnYWdlLFxuICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgIH1cblxuID0gYXdhaXQgKHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSApO1xuXG4gICAgICBpZiAodHlwZW9mIHNlcnZlclNpZGVQcm9wcyA9PT0gJ29iamVjdCcgJiYgc2VydmVyU2lkZVByb3BzICE9PSBudWxsICYmICdwcm9wcycgaW4gc2VydmVyU2lkZVByb3BzKSB7XG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAoc2VydmVyU2lkZVByb3BzLnByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2ZXJTaWRlUHJvcHM7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgPSB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa,\n  _parameterizedRoute,\n) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;\n//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlHQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtSEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U3RhdGljUHJvcHMgVGhlIHVzZXIncyBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTdGF0aWNQcm9wc2EsXG4gIF9wYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U3RhdGljUHJvcHNhLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIHJldHVybiB3cmFwcGVyVXRpbHMuY2FsbERhdGFGZXRjaGVyVHJhY2VkKGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzLCBhcmdzKTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n       render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;\n//# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5mdW5jdGlvbiBpc1JlYWN0Q2xhc3NDb21wb25lbnQodGFyZ2V0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgJiYgdGFyZ2V0Py5wcm90b3R5cGU/LmlzUmVhY3RDb21wb25lbnQ7XG59XG5cbi8qKlxuICogV3JhcHMgYSBwYWdlIGNvbXBvbmVudCB3aXRoIFNlbnRyeSBlcnJvciBpbnN0cnVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIHdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeShwYWdlQ29tcG9uZW50KSB7XG4gIGlmIChpc1JlYWN0Q2xhc3NDb21wb25lbnQocGFnZUNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gY2xhc3MgU2VudHJ5V3JhcHBlZFBhZ2VDb21wb25lbnQgZXh0ZW5kcyBwYWdlQ29tcG9uZW50IHtcbiAgICAgICByZW5kZXIoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAvLyBXZSBleHRyYWN0IHRoZSBzZW50cnkgdHJhY2UgZGF0YSB0aGF0IGlzIHB1dCBpbiB0aGUgY29tcG9uZW50IHByb3BzIGJ5IGRhdGFmZXRjaGVyIHdyYXBwZXJzXG4gICAgICAgICAgY29uc3Qgc2VudHJ5VHJhY2VEYXRhID1cbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdGhpcy5wcm9wcyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgJ19zZW50cnlUcmFjZURhdGEnIGluIHRoaXMucHJvcHMgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzLl9zZW50cnlUcmFjZURhdGEgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgID8gdGhpcy5wcm9wcy5fc2VudHJ5VHJhY2VEYXRhXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlRGF0YSkge1xuICAgICAgICAgICAgY29uc3QgdHJhY2VwYXJlbnREYXRhID0gY29yZS5leHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlRGF0YSk7XG4gICAgICAgICAgICBzY29wZS5zZXRDb250ZXh0KCd0cmFjZScsIHtcbiAgICAgICAgICAgICAgc3Bhbl9pZDogdHJhY2VwYXJlbnREYXRhPy5wYXJlbnRTcGFuSWQsXG4gICAgICAgICAgICAgIHRyYWNlX2lkOiB0cmFjZXBhcmVudERhdGE/LnRyYWNlSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnJlbmRlciguLi5hcmdzKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhZ2VDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KHBhZ2VDb21wb25lbnQsIHtcbiAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9IGFyZ0FycmF5Py5bMF0/Ll9zZW50cnlUcmFjZURhdGE7XG5cbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2VEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBjb3JlLmV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICBzcGFuX2lkOiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgdHJhY2VfaWQ6IHRyYWNlcGFyZW50RGF0YT8udHJhY2VJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ0FycmF5KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFnZUNvbXBvbmVudDtcbiAgfVxufVxuXG5leHBvcnRzLndyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeSA9IHdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;\n//# sourceMappingURL=span-attributes-with-logic-attached.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsOENBQThDO0FBQzlDLDhDQUE4QztBQUM5QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3NwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24sIHRoZSBOZXh0LmpzIFNESyB3aWxsIGRyb3AgdGhhdCB0cmFuc2FjdGlvbi5cbiAqL1xuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9ICdzZW50cnkuZHJvcF90cmFuc2FjdGlvbic7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gJ3NlbnRyeS5zZW50cnlfdHJhY2VfYmFja2ZpbGwnO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9ICdzZW50cnkucm91dGVfYmFja2ZpbGwnO1xuXG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gPSBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! next/constants */ \"(instrument)/./node_modules/next/dist/api/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\n\nexports.isBuild = isBuild;\n//# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvaXNCdWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL2lzQnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJ25leHQvY29uc3RhbnRzJyk7XG5cbi8qKlxuICogRGVjaWRlIGlmIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzIGlzIHBhcnQgb2YgdGhlIGJ1aWxkIHBoYXNlIG9yIGhhcHBlbmluZyBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiBpc0J1aWxkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuTkVYVF9QSEFTRSA9PT0gY29uc3RhbnRzLlBIQVNFX1BST0RVQ1RJT05fQlVJTEQ7XG59XG5cbmV4cG9ydHMuaXNCdWlsZCA9IGlzQnVpbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0J1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.debug.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.debug.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.log('Error while flushing events:\\n', e);\n  }\n}\n\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;\n//# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHFHQUFtQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbi8qKlxuICogRmx1c2hlcyBwZW5kaW5nIFNlbnRyeSBldmVudHMgd2l0aCBhIDIgc2Vjb25kIHRpbWVvdXQgYW5kIGluIGEgd2F5IHRoYXQgY2Fubm90IGNyZWF0ZSB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zLlxuICovXG5hc3luYyBmdW5jdGlvbiBmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkge1xuICB0cnkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGNvcmUuZmx1c2goMjAwMCk7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnRG9uZSBmbHVzaGluZyBldmVudHMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG5leHBvcnRzLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgPSBmbHVzaFNhZmVseVdpdGhUaW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VFbmQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(\n  commonObject,\n  propagationContext,\n) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\n\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = (core.GLOBAL_OBJ )\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      core.getRootSpan(nextJsOwnedSpan)?.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;\n//# sourceMappingURL=tracingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvdHJhY2luZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxxR0FBbUI7QUFDOUMsd0NBQXdDLG1CQUFPLENBQUMscUpBQTJDOztBQUUzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEMsd0NBQXdDO0FBQ3hDLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3RyYWNpbmdVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkID0gcmVxdWlyZSgnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnKTtcblxuY29uc3QgY29tbW9uUHJvcGFnYXRpb25Db250ZXh0TWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBUYWtlcyBhIHNoYXJlZCAoZ2FyYmFnZSBjb2xsZWN0YWJsZSkgb2JqZWN0IGJldHdlZW4gcmVzb3VyY2VzLCBlLmcuIGEgaGVhZGVycyBvYmplY3Qgc2hhcmVkIGJldHdlZW4gTmV4dC5qcyBzZXJ2ZXIgY29tcG9uZW50cyBhbmQgcmV0dXJucyBhIGNvbW1vbiBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBjb21tb25PYmplY3QgVGhlIHNoYXJlZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJvcGFnYXRpb25Db250ZXh0IFRoZSBwcm9wYWdhdGlvbiBjb250ZXh0IHRoYXQgc2hvdWxkIGJlIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUgcmVzb3VyY2VzIGlmIG5vIHByb3BhZ2F0aW9uIGNvbnRleHQgd2FzIHJlZ2lzdGVyZWQgeWV0LlxuICogQHJldHVybnMgdGhlIHNoYXJlZCBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb1Byb3BhZ2F0aW9uQ29udGV4dChcbiAgY29tbW9uT2JqZWN0LFxuICBwcm9wYWdhdGlvbkNvbnRleHQsXG4pIHtcbiAgaWYgKHR5cGVvZiBjb21tb25PYmplY3QgPT09ICdvYmplY3QnICYmIGNvbW1vbk9iamVjdCkge1xuICAgIGNvbnN0IG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQgPSBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQpIHtcbiAgICAgIHJldHVybiBtZW1vUHJvcGFnYXRpb25Db250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuc2V0KGNvbW1vbk9iamVjdCwgcHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gIH1cbn1cblxuY29uc3QgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRha2VzIGEgc2hhcmVkIChnYXJiYWdlIGNvbGxlY3RhYmxlKSBvYmplY3QgYmV0d2VlbiByZXNvdXJjZXMsIGUuZy4gYSBoZWFkZXJzIG9iamVjdCBzaGFyZWQgYmV0d2VlbiBOZXh0LmpzIHNlcnZlciBjb21wb25lbnRzIGFuZCByZXR1cm5zIGEgY29tbW9uIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGNvbW1vbk9iamVjdCBUaGUgc2hhcmVkIG9iamVjdC5cbiAqIEBwYXJhbSBpc29sYXRpb25TY29wZSBUaGUgaXNvbGF0aW9uU2NvcGUgdGhhdCBzaG91bGQgYmUgc2hhcmVkIGJldHdlZW4gYWxsIHRoZSByZXNvdXJjZXMgaWYgbm8gaXNvbGF0aW9uIHNjb3BlIHdhcyBjcmVhdGVkIHlldC5cbiAqIEByZXR1cm5zIHRoZSBzaGFyZWQgaXNvbGF0aW9uIHNjb3BlLlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlKGNvbW1vbk9iamVjdCkge1xuICBpZiAodHlwZW9mIGNvbW1vbk9iamVjdCA9PT0gJ29iamVjdCcgJiYgY29tbW9uT2JqZWN0KSB7XG4gICAgY29uc3QgbWVtb0lzb2xhdGlvblNjb3BlID0gY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Jc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIG1lbW9Jc29sYXRpb25TY29wZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV3SXNvbGF0aW9uU2NvcGUgPSBuZXcgY29yZS5TY29wZSgpO1xuICAgICAgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuc2V0KGNvbW1vbk9iamVjdCwgbmV3SXNvbGF0aW9uU2NvcGUpO1xuICAgICAgcmV0dXJuIG5ld0lzb2xhdGlvblNjb3BlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IGNvcmUuU2NvcGUoKTtcbiAgfVxufVxuXG5sZXQgbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZTtcblxuLyoqXG4gKiBXaWxsIG1hcmsgdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBjYWxsYmFjayBhcyBcImVzY2FwZWRcIiBmcm9tIE5leHQuanMgaW50ZXJuYWwgdHJhY2luZyBieSB1bnNldHRpbmcgdGhlIGFjdGl2ZVxuICogc3BhbiBhbmQgcHJvcGFnYXRpb24gY29udGV4dC4gV2hlbiBhbiBleGVjdXRpb24gcGFzc2VzIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcywgaXQgaXMgYSBub29wIGFmdGVyIHRoZVxuICogZmlyc3QgdGltZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlTmV4dGpzVHJhY2luZyhjYikge1xuICBjb25zdCBNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlID0gKGNvcmUuR0xPQkFMX09CSiApXG4gICAgLkFzeW5jTG9jYWxTdG9yYWdlO1xuXG4gIGlmICghTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGNvcmUuZGVidWcud2FybihcbiAgICAgICAgXCJUcmllZCB0byByZWdpc3RlciBBc3luY0xvY2FsU3RvcmFnZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IGluIGEgcnVudGltZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBBc3luY0xvY2FsU3RvcmFnZS5cIixcbiAgICAgICk7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH1cblxuICBpZiAoIW5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2UpIHtcbiAgICBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlID0gbmV3IE1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgfVxuXG4gIGlmIChuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLmdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY2IoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5zdGFydE5ld1RyYWNlKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLnJ1bih0cnVlLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZGVhbGx5IHRoaXMgZnVuY3Rpb24gbmV2ZXIgbGFuZHMgaW4gdGhlIGRldmVsb3AgYnJhbmNoLlxuICpcbiAqIERyb3BzIHRoZSBlbnRpcmUgc3BhbiB0cmVlIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZCBpbiwgaWYgaXQgd2FzIGEgc3BhbiB0cmVlIGNyZWF0ZWQgYnkgTmV4dC5qcy5cbiAqL1xuZnVuY3Rpb24gZHJvcE5leHRqc1Jvb3RDb250ZXh0KCkge1xuICBjb25zdCBuZXh0SnNPd25lZFNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcbiAgaWYgKG5leHRKc093bmVkU3Bhbikge1xuICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihuZXh0SnNPd25lZFNwYW4pO1xuICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihyb290U3BhbikuZGF0YTtcbiAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzPy5bJ25leHQuc3Bhbl90eXBlJ10pIHtcbiAgICAgIGNvcmUuZ2V0Um9vdFNwYW4obmV4dEpzT3duZWRTcGFuKT8uc2V0QXR0cmlidXRlKHNwYW5BdHRyaWJ1dGVzV2l0aExvZ2ljQXR0YWNoZWQuVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiwgdHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZSA9IGNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmNvbW1vbk9iamVjdFRvUHJvcGFnYXRpb25Db250ZXh0ID0gY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQ7XG5leHBvcnRzLmRyb3BOZXh0anNSb290Q29udGV4dCA9IGRyb3BOZXh0anNSb290Q29udGV4dDtcbmV4cG9ydHMuZXNjYXBlTmV4dGpzVHJhY2luZyA9IGVzY2FwZU5leHRqc1RyYWNpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} ;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nfunction substituteRouteParams(path, params) {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nfunction sanitizeRoutePath(path) {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction buildUrlFromComponentRoute(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = core.parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return core.getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nfunction extractSanitizedUrlFromRefererHeader(headersDict) {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return core.getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction getSanitizedRequestUrl(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n\nexports.buildUrlFromComponentRoute = buildUrlFromComponentRoute;\nexports.extractSanitizedUrlFromRefererHeader = extractSanitizedUrlFromRefererHeader;\nexports.getSanitizedRequestUrl = getSanitizedRequestUrl;\nexports.sanitizeRoutePath = sanitizeRoutePath;\nexports.substituteRouteParams = substituteRouteParams;\n//# sourceMappingURL=urls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvdXJscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUEwQywwQkFBMEI7QUFDcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVMsS0FBSyxLQUFLLEVBQUUsS0FBSzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyw0Q0FBNEM7QUFDNUMsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3VybHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSGVhZGVyS2V5cyA9IHtcbiAgRk9SV0FSREVEX1BST1RPOiAneC1mb3J3YXJkZWQtcHJvdG8nLFxuICBGT1JXQVJERURfSE9TVDogJ3gtZm9yd2FyZGVkLWhvc3QnLFxuICBIT1NUOiAnaG9zdCcsXG4gIFJFRkVSRVI6ICdyZWZlcmVyJyxcbn0gO1xuXG4vKipcbiAqIFJlcGxhY2VzIHJvdXRlIHBhcmFtZXRlcnMgaW4gYSBwYXRoIHRlbXBsYXRlIHdpdGggdGhlaXIgdmFsdWVzXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRlbXBsYXRlIGNvbnRhaW5pbmcgcGFyYW1ldGVycyBpbiBbcGFyYW1OYW1lXSBmb3JtYXRcbiAqIEBwYXJhbSBwYXJhbXMgLSBPcHRpb25hbCByb3V0ZSBwYXJhbWV0ZXJzIHRvIHJlcGxhY2UgaW4gdGhlIHRlbXBsYXRlXG4gKiBAcmV0dXJucyBUaGUgcGF0aCB3aXRoIHBhcmFtZXRlcnMgcmVwbGFjZWRcbiAqL1xuZnVuY3Rpb24gc3Vic3RpdHV0ZVJvdXRlUGFyYW1zKHBhdGgsIHBhcmFtcykge1xuICBpZiAoIXBhcmFtcyB8fCB0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JykgcmV0dXJuIHBhdGg7XG5cbiAgbGV0IHJlc3VsdFBhdGggPSBwYXRoO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcmVzdWx0UGF0aCA9IHJlc3VsdFBhdGguc3BsaXQoYFske2tleX1dYCkuam9pbihlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0UGF0aDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCBieSByZW1vdmluZyByb3V0ZSBncm91cHNcbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyBUaGUgbm9ybWFsaXplZCBwYXRoXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplUm91dGVQYXRoKHBhdGgpIHtcbiAgY29uc3QgY2xlYW5lZFNlZ21lbnRzID0gcGF0aFxuICAgIC5zcGxpdCgnLycpXG4gICAgLmZpbHRlcihzZWdtZW50ID0+IHNlZ21lbnQgJiYgIShzZWdtZW50LnN0YXJ0c1dpdGgoJygnKSAmJiBzZWdtZW50LmVuZHNXaXRoKCcpJykpKTtcblxuICByZXR1cm4gY2xlYW5lZFNlZ21lbnRzLmxlbmd0aCA+IDAgPyBgLyR7Y2xlYW5lZFNlZ21lbnRzLmpvaW4oJy8nKX1gIDogJy8nO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBmdWxsIFVSTCBmcm9tIHRoZSBjb21wb25lbnQgcm91dGUsIHBhcmFtZXRlcnMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sIGFuZCBob3N0IGluZm9ybWF0aW9uXG4gKiBAcGFyYW0gcGF0aG5hbWUgLSBPcHRpb25hbCBwYXRobmFtZSBjb21pbmcgZnJvbSBwYXJlbnQgc3BhbiBcImh0dHAudGFyZ2V0XCJcbiAqIEByZXR1cm5zIEEgc2FuaXRpemVkIFVSTCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoXG4gIGNvbXBvbmVudFJvdXRlLFxuICBwYXJhbXMsXG4gIGhlYWRlcnNEaWN0LFxuICBwYXRobmFtZSxcbikge1xuICBjb25zdCBwYXJhbWV0ZXJpemVkUGF0aCA9IHN1YnN0aXR1dGVSb3V0ZVBhcmFtcyhjb21wb25lbnRSb3V0ZSwgcGFyYW1zKTtcbiAgLy8gSWYgYXZhaWxhYmxlLCB0aGUgcGF0aG5hbWUgZnJvbSB0aGUgaHR0cC50YXJnZXQgb2YgdGhlIEhUVFAgcmVxdWVzdCBzZXJ2ZXIgc3BhbiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIHBhcmFtZXRlcml6ZWQgcGF0aC5cbiAgLy8gU3BhbnMgc3VjaCBhcyBnZW5lcmF0ZU1ldGFkYXRhIGFuZCBTZXJ2ZXIgQ29tcG9uZW50IHJlbmRlcmluZyBhcmUgdHlwaWNhbGx5IGRpcmVjdCBjaGlsZHJlbiBvZiB0aGF0IHNwYW4uXG4gIGNvbnN0IHBhdGggPSBwYXRobmFtZSA/PyBzYW5pdGl6ZVJvdXRlUGF0aChwYXJhbWV0ZXJpemVkUGF0aCk7XG5cbiAgY29uc3QgcHJvdG9jb2wgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuRk9SV0FSREVEX1BST1RPXTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnNEaWN0Py5bSGVhZGVyS2V5cy5GT1JXQVJERURfSE9TVF0gfHwgaGVhZGVyc0RpY3Q/LltIZWFkZXJLZXlzLkhPU1RdO1xuXG4gIGlmICghcHJvdG9jb2wgfHwgIWhvc3QpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGNvbnN0IGZ1bGxVcmwgPSBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHtwYXRofWA7XG5cbiAgY29uc3QgdXJsT2JqZWN0ID0gY29yZS5wYXJzZVN0cmluZ1RvVVJMT2JqZWN0KGZ1bGxVcmwpO1xuICBpZiAoIXVybE9iamVjdCkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgcmV0dXJuIGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCh1cmxPYmplY3QpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBmcm9tIHRoZSByZWZlcmVyIGhlYWRlciBpZiBpdCBleGlzdHMgYW5kIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSBoZWFkZXJzRGljdCAtIE9wdGlvbmFsIGhlYWRlcnMgY29udGFpbmluZyB0aGUgcmVmZXJlclxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBvciB1bmRlZmluZWQgaWYgcmVmZXJlciBpcyBtaXNzaW5nL2ludmFsaWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFNhbml0aXplZFVybEZyb21SZWZlcmVySGVhZGVyKGhlYWRlcnNEaWN0KSB7XG4gIGNvbnN0IHJlZmVyZXIgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuUkVGRVJFUl07XG4gIGlmICghcmVmZXJlcikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHJlZmVyZXJVcmwgPSBuZXcgVVJMKHJlZmVyZXIpO1xuICAgIHJldHVybiBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZ0Zyb21VcmxPYmplY3QocmVmZXJlclVybCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2FuaXRpemVkIFVSTCBzdHJpbmcgdXNpbmcgdGhlIHJlZmVyZXIgaGVhZGVyIGlmIGF2YWlsYWJsZSxcbiAqIG90aGVyd2lzZSBjb25zdHJ1Y3RzIHRoZSBVUkwgZnJvbSB0aGUgY29tcG9uZW50IHJvdXRlLCBwYXJhbXMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sLCBob3N0LCBhbmQgcmVmZXJlclxuICogQHBhcmFtIHBhdGhuYW1lIC0gT3B0aW9uYWwgcGF0aG5hbWUgY29taW5nIGZyb20gcm9vdCBzcGFuIFwiaHR0cC50YXJnZXRcIlxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsKFxuICBjb21wb25lbnRSb3V0ZSxcbiAgcGFyYW1zLFxuICBoZWFkZXJzRGljdCxcbiAgcGF0aG5hbWUsXG4pIHtcbiAgY29uc3QgcmVmZXJlclVybCA9IGV4dHJhY3RTYW5pdGl6ZWRVcmxGcm9tUmVmZXJlckhlYWRlcihoZWFkZXJzRGljdCk7XG4gIGlmIChyZWZlcmVyVXJsKSB7XG4gICAgcmV0dXJuIHJlZmVyZXJVcmw7XG4gIH1cblxuICByZXR1cm4gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoY29tcG9uZW50Um91dGUsIHBhcmFtcywgaGVhZGVyc0RpY3QsIHBhdGhuYW1lKTtcbn1cblxuZXhwb3J0cy5idWlsZFVybEZyb21Db21wb25lbnRSb3V0ZSA9IGJ1aWxkVXJsRnJvbUNvbXBvbmVudFJvdXRlO1xuZXhwb3J0cy5leHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXIgPSBleHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXI7XG5leHBvcnRzLmdldFNhbml0aXplZFJlcXVlc3RVcmwgPSBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsO1xuZXhwb3J0cy5zYW5pdGl6ZVJvdXRlUGF0aCA9IHNhbml0aXplUm91dGVQYXRoO1xuZXhwb3J0cy5zdWJzdGl0dXRlUm91dGVQYXJhbXMgPSBzdWJzdGl0dXRlUm91dGVQYXJhbXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(\n  origFunction,\n) {\n  return async function ( ...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, { mechanism: { handled: false } });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(\n  origDataFetcher,\n  req,\n  res,\n  options\n\n,\n) {\n  return async function (\n\n    ...args\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = core.getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(\n  origFunction,\n  origFunctionArgs,\n) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, { mechanism: { handled: false } });\n    throw e;\n  }\n}\n\n/**\n * Extracts the params and searchParams from the props object.\n *\n * Depending on the next version, params and searchParams may be a promise which we do not want to resolve in this function.\n */\nfunction maybeExtractSynchronousParamsAndSearchParams(props)\n\n {\n  let params =\n    props && typeof props === 'object' && 'params' in props\n      ? (props.params )\n      : undefined;\n  if (core.isThenable(params)) {\n    params = undefined;\n  }\n\n  let searchParams =\n    props && typeof props === 'object' && 'searchParams' in props\n      ? (props.searchParams )\n      : undefined;\n  if (core.isThenable(searchParams)) {\n    searchParams = undefined;\n  }\n\n  return { params, searchParams };\n}\n\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.maybeExtractSynchronousParamsAndSearchParams = maybeExtractSynchronousParamsAndSearchParams;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;\n//# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvd3JhcHBlclV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyx3Q0FBd0MsbUJBQU8sQ0FBQyxxSkFBMkM7O0FBRTNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLGlDQUFpQyxhQUFhLGtCQUFrQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0NBQWdDLEdBQUcsNkJBQTZCO0FBQ2pILHdEQUF3RCxtQkFBbUI7O0FBRTNFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSx1Q0FBdUM7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLCtCQUErQixhQUFhLGtCQUFrQjtBQUM5RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBLDZCQUE2QjtBQUM3QixvREFBb0Q7QUFDcEQsZ0NBQWdDO0FBQ2hDLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvd3JhcHBlclV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkID0gcmVxdWlyZSgnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnKTtcblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHRoYXQgcG90ZW50aWFsbHkgdGhyb3dzLiBJZiBpdCBkb2VzLCB0aGUgZXJyb3IgaXMgcGFzc2VkIHRvIGBjYXB0dXJlRXhjZXB0aW9uYCBhbmQgcmV0aHJvd24uXG4gKlxuICogTm90ZTogVGhpcyBmdW5jdGlvbiB0dXJucyB0aGUgd3JhcHBlZCBmdW5jdGlvbiBpbnRvIGFuIGFzeW5jaHJvbm91cyBvbmUuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24oXG4gIG9yaWdGdW5jdGlvbixcbikge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKCAuLi5vcmlnRnVuY3Rpb25Bcmd1bWVudHMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IG9yaWdGdW5jdGlvbi5hcHBseSh0aGlzLCBvcmlnRnVuY3Rpb25Bcmd1bWVudHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRPRE86IEV4dHJhY3QgZXJyb3IgbG9naWMgZnJvbSBgd2l0aFNlbnRyeWAgaW4gaGVyZSBvciBjcmVhdGUgYSBuZXcgd3JhcHBlciB3aXRoIHNhaWQgbG9naWMgb3Igc29tZXRoaW5nIGxpa2UgdGhhdC5cbiAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlLCB7IG1lY2hhbmlzbTogeyBoYW5kbGVkOiBmYWxzZSB9IH0pO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQ2FsbHMgYSBzZXJ2ZXItc2lkZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uICh0aGF0IHRha2VzIGEgYHJlcWAgYW5kIGByZXNgIG9iamVjdCBpbiBpdHMgY29udGV4dCkgd2l0aCB0cmFjaW5nXG4gKiBpbnN0cnVtZW50YXRpb24uIEEgdHJhbnNhY3Rpb24gd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgaW5jb21pbmcgcmVxdWVzdCAoaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0KSBpbiBhZGRpdGlvbiB0b1xuICogYSBzcGFuIGZvciB0aGUgd3JhcHBlZCBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEFsbCBvZiB0aGUgYWJvdmUgaGFwcGVucyBpbiBhbiBpc29sYXRlZCBkb21haW4sIG1lYW5pbmcgYWxsIHRocm93biBlcnJvcnMgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvcnJlY3Qgc3Bhbi5cbiAqXG4gKiBAcGFyYW0gb3JpZ0RhdGFGZXRjaGVyIFRoZSBkYXRhIGZldGNoaW5nIG1ldGhvZCB0byBjYWxsLlxuICogQHBhcmFtIG9yaWdGdW5jdGlvbkFyZ3VtZW50cyBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGRhdGEgZmV0Y2hpbmcgbWV0aG9kIHdpdGguXG4gKiBAcGFyYW0gcmVxIFRoZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uJ3MgcmVxdWVzdCBvYmplY3QuXG4gKiBAcGFyYW0gcmVzIFRoZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uJ3MgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBwcm92aWRpbmcgZGV0YWlscyBmb3IgdGhlIGNyZWF0ZWQgdHJhbnNhY3Rpb24gYW5kIHNwYW4uXG4gKiBAcmV0dXJucyB3aGF0IHRoZSBkYXRhIGZldGNoaW5nIG1ldGhvZCBjYWxsIHJldHVybmVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihcbiAgb3JpZ0RhdGFGZXRjaGVyLFxuICByZXEsXG4gIHJlcyxcbiAgb3B0aW9uc1xuXG4sXG4pIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChcblxuICAgIC4uLmFyZ3NcbiAgKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBjb3JlLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpO1xuICAgIGNvcmUuZ2V0Q3VycmVudFNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke29wdGlvbnMuZGF0YUZldGNoaW5nTWV0aG9kTmFtZX0gKCR7b3B0aW9ucy5kYXRhRmV0Y2hlclJvdXRlTmFtZX0pYCk7XG4gICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuXG4gICAgY29uc3Qgc3BhbiA9IGNvcmUuZ2V0QWN0aXZlU3BhbigpO1xuXG4gICAgLy8gT25seSBzZXQgdGhlIHJvdXRlIGJhY2tmaWxsIGlmIHRoZSBzcGFuIGlzIG5vdCBmb3IgL19lcnJvclxuICAgIGlmIChzcGFuICYmIG9wdGlvbnMucmVxdWVzdGVkUm91dGVOYW1lICE9PSAnL19lcnJvcicpIHtcbiAgICAgIGNvbnN0IHJvb3QgPSBjb3JlLmdldFJvb3RTcGFuKHNwYW4pO1xuICAgICAgcm9vdC5zZXRBdHRyaWJ1dGUoc3BhbkF0dHJpYnV0ZXNXaXRoTG9naWNBdHRhY2hlZC5UUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCwgb3B0aW9ucy5yZXF1ZXN0ZWRSb3V0ZU5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgJ3NlbnRyeS10cmFjZSc6IHNlbnRyeVRyYWNlLCBiYWdnYWdlIH0gPSBjb3JlLmdldFRyYWNlRGF0YSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbnRyeVRyYWNlOiBzZW50cnlUcmFjZSxcbiAgICAgIGJhZ2dhZ2U6IGJhZ2dhZ2UsXG4gICAgICBkYXRhOiBhd2FpdCBvcmlnRGF0YUZldGNoZXIuYXBwbHkodGhpcywgYXJncyksXG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxsIGEgZGF0YSBmZXRjaGVyIGFuZCB0cmFjZSBpdC4gT25seSB0cmFjZXMgdGhlIGZ1bmN0aW9uIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB0cmFuc2FjdGlvbiBvbiB0aGUgc2NvcGUuXG4gKlxuICogV2Ugb25seSBkbyB0aGUgZm9sbG93aW5nIHVudGlsIHdlIG1vdmUgdHJhbnNhY3Rpb24gY3JlYXRpb24gaW50byB0aGlzIGZ1bmN0aW9uOiBXaGVuIGNhbGxlZCwgdGhlIHdyYXBwZWQgZnVuY3Rpb25cbiAqIHdpbGwgYWxzbyB1cGRhdGUgdGhlIG5hbWUgb2YgdGhlIGFjdGl2ZSB0cmFuc2FjdGlvbiB3aXRoIGEgcGFyYW1ldGVyaXplZCByb3V0ZSBwcm92aWRlZCB2aWEgdGhlIGBvcHRpb25zYCBhcmd1bWVudC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhRmV0Y2hlclRyYWNlZChcbiAgb3JpZ0Z1bmN0aW9uLFxuICBvcmlnRnVuY3Rpb25BcmdzLFxuKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IG9yaWdGdW5jdGlvbiguLi5vcmlnRnVuY3Rpb25BcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlLCB7IG1lY2hhbmlzbTogeyBoYW5kbGVkOiBmYWxzZSB9IH0pO1xuICAgIHRocm93IGU7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgcGFyYW1zIGFuZCBzZWFyY2hQYXJhbXMgZnJvbSB0aGUgcHJvcHMgb2JqZWN0LlxuICpcbiAqIERlcGVuZGluZyBvbiB0aGUgbmV4dCB2ZXJzaW9uLCBwYXJhbXMgYW5kIHNlYXJjaFBhcmFtcyBtYXkgYmUgYSBwcm9taXNlIHdoaWNoIHdlIGRvIG5vdCB3YW50IHRvIHJlc29sdmUgaW4gdGhpcyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF5YmVFeHRyYWN0U3luY2hyb25vdXNQYXJhbXNBbmRTZWFyY2hQYXJhbXMocHJvcHMpXG5cbiB7XG4gIGxldCBwYXJhbXMgPVxuICAgIHByb3BzICYmIHR5cGVvZiBwcm9wcyA9PT0gJ29iamVjdCcgJiYgJ3BhcmFtcycgaW4gcHJvcHNcbiAgICAgID8gKHByb3BzLnBhcmFtcyApXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGNvcmUuaXNUaGVuYWJsZShwYXJhbXMpKSB7XG4gICAgcGFyYW1zID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGV0IHNlYXJjaFBhcmFtcyA9XG4gICAgcHJvcHMgJiYgdHlwZW9mIHByb3BzID09PSAnb2JqZWN0JyAmJiAnc2VhcmNoUGFyYW1zJyBpbiBwcm9wc1xuICAgICAgPyAocHJvcHMuc2VhcmNoUGFyYW1zIClcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoY29yZS5pc1RoZW5hYmxlKHNlYXJjaFBhcmFtcykpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyBwYXJhbXMsIHNlYXJjaFBhcmFtcyB9O1xufVxuXG5leHBvcnRzLmNhbGxEYXRhRmV0Y2hlclRyYWNlZCA9IGNhbGxEYXRhRmV0Y2hlclRyYWNlZDtcbmV4cG9ydHMubWF5YmVFeHRyYWN0U3luY2hyb25vdXNQYXJhbXNBbmRTZWFyY2hQYXJhbXMgPSBtYXliZUV4dHJhY3RTeW5jaHJvbm91c1BhcmFtc0FuZFNlYXJjaFBhcmFtcztcbmV4cG9ydHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uID0gd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uO1xuZXhwb3J0cy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyID0gd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBwZXJVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(\n  ...args\n) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(\n  serverActionName,\n  options,\n  callback,\n) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = core.getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch {\n      debugBuild.DEBUG_BUILD &&\n        core.debug.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } ,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan()\n      ? (_opts, callback) => callback()\n      : core.continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await core.startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              },\n            },\n            async span => {\n              const result = await core.handleCallbackErrors(callback, error => {\n                if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                core.getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  core.getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n\nexports.withServerActionInstrumentation = withServerActionInstrumentation;\n//# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQXdCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLG9HQUFrQjtBQUM3QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4SEFBK0I7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0UsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsaUJBQWlCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0RBQW9EO0FBQ3ZGLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQixtQ0FBbUMseURBQXlEO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsSUFBSTtBQUNuRDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMgPSByZXF1aXJlKCcuL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcycpO1xuXG4vKipcbiAqIFdyYXBzIGEgTmV4dC5qcyBTZXJ2ZXIgQWN0aW9uIGltcGxlbWVudGF0aW9uIHdpdGggU2VudHJ5IEVycm9yIGFuZCBQZXJmb3JtYW5jZSBpbnN0cnVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIHdpdGhTZXJ2ZXJBY3Rpb25JbnN0cnVtZW50YXRpb24oXG4gIC4uLmFyZ3Ncbikge1xuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBbc2VydmVyQWN0aW9uTmFtZSwgY2FsbGJhY2tdID0gYXJncztcbiAgICByZXR1cm4gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbkltcGxlbWVudGF0aW9uKHNlcnZlckFjdGlvbk5hbWUsIHt9LCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW3NlcnZlckFjdGlvbk5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrXSA9IGFyZ3M7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICByZXR1cm4gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbkltcGxlbWVudGF0aW9uKHNlcnZlckFjdGlvbk5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuYXN5bmMgZnVuY3Rpb24gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbkltcGxlbWVudGF0aW9uKFxuICBzZXJ2ZXJBY3Rpb25OYW1lLFxuICBvcHRpb25zLFxuICBjYWxsYmFjayxcbikge1xuICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoYXN5bmMgaXNvbGF0aW9uU2NvcGUgPT4ge1xuICAgIGNvbnN0IHNlbmREZWZhdWx0UGlpID0gY29yZS5nZXRDbGllbnQoKT8uZ2V0T3B0aW9ucygpLnNlbmREZWZhdWx0UGlpO1xuXG4gICAgbGV0IHNlbnRyeVRyYWNlSGVhZGVyO1xuICAgIGxldCBiYWdnYWdlSGVhZGVyO1xuICAgIGNvbnN0IGZ1bGxIZWFkZXJzT2JqZWN0ID0ge307XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGF3YWl0ZWRIZWFkZXJzID0gYXdhaXQgb3B0aW9ucy5oZWFkZXJzO1xuICAgICAgc2VudHJ5VHJhY2VIZWFkZXIgPSBhd2FpdGVkSGVhZGVycz8uZ2V0KCdzZW50cnktdHJhY2UnKSA/PyB1bmRlZmluZWQ7XG4gICAgICBiYWdnYWdlSGVhZGVyID0gYXdhaXRlZEhlYWRlcnM/LmdldCgnYmFnZ2FnZScpO1xuICAgICAgYXdhaXRlZEhlYWRlcnM/LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgZnVsbEhlYWRlcnNPYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgIGNvcmUuZGVidWcud2FybihcbiAgICAgICAgICBcIlNlbnRyeSB3YXNuJ3QgYWJsZSB0byBleHRyYWN0IHRoZSB0cmFjaW5nIGhlYWRlcnMgZm9yIGEgc2VydmVyIGFjdGlvbi4gV2lsbCBub3QgdHJhY2UgdGhpcyByZXF1ZXN0LlwiLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlzb2xhdGlvblNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShgc2VydmVyQWN0aW9uLyR7c2VydmVyQWN0aW9uTmFtZX1gKTtcbiAgICBpc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHtcbiAgICAgICAgaGVhZGVyczogZnVsbEhlYWRlcnNPYmplY3QsXG4gICAgICB9ICxcbiAgICB9KTtcblxuICAgIC8vIE5vcm1hbGx5LCB0aGVyZSBpcyBhbiBhY3RpdmUgc3BhbiBoZXJlIChmcm9tIE5leHQuanMgT1RFTCkgYW5kIHdlIGp1c3QgdXNlIHRoYXQgYXMgcGFyZW50XG4gICAgLy8gRWxzZSwgd2UgbWFudWFsbHkgY29udGludWVUcmFjZSBmcm9tIHRoZSBpbmNvbWluZyBoZWFkZXJzXG4gICAgY29uc3QgY29udGludWVUcmFjZUlmTm9BY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKClcbiAgICAgID8gKF9vcHRzLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soKVxuICAgICAgOiBjb3JlLmNvbnRpbnVlVHJhY2U7XG5cbiAgICByZXR1cm4gY29udGludWVUcmFjZUlmTm9BY3RpdmVTcGFuKFxuICAgICAge1xuICAgICAgICBzZW50cnlUcmFjZTogc2VudHJ5VHJhY2VIZWFkZXIsXG4gICAgICAgIGJhZ2dhZ2U6IGJhZ2dhZ2VIZWFkZXIsXG4gICAgICB9LFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBjb3JlLnN0YXJ0U3BhbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3A6ICdmdW5jdGlvbi5zZXJ2ZXJfYWN0aW9uJyxcbiAgICAgICAgICAgICAgbmFtZTogYHNlcnZlckFjdGlvbi8ke3NlcnZlckFjdGlvbk5hbWV9YCxcbiAgICAgICAgICAgICAgZm9yY2VUcmFuc2FjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogJ3JvdXRlJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBzcGFuID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhjYWxsYmFjaywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcmVwb3J0IFwibm90LWZvdW5kXCJzXG4gICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdub3RfZm91bmQnIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBmb3IgcmVkaXJlY3RzXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludGVybmFsX2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVjb3JkUmVzcG9uc2UgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMucmVjb3JkUmVzcG9uc2UgOiBzZW5kRGVmYXVsdFBpaSkge1xuICAgICAgICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYSgnc2VydmVyX2FjdGlvbl9yZXN1bHQnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZvcm1EYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYShcbiAgICAgICAgICAgICAgICAgICAgYHNlcnZlcl9hY3Rpb25fZm9ybV9kYXRhLiR7a2V5fWAsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6ICdbbm9uLXN0cmluZyB2YWx1ZV0nLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn1cblxuZXhwb3J0cy53aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uID0gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhTZXJ2ZXJBY3Rpb25JbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(\n  generationFunction,\n  context,\n) {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch {\n        /** empty */\n      }\n\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      let pathname = undefined ;\n\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] ;\n        }\n      }\n\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n\n      let data = undefined;\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params, searchParams } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        data = { params, searchParams };\n      }\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: urls.getSanitizedRequestUrl(\n                componentRoute,\n                data?.params ,\n                headersDict,\n                pathname,\n              ),\n            } ,\n          });\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(\n            headers,\n            core.propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(err, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;\n//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(\n  middleware,\n) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis )._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) ;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n\n        let spanName;\n        let spanSource;\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = core.getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        }\n\n        return core.startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry',\n            },\n          },\n          () => {\n            return core.handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                core.captureException(error, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;\n//# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBd0I7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsbUNBQW1DLFlBQVksRUFBRSwwQkFBMEI7QUFDM0U7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3dyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgTmV4dC5qcyBtaWRkbGV3YXJlIHdpdGggU2VudHJ5IGVycm9yIGFuZCBwZXJmb3JtYW5jZSBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIG1pZGRsZXdhcmUgVGhlIG1pZGRsZXdhcmUgaGFuZGxlci5cbiAqIEByZXR1cm5zIGEgd3JhcHBlZCBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeShcbiAgbWlkZGxld2FyZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG1pZGRsZXdhcmUsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCB0dW5uZWxSb3V0ZSA9XG4gICAgICAgICdfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoJyBpbiBnbG9iYWxUaGlzXG4gICAgICAgICAgPyAoZ2xvYmFsVGhpcyApLl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHR1bm5lbFJvdXRlICYmIHR5cGVvZiB0dW5uZWxSb3V0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgcmVxID0gYXJnc1swXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgcmVxdWVzdCBtYXRjaGVzIHRoZSB0dW5uZWwgcm91dGVcbiAgICAgICAgaWYgKHJlcSBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcS51cmwpO1xuICAgICAgICAgIGNvbnN0IGlzVHVubmVsUmVxdWVzdCA9IHVybC5wYXRobmFtZS5zdGFydHNXaXRoKHR1bm5lbFJvdXRlKTtcblxuICAgICAgICAgIGlmIChpc1R1bm5lbFJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNpbXBsZSByZXNwb25zZSB0aGF0IG1pbWljcyBOZXh0UmVzcG9uc2UubmV4dCgpIHNvIHdlIGRvbid0IG5lZWQgdG8gaW1wb3J0IGludGVybmFscyBoZXJlXG4gICAgICAgICAgICAvLyB3aGljaCBicmVha3MgbmV4dCAxMyBhcHBzXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvYmxvYi9jMTJjOWMxZjc4YWQzODQyNzA5MDJmMDg5MGRjNGNkMzQxNDA4MTA1L3BhY2thZ2VzL25leHQvc3JjL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vcmVzcG9uc2UudHMjTDE0NlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ3gtbWlkZGxld2FyZS1uZXh0JzogJzEnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkgO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gVE9ETzogV2Ugc3RpbGwgc2hvdWxkIGFkZCBjZW50cmFsIGlzb2xhdGlvbiBzY29wZSBjcmVhdGlvbiBmb3Igd2hlbiBvdXIgYnVpbGQtdGltZSBpbnN0cnVtZW50YXRpb24gZG9lcyBub3Qgd29yayBhbnltb3JlIHdpdGggdHVyYm9wYWNrLlxuICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlID0+IHtcbiAgICAgICAgY29uc3QgcmVxID0gYXJnc1swXTtcbiAgICAgICAgY29uc3QgY3VycmVudFNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcblxuICAgICAgICBsZXQgc3Bhbk5hbWU7XG4gICAgICAgIGxldCBzcGFuU291cmNlO1xuXG4gICAgICAgIGlmIChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgaXNvbGF0aW9uU2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0OiBjb3JlLndpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzcGFuTmFtZSA9IGBtaWRkbGV3YXJlICR7cmVxLm1ldGhvZH0gJHtuZXcgVVJMKHJlcS51cmwpLnBhdGhuYW1lfWA7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICd1cmwnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwYW5OYW1lID0gJ21pZGRsZXdhcmUnO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAnY29tcG9uZW50JztcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoc3Bhbk5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcblxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzcGFuLCBpdCBsaWtlbHkgbWVhbnMgdGhhdCB0aGUgYXV0b21hdGljIE5leHQuanMgT1RFTCBpbnN0cnVtZW50YXRpb24gd29ya2VkIGFuZCB3ZSBjYW5cbiAgICAgICAgICAvLyByZWx5IG9uIHRoYXQgZm9yIHBhcmFtZXRlcml6YXRpb24uXG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuXG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuICAgICAgICAgIGlmIChyb290U3Bhbikge1xuICAgICAgICAgICAgY29yZS5zZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3BhbiwgY3VycmVudFNjb3BlLCBpc29sYXRpb25TY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvcmUuc3RhcnRTcGFuKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IHNwYW5OYW1lLFxuICAgICAgICAgICAgb3A6ICdodHRwLnNlcnZlci5taWRkbGV3YXJlJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0VdOiBzcGFuU291cmNlLFxuICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy53cmFwTWlkZGxld2FyZVdpdGhTZW50cnknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb3JlLmhhbmRsZUNhbGxiYWNrRXJyb3JzKFxuICAgICAgICAgICAgICAoKSA9PiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSA9IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(\n  routeHandler,\n  context,\n) {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"nodejs\" === 'edge') {}\n\n      return core.withIsolationScope(\n         false ? 0 : core.getIsolationScope(),\n        () => {\n          return core.withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (false) {}\n\n            const response = await core.handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ; else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    core.setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    core.setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  core.setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  core.setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;\n//# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlDQUFpQyxtQkFBTyxDQUFDLDhIQUErQjtBQUN4RSxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBd0I7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsa0hBQXlCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixRQUF3QixhQUFhLEVBVXBEOztBQUVQO0FBQ0EsUUFBUSxNQUFtQyxHQUFHLENBQWlDO0FBQy9FO0FBQ0E7QUFDQSx3Q0FBd0MsUUFBUSxFQUFFLG1CQUFtQjs7QUFFckUsZ0JBQWdCLEtBQW1DLEVBQUUsRUFheEM7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcbmNvbnN0IHRyYWNpbmdVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhY2luZ1V0aWxzLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgYSBOZXh0LmpzIEFwcCBSb3V0ZXIgUm91dGUgaGFuZGxlciB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIE5PVElDRTogVGhpcyB3cmFwcGVyIGlzIGZvciBBcHAgUm91dGVyIEFQSSByb3V0ZXMuIElmIHlvdSBhcmUgbG9va2luZyB0byB3cmFwIFBhZ2VzIFJvdXRlciBBUEkgcm91dGVzIHVzZSBgd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5YCBpbnN0ZWFkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkoXG4gIHJvdXRlSGFuZGxlcixcbiAgY29udGV4dCxcbikge1xuICBjb25zdCB7IG1ldGhvZCwgcGFyYW1ldGVyaXplZFJvdXRlLCBoZWFkZXJzIH0gPSBjb250ZXh0O1xuXG4gIHJldHVybiBuZXcgUHJveHkocm91dGVIYW5kbGVyLCB7XG4gICAgYXBwbHk6IGFzeW5jIChvcmlnaW5hbEZ1bmN0aW9uLCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG4gICAgICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gPyBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pIDogdW5kZWZpbmVkO1xuXG4gICAgICBsZXQgZWRnZVJ1bnRpbWVJc29sYXRpb25TY29wZU92ZXJyaWRlO1xuICAgICAgaWYgKHJvb3RTcGFuICYmIHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gdHJhY2luZ1V0aWxzLmNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGUoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHsgc2NvcGUgfSA9IGNvcmUuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4pO1xuICAgICAgICBjb3JlLnNldENhcHR1cmVkU2NvcGVzT25TcGFuKHJvb3RTcGFuLCBzY29wZSA/PyBuZXcgY29yZS5TY29wZSgpLCBpc29sYXRpb25TY29wZSk7XG5cbiAgICAgICAgZWRnZVJ1bnRpbWVJc29sYXRpb25TY29wZU92ZXJyaWRlID0gaXNvbGF0aW9uU2NvcGU7XG5cbiAgICAgICAgcm9vdFNwYW4udXBkYXRlTmFtZShgJHttZXRob2R9ICR7cGFyYW1ldGVyaXplZFJvdXRlfWApO1xuICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSwgJ3JvdXRlJyk7XG4gICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdodHRwLnNlcnZlcicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnID8gZWRnZVJ1bnRpbWVJc29sYXRpb25TY29wZU92ZXJyaWRlIDogY29yZS5nZXRJc29sYXRpb25TY29wZSgpLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNvcmUud2l0aFNjb3BlKGFzeW5jIHNjb3BlID0+IHtcbiAgICAgICAgICAgIHNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cGFyYW1ldGVyaXplZFJvdXRlfWApO1xuXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScpIHtcbiAgICAgICAgICAgICAgY29uc3QgY29tcGxldGVIZWFkZXJzRGljdCA9IGhlYWRlcnMgPyBjb3JlLndpbnRlckNHSGVhZGVyc1RvRGljdChoZWFkZXJzKSA6IHt9O1xuICAgICAgICAgICAgICBjb25zdCBpbmNvbWluZ1Byb3BhZ2F0aW9uQ29udGV4dCA9IGNvcmUucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMoXG4gICAgICAgICAgICAgICAgY29tcGxldGVIZWFkZXJzRGljdFsnc2VudHJ5LXRyYWNlJ10sXG4gICAgICAgICAgICAgICAgY29tcGxldGVIZWFkZXJzRGljdFsnYmFnZ2FnZSddLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzY29wZS5zZXRQcm9wYWdhdGlvbkNvbnRleHQoaW5jb21pbmdQcm9wYWdhdGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiBjb21wbGV0ZUhlYWRlcnNEaWN0LFxuICAgICAgICAgICAgICAgIH0gLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb3JlLmhhbmRsZUNhbGxiYWNrRXJyb3JzKFxuICAgICAgICAgICAgICAoKSA9PiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpLFxuICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTmV4dC5qcyB0aHJvd3MgZXJyb3JzIHdoZW4gY2FsbGluZyBgcmVkaXJlY3QoKWAuIFdlIGRvbid0IHdhbm5hIHJlcG9ydCB0aGVzZS5cbiAgICAgICAgICAgICAgICBpZiAobmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSA7IGVsc2UgaWYgKG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5pc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRIdHRwU3RhdHVzKGFjdGl2ZVNwYW4sIDQwNCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRIdHRwU3RhdHVzKHJvb3RTcGFuLCA0MDQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMoYWN0aXZlU3BhbiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMocm9vdFNwYW4sIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgLy8gYmVzdCBlZmZvcnQgLSByZXNwb25zZSBtYXkgYmUgdW5kZWZpbmVkP1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5ID0gd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(\n  appDirComponent,\n  context,\n) {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined ;\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n\n      let params = undefined;\n\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params: paramsFromProps } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        params = paramsFromProps;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: urls.getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } ,\n      });\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (false) {}\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(error, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;\n//# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nlet manifestCache = null;\nlet lastAppDirPath = null;\nlet lastIncludeRouteGroups = undefined;\n\nfunction isPageFile(filename) {\n  return filename === 'page.tsx' || filename === 'page.jsx' || filename === 'page.ts' || filename === 'page.js';\n}\n\nfunction isRouteGroup(name) {\n  return name.startsWith('(') && name.endsWith(')');\n}\n\nfunction normalizeRoutePath(routePath) {\n  // Remove route group segments from the path\n  return routePath.replace(/\\/\\([^)]+\\)/g, '');\n}\n\nfunction getDynamicRouteSegment(name) {\n  if (name.startsWith('[[...') && name.endsWith(']]')) {\n    // Optional catchall: [[...param]]\n    const paramName = name.slice(5, -2); // Remove [[... and ]]\n    return `:${paramName}*?`; // Mark with ? as optional\n  } else if (name.startsWith('[...') && name.endsWith(']')) {\n    // Required catchall: [...param]\n    const paramName = name.slice(4, -1); // Remove [... and ]\n    return `:${paramName}*`;\n  }\n  // Regular dynamic: [param]\n  return `:${name.slice(1, -1)}`;\n}\n\nfunction buildRegexForDynamicRoute(routePath) {\n  const segments = routePath.split('/').filter(Boolean);\n  const regexSegments = [];\n  const paramNames = [];\n  let hasOptionalCatchall = false;\n\n  for (const segment of segments) {\n    if (segment.startsWith(':')) {\n      const paramName = segment.substring(1);\n\n      if (paramName.endsWith('*?')) {\n        // Optional catchall: matches zero or more segments\n        const cleanParamName = paramName.slice(0, -2);\n        paramNames.push(cleanParamName);\n        // Handling this special case in pattern construction below\n        hasOptionalCatchall = true;\n      } else if (paramName.endsWith('*')) {\n        // Required catchall: matches one or more segments\n        const cleanParamName = paramName.slice(0, -1);\n        paramNames.push(cleanParamName);\n        regexSegments.push('(.+)');\n      } else {\n        // Regular dynamic segment\n        paramNames.push(paramName);\n        regexSegments.push('([^/]+)');\n      }\n    } else {\n      // Static segment - escape regex special characters including route group parentheses\n      regexSegments.push(segment.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n    }\n  }\n\n  let pattern;\n  if (hasOptionalCatchall) {\n    // For optional catchall, make the trailing slash and segments optional\n    // This allows matching both /catchall and /catchall/anything\n    const staticParts = regexSegments.join('/');\n    pattern = `^/${staticParts}(?:/(.*))?$`;\n  } else {\n    pattern = `^/${regexSegments.join('/')}$`;\n  }\n\n  return { regex: pattern, paramNames };\n}\n\nfunction scanAppDirectory(\n  dir,\n  basePath = '',\n  includeRouteGroups = false,\n) {\n  const dynamicRoutes = [];\n  const staticRoutes = [];\n\n  try {\n    const entries = fs.readdirSync(dir, { withFileTypes: true });\n    const pageFile = entries.some(entry => isPageFile(entry.name));\n\n    if (pageFile) {\n      // Conditionally normalize the path based on includeRouteGroups option\n      const routePath = includeRouteGroups ? basePath || '/' : normalizeRoutePath(basePath || '/');\n      const isDynamic = routePath.includes(':');\n\n      if (isDynamic) {\n        const { regex, paramNames } = buildRegexForDynamicRoute(routePath);\n        dynamicRoutes.push({\n          path: routePath,\n          regex,\n          paramNames,\n        });\n      } else {\n        staticRoutes.push({\n          path: routePath,\n        });\n      }\n    }\n\n    for (const entry of entries) {\n      if (entry.isDirectory()) {\n        const fullPath = path.join(dir, entry.name);\n        let routeSegment;\n\n        const isDynamic = entry.name.startsWith('[') && entry.name.endsWith(']');\n        const isRouteGroupDir = isRouteGroup(entry.name);\n\n        if (isRouteGroupDir) {\n          if (includeRouteGroups) {\n            routeSegment = entry.name;\n          } else {\n            routeSegment = '';\n          }\n        } else if (isDynamic) {\n          routeSegment = getDynamicRouteSegment(entry.name);\n        } else {\n          routeSegment = entry.name;\n        }\n\n        const newBasePath = routeSegment ? `${basePath}/${routeSegment}` : basePath;\n        const subRoutes = scanAppDirectory(fullPath, newBasePath, includeRouteGroups);\n\n        dynamicRoutes.push(...subRoutes.dynamicRoutes);\n        staticRoutes.push(...subRoutes.staticRoutes);\n      }\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn('Error building route manifest:', error);\n  }\n\n  return { dynamicRoutes, staticRoutes };\n}\n\n/**\n * Returns a route manifest for the given app directory\n */\nfunction createRouteManifest(options) {\n  let targetDir;\n\n  {\n    const projectDir = process.cwd();\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      targetDir = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      targetDir = maybeSrcAppDirPath;\n    }\n  }\n\n  if (!targetDir) {\n    return {\n      dynamicRoutes: [],\n      staticRoutes: [],\n    };\n  }\n\n  // Check if we can use cached version\n  if (manifestCache && lastAppDirPath === targetDir && lastIncludeRouteGroups === options?.includeRouteGroups) {\n    return manifestCache;\n  }\n\n  const { dynamicRoutes, staticRoutes } = scanAppDirectory(targetDir, '', options?.includeRouteGroups);\n\n  const manifest = {\n    dynamicRoutes,\n    staticRoutes,\n  };\n\n  // set cache\n  manifestCache = manifest;\n  lastAppDirPath = targetDir;\n  lastIncludeRouteGroups = options?.includeRouteGroups;\n\n  return manifest;\n}\n\nexports.createRouteManifest = createRouteManifest;\n//# sourceMappingURL=createRouteManifest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\n/**\n * Construct a Turbopack config object from a Next.js config object and a Turbopack options object.\n *\n * @param userNextConfig - The Next.js config object.\n * @param turbopackOptions - The Turbopack options object.\n * @returns The Turbopack config object.\n */\nfunction constructTurbopackConfig({\n  userNextConfig,\n  routeManifest,\n}\n\n) {\n  const newConfig = {\n    ...userNextConfig.turbopack,\n  };\n\n  if (routeManifest) {\n    newConfig.rules = safelyAddTurbopackRule(newConfig.rules, {\n      matcher: '**/instrumentation-client.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: {\n                _sentryRouteManifest: JSON.stringify(routeManifest),\n              },\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  return newConfig;\n}\n\n/**\n * Safely add a Turbopack rule to the existing rules.\n *\n * @param existingRules - The existing rules.\n * @param matcher - The matcher for the rule.\n * @param rule - The rule to add.\n * @returns The updated rules object.\n */\nfunction safelyAddTurbopackRule(\n  existingRules,\n  { matcher, rule },\n) {\n  if (!existingRules) {\n    return {\n      [matcher]: rule,\n    };\n  }\n\n  // If the rule already exists, we don't want to mess with it.\n  if (existingRules[matcher]) {\n    core.debug.log(\n      `${chalk.cyan(\n        'info',\n      )} - Turbopack rule already exists for ${matcher}. Please remove it from your Next.js config in order for Sentry to work properly.`,\n    );\n    return existingRules;\n  }\n\n  return {\n    ...existingRules,\n    [matcher]: rule,\n  };\n}\n\nexports.constructTurbopackConfig = constructTurbopackConfig;\nexports.safelyAddTurbopackRule = safelyAddTurbopackRule;\n//# sourceMappingURL=constructTurbopackConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdHVyYm9wYWNrL2NvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDRGQUFPO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTLHNDQUFzQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29uZmlnL3R1cmJvcGFjay9jb25zdHJ1Y3RUdXJib3BhY2tDb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8qKlxuICogQ29uc3RydWN0IGEgVHVyYm9wYWNrIGNvbmZpZyBvYmplY3QgZnJvbSBhIE5leHQuanMgY29uZmlnIG9iamVjdCBhbmQgYSBUdXJib3BhY2sgb3B0aW9ucyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHVzZXJOZXh0Q29uZmlnIC0gVGhlIE5leHQuanMgY29uZmlnIG9iamVjdC5cbiAqIEBwYXJhbSB0dXJib3BhY2tPcHRpb25zIC0gVGhlIFR1cmJvcGFjayBvcHRpb25zIG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBUdXJib3BhY2sgY29uZmlnIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnKHtcbiAgdXNlck5leHRDb25maWcsXG4gIHJvdXRlTWFuaWZlc3QsXG59XG5cbikge1xuICBjb25zdCBuZXdDb25maWcgPSB7XG4gICAgLi4udXNlck5leHRDb25maWcudHVyYm9wYWNrLFxuICB9O1xuXG4gIGlmIChyb3V0ZU1hbmlmZXN0KSB7XG4gICAgbmV3Q29uZmlnLnJ1bGVzID0gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZShuZXdDb25maWcucnVsZXMsIHtcbiAgICAgIG1hdGNoZXI6ICcqKi9pbnN0cnVtZW50YXRpb24tY2xpZW50LionLFxuICAgICAgcnVsZToge1xuICAgICAgICBsb2FkZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbG9hZGVyOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnbG9hZGVycycsICd2YWx1ZUluamVjdGlvbkxvYWRlci5qcycpLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBfc2VudHJ5Um91dGVNYW5pZmVzdDogSlNPTi5zdHJpbmdpZnkocm91dGVNYW5pZmVzdCksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuLyoqXG4gKiBTYWZlbHkgYWRkIGEgVHVyYm9wYWNrIHJ1bGUgdG8gdGhlIGV4aXN0aW5nIHJ1bGVzLlxuICpcbiAqIEBwYXJhbSBleGlzdGluZ1J1bGVzIC0gVGhlIGV4aXN0aW5nIHJ1bGVzLlxuICogQHBhcmFtIG1hdGNoZXIgLSBUaGUgbWF0Y2hlciBmb3IgdGhlIHJ1bGUuXG4gKiBAcGFyYW0gcnVsZSAtIFRoZSBydWxlIHRvIGFkZC5cbiAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIHJ1bGVzIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZShcbiAgZXhpc3RpbmdSdWxlcyxcbiAgeyBtYXRjaGVyLCBydWxlIH0sXG4pIHtcbiAgaWYgKCFleGlzdGluZ1J1bGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFttYXRjaGVyXTogcnVsZSxcbiAgICB9O1xuICB9XG5cbiAgLy8gSWYgdGhlIHJ1bGUgYWxyZWFkeSBleGlzdHMsIHdlIGRvbid0IHdhbnQgdG8gbWVzcyB3aXRoIGl0LlxuICBpZiAoZXhpc3RpbmdSdWxlc1ttYXRjaGVyXSkge1xuICAgIGNvcmUuZGVidWcubG9nKFxuICAgICAgYCR7Y2hhbGsuY3lhbihcbiAgICAgICAgJ2luZm8nLFxuICAgICAgKX0gLSBUdXJib3BhY2sgcnVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgJHttYXRjaGVyfS4gUGxlYXNlIHJlbW92ZSBpdCBmcm9tIHlvdXIgTmV4dC5qcyBjb25maWcgaW4gb3JkZXIgZm9yIFNlbnRyeSB0byB3b3JrIHByb3Blcmx5LmAsXG4gICAgKTtcbiAgICByZXR1cm4gZXhpc3RpbmdSdWxlcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uZXhpc3RpbmdSdWxlcyxcbiAgICBbbWF0Y2hlcl06IHJ1bGUsXG4gIH07XG59XG5cbmV4cG9ydHMuY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnID0gY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnO1xuZXhwb3J0cy5zYWZlbHlBZGRUdXJib3BhY2tSdWxlID0gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/util.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/util.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/index.js\");\n\n/**\n * Returns the version of Next.js installed in the project, or undefined if it cannot be determined.\n */\nfunction getNextjsVersion() {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson = JSON.parse(\n        fs.readFileSync(nextjsPackageJsonPath, { encoding: 'utf-8' }),\n      );\n      return nextjsPackageJson.version;\n    } catch {\n      // noop\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNextjsPackageJson() {\n  try {\n    return resolve.sync('next/package.json', { basedir: process.cwd() });\n  } catch {\n    return undefined;\n  }\n}\n\nexports.getNextjsVersion = getNextjsVersion;\n//# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBUzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxtQkFBbUI7QUFDcEU7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLHdCQUF3QjtBQUN2RSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcmVzb2x2ZSA9IHJlcXVpcmUoJ3Jlc29sdmUnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIE5leHQuanMgaW5zdGFsbGVkIGluIHRoZSBwcm9qZWN0LCBvciB1bmRlZmluZWQgaWYgaXQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRqc1ZlcnNpb24oKSB7XG4gIGNvbnN0IG5leHRqc1BhY2thZ2VKc29uUGF0aCA9IHJlc29sdmVOZXh0anNQYWNrYWdlSnNvbigpO1xuICBpZiAobmV4dGpzUGFja2FnZUpzb25QYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5leHRqc1BhY2thZ2VKc29uID0gSlNPTi5wYXJzZShcbiAgICAgICAgZnMucmVhZEZpbGVTeW5jKG5leHRqc1BhY2thZ2VKc29uUGF0aCwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV4dGpzUGFja2FnZUpzb24udmVyc2lvbjtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTmV4dGpzUGFja2FnZUpzb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlc29sdmUuc3luYygnbmV4dC9wYWNrYWdlLmpzb24nLCB7IGJhc2VkaXI6IHByb2Nlc3MuY3dkKCkgfSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXROZXh0anNWZXJzaW9uID0gZ2V0TmV4dGpzVmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/util.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/webpack.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/index.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/util.js\");\nconst webpackPluginOptions = __webpack_require__(/*! ./webpackPluginOptions.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js\");\n\n/* eslint-disable complexity */\n/* eslint-disable max-lines */\n\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nfunction constructWebpackConfigFunction(\n  userNextConfig = {},\n  userSentryOptions = {},\n  releaseName,\n  routeManifest,\n) {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(\n    incomingConfig,\n    buildContext,\n  ) {\n    const { isServer, dev: isDev, dir: projectDir } = buildContext;\n    const runtime = isServer ? (buildContext.nextRuntime === 'edge' ? 'edge' : 'server') : 'client';\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(core.escapeStringForRegex).join('|');\n\n    // We add `.ts` and `.js` back in because `pageExtensions` might not be relevant to the instrumentation file\n    // e.g. user's setting `.mdx`. In that case we still want to default look up\n    // `instrumentation.ts` and `instrumentation.js`\n    const instrumentationFile = getInstrumentationFile(projectDir, dotPrefixedPageExtensions.concat(['.ts', '.js']));\n\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, instrumentationFile, runtime);\n    }\n    if (runtime === 'server') {\n      const nextJsVersion = util.getNextjsVersion();\n      const { major } = core.parseSemver(nextJsVersion || '');\n      // was added in v15 (https://github.com/vercel/next.js/pull/67539)\n      if (major && major >= 15) {\n        warnAboutMissingOnRequestErrorHandler(instrumentationFile);\n      }\n    }\n\n    let rawNewConfig = { ...incomingConfig };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader(newConfig, userNextConfig, userSentryOptions, buildContext, releaseName, routeManifest);\n\n    addOtelWarningIgnoreRule(newConfig);\n\n    let pagesDirPath;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n\n    let appDirPath;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n\n    const middlewareLocationFolder = pagesDirPath\n      ? path.join(pagesDirPath, '..')\n      : appDirPath\n        ? path.join(appDirPath, '..')\n        : projectDir;\n\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(\n        projectDir,\n        rawNewConfig.resolve?.modules,\n      ),\n    };\n\n    const normalizeLoaderResourcePath = (resourcePath) => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n\n      return path.normalize(absoluteResourcePath);\n    };\n\n    const isPageResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        pagesDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) &&\n        !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const isApiRouteResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n\n    const isServerComponentResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    const isRouteHandlerResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'page',\n            },\n          },\n        ],\n      });\n\n      let vercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            core.debug.log(\n              `${chalk.cyan(\n                'info',\n              )} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan(\n                'automaticVercelMonitors',\n              )} option to false in you Next.js config.`,\n            );\n          }\n        }\n      } catch (e) {\n        if ((e ).code === 'ENOENT') ; else {\n          // log but noop\n          core.debug.error(\n            `${chalk.red(\n              'error',\n            )} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,\n            e,\n          );\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              vercelCronsConfig,\n              wrappingTargetKind: 'api-route',\n            },\n          },\n        ],\n      });\n\n      // Wrap middleware\n      if (userSentryOptions.autoInstrumentMiddleware ?? true) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [\n            {\n              loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n              options: {\n                ...staticWrappingLoaderOptions,\n                wrappingTargetKind: 'middleware',\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'server-component',\n            },\n          },\n        ],\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'route-handler',\n            },\n          },\n        ],\n      });\n    }\n\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions\n        .map(extension => `global-error.${extension}`)\n        .some(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          globalErrorFile => fs.existsSync(path.join(appDirPath, globalErrorFile)),\n        );\n\n      if (\n        !hasGlobalErrorFile &&\n        !showedMissingGlobalErrorWarningMsg &&\n        !\"1\"\n      ) {}\n    }\n\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n\n      const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n      if (clientSentryConfigFileName) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \\`${clientSentryConfigFileName}\\` file, or moving its content to \\`instrumentation-client.ts\\`. When using Turbopack \\`${clientSentryConfigFileName}\\` will no longer work. Read more about the \\`instrumentation-client.ts\\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`,\n        );\n      }\n    }\n\n    const isStaticExport = userNextConfig?.output === 'export';\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode or for the server on static-only builds.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!(isDev || (isStaticExport && isServer))) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { sentryWebpackPlugin } = core.loadModule('@sentry/webpack-plugin', module) ?? {};\n\n      if (sentryWebpackPlugin) {\n        if (!userSentryOptions.sourcemaps?.disable) {\n          // Source maps can be configured in 3 ways:\n          // 1. (next config): productionBrowserSourceMaps\n          // 2. (next config): experimental.serverSourceMaps\n          // 3. custom webpack configuration\n          //\n          // We only update this if no explicit value is set\n          // (Next.js defaults to `false`: https://github.com/vercel/next.js/blob/5f4f96c133bd6b10954812cc2fef6af085b82aa5/packages/next/src/build/webpack/config/blocks/base.ts#L61)\n          if (!newConfig.devtool) {\n            core.debug.log(`[@sentry/nextjs] Automatically enabling source map generation for ${runtime} build.`);\n            // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n            // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n            // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n            // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n            // without, the option to use `hidden-source-map` only applies to the client-side build.\n            if (isServer) {\n              newConfig.devtool = 'source-map';\n            } else {\n              newConfig.devtool = 'hidden-source-map';\n            }\n          }\n\n          // enable source map deletion if not explicitly disabled\n          if (!isServer && userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n            core.debug.warn(\n              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n            );\n            userSentryOptions.sourcemaps = {\n              ...userSentryOptions.sourcemaps,\n              deleteSourcemapsAfterUpload: true,\n            };\n          }\n        }\n\n        newConfig.plugins = newConfig.plugins || [];\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(\n          webpackPluginOptions.getWebpackPluginOptions(buildContext, userSentryOptions, releaseName),\n        );\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(\n        new buildContext.webpack.DefinePlugin({\n          __SENTRY_DEBUG__: false,\n        }),\n      );\n    }\n\n    // We inject a map of dependencies that the nextjs app has, as we cannot reliably extract them at runtime, sadly\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      new buildContext.webpack.DefinePlugin({\n        __SENTRY_SERVER_MODULES__: JSON.stringify(_getModules(projectDir)),\n      }),\n    );\n\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(\n  currentEntryProperty,\n  buildContext,\n) {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const { dir: projectDir, dev: isDevMode } = buildContext;\n\n  const newEntryProperty =\n    typeof currentEntryProperty === 'function' ? await currentEntryProperty() : { ...currentEntryProperty };\n\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n  const instrumentationClientFileName = getInstrumentationClientFile(projectDir);\n\n  const filesToInject = [];\n  if (clientSentryConfigFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${clientSentryConfigFileName}`);\n  }\n  if (instrumentationClientFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${instrumentationClientFileName}`);\n  }\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (\n      entryPointName === 'pages/_app' ||\n      // entrypoint for `/app` pages\n      entryPointName === 'main-app'\n    ) {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Gets the content of the user's instrumentation file\n */\nfunction getInstrumentationFile(projectDir, dotPrefixedExtensions) {\n  const paths = dotPrefixedExtensions.flatMap(extension => [\n    ['src', `instrumentation${extension}`],\n    [`instrumentation${extension}`],\n  ]);\n\n  for (const pathSegments of paths) {\n    try {\n      return fs.readFileSync(path.resolve(projectDir, ...pathSegments), { encoding: 'utf-8' });\n    } catch {\n      // no-op\n    }\n  }\n\n  return null;\n}\n\n/**\n * Make sure the instrumentation file has a `onRequestError` Handler\n */\nfunction warnAboutMissingOnRequestErrorHandler(instrumentationFile) {\n  if (!instrumentationFile) {\n    if (false) {}\n    return;\n  }\n\n  if (!instrumentationFile.includes('onRequestError')) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      chalk.yellow(\n        '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components',\n      ),\n    );\n  }\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(\n  projectDir,\n  instrumentationFile,\n  platform,\n) {\n  const hasInstrumentationHookWithIndicationsOfSentry =\n    instrumentationFile &&\n    (instrumentationFile.includes('@sentry/') ||\n      instrumentationFile.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/));\n\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`,\n      );\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir) {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Searches for a `instrumentation-client.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getInstrumentationClientFile(projectDir) {\n  const possibilities = [\n    ['src', 'instrumentation-client.js'],\n    ['src', 'instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n  ];\n\n  for (const pathParts of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, ...pathParts))) {\n      return path.join(...pathParts);\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(\n  entryProperty,\n  entryPointName,\n  filesToInsert,\n  isDevMode,\n) {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue,\n    };\n  }\n  // malformed entry point (use `console.error` rather than `debug.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Sentry Logger [Error]:',\n      `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`,\n      'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n',\n      `Got: ${currentEntryPoint}`,\n    );\n  }\n\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig) {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(newConfig.module?.rules || [])],\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig ;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO: Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader(\n  newConfig,\n  userNextConfig,\n  userSentryOptions,\n  buildContext,\n  releaseName,\n  routeManifest,\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n\n  // Check if release creation is disabled to prevent injection that breaks build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseToInject = releaseName && shouldCreateRelease ? releaseName : undefined;\n\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath:\n      userSentryOptions.tunnelRoute !== undefined &&\n      userNextConfig.output !== 'export' &&\n      typeof userSentryOptions.tunnelRoute === 'string'\n        ? `${userNextConfig.basePath ?? ''}${userSentryOptions.tunnelRoute}`\n        : undefined,\n\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    // Only inject if release creation is not explicitly disabled (to maintain build determinism)\n    SENTRY_RELEASE: releaseToInject && !buildContext.dev ? { id: releaseToInject } : undefined,\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined,\n  };\n\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n  };\n\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n    _sentryAssetPrefix: userNextConfig.assetPrefix,\n    _sentryExperimentalThirdPartyOriginStackFrames: userSentryOptions._experimental?.thirdPartyOriginStackFrames\n      ? 'true'\n      : undefined,\n    _sentryRouteManifest: JSON.stringify(routeManifest),\n  };\n\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: serverValues,\n          },\n        },\n      ],\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /(?:sentry\\.client\\.config\\.(jsx?|tsx?)|(?:src[\\\\/])?instrumentation-client\\.(js|ts))$/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: clientValues,\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction resolveNextPackageDirFromDirectory(basedir) {\n  try {\n    return path.dirname(resolve.sync('next/package.json', { basedir }));\n  } catch {\n    // Should not happen in theory\n    return undefined;\n  }\n}\n\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n  // Original location of RequestAsyncStorage\n  // https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n  'next/dist/client/components/request-async-storage.js',\n  // Introduced in Next.js 13.4.20\n  // https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n  'next/dist/client/components/request-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.180\n  // https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n  'next/dist/server/app-render/work-unit-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.182\n  // https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n  'next/dist/client/components/work-unit-async-storage.external.js',\n];\n\nfunction getRequestAsyncStorageModuleLocation(\n  webpackContextDir,\n  webpackResolvableModuleLocations,\n) {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc =>\n    path.resolve(webpackContextDir, loc),\n  );\n\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc =>\n        fs.existsSync(path.join(nextPackageDir, '..', loc)),\n      );\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction addOtelWarningIgnoreRule(newConfig) {\n  const ignoreRules = [\n    // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n    (warning, compilation) => {\n      // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n      try {\n        if (!warning.module) {\n          return false;\n        }\n\n        const isDependencyThatMayRaiseCriticalDependencyMessage =\n          /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) ||\n          /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n        const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n\n        return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n      } catch {\n        return false;\n      }\n    },\n    // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n    { module: /@opentelemetry\\/instrumentation/, message: /Critical dependency/ },\n    { module: /@prisma\\/instrumentation/, message: /Critical dependency/ },\n    { module: /require-in-the-middle/, message: /Critical dependency/ },\n  ] ;\n\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\n\nfunction _getModules(projectDir) {\n  try {\n    const packageJson = path.join(projectDir, 'package.json');\n    const packageJsonContent = fs.readFileSync(packageJson, 'utf8');\n    const packageJsonObject = JSON.parse(packageJsonContent)\n\n;\n\n    return {\n      ...packageJsonObject.dependencies,\n      ...packageJsonObject.devDependencies,\n    };\n  } catch {\n    return {};\n  }\n}\n\nexports.constructWebpackConfigFunction = constructWebpackConfigFunction;\n//# sourceMappingURL=webpack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\n/**\n * Combine default and user-provided SentryWebpackPlugin options, accounting for whether we're building server files or\n * client files.\n */\nfunction getWebpackPluginOptions(\n  buildContext,\n  sentryBuildOptions,\n  releaseName,\n) {\n  const { isServer, config: userNextConfig, dir, nextRuntime } = buildContext;\n\n  const prefixInsert = !isServer ? 'Client' : nextRuntime === 'edge' ? 'Edge' : 'Node.js';\n\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const projectDir = dir.replace(/\\\\/g, '/');\n  // `.next` is the default directory\n  const distDir = (userNextConfig ).distDir?.replace(/\\\\/g, '/') ?? '.next';\n  const distDirAbsPath = path.posix.join(projectDir, distDir);\n\n  const sourcemapUploadAssets = [];\n  const sourcemapUploadIgnore = [];\n\n  if (isServer) {\n    sourcemapUploadAssets.push(\n      path.posix.join(distDirAbsPath, 'server', '**'), // This is normally where Next.js outputs things\n      path.posix.join(distDirAbsPath, 'serverless', '**'), // This was the output location for serverless Next.js\n    );\n  } else {\n    if (sentryBuildOptions.widenClientFileUpload) {\n      sourcemapUploadAssets.push(path.posix.join(distDirAbsPath, 'static', 'chunks', '**'));\n    } else {\n      sourcemapUploadAssets.push(\n        path.posix.join(distDirAbsPath, 'static', 'chunks', 'pages', '**'),\n        path.posix.join(distDirAbsPath, 'static', 'chunks', 'app', '**'),\n      );\n    }\n\n    // We want to include main-* files if widenClientFileUpload is true as they have proven to be useful\n    if (!sentryBuildOptions.widenClientFileUpload) {\n      sourcemapUploadIgnore.push(path.posix.join(distDirAbsPath, 'static', 'chunks', 'main-*'));\n    }\n\n    // Always ignore framework, polyfills, and webpack files\n    sourcemapUploadIgnore.push(\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework-*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework.*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'polyfills-*'),\n      path.posix.join(distDirAbsPath, 'static', 'chunks', 'webpack-*'),\n    );\n  }\n\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    errorHandler: sentryBuildOptions.errorHandler,\n    reactComponentAnnotation: {\n      ...sentryBuildOptions.reactComponentAnnotation,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,\n    },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      disable: sentryBuildOptions.sourcemaps?.disable,\n      rewriteSources(source) {\n        if (source.startsWith('webpack://_N_E/')) {\n          return source.replace('webpack://_N_E/', '');\n        } else if (source.startsWith('webpack://')) {\n          return source.replace('webpack://', '');\n        } else {\n          return source;\n        }\n      },\n      assets: sentryBuildOptions.sourcemaps?.assets ?? sourcemapUploadAssets,\n      ignore: sentryBuildOptions.sourcemaps?.ignore ?? sourcemapUploadIgnore,\n      filesToDeleteAfterUpload: sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload\n        ? [\n            // We only care to delete client bundle source maps because they would be the ones being served.\n            // Removing the server source maps crashes Vercel builds for (thus far) unknown reasons:\n            // https://github.com/getsentry/sentry-javascript/issues/13099\n            path.posix.join(distDirAbsPath, 'static', '**', '*.js.map'),\n            path.posix.join(distDirAbsPath, 'static', '**', '*.mjs.map'),\n            path.posix.join(distDirAbsPath, 'static', '**', '*.cjs.map'),\n          ]\n        : undefined,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.sourcemaps,\n    },\n    release:\n      releaseName !== undefined\n        ? {\n            inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n            name: releaseName,\n            create: sentryBuildOptions.release?.create,\n            finalize: sentryBuildOptions.release?.finalize,\n            dist: sentryBuildOptions.release?.dist,\n            vcsRemote: sentryBuildOptions.release?.vcsRemote,\n            setCommits: sentryBuildOptions.release?.setCommits,\n            deploy: sentryBuildOptions.release?.deploy,\n            ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.release,\n          }\n        : {\n            inject: false,\n            create: false,\n            finalize: false,\n          },\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations,\n    },\n    _metaOptions: {\n      loggerPrefixOverride: `[@sentry/nextjs - ${prefixInsert}]`,\n      telemetry: {\n        metaFramework: 'nextjs',\n      },\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,\n  };\n}\n\nexports.getWebpackPluginOptions = getWebpackPluginOptions;\n//# sourceMappingURL=webpackPluginOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst createRouteManifest = __webpack_require__(/*! ./manifest/createRouteManifest.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\");\nconst constructTurbopackConfig = __webpack_require__(/*! ./turbopack/constructTurbopackConfig.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/util.js\");\nconst webpack = __webpack_require__(/*! ./webpack.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js\");\n\n/* eslint-disable max-lines */\n/* eslint-disable complexity */\n\nlet showedExportModeTunnelWarning = false;\nlet showedExperimentalBuildModeWarning = false;\n\n// Packages we auto-instrument need to be external for instrumentation to work\n// Next.js externalizes some packages by default, see: https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages\n// Others we need to add ourselves\n//\n// NOTE: 'ai' (Vercel AI SDK) is intentionally NOT included in this list.\n// When externalized, Next.js doesn't properly handle the package's conditional exports,\n// specifically the \"react-server\" export condition. This causes client-side code to be\n// loaded in server components instead of the appropriate server-side functions.\nconst DEFAULT_SERVER_EXTERNAL_PACKAGES = [\n  'amqplib',\n  'connect',\n  'dataloader',\n  'express',\n  'generic-pool',\n  'graphql',\n  '@hapi/hapi',\n  'ioredis',\n  'kafkajs',\n  'koa',\n  'lru-memoizer',\n  'mongodb',\n  'mongoose',\n  'mysql',\n  'mysql2',\n  'knex',\n  'pg',\n  'pg-pool',\n  '@node-redis/client',\n  '@redis/client',\n  'redis',\n  'tedious',\n];\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\nfunction withSentryConfig(nextConfig, sentryBuildOptions = {}) {\n  const castNextConfig = (nextConfig ) || {};\n  if (typeof castNextConfig === 'function') {\n    return function ( ...webpackConfigFunctionArgs) {\n      const maybePromiseNextConfig = castNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (core.isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    } ;\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions) ;\n  }\n}\n\n/**\n * Generates a random tunnel route path that's less likely to be blocked by ad-blockers\n */\nfunction generateRandomTunnelRoute() {\n  // Generate a random 8-character alphanumeric string\n  const randomString = Math.random().toString(36).substring(2, 10);\n  return `/${randomString}`;\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject,\n  userSentryOptions,\n) {\n  // Only determine a release name if release creation is not explicitly disabled\n  // This prevents injection of Git commit hashes that break build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseName = shouldCreateRelease\n    ? userSentryOptions.release?.name ?? node.getSentryRelease() ?? getGitRevision()\n    : userSentryOptions.release?.name;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      const resolvedTunnelRoute =\n        userSentryOptions.tunnelRoute === true ? generateRandomTunnelRoute() : userSentryOptions.tunnelRoute;\n\n      // Update the global options object to use the resolved value everywhere\n      userSentryOptions.tunnelRoute = resolvedTunnelRoute || undefined;\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, resolvedTunnelRoute);\n    }\n  }\n\n  if (process.argv.includes('--experimental-build-mode')) {\n    if (!showedExperimentalBuildModeWarning) {\n      showedExperimentalBuildModeWarning = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode',\n      );\n    }\n    if (process.argv.includes('generate')) {\n      // Next.js v15.3.0-canary.1 splits the experimental build into two phases:\n      // 1. compile: Code compilation\n      // 2. generate: Environment variable inlining and prerendering (We don't instrument this phase, we inline in the compile phase)\n      //\n      // We assume a single \"full\" build and reruns Webpack instrumentation in both phases.\n      // During the generate step it collides with Next.js's inliner\n      // producing malformed JS and build failures.\n      // We skip Sentry processing during generate to avoid this issue.\n      return incomingUserNextConfigObject;\n    }\n  }\n\n  let routeManifest;\n  if (!userSentryOptions.disableManifestInjection) {\n    routeManifest = createRouteManifest.createRouteManifest();\n  }\n\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions, releaseName);\n\n  const nextJsVersion = util.getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const { major, minor } = core.parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || (major === 14 && minor >= 3))) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = [\n        'baggage',\n        'sentry-trace',\n        ...(incomingUserNextConfigObject.experimental?.clientTraceMetadata || []),\n      ];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\",\n    );\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = core.parseSemver(nextJsVersion);\n    const isFullySupportedRelease =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      major >= 15 &&\n      ((minor === 0 && patch === 0 && prerelease === undefined) || minor > 0 || patch > 0);\n    const isSupportedV15Rc =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('rc.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary =\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (incomingUserNextConfigObject.experimental?.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.',\n        );\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (\n      incomingUserNextConfigObject.experimental &&\n      'instrumentationHook' in incomingUserNextConfigObject.experimental\n    ) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\",\n      );\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  }\n\n  // We wanna check whether the user added a `onRouterTransitionStart` handler to their client instrumentation file.\n  const instrumentationClientFileContents = getInstrumentationClientFileContents();\n  if (\n    instrumentationClientFileContents !== undefined &&\n    !instrumentationClientFileContents.includes('onRouterTransitionStart') &&\n    !userSentryOptions.suppressOnRouterTransitionStartWarning\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.',\n    );\n  }\n\n  let nextMajor;\n  const isTurbopack = false;\n  let isTurbopackSupported = false;\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = core.parseSemver(nextJsVersion);\n    nextMajor = major;\n    const isSupportedVersion =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      (major > 15 ||\n        (major === 15 && minor > 3) ||\n        (major === 15 && minor === 3 && patch === 0 && prerelease === undefined) ||\n        (major === 15 && minor === 3 && patch > 0));\n    isTurbopackSupported = isSupportedVersion;\n    const isSupportedCanary =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 3 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 28;\n    const supportsClientInstrumentation = isSupportedCanary || isSupportedVersion;\n\n    if (!supportsClientInstrumentation && isTurbopack) {\n      if (true) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next dev --turbo\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.3.0 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack. Note that the SDK will continue to work for non-Turbopack production builds. This warning is only about dev-mode.`,\n        );\n      } else {}\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    ...(nextMajor && nextMajor >= 15\n      ? {\n          serverExternalPackages: [\n            ...(incomingUserNextConfigObject.serverExternalPackages || []),\n            ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n          ],\n        }\n      : {\n          experimental: {\n            ...incomingUserNextConfigObject.experimental,\n            serverComponentsExternalPackages: [\n              ...(incomingUserNextConfigObject.experimental?.serverComponentsExternalPackages || []),\n              ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n            ],\n          },\n        }),\n    webpack:\n      isTurbopack || userSentryOptions.disableSentryWebpackConfig\n        ? incomingUserNextConfigObject.webpack // just return the original webpack config\n        : webpack.constructWebpackConfigFunction(incomingUserNextConfigObject, userSentryOptions, releaseName, routeManifest),\n    ...(isTurbopackSupported && isTurbopack\n      ? {\n          turbopack: constructTurbopackConfig.constructTurbopackConfig({\n            userNextConfig: incomingUserNextConfigObject,\n            routeManifest,\n          }),\n        }\n      : {}),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig, tunnelPath) {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'r', // short for region - we keep it short so matching is harder for ad-blockers\n          value: '(?<region>[a-z]{2})',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n\nfunction setUpBuildTimeVariables(\n  userNextConfig,\n  userSentryOptions,\n  releaseName,\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = userNextConfig.basePath ?? '';\n\n  const rewritesTunnelPath =\n    userSentryOptions.tunnelRoute !== undefined &&\n    userNextConfig.output !== 'export' &&\n    typeof userSentryOptions.tunnelRoute === 'string'\n      ? `${basePath}${userSentryOptions.tunnelRoute}`\n      : undefined;\n\n  const buildTimeVariables = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n  };\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._assetsPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._sentryAssetPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (releaseName) {\n    buildTimeVariables._sentryRelease = releaseName;\n  }\n\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = { ...buildTimeVariables, ...userNextConfig.env };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\n\nfunction getGitRevision() {\n  let gitRevision;\n  try {\n    gitRevision = childProcess\n      .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })\n      .toString()\n      .trim();\n  } catch {\n    // noop\n  }\n  return gitRevision;\n}\n\nfunction getInstrumentationClientFileContents() {\n  const potentialInstrumentationClientFileLocations = [\n    ['src', 'instrumentation-client.ts'],\n    ['src', 'instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n  ];\n\n  for (const pathSegments of potentialInstrumentationClientFileLocations) {\n    try {\n      return fs.readFileSync(path.join(process.cwd(), ...pathSegments), 'utf-8');\n    } catch {\n      // noop\n    }\n  }\n}\n\nexports.DEFAULT_SERVER_EXTERNAL_PACKAGES = DEFAULT_SERVER_EXTERNAL_PACKAGES;\nexports.withSentryConfig = withSentryConfig;\n//# sourceMappingURL=withSentryConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/index.server.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/index.server.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst withSentryConfig = __webpack_require__(/*! ./config/withSentryConfig.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\");\nconst index = __webpack_require__(/*! ./server/index.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js\");\nconst _error = __webpack_require__(/*! ./common/pages-router-instrumentation/_error.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ./common/wrapServerComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ./common/wrapRouteHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ./common/wrapMiddlewareWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ./common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ./common/withServerActionInstrumentation.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ./common/captureRequestError.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\n\n\n\nexports.withSentryConfig = withSentryConfig.withSentryConfig;\nexports.ErrorBoundary = index.ErrorBoundary;\nexports.createReduxEnhancer = index.createReduxEnhancer;\nexports.init = index.init;\nexports.showReportDialog = index.showReportDialog;\nexports.withErrorBoundary = index.withErrorBoundary;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n\t!Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n\tObject.defineProperty(exports, '__proto__', {\n\t\tenumerable: true,\n\t\tvalue: node['__proto__']\n\t});\n\nObject.keys(node).forEach(k => {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9pbmRleC5zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUseUJBQXlCLG1CQUFPLENBQUMscUhBQThCO0FBQy9ELGNBQWMsbUJBQU8sQ0FBQywrRkFBbUI7QUFDekMsZUFBZSxtQkFBTyxDQUFDLDJKQUFpRDtBQUN4RSxpQ0FBaUMsbUJBQU8sQ0FBQywrTEFBbUU7QUFDNUcscUNBQXFDLG1CQUFPLENBQUMsdU1BQXVFO0FBQ3BILHNDQUFzQyxtQkFBTyxDQUFDLHlNQUF3RTtBQUN0SCx5Q0FBeUMsbUJBQU8sQ0FBQywrTUFBMkU7QUFDNUgsOENBQThDLG1CQUFPLENBQUMseU5BQWdGO0FBQ3RJLDJDQUEyQyxtQkFBTyxDQUFDLG1OQUE2RTtBQUNoSSx5Q0FBeUMsbUJBQU8sQ0FBQywrTUFBMkU7QUFDNUgsc0NBQXNDLG1CQUFPLENBQUMsK0lBQTJDO0FBQ3pGLG1DQUFtQyxtQkFBTyxDQUFDLHlJQUF3QztBQUNuRiw0Q0FBNEMsbUJBQU8sQ0FBQyxxTkFBOEU7QUFDbEksaUNBQWlDLG1CQUFPLENBQUMscUlBQXNDO0FBQy9FLG9DQUFvQyxtQkFBTyxDQUFDLHFNQUFzRTtBQUNsSCx5Q0FBeUMsbUJBQU8sQ0FBQyxxSkFBOEM7QUFDL0Ysd0NBQXdDLG1CQUFPLENBQUMsbUpBQTZDO0FBQzdGLDRCQUE0QixtQkFBTyxDQUFDLDJIQUFpQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7Ozs7QUFJbkMsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiwyQkFBMkI7QUFDM0IsWUFBWTtBQUNaLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsdUNBQXVDO0FBQ3ZDLGdDQUFnQztBQUNoQyxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDLHdDQUF3QztBQUN4Qyw2Q0FBNkM7QUFDN0MsMENBQTBDO0FBQzFDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsa0NBQWtDO0FBQ2xDLDJDQUEyQztBQUMzQyxnQ0FBZ0M7QUFDaEMsbUNBQW1DO0FBQ25DLHdDQUF3QztBQUN4Qyx1Q0FBdUM7QUFDdkMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvaW5kZXguc2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCB3aXRoU2VudHJ5Q29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcvd2l0aFNlbnRyeUNvbmZpZy5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL3NlcnZlci9pbmRleC5qcycpO1xuY29uc3QgX2Vycm9yID0gcmVxdWlyZSgnLi9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanMnKTtcbmNvbnN0IHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gcmVxdWlyZSgnLi9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gcmVxdWlyZSgnLi9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3dyYXBTZXJ2ZXJDb21wb25lbnRXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3dyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMuanMnKTtcbmNvbnN0IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3dyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5ID0gcmVxdWlyZSgnLi9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBHZW5lcmF0aW9uRnVuY3Rpb25XaXRoU2VudHJ5ID0gcmVxdWlyZSgnLi9jb21tb24vd3JhcEdlbmVyYXRpb25GdW5jdGlvbldpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdpdGhTZXJ2ZXJBY3Rpb25JbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2NvbW1vbi93aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5jb25zdCBjYXB0dXJlUmVxdWVzdEVycm9yID0gcmVxdWlyZSgnLi9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcycpO1xuY29uc3Qgbm9kZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuXG5cblxuZXhwb3J0cy53aXRoU2VudHJ5Q29uZmlnID0gd2l0aFNlbnRyeUNvbmZpZy53aXRoU2VudHJ5Q29uZmlnO1xuZXhwb3J0cy5FcnJvckJvdW5kYXJ5ID0gaW5kZXguRXJyb3JCb3VuZGFyeTtcbmV4cG9ydHMuY3JlYXRlUmVkdXhFbmhhbmNlciA9IGluZGV4LmNyZWF0ZVJlZHV4RW5oYW5jZXI7XG5leHBvcnRzLmluaXQgPSBpbmRleC5pbml0O1xuZXhwb3J0cy5zaG93UmVwb3J0RGlhbG9nID0gaW5kZXguc2hvd1JlcG9ydERpYWxvZztcbmV4cG9ydHMud2l0aEVycm9yQm91bmRhcnkgPSBpbmRleC53aXRoRXJyb3JCb3VuZGFyeTtcbmV4cG9ydHMuY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbiA9IF9lcnJvci5jYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uO1xuZXhwb3J0cy53cmFwQXBpSGFuZGxlcldpdGhTZW50cnkgPSB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnkud3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeS53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LndyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS53cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LndyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeSA9IHdyYXBTZXJ2ZXJDb21wb25lbnRXaXRoU2VudHJ5LndyYXBTZXJ2ZXJDb21wb25lbnRXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeSA9IHdyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LndyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyA9IHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zO1xuZXhwb3J0cy53cmFwTWlkZGxld2FyZVdpdGhTZW50cnkgPSB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkud3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkgPSB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkud3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5O1xuZXhwb3J0cy53cmFwR2VuZXJhdGlvbkZ1bmN0aW9uV2l0aFNlbnRyeSA9IHdyYXBHZW5lcmF0aW9uRnVuY3Rpb25XaXRoU2VudHJ5LndyYXBHZW5lcmF0aW9uRnVuY3Rpb25XaXRoU2VudHJ5O1xuZXhwb3J0cy53aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uID0gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbi53aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uO1xuZXhwb3J0cy5jYXB0dXJlUmVxdWVzdEVycm9yID0gY2FwdHVyZVJlcXVlc3RFcnJvci5jYXB0dXJlUmVxdWVzdEVycm9yO1xuT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsICdfX3Byb3RvX18nKSAmJlxuXHQhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsICdfX3Byb3RvX18nKSAmJlxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fcHJvdG9fXycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHZhbHVlOiBub2RlWydfX3Byb3RvX18nXVxuXHR9KTtcblxuT2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaChrID0+IHtcblx0aWYgKGsgIT09ICdkZWZhdWx0JyAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIGspKSBleHBvcnRzW2tdID0gbm9kZVtrXTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguc2VydmVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/index.server.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst distDirRewriteFramesIntegration = core.defineIntegration(({ distDirName }) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(core.escapeStringForRegex(distDirAbsPath));\n\n  const rewriteFramesInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;\n//# sourceMappingURL=distDirRewriteFramesIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNOztBQUUzQixrRUFBa0UsYUFBYTtBQUMvRTtBQUNBO0FBQ0EsNEVBQTRFOztBQUU1RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKHsgZGlzdERpck5hbWUgfSkgPT4ge1xuICAvLyBuZXh0anMgYWx3YXlzIHB1dHMgdGhlIGJ1aWxkIGRpcmVjdG9yeSBhdCB0aGUgcHJvamVjdCByb290IGxldmVsLCB3aGljaCBpcyBhbHNvIHdoZXJlIHlvdSBydW4gYG5leHQgc3RhcnRgIGZyb20sIHNvXG4gIC8vIHdlIGNhbiByZWFkIGluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSBmcm9tIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzXG4gIGNvbnN0IGRpc3REaXJBYnNQYXRoID0gcGF0aC5yZXNvbHZlKGRpc3REaXJOYW1lKS5yZXBsYWNlKC8oXFwvfFxcXFwpJC8sICcnKTsgLy8gV2Ugc3RyaXAgdHJhaWxpbmcgc2xhc2hlcyBiZWNhdXNlIFwiYXBwOi8vL19uZXh0XCIgYWxzbyBkb2Vzbid0IGhhdmUgb25lXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSB1c2VyIGlucHV0IGlzIGVzY2FwZWRcbiAgY29uc3QgU09VUkNFTUFQX0ZJTEVOQU1FX1JFR0VYID0gbmV3IFJlZ0V4cChjb3JlLmVzY2FwZVN0cmluZ0ZvclJlZ2V4KGRpc3REaXJBYnNQYXRoKSk7XG5cbiAgY29uc3QgcmV3cml0ZUZyYW1lc0luc3RhbmNlID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24oe1xuICAgIGl0ZXJhdGVlOiBmcmFtZSA9PiB7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IGZyYW1lLmZpbGVuYW1lPy5yZXBsYWNlKFNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCwgJ2FwcDovLy9fbmV4dCcpO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmV3cml0ZUZyYW1lc0luc3RhbmNlLFxuICAgIG5hbWU6ICdEaXN0RGlyUmV3cml0ZUZyYW1lcycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/server/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../common/debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst devErrorSymbolicationEventProcessor = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\");\nconst getVercelEnv = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../common/span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nconst ErrorBoundary = (props) => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children )();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children ;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nfunction createReduxEnhancer() {\n  return (createStore) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(\n  WrappedComponent,\n) {\n  return WrappedComponent ;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nfunction showReportDialog() {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nfunction init(options) {\n  if (isBuild.isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = node.getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      node.httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv.getVercelEnv(false) || \"development\",\n    release: \"7333f475d05ced9e778dcab9220d8070e7c4e88d\" || 0,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (debugBuild.DEBUG_BUILD && opts.debug) {\n    core.debug.enable();\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    debugBuild.DEBUG_BUILD && core.debug.log('SDK already initialized');\n    return;\n  }\n\n  core.applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = node.init(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[semanticConventions.ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpan = core.getRootSpan(span);\n      const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[semanticConventions.SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[semanticConventions.ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(semanticConventions.ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && span === core.getRootSpan(span)) {\n      const scopes = core.getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || core.getIsolationScope()).clone();\n      const scope = scopes.scope || core.getCurrentScope();\n\n      const currentScopesPointer = opentelemetry.getScopesFromContext(api.context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      core.setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            ( true &&\n              event.transaction === `POST ${\"/monitoring\"}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = core.extractTraceparentData(\n              event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) ,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) ,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[semanticConventions.SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[semanticConventions.SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[semanticConventions.ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (true) {\n    core.getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor.devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (false) {}\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized() {\n  return !!core.getClient();\n}\n\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.ErrorBoundary = ErrorBoundary;\nexports.createReduxEnhancer = createReduxEnhancer;\nexports.init = init;\nexports.showReportDialog = showReportDialog;\nexports.withErrorBoundary = withErrorBoundary;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n  !Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n  Object.defineProperty(exports, '__proto__', {\n    enumerable: true,\n    value: node['__proto__']\n  });\n\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/chalk/source/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"(instrument)/./node_modules/ansi-styles/index.js\");\nconst {stdout: stdoutColor, stderr: stderrColor} = __webpack_require__(/*! supports-color */ \"(instrument)/./node_modules/supports-color/index.js\");\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = __webpack_require__(/*! ./util */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/util.js\");\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level > 3 || options.level < 0) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!Array.isArray(firstString)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = __webpack_require__(/*! ./templates */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/templates.js\");\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\n// For TypeScript\nchalk.Level = {\n\tNone: 0,\n\tBasic: 1,\n\tAnsi256: 2,\n\tTrueColor: 3,\n\t0: 'None',\n\t1: 'Basic',\n\t2: 'Ansi256',\n\t3: 'TrueColor'\n};\n\nmodule.exports = chalk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/templates.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/chalk/source/templates.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tconst u = c[0] === 'u';\n\tconst bracket = c[1] === '{';\n\n\tif ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\tif (u && bracket) {\n\t\treturn String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n\tconst results = [];\n\tconst chunks = arguments_.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tconst number = Number(chunk);\n\t\tif (!Number.isNaN(number)) {\n\t\t\tresults.push(number);\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const [styleName, styles] of Object.entries(enabled)) {\n\t\tif (!Array.isArray(styles)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(styleName in current)) {\n\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t}\n\n\t\tcurrent = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, temporary) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttemporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n\t\tif (escapeCharacter) {\n\t\t\tchunk.push(unescape(escapeCharacter));\n\t\t} else if (style) {\n\t\t\tconst string = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(character);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9jaGFsay9zb3VyY2UvdGVtcGxhdGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMENBQTBDLEVBQUUsR0FBRyxRQUFRLElBQUksRUFBRSxXQUFXLEVBQUUsVUFBVSx1RUFBdUU7QUFDM0o7QUFDQTtBQUNBLHFDQUFxQyxFQUFFLEdBQUcsUUFBUSxJQUFJLEVBQUUsV0FBVyxFQUFFOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKLDZEQUE2RCxPQUFPLGFBQWEsS0FBSztBQUN0RjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQ0FBbUM7QUFDbkQsSUFBSTtBQUNKO0FBQ0Esd0NBQXdDO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBLHNEQUFzRCxlQUFlLGlCQUFpQixnQ0FBZ0MsSUFBSTtBQUMxSDtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL3RlbXBsYXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBURU1QTEFURV9SRUdFWCA9IC8oPzpcXFxcKHUoPzpbYS1mXFxkXXs0fXxcXHtbYS1mXFxkXXsxLDZ9XFx9KXx4W2EtZlxcZF17Mn18LikpfCg/Olxceyh+KT8oXFx3Kyg/OlxcKFteKV0qXFwpKT8oPzpcXC5cXHcrKD86XFwoW14pXSpcXCkpPykqKSg/OlsgXFx0XXwoPz1cXHI/XFxuKSkpfChcXH0pfCgoPzoufFtcXHJcXG5cXGZdKSs/KS9naTtcbmNvbnN0IFNUWUxFX1JFR0VYID0gLyg/Ol58XFwuKShcXHcrKSg/OlxcKChbXildKilcXCkpPy9nO1xuY29uc3QgU1RSSU5HX1JFR0VYID0gL14oWydcIl0pKCg/OlxcXFwufCg/IVxcMSlbXlxcXFxdKSopXFwxJC87XG5jb25zdCBFU0NBUEVfUkVHRVggPSAvXFxcXCh1KD86W2EtZlxcZF17NH18XFx7W2EtZlxcZF17MSw2fVxcfSl8eFthLWZcXGRdezJ9fC4pfChbXlxcXFxdKS9naTtcblxuY29uc3QgRVNDQVBFUyA9IG5ldyBNYXAoW1xuXHRbJ24nLCAnXFxuJ10sXG5cdFsncicsICdcXHInXSxcblx0Wyd0JywgJ1xcdCddLFxuXHRbJ2InLCAnXFxiJ10sXG5cdFsnZicsICdcXGYnXSxcblx0Wyd2JywgJ1xcdiddLFxuXHRbJzAnLCAnXFwwJ10sXG5cdFsnXFxcXCcsICdcXFxcJ10sXG5cdFsnZScsICdcXHUwMDFCJ10sXG5cdFsnYScsICdcXHUwMDA3J11cbl0pO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShjKSB7XG5cdGNvbnN0IHUgPSBjWzBdID09PSAndSc7XG5cdGNvbnN0IGJyYWNrZXQgPSBjWzFdID09PSAneyc7XG5cblx0aWYgKCh1ICYmICFicmFja2V0ICYmIGMubGVuZ3RoID09PSA1KSB8fCAoY1swXSA9PT0gJ3gnICYmIGMubGVuZ3RoID09PSAzKSkge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGMuc2xpY2UoMSksIDE2KSk7XG5cdH1cblxuXHRpZiAodSAmJiBicmFja2V0KSB7XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KGMuc2xpY2UoMiwgLTEpLCAxNikpO1xuXHR9XG5cblx0cmV0dXJuIEVTQ0FQRVMuZ2V0KGMpIHx8IGM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKG5hbWUsIGFyZ3VtZW50c18pIHtcblx0Y29uc3QgcmVzdWx0cyA9IFtdO1xuXHRjb25zdCBjaHVua3MgPSBhcmd1bWVudHNfLnRyaW0oKS5zcGxpdCgvXFxzKixcXHMqL2cpO1xuXHRsZXQgbWF0Y2hlcztcblxuXHRmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuXHRcdGNvbnN0IG51bWJlciA9IE51bWJlcihjaHVuayk7XG5cdFx0aWYgKCFOdW1iZXIuaXNOYU4obnVtYmVyKSkge1xuXHRcdFx0cmVzdWx0cy5wdXNoKG51bWJlcik7XG5cdFx0fSBlbHNlIGlmICgobWF0Y2hlcyA9IGNodW5rLm1hdGNoKFNUUklOR19SRUdFWCkpKSB7XG5cdFx0XHRyZXN1bHRzLnB1c2gobWF0Y2hlc1syXS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgKG0sIGVzY2FwZSwgY2hhcmFjdGVyKSA9PiBlc2NhcGUgPyB1bmVzY2FwZShlc2NhcGUpIDogY2hhcmFjdGVyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBDaGFsayB0ZW1wbGF0ZSBzdHlsZSBhcmd1bWVudDogJHtjaHVua30gKGluIHN0eWxlICcke25hbWV9JylgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gcGFyc2VTdHlsZShzdHlsZSkge1xuXHRTVFlMRV9SRUdFWC5sYXN0SW5kZXggPSAwO1xuXG5cdGNvbnN0IHJlc3VsdHMgPSBbXTtcblx0bGV0IG1hdGNoZXM7XG5cblx0d2hpbGUgKChtYXRjaGVzID0gU1RZTEVfUkVHRVguZXhlYyhzdHlsZSkpICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgbmFtZSA9IG1hdGNoZXNbMV07XG5cblx0XHRpZiAobWF0Y2hlc1syXSkge1xuXHRcdFx0Y29uc3QgYXJncyA9IHBhcnNlQXJndW1lbnRzKG5hbWUsIG1hdGNoZXNbMl0pO1xuXHRcdFx0cmVzdWx0cy5wdXNoKFtuYW1lXS5jb25jYXQoYXJncykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRzLnB1c2goW25hbWVdKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gYnVpbGRTdHlsZShjaGFsaywgc3R5bGVzKSB7XG5cdGNvbnN0IGVuYWJsZWQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGxheWVyIG9mIHN0eWxlcykge1xuXHRcdGZvciAoY29uc3Qgc3R5bGUgb2YgbGF5ZXIuc3R5bGVzKSB7XG5cdFx0XHRlbmFibGVkW3N0eWxlWzBdXSA9IGxheWVyLmludmVyc2UgPyBudWxsIDogc3R5bGUuc2xpY2UoMSk7XG5cdFx0fVxuXHR9XG5cblx0bGV0IGN1cnJlbnQgPSBjaGFsaztcblx0Zm9yIChjb25zdCBbc3R5bGVOYW1lLCBzdHlsZXNdIG9mIE9iamVjdC5lbnRyaWVzKGVuYWJsZWQpKSB7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHN0eWxlcykpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmICghKHN0eWxlTmFtZSBpbiBjdXJyZW50KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIENoYWxrIHN0eWxlOiAke3N0eWxlTmFtZX1gKTtcblx0XHR9XG5cblx0XHRjdXJyZW50ID0gc3R5bGVzLmxlbmd0aCA+IDAgPyBjdXJyZW50W3N0eWxlTmFtZV0oLi4uc3R5bGVzKSA6IGN1cnJlbnRbc3R5bGVOYW1lXTtcblx0fVxuXG5cdHJldHVybiBjdXJyZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChjaGFsaywgdGVtcG9yYXJ5KSA9PiB7XG5cdGNvbnN0IHN0eWxlcyA9IFtdO1xuXHRjb25zdCBjaHVua3MgPSBbXTtcblx0bGV0IGNodW5rID0gW107XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcblx0dGVtcG9yYXJ5LnJlcGxhY2UoVEVNUExBVEVfUkVHRVgsIChtLCBlc2NhcGVDaGFyYWN0ZXIsIGludmVyc2UsIHN0eWxlLCBjbG9zZSwgY2hhcmFjdGVyKSA9PiB7XG5cdFx0aWYgKGVzY2FwZUNoYXJhY3Rlcikge1xuXHRcdFx0Y2h1bmsucHVzaCh1bmVzY2FwZShlc2NhcGVDaGFyYWN0ZXIpKTtcblx0XHR9IGVsc2UgaWYgKHN0eWxlKSB7XG5cdFx0XHRjb25zdCBzdHJpbmcgPSBjaHVuay5qb2luKCcnKTtcblx0XHRcdGNodW5rID0gW107XG5cdFx0XHRjaHVua3MucHVzaChzdHlsZXMubGVuZ3RoID09PSAwID8gc3RyaW5nIDogYnVpbGRTdHlsZShjaGFsaywgc3R5bGVzKShzdHJpbmcpKTtcblx0XHRcdHN0eWxlcy5wdXNoKHtpbnZlcnNlLCBzdHlsZXM6IHBhcnNlU3R5bGUoc3R5bGUpfSk7XG5cdFx0fSBlbHNlIGlmIChjbG9zZSkge1xuXHRcdFx0aWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGb3VuZCBleHRyYW5lb3VzIH0gaW4gQ2hhbGsgdGVtcGxhdGUgbGl0ZXJhbCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRjaHVua3MucHVzaChidWlsZFN0eWxlKGNoYWxrLCBzdHlsZXMpKGNodW5rLmpvaW4oJycpKSk7XG5cdFx0XHRjaHVuayA9IFtdO1xuXHRcdFx0c3R5bGVzLnBvcCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaHVuay5wdXNoKGNoYXJhY3Rlcik7XG5cdFx0fVxuXHR9KTtcblxuXHRjaHVua3MucHVzaChjaHVuay5qb2luKCcnKSk7XG5cblx0aWYgKHN0eWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0Y29uc3QgZXJyTXNnID0gYENoYWxrIHRlbXBsYXRlIGxpdGVyYWwgaXMgbWlzc2luZyAke3N0eWxlcy5sZW5ndGh9IGNsb3NpbmcgYnJhY2tldCR7c3R5bGVzLmxlbmd0aCA9PT0gMSA/ICcnIDogJ3MnfSAoXFxgfVxcYClgO1xuXHRcdHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCcnKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/templates.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/chalk/source/util.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst stringReplaceAll = (string, substring, replacer) => {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nmodule.exports = {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9jaGFsay9zb3VyY2UvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5nUmVwbGFjZUFsbCA9IChzdHJpbmcsIHN1YnN0cmluZywgcmVwbGFjZXIpID0+IHtcblx0bGV0IGluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nKTtcblx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH1cblxuXHRjb25zdCBzdWJzdHJpbmdMZW5ndGggPSBzdWJzdHJpbmcubGVuZ3RoO1xuXHRsZXQgZW5kSW5kZXggPSAwO1xuXHRsZXQgcmV0dXJuVmFsdWUgPSAnJztcblx0ZG8ge1xuXHRcdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgsIGluZGV4IC0gZW5kSW5kZXgpICsgc3Vic3RyaW5nICsgcmVwbGFjZXI7XG5cdFx0ZW5kSW5kZXggPSBpbmRleCArIHN1YnN0cmluZ0xlbmd0aDtcblx0XHRpbmRleCA9IHN0cmluZy5pbmRleE9mKHN1YnN0cmluZywgZW5kSW5kZXgpO1xuXHR9IHdoaWxlIChpbmRleCAhPT0gLTEpO1xuXG5cdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgpO1xuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuXG5jb25zdCBzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXggPSAoc3RyaW5nLCBwcmVmaXgsIHBvc3RmaXgsIGluZGV4KSA9PiB7XG5cdGxldCBlbmRJbmRleCA9IDA7XG5cdGxldCByZXR1cm5WYWx1ZSA9ICcnO1xuXHRkbyB7XG5cdFx0Y29uc3QgZ290Q1IgPSBzdHJpbmdbaW5kZXggLSAxXSA9PT0gJ1xccic7XG5cdFx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgKGdvdENSID8gaW5kZXggLSAxIDogaW5kZXgpIC0gZW5kSW5kZXgpICsgcHJlZml4ICsgKGdvdENSID8gJ1xcclxcbicgOiAnXFxuJykgKyBwb3N0Zml4O1xuXHRcdGVuZEluZGV4ID0gaW5kZXggKyAxO1xuXHRcdGluZGV4ID0gc3RyaW5nLmluZGV4T2YoJ1xcbicsIGVuZEluZGV4KTtcblx0fSB3aGlsZSAoaW5kZXggIT09IC0xKTtcblxuXHRyZXR1cm5WYWx1ZSArPSBzdHJpbmcuc3Vic3RyKGVuZEluZGV4KTtcblx0cmV0dXJuIHJldHVyblZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHN0cmluZ1JlcGxhY2VBbGwsXG5cdHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/chalk/source/util.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var async = __webpack_require__(/*! ./lib/async */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/async.js\");\nasync.core = __webpack_require__(/*! ./lib/core */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.js\");\nasync.isCore = __webpack_require__(/*! ./lib/is-core */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/is-core.js\");\nasync.sync = __webpack_require__(/*! ./lib/sync */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/sync.js\");\n\nmodule.exports = async;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyxpR0FBYTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsK0ZBQVk7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHFHQUFlO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQywrRkFBWTs7QUFFakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvcmVzb2x2ZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXN5bmMgPSByZXF1aXJlKCcuL2xpYi9hc3luYycpO1xuYXN5bmMuY29yZSA9IHJlcXVpcmUoJy4vbGliL2NvcmUnKTtcbmFzeW5jLmlzQ29yZSA9IHJlcXVpcmUoJy4vbGliL2lzLWNvcmUnKTtcbmFzeW5jLnN5bmMgPSByZXF1aXJlKCcuL2xpYi9zeW5jJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/async.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/async.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar getHomedir = __webpack_require__(/*! ./homedir */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/homedir.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar caller = __webpack_require__(/*! ./caller */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/caller.js\");\nvar nodeModulesPaths = __webpack_require__(/*! ./node-modules-paths */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/node-modules-paths.js\");\nvar normalizeOptions = __webpack_require__(/*! ./normalize-options */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/normalize-options.js\");\nvar isCore = __webpack_require__(/*! is-core-module */ \"(instrument)/./node_modules/is-core-module/index.js\");\n\nvar realpathFS = process.platform !== 'win32' && fs.realpath && typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\n\nvar homedir = getHomedir();\nvar defaultPaths = function () {\n    return [\n        path.join(homedir, '.node_modules'),\n        path.join(homedir, '.node_libraries')\n    ];\n};\n\nvar defaultIsFile = function isFile(file, cb) {\n    fs.stat(file, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isFile() || stat.isFIFO());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultIsDir = function isDirectory(dir, cb) {\n    fs.stat(dir, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isDirectory());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultRealpath = function realpath(x, cb) {\n    realpathFS(x, function (realpathErr, realPath) {\n        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);\n        else cb(null, realpathErr ? x : realPath);\n    });\n};\n\nvar maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {\n    if (opts && opts.preserveSymlinks === false) {\n        realpath(x, cb);\n    } else {\n        cb(null, x);\n    }\n};\n\nvar defaultReadPackage = function defaultReadPackage(readFile, pkgfile, cb) {\n    readFile(pkgfile, function (readFileErr, body) {\n        if (readFileErr) cb(readFileErr);\n        else {\n            try {\n                var pkg = JSON.parse(body);\n                cb(null, pkg);\n            } catch (jsonErr) {\n                cb(null);\n            }\n        }\n    });\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolve(x, options, callback) {\n    var cb = callback;\n    var opts = options;\n    if (typeof options === 'function') {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof x !== 'string') {\n        var err = new TypeError('Path must be a string.');\n        return process.nextTick(function () {\n            cb(err);\n        });\n    }\n\n    opts = normalizeOptions(x, opts);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var readFile = opts.readFile || fs.readFile;\n    var realpath = opts.realpath || defaultRealpath;\n    var readPackage = opts.readPackage || defaultReadPackage;\n    if (opts.readFile && opts.readPackage) {\n        var conflictErr = new TypeError('`readFile` and `readPackage` are mutually exclusive.');\n        return process.nextTick(function () {\n            cb(conflictErr);\n        });\n    }\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var includeCoreModules = opts.includeCoreModules !== false;\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || defaultPaths();\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = path.resolve(basedir);\n\n    maybeRealpath(\n        realpath,\n        absoluteStart,\n        opts,\n        function (err, realStart) {\n            if (err) cb(err);\n            else init(realStart);\n        }\n    );\n\n    var res;\n    function init(basedir) {\n        if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n            res = path.resolve(basedir, x);\n            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n            if ((/\\/$/).test(x) && res === basedir) {\n                loadAsDirectory(res, opts.package, onfile);\n            } else loadAsFile(res, opts.package, onfile);\n        } else if (includeCoreModules && isCore(x)) {\n            return cb(null, x);\n        } else loadNodeModules(x, basedir, function (err, n, pkg) {\n            if (err) cb(err);\n            else if (n) {\n                return maybeRealpath(realpath, n, opts, function (err, realN) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realN, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function onfile(err, m, pkg) {\n        if (err) cb(err);\n        else if (m) cb(null, m, pkg);\n        else loadAsDirectory(res, function (err, d, pkg) {\n            if (err) cb(err);\n            else if (d) {\n                maybeRealpath(realpath, d, opts, function (err, realD) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realD, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function loadAsFile(x, thePackage, callback) {\n        var loadAsFilePackage = thePackage;\n        var cb = callback;\n        if (typeof loadAsFilePackage === 'function') {\n            cb = loadAsFilePackage;\n            loadAsFilePackage = undefined;\n        }\n\n        var exts = [''].concat(extensions);\n        load(exts, x, loadAsFilePackage);\n\n        function load(exts, x, loadPackage) {\n            if (exts.length === 0) return cb(null, undefined, loadPackage);\n            var file = x + exts[0];\n\n            var pkg = loadPackage;\n            if (pkg) onpkg(null, pkg);\n            else loadpkg(path.dirname(file), onpkg);\n\n            function onpkg(err, pkg_, dir) {\n                pkg = pkg_;\n                if (err) return cb(err);\n                if (dir && pkg && opts.pathFilter) {\n                    var rfile = path.relative(dir, file);\n                    var rel = rfile.slice(0, rfile.length - exts[0].length);\n                    var r = opts.pathFilter(pkg, x, rel);\n                    if (r) return load(\n                        [''].concat(extensions.slice()),\n                        path.resolve(dir, r),\n                        pkg\n                    );\n                }\n                isFile(file, onex);\n            }\n            function onex(err, ex) {\n                if (err) return cb(err);\n                if (ex) return cb(null, file, pkg);\n                load(exts.slice(1), x, pkg);\n            }\n        }\n    }\n\n    function loadpkg(dir, cb) {\n        if (dir === '' || dir === '/') return cb(null);\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return cb(null);\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return cb(null);\n\n        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return loadpkg(path.dirname(dir), cb);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                // on err, ex is false\n                if (!ex) return loadpkg(path.dirname(dir), cb);\n\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\n                    if (err) cb(err);\n\n                    var pkg = pkgParam;\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n                    cb(null, pkg, dir);\n                });\n            });\n        });\n    }\n\n    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {\n        var cb = callback;\n        var fpkg = loadAsDirectoryPackage;\n        if (typeof fpkg === 'function') {\n            cb = fpkg;\n            fpkg = opts.package;\n        }\n\n        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return cb(unwrapErr);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                if (err) return cb(err);\n                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);\n\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\n                    if (err) return cb(err);\n\n                    var pkg = pkgParam;\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n\n                    if (pkg && pkg.main) {\n                        if (typeof pkg.main !== 'string') {\n                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                            mainError.code = 'INVALID_PACKAGE_MAIN';\n                            return cb(mainError);\n                        }\n                        if (pkg.main === '.' || pkg.main === './') {\n                            pkg.main = 'index';\n                        }\n                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {\n                            if (err) return cb(err);\n                            if (m) return cb(null, m, pkg);\n                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);\n\n                            var dir = path.resolve(x, pkg.main);\n                            loadAsDirectory(dir, pkg, function (err, n, pkg) {\n                                if (err) return cb(err);\n                                if (n) return cb(null, n, pkg);\n                                loadAsFile(path.join(x, 'index'), pkg, cb);\n                            });\n                        });\n                        return;\n                    }\n\n                    loadAsFile(path.join(x, '/index'), pkg, cb);\n                });\n            });\n        });\n    }\n\n    function processDirs(cb, dirs) {\n        if (dirs.length === 0) return cb(null, undefined);\n        var dir = dirs[0];\n\n        isDirectory(path.dirname(dir), isdir);\n\n        function isdir(err, isdir) {\n            if (err) return cb(err);\n            if (!isdir) return processDirs(cb, dirs.slice(1));\n            loadAsFile(dir, opts.package, onfile);\n        }\n\n        function onfile(err, m, pkg) {\n            if (err) return cb(err);\n            if (m) return cb(null, m, pkg);\n            loadAsDirectory(dir, opts.package, ondir);\n        }\n\n        function ondir(err, n, pkg) {\n            if (err) return cb(err);\n            if (n) return cb(null, n, pkg);\n            processDirs(cb, dirs.slice(1));\n        }\n    }\n    function loadNodeModules(x, start, cb) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        processDirs(\n            cb,\n            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()\n        );\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/async.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/caller.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/caller.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n    var origPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = function (_, stack) { return stack; };\n    var stack = (new Error()).stack;\n    Error.prepareStackTrace = origPrepareStackTrace;\n    return stack[2].getFileName();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9jYWxsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL3Jlc29sdmUvbGliL2NhbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBzZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC93aWtpL0phdmFTY3JpcHRTdGFja1RyYWNlQXBpXG4gICAgdmFyIG9yaWdQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKF8sIHN0YWNrKSB7IHJldHVybiBzdGFjazsgfTtcbiAgICB2YXIgc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gb3JpZ1ByZXBhcmVTdGFja1RyYWNlO1xuICAgIHJldHVybiBzdGFja1syXS5nZXRGaWxlTmFtZSgpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/caller.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isCoreModule = __webpack_require__(/*! is-core-module */ \"(instrument)/./node_modules/is-core-module/index.js\");\nvar data = __webpack_require__(/*! ./core.json */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.json\");\n\nvar core = {};\nfor (var mod in data) { // eslint-disable-line no-restricted-syntax\n    if (Object.prototype.hasOwnProperty.call(data, mod)) {\n        core[mod] = isCoreModule(mod);\n    }\n}\nmodule.exports = core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLDJFQUFnQjtBQUMzQyxXQUFXLG1CQUFPLENBQUMsa0dBQWE7O0FBRWhDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvY29yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0NvcmVNb2R1bGUgPSByZXF1aXJlKCdpcy1jb3JlLW1vZHVsZScpO1xudmFyIGRhdGEgPSByZXF1aXJlKCcuL2NvcmUuanNvbicpO1xuXG52YXIgY29yZSA9IHt9O1xuZm9yICh2YXIgbW9kIGluIGRhdGEpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwgbW9kKSkge1xuICAgICAgICBjb3JlW21vZF0gPSBpc0NvcmVNb2R1bGUobW9kKTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvcmU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.json":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/core.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"assert":true,"node:assert":[">= 14.18 && < 15",">= 16"],"assert/strict":">= 15","node:assert/strict":">= 16","async_hooks":">= 8","node:async_hooks":[">= 14.18 && < 15",">= 16"],"buffer_ieee754":">= 0.5 && < 0.9.7","buffer":true,"node:buffer":[">= 14.18 && < 15",">= 16"],"child_process":true,"node:child_process":[">= 14.18 && < 15",">= 16"],"cluster":">= 0.5","node:cluster":[">= 14.18 && < 15",">= 16"],"console":true,"node:console":[">= 14.18 && < 15",">= 16"],"constants":true,"node:constants":[">= 14.18 && < 15",">= 16"],"crypto":true,"node:crypto":[">= 14.18 && < 15",">= 16"],"_debug_agent":">= 1 && < 8","_debugger":"< 8","dgram":true,"node:dgram":[">= 14.18 && < 15",">= 16"],"diagnostics_channel":[">= 14.17 && < 15",">= 15.1"],"node:diagnostics_channel":[">= 14.18 && < 15",">= 16"],"dns":true,"node:dns":[">= 14.18 && < 15",">= 16"],"dns/promises":">= 15","node:dns/promises":">= 16","domain":">= 0.7.12","node:domain":[">= 14.18 && < 15",">= 16"],"events":true,"node:events":[">= 14.18 && < 15",">= 16"],"freelist":"< 6","fs":true,"node:fs":[">= 14.18 && < 15",">= 16"],"fs/promises":[">= 10 && < 10.1",">= 14"],"node:fs/promises":[">= 14.18 && < 15",">= 16"],"_http_agent":">= 0.11.1","node:_http_agent":[">= 14.18 && < 15",">= 16"],"_http_client":">= 0.11.1","node:_http_client":[">= 14.18 && < 15",">= 16"],"_http_common":">= 0.11.1","node:_http_common":[">= 14.18 && < 15",">= 16"],"_http_incoming":">= 0.11.1","node:_http_incoming":[">= 14.18 && < 15",">= 16"],"_http_outgoing":">= 0.11.1","node:_http_outgoing":[">= 14.18 && < 15",">= 16"],"_http_server":">= 0.11.1","node:_http_server":[">= 14.18 && < 15",">= 16"],"http":true,"node:http":[">= 14.18 && < 15",">= 16"],"http2":">= 8.8","node:http2":[">= 14.18 && < 15",">= 16"],"https":true,"node:https":[">= 14.18 && < 15",">= 16"],"inspector":">= 8","node:inspector":[">= 14.18 && < 15",">= 16"],"inspector/promises":[">= 19"],"node:inspector/promises":[">= 19"],"_linklist":"< 8","module":true,"node:module":[">= 14.18 && < 15",">= 16"],"net":true,"node:net":[">= 14.18 && < 15",">= 16"],"node-inspect/lib/_inspect":">= 7.6 && < 12","node-inspect/lib/internal/inspect_client":">= 7.6 && < 12","node-inspect/lib/internal/inspect_repl":">= 7.6 && < 12","os":true,"node:os":[">= 14.18 && < 15",">= 16"],"path":true,"node:path":[">= 14.18 && < 15",">= 16"],"path/posix":">= 15.3","node:path/posix":">= 16","path/win32":">= 15.3","node:path/win32":">= 16","perf_hooks":">= 8.5","node:perf_hooks":[">= 14.18 && < 15",">= 16"],"process":">= 1","node:process":[">= 14.18 && < 15",">= 16"],"punycode":">= 0.5","node:punycode":[">= 14.18 && < 15",">= 16"],"querystring":true,"node:querystring":[">= 14.18 && < 15",">= 16"],"readline":true,"node:readline":[">= 14.18 && < 15",">= 16"],"readline/promises":">= 17","node:readline/promises":">= 17","repl":true,"node:repl":[">= 14.18 && < 15",">= 16"],"smalloc":">= 0.11.5 && < 3","_stream_duplex":">= 0.9.4","node:_stream_duplex":[">= 14.18 && < 15",">= 16"],"_stream_transform":">= 0.9.4","node:_stream_transform":[">= 14.18 && < 15",">= 16"],"_stream_wrap":">= 1.4.1","node:_stream_wrap":[">= 14.18 && < 15",">= 16"],"_stream_passthrough":">= 0.9.4","node:_stream_passthrough":[">= 14.18 && < 15",">= 16"],"_stream_readable":">= 0.9.4","node:_stream_readable":[">= 14.18 && < 15",">= 16"],"_stream_writable":">= 0.9.4","node:_stream_writable":[">= 14.18 && < 15",">= 16"],"stream":true,"node:stream":[">= 14.18 && < 15",">= 16"],"stream/consumers":">= 16.7","node:stream/consumers":">= 16.7","stream/promises":">= 15","node:stream/promises":">= 16","stream/web":">= 16.5","node:stream/web":">= 16.5","string_decoder":true,"node:string_decoder":[">= 14.18 && < 15",">= 16"],"sys":[">= 0.4 && < 0.7",">= 0.8"],"node:sys":[">= 14.18 && < 15",">= 16"],"test/reporters":">= 19.9 && < 20.2","node:test/reporters":[">= 18.17 && < 19",">= 19.9",">= 20"],"node:test":[">= 16.17 && < 17",">= 18"],"timers":true,"node:timers":[">= 14.18 && < 15",">= 16"],"timers/promises":">= 15","node:timers/promises":">= 16","_tls_common":">= 0.11.13","node:_tls_common":[">= 14.18 && < 15",">= 16"],"_tls_legacy":">= 0.11.3 && < 10","_tls_wrap":">= 0.11.3","node:_tls_wrap":[">= 14.18 && < 15",">= 16"],"tls":true,"node:tls":[">= 14.18 && < 15",">= 16"],"trace_events":">= 10","node:trace_events":[">= 14.18 && < 15",">= 16"],"tty":true,"node:tty":[">= 14.18 && < 15",">= 16"],"url":true,"node:url":[">= 14.18 && < 15",">= 16"],"util":true,"node:util":[">= 14.18 && < 15",">= 16"],"util/types":">= 15.3","node:util/types":">= 16","v8/tools/arguments":">= 10 && < 12","v8/tools/codemap":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/consarray":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/csvparser":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/logreader":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/profile_view":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/splaytree":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8":">= 1","node:v8":[">= 14.18 && < 15",">= 16"],"vm":true,"node:vm":[">= 14.18 && < 15",">= 16"],"wasi":[">= 13.4 && < 13.5",">= 18.17 && < 19",">= 20"],"node:wasi":[">= 18.17 && < 19",">= 20"],"worker_threads":">= 11.7","node:worker_threads":[">= 14.18 && < 15",">= 16"],"zlib":">= 0.5","node:zlib":[">= 14.18 && < 15",">= 16"]}');

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/homedir.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/homedir.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar os = __webpack_require__(/*! os */ \"os\");\n\n// adapted from https://github.com/sindresorhus/os-homedir/blob/11e089f4754db38bb535e5a8416320c4446e8cfd/index.js\n\nmodule.exports = os.homedir || function homedir() {\n    var home = process.env.HOME;\n    var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;\n\n    if (process.platform === 'win32') {\n        return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;\n    }\n\n    if (process.platform === 'darwin') {\n        return home || (user ? '/Users/' + user : null);\n    }\n\n    if (process.platform === 'linux') {\n        return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null)); // eslint-disable-line no-extra-parens\n    }\n\n    return home || null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9ob21lZGlyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVMsbUJBQU8sQ0FBQyxjQUFJOztBQUVyQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZGQUE2RjtBQUM3Rjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL3Jlc29sdmUvbGliL2hvbWVkaXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3MgPSByZXF1aXJlKCdvcycpO1xuXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9vcy1ob21lZGlyL2Jsb2IvMTFlMDg5ZjQ3NTRkYjM4YmI1MzVlNWE4NDE2MzIwYzQ0NDZlOGNmZC9pbmRleC5qc1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9zLmhvbWVkaXIgfHwgZnVuY3Rpb24gaG9tZWRpcigpIHtcbiAgICB2YXIgaG9tZSA9IHByb2Nlc3MuZW52LkhPTUU7XG4gICAgdmFyIHVzZXIgPSBwcm9jZXNzLmVudi5MT0dOQU1FIHx8IHByb2Nlc3MuZW52LlVTRVIgfHwgcHJvY2Vzcy5lbnYuTE5BTUUgfHwgcHJvY2Vzcy5lbnYuVVNFUk5BTUU7XG5cbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuVVNFUlBST0ZJTEUgfHwgcHJvY2Vzcy5lbnYuSE9NRURSSVZFICsgcHJvY2Vzcy5lbnYuSE9NRVBBVEggfHwgaG9tZSB8fCBudWxsO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuICAgICAgICByZXR1cm4gaG9tZSB8fCAodXNlciA/ICcvVXNlcnMvJyArIHVzZXIgOiBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xuICAgICAgICByZXR1cm4gaG9tZSB8fCAocHJvY2Vzcy5nZXR1aWQoKSA9PT0gMCA/ICcvcm9vdCcgOiAodXNlciA/ICcvaG9tZS8nICsgdXNlciA6IG51bGwpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1wYXJlbnNcbiAgICB9XG5cbiAgICByZXR1cm4gaG9tZSB8fCBudWxsO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/homedir.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/is-core.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/is-core.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isCoreModule = __webpack_require__(/*! is-core-module */ \"(instrument)/./node_modules/is-core-module/index.js\");\n\nmodule.exports = function isCore(x) {\n    return isCoreModule(x);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9pcy1jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLDJFQUFnQjs7QUFFM0M7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL3Jlc29sdmUvbGliL2lzLWNvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQ29yZU1vZHVsZSA9IHJlcXVpcmUoJ2lzLWNvcmUtbW9kdWxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDb3JlKHgpIHtcbiAgICByZXR1cm4gaXNDb3JlTW9kdWxlKHgpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/is-core.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/node-modules-paths.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/node-modules-paths.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar parse = path.parse || __webpack_require__(/*! path-parse */ \"(instrument)/./node_modules/path-parse/index.js\"); // eslint-disable-line global-require\n\nvar getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {\n    var prefix = '/';\n    if ((/^([A-Za-z]:)/).test(absoluteStart)) {\n        prefix = '';\n    } else if ((/^\\\\\\\\/).test(absoluteStart)) {\n        prefix = '\\\\\\\\';\n    }\n\n    var paths = [absoluteStart];\n    var parsed = parse(absoluteStart);\n    while (parsed.dir !== paths[paths.length - 1]) {\n        paths.push(parsed.dir);\n        parsed = parse(parsed.dir);\n    }\n\n    return paths.reduce(function (dirs, aPath) {\n        return dirs.concat(modules.map(function (moduleDir) {\n            return path.resolve(prefix, aPath, moduleDir);\n        }));\n    }, []);\n};\n\nmodule.exports = function nodeModulesPaths(start, opts, request) {\n    var modules = opts && opts.moduleDirectory\n        ? [].concat(opts.moduleDirectory)\n        : ['node_modules'];\n\n    if (opts && typeof opts.paths === 'function') {\n        return opts.paths(\n            request,\n            start,\n            function () { return getNodeModulesDirs(start, modules); },\n            opts\n        );\n    }\n\n    var dirs = getNodeModulesDirs(start, modules);\n    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9ub2RlLW1vZHVsZXMtcGF0aHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLDBCQUEwQixtQkFBTyxDQUFDLG1FQUFZLEdBQUc7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNENBQTRDO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvbm9kZS1tb2R1bGVzLXBhdGhzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHBhcnNlID0gcGF0aC5wYXJzZSB8fCByZXF1aXJlKCdwYXRoLXBhcnNlJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblxudmFyIGdldE5vZGVNb2R1bGVzRGlycyA9IGZ1bmN0aW9uIGdldE5vZGVNb2R1bGVzRGlycyhhYnNvbHV0ZVN0YXJ0LCBtb2R1bGVzKSB7XG4gICAgdmFyIHByZWZpeCA9ICcvJztcbiAgICBpZiAoKC9eKFtBLVphLXpdOikvKS50ZXN0KGFic29sdXRlU3RhcnQpKSB7XG4gICAgICAgIHByZWZpeCA9ICcnO1xuICAgIH0gZWxzZSBpZiAoKC9eXFxcXFxcXFwvKS50ZXN0KGFic29sdXRlU3RhcnQpKSB7XG4gICAgICAgIHByZWZpeCA9ICdcXFxcXFxcXCc7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhzID0gW2Fic29sdXRlU3RhcnRdO1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZShhYnNvbHV0ZVN0YXJ0KTtcbiAgICB3aGlsZSAocGFyc2VkLmRpciAhPT0gcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgcGF0aHMucHVzaChwYXJzZWQuZGlyKTtcbiAgICAgICAgcGFyc2VkID0gcGFyc2UocGFyc2VkLmRpcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAoZGlycywgYVBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGRpcnMuY29uY2F0KG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtb2R1bGVEaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUocHJlZml4LCBhUGF0aCwgbW9kdWxlRGlyKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFtdKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9kZU1vZHVsZXNQYXRocyhzdGFydCwgb3B0cywgcmVxdWVzdCkge1xuICAgIHZhciBtb2R1bGVzID0gb3B0cyAmJiBvcHRzLm1vZHVsZURpcmVjdG9yeVxuICAgICAgICA/IFtdLmNvbmNhdChvcHRzLm1vZHVsZURpcmVjdG9yeSlcbiAgICAgICAgOiBbJ25vZGVfbW9kdWxlcyddO1xuXG4gICAgaWYgKG9wdHMgJiYgdHlwZW9mIG9wdHMucGF0aHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG9wdHMucGF0aHMoXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROb2RlTW9kdWxlc0RpcnMoc3RhcnQsIG1vZHVsZXMpOyB9LFxuICAgICAgICAgICAgb3B0c1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBkaXJzID0gZ2V0Tm9kZU1vZHVsZXNEaXJzKHN0YXJ0LCBtb2R1bGVzKTtcbiAgICByZXR1cm4gb3B0cyAmJiBvcHRzLnBhdGhzID8gZGlycy5jb25jYXQob3B0cy5wYXRocykgOiBkaXJzO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/node-modules-paths.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/normalize-options.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/normalize-options.js ***!
  \***********************************************************************************/
/***/ ((module) => {

eval("module.exports = function (x, opts) {\n    /**\n     * This file is purposefully a passthrough. It's expected that third-party\n     * environments will override it at runtime in order to inject special logic\n     * into `resolve` (by manipulating the options). One such example is the PnP\n     * code path in Yarn.\n     */\n\n    return opts || {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9yZXNvbHZlL2xpYi9ub3JtYWxpemUtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL3Jlc29sdmUvbGliL25vcm1hbGl6ZS1vcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgsIG9wdHMpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZpbGUgaXMgcHVycG9zZWZ1bGx5IGEgcGFzc3Rocm91Z2guIEl0J3MgZXhwZWN0ZWQgdGhhdCB0aGlyZC1wYXJ0eVxuICAgICAqIGVudmlyb25tZW50cyB3aWxsIG92ZXJyaWRlIGl0IGF0IHJ1bnRpbWUgaW4gb3JkZXIgdG8gaW5qZWN0IHNwZWNpYWwgbG9naWNcbiAgICAgKiBpbnRvIGByZXNvbHZlYCAoYnkgbWFuaXB1bGF0aW5nIHRoZSBvcHRpb25zKS4gT25lIHN1Y2ggZXhhbXBsZSBpcyB0aGUgUG5QXG4gICAgICogY29kZSBwYXRoIGluIFlhcm4uXG4gICAgICovXG5cbiAgICByZXR1cm4gb3B0cyB8fCB7fTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/normalize-options.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/sync.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/resolve/lib/sync.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isCore = __webpack_require__(/*! is-core-module */ \"(instrument)/./node_modules/is-core-module/index.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar getHomedir = __webpack_require__(/*! ./homedir */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/homedir.js\");\nvar caller = __webpack_require__(/*! ./caller */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/caller.js\");\nvar nodeModulesPaths = __webpack_require__(/*! ./node-modules-paths */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/node-modules-paths.js\");\nvar normalizeOptions = __webpack_require__(/*! ./normalize-options */ \"(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/normalize-options.js\");\n\nvar realpathFS = process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\n\nvar homedir = getHomedir();\nvar defaultPaths = function () {\n    return [\n        path.join(homedir, '.node_modules'),\n        path.join(homedir, '.node_libraries')\n    ];\n};\n\nvar defaultIsFile = function isFile(file) {\n    try {\n        var stat = fs.statSync(file, { throwIfNoEntry: false });\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return !!stat && (stat.isFile() || stat.isFIFO());\n};\n\nvar defaultIsDir = function isDirectory(dir) {\n    try {\n        var stat = fs.statSync(dir, { throwIfNoEntry: false });\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return !!stat && stat.isDirectory();\n};\n\nvar defaultRealpathSync = function realpathSync(x) {\n    try {\n        return realpathFS(x);\n    } catch (realpathErr) {\n        if (realpathErr.code !== 'ENOENT') {\n            throw realpathErr;\n        }\n    }\n    return x;\n};\n\nvar maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {\n    if (opts && opts.preserveSymlinks === false) {\n        return realpathSync(x);\n    }\n    return x;\n};\n\nvar defaultReadPackageSync = function defaultReadPackageSync(readFileSync, pkgfile) {\n    var body = readFileSync(pkgfile);\n    try {\n        var pkg = JSON.parse(body);\n        return pkg;\n    } catch (jsonErr) {}\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolveSync(x, options) {\n    if (typeof x !== 'string') {\n        throw new TypeError('Path must be a string.');\n    }\n    var opts = normalizeOptions(x, options);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var readFileSync = opts.readFileSync || fs.readFileSync;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var realpathSync = opts.realpathSync || defaultRealpathSync;\n    var readPackageSync = opts.readPackageSync || defaultReadPackageSync;\n    if (opts.readFileSync && opts.readPackageSync) {\n        throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');\n    }\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var includeCoreModules = opts.includeCoreModules !== false;\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || defaultPaths();\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);\n\n    if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n        var res = path.resolve(absoluteStart, x);\n        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m) return maybeRealpathSync(realpathSync, m, opts);\n    } else if (includeCoreModules && isCore(x)) {\n        return x;\n    } else {\n        var n = loadNodeModulesSync(x, absoluteStart);\n        if (n) return maybeRealpathSync(realpathSync, n, opts);\n    }\n\n    var err = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n\n    function loadAsFileSync(x) {\n        var pkg = loadpkg(path.dirname(x));\n\n        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {\n            var rfile = path.relative(pkg.dir, x);\n            var r = opts.pathFilter(pkg.pkg, x, rfile);\n            if (r) {\n                x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign\n            }\n        }\n\n        if (isFile(x)) {\n            return x;\n        }\n\n        for (var i = 0; i < extensions.length; i++) {\n            var file = x + extensions[i];\n            if (isFile(file)) {\n                return file;\n            }\n        }\n    }\n\n    function loadpkg(dir) {\n        if (dir === '' || dir === '/') return;\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return;\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return;\n\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');\n\n        if (!isFile(pkgfile)) {\n            return loadpkg(path.dirname(dir));\n        }\n\n        var pkg = readPackageSync(readFileSync, pkgfile);\n\n        if (pkg && opts.packageFilter) {\n            // v2 will pass pkgfile\n            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment\n        }\n\n        return { pkg: pkg, dir: dir };\n    }\n\n    function loadAsDirectorySync(x) {\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');\n        if (isFile(pkgfile)) {\n            try {\n                var pkg = readPackageSync(readFileSync, pkgfile);\n            } catch (e) {}\n\n            if (pkg && opts.packageFilter) {\n                // v2 will pass pkgfile\n                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment\n            }\n\n            if (pkg && pkg.main) {\n                if (typeof pkg.main !== 'string') {\n                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                    mainError.code = 'INVALID_PACKAGE_MAIN';\n                    throw mainError;\n                }\n                if (pkg.main === '.' || pkg.main === './') {\n                    pkg.main = 'index';\n                }\n                try {\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\n                    if (m) return m;\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n                    if (n) return n;\n                } catch (e) {}\n            }\n        }\n\n        return loadAsFileSync(path.join(x, '/index'));\n    }\n\n    function loadNodeModulesSync(x, start) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();\n\n        for (var i = 0; i < dirs.length; i++) {\n            var dir = dirs[i];\n            if (isDirectory(path.dirname(dir))) {\n                var m = loadAsFileSync(dir);\n                if (m) return m;\n                var n = loadAsDirectorySync(dir);\n                if (n) return n;\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/node_modules/resolve/lib/sync.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/common.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/cron/common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvY3Jvbi9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHJlcGxhY2VtZW50cyA9IFtcbiAgWydqYW51YXJ5JywgJzEnXSxcbiAgWydmZWJydWFyeScsICcyJ10sXG4gIFsnbWFyY2gnLCAnMyddLFxuICBbJ2FwcmlsJywgJzQnXSxcbiAgWydtYXknLCAnNSddLFxuICBbJ2p1bmUnLCAnNiddLFxuICBbJ2p1bHknLCAnNyddLFxuICBbJ2F1Z3VzdCcsICc4J10sXG4gIFsnc2VwdGVtYmVyJywgJzknXSxcbiAgWydvY3RvYmVyJywgJzEwJ10sXG4gIFsnbm92ZW1iZXInLCAnMTEnXSxcbiAgWydkZWNlbWJlcicsICcxMiddLFxuICBbJ2phbicsICcxJ10sXG4gIFsnZmViJywgJzInXSxcbiAgWydtYXInLCAnMyddLFxuICBbJ2FwcicsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW4nLCAnNiddLFxuICBbJ2p1bCcsICc3J10sXG4gIFsnYXVnJywgJzgnXSxcbiAgWydzZXAnLCAnOSddLFxuICBbJ29jdCcsICcxMCddLFxuICBbJ25vdicsICcxMSddLFxuICBbJ2RlYycsICcxMiddLFxuICBbJ3N1bmRheScsICcwJ10sXG4gIFsnbW9uZGF5JywgJzEnXSxcbiAgWyd0dWVzZGF5JywgJzInXSxcbiAgWyd3ZWRuZXNkYXknLCAnMyddLFxuICBbJ3RodXJzZGF5JywgJzQnXSxcbiAgWydmcmlkYXknLCAnNSddLFxuICBbJ3NhdHVyZGF5JywgJzYnXSxcbiAgWydzdW4nLCAnMCddLFxuICBbJ21vbicsICcxJ10sXG4gIFsndHVlJywgJzInXSxcbiAgWyd3ZWQnLCAnMyddLFxuICBbJ3RodScsICc0J10sXG4gIFsnZnJpJywgJzUnXSxcbiAgWydzYXQnLCAnNiddLFxuXTtcblxuLyoqXG4gKiBSZXBsYWNlcyBuYW1lcyBpbiBjcm9uIGV4cHJlc3Npb25zXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VDcm9uTmFtZXMoY3JvbkV4cHJlc3Npb24pIHtcbiAgcmV0dXJuIHJlcGxhY2VtZW50cy5yZWR1Y2UoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvclxuICAgIChhY2MsIFtuYW1lLCByZXBsYWNlbWVudF0pID0+IGFjYy5yZXBsYWNlKG5ldyBSZWdFeHAobmFtZSwgJ2dpJyksIHJlcGxhY2VtZW50KSxcbiAgICBjcm9uRXhwcmVzc2lvbixcbiAgKTtcbn1cblxuZXhwb3J0cy5yZXBsYWNlQ3Jvbk5hbWVzID0gcmVwbGFjZUNyb25OYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/cron.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/cron/cron.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywyRkFBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2Nyb24vY3Jvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuY29uc3QgRVJST1JfVEVYVCA9ICdBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mIENyb25Kb2Igb25seSBzdXBwb3J0cyBjcm9udGFiIHN0cmluZyc7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBjcm9uYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgeyBDcm9uSm9iIH0gZnJvbSAnY3Jvbic7XG4gKlxuICogY29uc3QgQ3JvbkpvYldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudENyb24oQ3JvbkpvYiwgJ215LWNyb24tam9iJyk7XG4gKlxuICogLy8gdXNlIHRoZSBjb25zdHJ1Y3RvclxuICogY29uc3Qgam9iID0gbmV3IENyb25Kb2JXaXRoQ2hlY2tJbignKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKlxuICogLy8gb3IgZnJvbVxuICogY29uc3Qgam9iID0gQ3JvbkpvYldpdGhDaGVja0luLmZyb20oeyBjcm9uVGltZTogJyogKiAqICogKicsIG9uVGljazogKCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRDcm9uKGxpYiwgbW9uaXRvclNsdWcpIHtcbiAgbGV0IGpvYlNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgY29uc3RydWN0KHRhcmdldCwgYXJncykge1xuICAgICAgY29uc3QgW2Nyb25UaW1lLCBvblRpY2ssIG9uQ29tcGxldGUsIHN0YXJ0LCB0aW1lWm9uZSwgLi4ucmVzdF0gPSBhcmdzO1xuXG4gICAgICBpZiAodHlwZW9mIGNyb25UaW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfVEVYVCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChqb2JTY2hlZHVsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIGpvYiBuYW1lZCAnJHttb25pdG9yU2x1Z30nIGhhcyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkYCk7XG4gICAgICB9XG5cbiAgICAgIGpvYlNjaGVkdWxlZCA9IHRydWU7XG5cbiAgICAgIGNvbnN0IGNyb25TdHJpbmcgPSBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhjcm9uVGltZSk7XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZFRpY2soY29udGV4dCwgb25Db21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhd2FpdCBvblRpY2soY29udGV4dCwgb25Db21wbGV0ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNyb25TdHJpbmcgfSxcbiAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lWm9uZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyB0YXJnZXQoY3JvblRpbWUsIG1vbml0b3JlZFRpY2ssIG9uQ29tcGxldGUsIHN0YXJ0LCB0aW1lWm9uZSwgLi4ucmVzdCk7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2Zyb20nKSB7XG4gICAgICAgIHJldHVybiAocGFyYW0pID0+IHtcbiAgICAgICAgICBjb25zdCB7IGNyb25UaW1lLCBvblRpY2ssIHRpbWVab25lIH0gPSBwYXJhbTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY3JvblRpbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGpvYlNjaGVkdWxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIGpvYiBuYW1lZCAnJHttb25pdG9yU2x1Z30nIGhhcyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgam9iU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGNvbnN0IGNyb25TdHJpbmcgPSBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhjcm9uVGltZSk7XG5cbiAgICAgICAgICBwYXJhbS5vblRpY2sgPSBhc3luYyAoY29udGV4dCwgb25Db21wbGV0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IG9uVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNyb25TdHJpbmcgfSxcbiAgICAgICAgICAgICAgICB0aW1lem9uZTogdGltZVpvbmUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5mcm9tKHBhcmFtKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudENyb24gPSBpbnN0cnVtZW50Q3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/cron/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGVBQWUsbUJBQU8sQ0FBQyx1RkFBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpR0FBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMseUdBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2Nyb24vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNyb24kMSA9IHJlcXVpcmUoJy4vY3Jvbi5qcycpO1xuY29uc3Qgbm9kZUNyb24gPSByZXF1aXJlKCcuL25vZGUtY3Jvbi5qcycpO1xuY29uc3Qgbm9kZVNjaGVkdWxlID0gcmVxdWlyZSgnLi9ub2RlLXNjaGVkdWxlLmpzJyk7XG5cbi8qKiBNZXRob2RzIHRvIGluc3RydW1lbnQgY3JvbiBsaWJyYXJpZXMgZm9yIFNlbnRyeSBjaGVjay1pbnMgKi9cbmNvbnN0IGNyb24gPSB7XG4gIGluc3RydW1lbnRDcm9uOiBjcm9uJDEuaW5zdHJ1bWVudENyb24sXG4gIGluc3RydW1lbnROb2RlQ3Jvbjogbm9kZUNyb24uaW5zdHJ1bWVudE5vZGVDcm9uLFxuICBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlOiBub2RlU2NoZWR1bGUuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSxcbn07XG5cbmV4cG9ydHMuY3JvbiA9IGNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-cron.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/cron/node-cron.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            const name = options?.name;\n            const timezone = options?.timezone;\n\n            if (!name) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            const monitoredCallback = async () => {\n              return core.withMonitor(\n                name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone,\n                },\n              );\n            };\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop ];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDJGQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG4vKipcbiAqIFdyYXBzIHRoZSBgbm9kZS1jcm9uYCBsaWJyYXJ5IHdpdGggY2hlY2staW4gbW9uaXRvcmluZy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L25vZGVcIjtcbiAqIGltcG9ydCAqIGFzIGNyb24gZnJvbSBcIm5vZGUtY3JvblwiO1xuICpcbiAqIGNvbnN0IGNyb25XaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnROb2RlQ3Jvbihjcm9uKTtcbiAqXG4gKiBjcm9uV2l0aENoZWNrSW4uc2NoZWR1bGUoXG4gKiAgIFwiKiAqICogKiAqXCIsXG4gKiAgICgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhcInJ1bm5pbmcgYSB0YXNrIGV2ZXJ5IG1pbnV0ZVwiKTtcbiAqICAgfSxcbiAqICAgeyBuYW1lOiBcIm15LWNyb24tam9iXCIgfSxcbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVDcm9uKGxpYikge1xuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnc2NoZWR1bGUnICYmIHRhcmdldC5zY2hlZHVsZSkge1xuICAgICAgICAvLyBXaGVuICdnZXQnIGlzIGNhbGxlZCBmb3Igc2NoZWR1bGUsIHJldHVybiBhIHByb3hpZWQgdmVyc2lvbiBvZiB0aGUgc2NoZWR1bGUgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQuc2NoZWR1bGUsIHtcbiAgICAgICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ0FycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBbZXhwcmVzc2lvbiwgY2FsbGJhY2ssIG9wdGlvbnNdID0gYXJnQXJyYXk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBvcHRpb25zPy5uYW1lO1xuICAgICAgICAgICAgY29uc3QgdGltZXpvbmUgPSBvcHRpb25zPy50aW1lem9uZTtcblxuICAgICAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcIm5hbWVcIiBmb3Igc2NoZWR1bGVkIGpvYi4gQSBuYW1lIGlzIHJlcXVpcmVkIGZvciBTZW50cnkgY2hlY2staW4gbW9uaXRvcmluZy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvcmVkQ2FsbGJhY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBjYXRjaCBoZXJlIGFuZCBjYXB0dXJlIHRoZSBleGNlcHRpb24gYmVjYXVzZSBub2RlLWNyb24gc3dhbGxvd3MgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZS1jcm9uL25vZGUtY3Jvbi9pc3N1ZXMvMzk5XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICAgIHRpbWV6b25lLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFtleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wIF07XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5vZGVDcm9uID0gaW5zdHJ1bWVudE5vZGVDcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await callback?.();\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywyRkFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBub2RlLXNjaGVkdWxlYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcbiAqXG4gKiBjb25zdCBzY2hlZHVsZVdpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShzY2hlZHVsZSk7XG4gKlxuICogY29uc3Qgam9iID0gc2NoZWR1bGVXaXRoQ2hlY2tJbi5zY2hlZHVsZUpvYignbXktY3Jvbi1qb2InLCAnKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlSm9iJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlSm9iLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW25hbWVPckV4cHJlc3Npb24sIGV4cHJlc3Npb25PckNhbGxiYWNrLCBjYWxsYmFja10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0eXBlb2YgbmFtZU9yRXhwcmVzc2lvbiAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGV4cHJlc3Npb25PckNhbGxiYWNrICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mICdub2RlLXNjaGVkdWxlJyByZXF1aXJlcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mICdzY2hlZHVsZUpvYicgdG8gYmUgYSBqb2IgbmFtZSBzdHJpbmcgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGEgY3JvbnRhYiBzdHJpbmdcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSBuYW1lT3JFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PckNhbGxiYWNrO1xuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgY2FsbGJhY2s/LigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFttb25pdG9yU2x1ZywgZXhwcmVzc2lvbiwgbW9uaXRvcmVkQ2FsbGJhY2tdKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlID0gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc2NoZWR1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/debug-build.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQXVDLElBQUksS0FBZ0I7O0FBRWhGLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst exports$1 = __webpack_require__(/*! ./logs/exports.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/exports.js\");\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./integrations/http/SentryHttpInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/node-fetch/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\");\nconst SentryNodeFetchInstrumentation = __webpack_require__(/*! ./integrations/node-fetch/SentryNodeFetchInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\");\nconst winston = __webpack_require__(/*! ./integrations/winston.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/winston.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/contextManager.js\");\nconst logger = __webpack_require__(/*! ./otel/logger.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/logger.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/index.js\");\nconst scope = __webpack_require__(/*! ./sdk/scope.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/scope.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/module.js\");\nconst addOriginToSpan = __webpack_require__(/*! ./utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ./utils/getRequestUrl.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\");\nconst commonjs = __webpack_require__(/*! ./utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ./utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./utils/createMissingInstrumentationContext.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\");\nconst envToBool = __webpack_require__(/*! ./utils/envToBool.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/client.js\");\nconst index$5 = __webpack_require__(/*! ./cron/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/cron/index.js\");\nconst nodeVersion = __webpack_require__(/*! ./nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n\n\nexports.logger = exports$1;\nexports.httpIntegration = index.httpIntegration;\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation.SentryHttpInstrumentation;\nexports.nativeNodeFetchIntegration = index$1.nativeNodeFetchIntegration;\nexports.SentryNodeFetchInstrumentation = SentryNodeFetchInstrumentation.SentryNodeFetchInstrumentation;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$2.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$3.anrIntegration;\nexports.disableAnrDetectionForCallback = index$3.disableAnrDetectionForCallback;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.createSentryWinstonTransport = winston.createSentryWinstonTransport;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.setupOpenTelemetryLogger = logger.setupOpenTelemetryLogger;\nexports.INSTRUMENTED = instrument.INSTRUMENTED;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.instrumentWhenWrapped = instrument.instrumentWhenWrapped;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.setIsolationScope = scope.setIsolationScope;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.addOriginToSpan = addOriginToSpan.addOriginToSpan;\nexports.getRequestUrl = getRequestUrl.getRequestUrl;\nexports.isCjs = commonjs.isCjs;\nexports.ensureIsWrapped = ensureIsWrapped.ensureIsWrapped;\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext.createMissingInstrumentationContext;\nexports.envToBool = envToBool.envToBool;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$5.cron;\nexports.NODE_VERSION = nodeVersion.NODE_VERSION;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyxrR0FBbUI7QUFDN0MsY0FBYyxtQkFBTyxDQUFDLHdIQUE4QjtBQUNwRCxrQ0FBa0MsbUJBQU8sQ0FBQyxnS0FBa0Q7QUFDNUYsZ0JBQWdCLG1CQUFPLENBQUMsb0lBQW9DO0FBQzVELHVDQUF1QyxtQkFBTyxDQUFDLHNMQUE2RDtBQUM1RyxnQkFBZ0IsbUJBQU8sQ0FBQyxrSEFBMkI7QUFDbkQscUJBQXFCLG1CQUFPLENBQUMsNEhBQWdDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDhJQUF5QztBQUNqRSxnQkFBZ0IsbUJBQU8sQ0FBQyxrSEFBMkI7QUFDbkQsNEJBQTRCLG1CQUFPLENBQUMsMElBQXVDO0FBQzNFLDZCQUE2QixtQkFBTyxDQUFDLDRJQUF3QztBQUM3RSxnQkFBZ0IsbUJBQU8sQ0FBQyxzSEFBNkI7QUFDckQsa0JBQWtCLG1CQUFPLENBQUMsc0hBQTZCO0FBQ3ZELHFCQUFxQixtQkFBTyxDQUFDLDRIQUFnQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxrSEFBMkI7QUFDbkQsdUJBQXVCLG1CQUFPLENBQUMsZ0hBQTBCO0FBQ3pELGVBQWUsbUJBQU8sQ0FBQyxnR0FBa0I7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsd0dBQXNCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLDRGQUFnQjtBQUN4QyxjQUFjLG1CQUFPLENBQUMsNEZBQWdCO0FBQ3RDLFlBQVksbUJBQU8sQ0FBQyx3RkFBYztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxrR0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsb0hBQTRCO0FBQzVELHNCQUFzQixtQkFBTyxDQUFDLGdIQUEwQjtBQUN4RCxpQkFBaUIsbUJBQU8sQ0FBQyxzR0FBcUI7QUFDOUMsd0JBQXdCLG1CQUFPLENBQUMsb0hBQTRCO0FBQzVELDRDQUE0QyxtQkFBTyxDQUFDLDRKQUFnRDtBQUNwRyxrQkFBa0IsbUJBQU8sQ0FBQyx3R0FBc0I7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLHdHQUFzQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMsOEZBQWlCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFpQjtBQUN6QyxvQkFBb0IsbUJBQU8sQ0FBQyxnR0FBa0I7QUFDOUMsc0JBQXNCLG1CQUFPLENBQUMsbUdBQXVCO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyxpRkFBYzs7OztBQUluQyxjQUFjO0FBQ2QsdUJBQXVCO0FBQ3ZCLGlDQUFpQztBQUNqQyxrQ0FBa0M7QUFDbEMsc0NBQXNDO0FBQ3RDLDhCQUE4QjtBQUM5QiwrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMsdUNBQXVDO0FBQ3ZDLHNCQUFzQjtBQUN0QixzQ0FBc0M7QUFDdEMsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUMvQixvQ0FBb0M7QUFDcEMsNEJBQTRCO0FBQzVCLGdDQUFnQztBQUNoQyxvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsWUFBWTtBQUNaLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIsbUNBQW1DO0FBQ25DLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckIsYUFBYTtBQUNiLHVCQUF1QjtBQUN2QiwyQ0FBMkM7QUFDM0MsaUJBQWlCO0FBQ2pCLHlCQUF5QjtBQUN6QixrQkFBa0I7QUFDbEIsWUFBWTtBQUNaLG9CQUFvQjtBQUNwQixtQ0FBbUM7QUFDbkMsbUJBQW1CO0FBQ25CLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsNkNBQTZDO0FBQzdDLHdDQUF3QztBQUN4QyxhQUFhO0FBQ2IscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLGFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsaUNBQWlDO0FBQ2pDLHFCQUFxQjtBQUNyQix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLGtCQUFrQjtBQUNsQiwrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQixhQUFhO0FBQ2IsbUNBQW1DO0FBQ25DLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qix5QkFBeUI7QUFDekIsbUJBQW1CO0FBQ25CLDBCQUEwQjtBQUMxQixpQ0FBaUM7QUFDakMsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixvQkFBb0I7QUFDcEIsZ0JBQWdCO0FBQ2hCLDhCQUE4QjtBQUM5QixnQ0FBZ0M7QUFDaEMsa0JBQWtCO0FBQ2xCLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YsMkJBQTJCO0FBQzNCLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsaUJBQWlCO0FBQ2pCLHVCQUF1QjtBQUN2QiwyQkFBMkI7QUFDM0IsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLCtCQUErQjtBQUMvQiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4vbG9ncy9leHBvcnRzLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2h0dHAvaW5kZXguanMnKTtcbmNvbnN0IFNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9odHRwL1NlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24uanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL2luZGV4LmpzJyk7XG5jb25zdCBTZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL1NlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbi5qcycpO1xuY29uc3QgY29udGV4dCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2NvbnRleHQuanMnKTtcbmNvbnN0IGNvbnRleHRsaW5lcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2NvbnRleHRsaW5lcy5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcycpO1xuY29uc3QgbW9kdWxlcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL21vZHVsZXMuanMnKTtcbmNvbnN0IG9udW5jYXVnaHRleGNlcHRpb24gPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9vbnVuY2F1Z2h0ZXhjZXB0aW9uLmpzJyk7XG5jb25zdCBvbnVuaGFuZGxlZHJlamVjdGlvbiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzJyk7XG5jb25zdCBpbmRleCQzID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvYW5yL2luZGV4LmpzJyk7XG5jb25zdCBzcG90bGlnaHQgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9zcG90bGlnaHQuanMnKTtcbmNvbnN0IGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcycpO1xuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3dpbnN0b24uanMnKTtcbmNvbnN0IGNvbnRleHRNYW5hZ2VyID0gcmVxdWlyZSgnLi9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL290ZWwvbG9nZ2VyLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGluZGV4JDQgPSByZXF1aXJlKCcuL3Nkay9pbmRleC5qcycpO1xuY29uc3Qgc2NvcGUgPSByZXF1aXJlKCcuL3Nkay9zY29wZS5qcycpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnLi9zZGsvYXBpLmpzJyk7XG5jb25zdCBtb2R1bGUkMSA9IHJlcXVpcmUoJy4vdXRpbHMvbW9kdWxlLmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuY29uc3QgZ2V0UmVxdWVzdFVybCA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0UmVxdWVzdFVybC5qcycpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL3V0aWxzL2NvbW1vbmpzLmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzJyk7XG5jb25zdCBlbnZUb0Jvb2wgPSByZXF1aXJlKCcuL3V0aWxzL2VudlRvQm9vbC5qcycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9odHRwLmpzJyk7XG5jb25zdCBjbGllbnQgPSByZXF1aXJlKCcuL3Nkay9jbGllbnQuanMnKTtcbmNvbnN0IGluZGV4JDUgPSByZXF1aXJlKCcuL2Nyb24vaW5kZXguanMnKTtcbmNvbnN0IG5vZGVWZXJzaW9uID0gcmVxdWlyZSgnLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5cblxuZXhwb3J0cy5sb2dnZXIgPSBleHBvcnRzJDE7XG5leHBvcnRzLmh0dHBJbnRlZ3JhdGlvbiA9IGluZGV4Lmh0dHBJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbiA9IFNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24uU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbjtcbmV4cG9ydHMubmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSBpbmRleCQxLm5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuZXhwb3J0cy5TZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24gPSBTZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24uU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uO1xuZXhwb3J0cy5ub2RlQ29udGV4dEludGVncmF0aW9uID0gY29udGV4dC5ub2RlQ29udGV4dEludGVncmF0aW9uO1xuZXhwb3J0cy5jb250ZXh0TGluZXNJbnRlZ3JhdGlvbiA9IGNvbnRleHRsaW5lcy5jb250ZXh0TGluZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IGluZGV4JDIubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubW9kdWxlc0ludGVncmF0aW9uID0gbW9kdWxlcy5tb2R1bGVzSW50ZWdyYXRpb247XG5leHBvcnRzLm9uVW5jYXVnaHRFeGNlcHRpb25JbnRlZ3JhdGlvbiA9IG9udW5jYXVnaHRleGNlcHRpb24ub25VbmNhdWdodEV4Y2VwdGlvbkludGVncmF0aW9uO1xuZXhwb3J0cy5vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gb251bmhhbmRsZWRyZWplY3Rpb24ub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbjtcbmV4cG9ydHMuYW5ySW50ZWdyYXRpb24gPSBpbmRleCQzLmFuckludGVncmF0aW9uO1xuZXhwb3J0cy5kaXNhYmxlQW5yRGV0ZWN0aW9uRm9yQ2FsbGJhY2sgPSBpbmRleCQzLmRpc2FibGVBbnJEZXRlY3Rpb25Gb3JDYWxsYmFjaztcbmV4cG9ydHMuc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBzcG90bGlnaHQuc3BvdGxpZ2h0SW50ZWdyYXRpb247XG5leHBvcnRzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uO1xuZXhwb3J0cy5jcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0ID0gd2luc3Rvbi5jcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0O1xuZXhwb3J0cy5TZW50cnlDb250ZXh0TWFuYWdlciA9IGNvbnRleHRNYW5hZ2VyLlNlbnRyeUNvbnRleHRNYW5hZ2VyO1xuZXhwb3J0cy5zZXR1cE9wZW5UZWxlbWV0cnlMb2dnZXIgPSBsb2dnZXIuc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyO1xuZXhwb3J0cy5JTlNUUlVNRU5URUQgPSBpbnN0cnVtZW50LklOU1RSVU1FTlRFRDtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZTtcbmV4cG9ydHMuaW5zdHJ1bWVudFdoZW5XcmFwcGVkID0gaW5zdHJ1bWVudC5pbnN0cnVtZW50V2hlbldyYXBwZWQ7XG5leHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBpbmRleCQ0LmdldERlZmF1bHRJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmluaXQgPSBpbmRleCQ0LmluaXQ7XG5leHBvcnRzLmluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyA9IGluZGV4JDQuaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zO1xuZXhwb3J0cy52YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cCA9IGluZGV4JDQudmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXA7XG5leHBvcnRzLnNldElzb2xhdGlvblNjb3BlID0gc2NvcGUuc2V0SXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmRlZmF1bHRTdGFja1BhcnNlciA9IGFwaS5kZWZhdWx0U3RhY2tQYXJzZXI7XG5leHBvcnRzLmdldFNlbnRyeVJlbGVhc2UgPSBhcGkuZ2V0U2VudHJ5UmVsZWFzZTtcbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gbW9kdWxlJDEuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuZXhwb3J0cy5hZGRPcmlnaW5Ub1NwYW4gPSBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuO1xuZXhwb3J0cy5nZXRSZXF1ZXN0VXJsID0gZ2V0UmVxdWVzdFVybC5nZXRSZXF1ZXN0VXJsO1xuZXhwb3J0cy5pc0NqcyA9IGNvbW1vbmpzLmlzQ2pzO1xuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQuZW5zdXJlSXNXcmFwcGVkO1xuZXhwb3J0cy5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0O1xuZXhwb3J0cy5lbnZUb0Jvb2wgPSBlbnZUb0Jvb2wuZW52VG9Cb29sO1xuZXhwb3J0cy5tYWtlTm9kZVRyYW5zcG9ydCA9IGh0dHAubWFrZU5vZGVUcmFuc3BvcnQ7XG5leHBvcnRzLk5vZGVDbGllbnQgPSBjbGllbnQuTm9kZUNsaWVudDtcbmV4cG9ydHMuY3JvbiA9IGluZGV4JDUuY3JvbjtcbmV4cG9ydHMuTk9ERV9WRVJTSU9OID0gbm9kZVZlcnNpb24uTk9ERV9WRVJTSU9OO1xuZXhwb3J0cy5zZXROb2RlQXN5bmNDb250ZXh0U3RyYXRlZ3kgPSBvcGVudGVsZW1ldHJ5LnNldE9wZW5UZWxlbWV0cnlDb250ZXh0QXN5bmNDb250ZXh0U3RyYXRlZ3k7XG5leHBvcnRzLlNES19WRVJTSU9OID0gY29yZS5TREtfVkVSU0lPTjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCA9IGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSBjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSA9IGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0U7XG5leHBvcnRzLlNjb3BlID0gY29yZS5TY29wZTtcbmV4cG9ydHMuYWRkQnJlYWRjcnVtYiA9IGNvcmUuYWRkQnJlYWRjcnVtYjtcbmV4cG9ydHMuYWRkRXZlbnRQcm9jZXNzb3IgPSBjb3JlLmFkZEV2ZW50UHJvY2Vzc29yO1xuZXhwb3J0cy5hZGRJbnRlZ3JhdGlvbiA9IGNvcmUuYWRkSW50ZWdyYXRpb247XG5leHBvcnRzLmNhcHR1cmVDaGVja0luID0gY29yZS5jYXB0dXJlQ2hlY2tJbjtcbmV4cG9ydHMuY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvcmUuY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuY2FwdHVyZUV2ZW50ID0gY29yZS5jYXB0dXJlRXZlbnQ7XG5leHBvcnRzLmNhcHR1cmVFeGNlcHRpb24gPSBjb3JlLmNhcHR1cmVFeGNlcHRpb247XG5leHBvcnRzLmNhcHR1cmVGZWVkYmFjayA9IGNvcmUuY2FwdHVyZUZlZWRiYWNrO1xuZXhwb3J0cy5jYXB0dXJlTWVzc2FnZSA9IGNvcmUuY2FwdHVyZU1lc3NhZ2U7XG5leHBvcnRzLmNhcHR1cmVTZXNzaW9uID0gY29yZS5jYXB0dXJlU2Vzc2lvbjtcbmV4cG9ydHMuY2xvc2UgPSBjb3JlLmNsb3NlO1xuZXhwb3J0cy5jb25zb2xlSW50ZWdyYXRpb24gPSBjb3JlLmNvbnNvbGVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbiA9IGNvcmUuY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuY29udGludWVUcmFjZSA9IGNvcmUuY29udGludWVUcmFjZTtcbmV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ID0gY29yZS5jcmVhdGVUcmFuc3BvcnQ7XG5leHBvcnRzLmRlZHVwZUludGVncmF0aW9uID0gY29yZS5kZWR1cGVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZW5kU2Vzc2lvbiA9IGNvcmUuZW5kU2Vzc2lvbjtcbmV4cG9ydHMuZXZlbnRGaWx0ZXJzSW50ZWdyYXRpb24gPSBjb3JlLmV2ZW50RmlsdGVyc0ludGVncmF0aW9uO1xuZXhwb3J0cy5leHRyYUVycm9yRGF0YUludGVncmF0aW9uID0gY29yZS5leHRyYUVycm9yRGF0YUludGVncmF0aW9uO1xuZXhwb3J0cy5mZWF0dXJlRmxhZ3NJbnRlZ3JhdGlvbiA9IGNvcmUuZmVhdHVyZUZsYWdzSW50ZWdyYXRpb247XG5leHBvcnRzLmZsdXNoID0gY29yZS5mbHVzaDtcbmV4cG9ydHMuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uID0gY29yZS5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb247XG5leHBvcnRzLmdldEFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW47XG5leHBvcnRzLmdldENsaWVudCA9IGNvcmUuZ2V0Q2xpZW50O1xuZXhwb3J0cy5nZXRDdXJyZW50U2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZTtcbmV4cG9ydHMuZ2V0R2xvYmFsU2NvcGUgPSBjb3JlLmdldEdsb2JhbFNjb3BlO1xuZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmdldFJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbjtcbmV4cG9ydHMuZ2V0U3BhbkRlc2NlbmRhbnRzID0gY29yZS5nZXRTcGFuRGVzY2VuZGFudHM7XG5leHBvcnRzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUgPSBjb3JlLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGU7XG5leHBvcnRzLmdldFRyYWNlRGF0YSA9IGNvcmUuZ2V0VHJhY2VEYXRhO1xuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gY29yZS5nZXRUcmFjZU1ldGFUYWdzO1xuZXhwb3J0cy5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uID0gY29yZS5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50U3VwYWJhc2VDbGllbnQgPSBjb3JlLmluc3RydW1lbnRTdXBhYmFzZUNsaWVudDtcbmV4cG9ydHMuaXNFbmFibGVkID0gY29yZS5pc0VuYWJsZWQ7XG5leHBvcnRzLmlzSW5pdGlhbGl6ZWQgPSBjb3JlLmlzSW5pdGlhbGl6ZWQ7XG5leHBvcnRzLmxhc3RFdmVudElkID0gY29yZS5sYXN0RXZlbnRJZDtcbmV4cG9ydHMubGlua2VkRXJyb3JzSW50ZWdyYXRpb24gPSBjb3JlLmxpbmtlZEVycm9yc0ludGVncmF0aW9uO1xuZXhwb3J0cy5wYXJhbWV0ZXJpemUgPSBjb3JlLnBhcmFtZXRlcml6ZTtcbmV4cG9ydHMucHJvZmlsZXIgPSBjb3JlLnByb2ZpbGVyO1xuZXhwb3J0cy5yZXF1ZXN0RGF0YUludGVncmF0aW9uID0gY29yZS5yZXF1ZXN0RGF0YUludGVncmF0aW9uO1xuZXhwb3J0cy5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSBjb3JlLnJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0Q29udGV4dCA9IGNvcmUuc2V0Q29udGV4dDtcbmV4cG9ydHMuc2V0Q3VycmVudENsaWVudCA9IGNvcmUuc2V0Q3VycmVudENsaWVudDtcbmV4cG9ydHMuc2V0RXh0cmEgPSBjb3JlLnNldEV4dHJhO1xuZXhwb3J0cy5zZXRFeHRyYXMgPSBjb3JlLnNldEV4dHJhcztcbmV4cG9ydHMuc2V0SHR0cFN0YXR1cyA9IGNvcmUuc2V0SHR0cFN0YXR1cztcbmV4cG9ydHMuc2V0TWVhc3VyZW1lbnQgPSBjb3JlLnNldE1lYXN1cmVtZW50O1xuZXhwb3J0cy5zZXRUYWcgPSBjb3JlLnNldFRhZztcbmV4cG9ydHMuc2V0VGFncyA9IGNvcmUuc2V0VGFncztcbmV4cG9ydHMuc2V0VXNlciA9IGNvcmUuc2V0VXNlcjtcbmV4cG9ydHMuc3BhblRvQmFnZ2FnZUhlYWRlciA9IGNvcmUuc3BhblRvQmFnZ2FnZUhlYWRlcjtcbmV4cG9ydHMuc3BhblRvSlNPTiA9IGNvcmUuc3BhblRvSlNPTjtcbmV4cG9ydHMuc3BhblRvVHJhY2VIZWFkZXIgPSBjb3JlLnNwYW5Ub1RyYWNlSGVhZGVyO1xuZXhwb3J0cy5zdGFydEluYWN0aXZlU3BhbiA9IGNvcmUuc3RhcnRJbmFjdGl2ZVNwYW47XG5leHBvcnRzLnN0YXJ0TmV3VHJhY2UgPSBjb3JlLnN0YXJ0TmV3VHJhY2U7XG5leHBvcnRzLnN0YXJ0U2Vzc2lvbiA9IGNvcmUuc3RhcnRTZXNzaW9uO1xuZXhwb3J0cy5zdGFydFNwYW4gPSBjb3JlLnN0YXJ0U3BhbjtcbmV4cG9ydHMuc3RhcnRTcGFuTWFudWFsID0gY29yZS5zdGFydFNwYW5NYW51YWw7XG5leHBvcnRzLnN1cGFiYXNlSW50ZWdyYXRpb24gPSBjb3JlLnN1cGFiYXNlSW50ZWdyYXRpb247XG5leHBvcnRzLnN1cHByZXNzVHJhY2luZyA9IGNvcmUuc3VwcHJlc3NUcmFjaW5nO1xuZXhwb3J0cy50cnBjTWlkZGxld2FyZSA9IGNvcmUudHJwY01pZGRsZXdhcmU7XG5leHBvcnRzLnVwZGF0ZVNwYW5OYW1lID0gY29yZS51cGRhdGVTcGFuTmFtZTtcbmV4cG9ydHMud2l0aEFjdGl2ZVNwYW4gPSBjb3JlLndpdGhBY3RpdmVTcGFuO1xuZXhwb3J0cy53aXRoSXNvbGF0aW9uU2NvcGUgPSBjb3JlLndpdGhJc29sYXRpb25TY29wZTtcbmV4cG9ydHMud2l0aE1vbml0b3IgPSBjb3JlLndpdGhNb25pdG9yO1xuZXhwb3J0cy53aXRoU2NvcGUgPSBjb3JlLndpdGhTY29wZTtcbmV4cG9ydHMud3JhcE1jcFNlcnZlcldpdGhTZW50cnkgPSBjb3JlLndyYXBNY3BTZXJ2ZXJXaXRoU2VudHJ5O1xuZXhwb3J0cy56b2RFcnJvcnNJbnRlZ3JhdGlvbiA9IGNvcmUuem9kRXJyb3JzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\n\nconst { isPromise } = node_util.types;\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.debug.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return event?.contexts || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\n// eslint-disable-next-line deprecation/deprecation\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    async setup(initClient) {\n      client = initClient;\n\n      if (options.captureStackTrace && (await debug.isDebuggerEnabled())) {\n        core.debug.warn('ANR captureStackTrace has been disabled because the debugger was already enabled');\n        options.captureStackTrace = false;\n      }\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Application Not Responding (ANR) integration for Node.js applications.\n *\n * @deprecated The ANR integration has been deprecated. Use `eventLoopBlockIntegration` from `@sentry/node-native` instead.\n *\n * Detects when the Node.js main thread event loop is blocked for more than the configured\n * threshold (5 seconds by default) and reports these as Sentry events.\n *\n * ANR detection uses a worker thread to monitor the event loop in the main app thread.\n * The main app thread sends a heartbeat message to the ANR worker thread every 50ms by default.\n * If the ANR worker does not receive a heartbeat message for the configured threshold duration,\n * it triggers an ANR event.\n *\n * - Node.js 16.17.0 or higher\n * - Only supported in the Node.js runtime (not browsers)\n * - Not supported for Node.js clusters\n *\n * Overhead should be minimal:\n * - Main thread: Only polling the ANR worker over IPC every 50ms\n * - Worker thread: Consumes around 10-20 MB of RAM\n * - When ANR detected: Brief pause in debugger to capture stack trace (negligible compared to the blocking)\n *\n * @example\n * ```javascript\n * Sentry.init({\n *   dsn: \"https://examplePublicKey@o0.ingest.sentry.io/0\",\n *   integrations: [\n *     Sentry.anrIntegration({\n *       anrThreshold: 5000,\n *       captureStackTrace: true,\n *       pollInterval: 50,\n *     }),\n *   ],\n * });\n * ```\n */\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  // eslint-disable-next-line deprecation/deprecation\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n  delete contexts.app?.app_memory;\n  delete contexts.device?.free_memory;\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.debug.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    maxAnrEvents: integrationOptions.maxAnrEvents || 1,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n    env: { ...process.env, NODE_OPTIONS: undefined },\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getIsolationScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages: core.getFilenameToDebugIdMap(initOptions.stackParser) });\n    } catch {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getIsolationScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\n/**\n * Temporarily disables ANR detection for the duration of a callback function.\n *\n * This utility function allows you to disable ANR detection during operations that\n * are expected to block the event loop, such as intensive computational tasks or\n * synchronous I/O operations.\n *\n * @deprecated The ANR integration has been deprecated. Use `eventLoopBlockIntegration` from `@sentry/node-native` instead.\n */\nfunction disableAnrDetectionForCallback(callback) {\n  const integration = core.getClient()?.getIntegrationByName(INTEGRATION_NAME) ;\n\n  if (!integration) {\n    return callback();\n  }\n\n  integration.stopWorker();\n\n  const result = callback();\n  if (isPromise(result)) {\n    return result.finally(() => integration.startWorker());\n  }\n\n  integration.startWorker();\n  return result;\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\nexports.disableAnrDetectionForCallback = disableAnrDetectionForCallback;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ChildProcess';\n\n/**\n * Capture breadcrumbs and events for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup() {\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker , options);\n        }\n      });\n    },\n  };\n});\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: code === 0 ? 'info' : 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker, options) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      if (options.captureWorkerErrors !== false) {\n        core.captureException(error, {\n          mechanism: { type: 'instrument', handled: false, data: { threadId: String(threadId) } },\n        });\n      } else {\n        core.addBreadcrumb({\n          category: 'worker_thread',\n          message: `Worker thread errored with '${error.message}'`,\n          level: 'error',\n          data: { threadId },\n        });\n      }\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrREFBa0QsY0FBYztBQUNoRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBNEMsOEJBQThCO0FBQ2pHLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUIsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkaWFnbm9zdGljc0NoYW5uZWwgPSByZXF1aXJlKCdub2RlOmRpYWdub3N0aWNzX2NoYW5uZWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDaGlsZFByb2Nlc3MnO1xuXG4vKipcbiAqIENhcHR1cmUgYnJlYWRjcnVtYnMgYW5kIGV2ZW50cyBmb3IgY2hpbGQgcHJvY2Vzc2VzIGFuZCB3b3JrZXIgdGhyZWFkcy5cbiAqL1xuY29uc3QgY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKCkge1xuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ2NoaWxkX3Byb2Nlc3MnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdwcm9jZXNzJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoZXZlbnQucHJvY2VzcyAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ3dvcmtlcl90aHJlYWRzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnd29ya2VyJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMoZXZlbnQud29ya2VyICwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZnVuY3Rpb24gY2FwdHVyZUNoaWxkUHJvY2Vzc0V2ZW50cyhjaGlsZCwgb3B0aW9ucykge1xuICBsZXQgaGFzRXhpdGVkID0gZmFsc2U7XG4gIGxldCBkYXRhO1xuXG4gIGNoaWxkXG4gICAgLm9uKCdzcGF3bicsICgpID0+IHtcbiAgICAgIC8vIFRoaXMgaXMgU2VudHJ5IGdldHRpbmcgbWFjT1MgT1MgY29udGV4dFxuICAgICAgaWYgKGNoaWxkLnNwYXduZmlsZSA9PT0gJy91c3IvYmluL3N3X3ZlcnMnKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGF0YSA9IHsgc3Bhd25maWxlOiBjaGlsZC5zcGF3bmZpbGUgfTtcbiAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVDaGlsZFByb2Nlc3NBcmdzKSB7XG4gICAgICAgIGRhdGEuc3Bhd25hcmdzID0gY2hpbGQuc3Bhd25hcmdzO1xuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoIWhhc0V4aXRlZCkge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIE9ubHkgbG9nIGZvciBub24temVybyBleGl0IGNvZGVzXG4gICAgICAgIGlmIChjb2RlICE9PSBudWxsICYmIGNvZGUgIT09IDApIHtcbiAgICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjaGlsZF9wcm9jZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nYCxcbiAgICAgICAgICAgIGxldmVsOiBjb2RlID09PSAwID8gJ2luZm8nIDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKHdvcmtlciwgb3B0aW9ucykge1xuICBsZXQgdGhyZWFkSWQ7XG5cbiAgd29ya2VyXG4gICAgLm9uKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICB0aHJlYWRJZCA9IHdvcmtlci50aHJlYWRJZDtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5jYXB0dXJlV29ya2VyRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICBtZWNoYW5pc206IHsgdHlwZTogJ2luc3RydW1lbnQnLCBoYW5kbGVkOiBmYWxzZSwgZGF0YTogeyB0aHJlYWRJZDogU3RyaW5nKHRocmVhZElkKSB9IH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ3dvcmtlcl90aHJlYWQnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBXb3JrZXIgdGhyZWFkIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGE6IHsgdGhyZWFkSWQgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydHMuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoaWxkUHJvY2Vzcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/context.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\n\nconst readFileAsync = node_util.promisify(node_fs.readFile);\nconst readDirAsync = node_util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    // TODO(v11): conditional with `sendDefaultPii` here?\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (contexts.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts.app?.free_memory && typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (contexts.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime();\n  } catch {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus() ;\n    const firstCpu = cpuInfo?.[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id]?.(contents);\n  } catch {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve() {\n      stream.destroy();\n      resolve();\n    }\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.debug.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (!exception.stacktrace?.frames?.length) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = frame?.filename;\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.debug.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace?.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.debug.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.debug.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/baggage.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\");\n\nconst INSTRUMENTATION_NAME = '@sentry/instrumentation-http';\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n\n   constructor(config = {}) {\n    super(INSTRUMENTATION_NAME, core.SDK_VERSION, config);\n\n    this._propagationDecisionMap = new core.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** @inheritdoc */\n   init() {\n    // We register handlers when either http or https is instrumented\n    // but we only want to register them once, whichever is loaded first\n    let hasRegisteredHandlers = false;\n\n    const onHttpServerRequestStart = ((_data) => {\n      const data = _data ;\n      this._patchServerEmitOnce(data.server);\n    }) ;\n\n    const onHttpClientResponseFinish = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, data.response);\n    }) ;\n\n    const onHttpClientRequestError = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, undefined);\n    }) ;\n\n    const onHttpClientRequestCreated = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestCreated(data.request);\n    }) ;\n\n    const wrap = (moduleExports) => {\n      if (hasRegisteredHandlers) {\n        return moduleExports;\n      }\n\n      hasRegisteredHandlers = true;\n\n      diagnosticsChannel.subscribe('http.server.request.start', onHttpServerRequestStart);\n      diagnosticsChannel.subscribe('http.client.response.finish', onHttpClientResponseFinish);\n\n      // When an error happens, we still want to have a breadcrumb\n      // In this case, `http.client.response.finish` is not triggered\n      diagnosticsChannel.subscribe('http.client.request.error', onHttpClientRequestError);\n\n      // NOTE: This channel only exist since Node 22\n      // Before that, outgoing requests are not patched\n      // and trace headers are not propagated, sadly.\n      if (this.getConfig().propagateTraceInOutgoingRequests) {\n        diagnosticsChannel.subscribe('http.client.request.created', onHttpClientRequestCreated);\n      }\n\n      return moduleExports;\n    };\n\n    const unwrap = () => {\n      diagnosticsChannel.unsubscribe('http.server.request.start', onHttpServerRequestStart);\n      diagnosticsChannel.unsubscribe('http.client.response.finish', onHttpClientResponseFinish);\n      diagnosticsChannel.unsubscribe('http.client.request.error', onHttpClientRequestError);\n      diagnosticsChannel.unsubscribe('http.client.request.created', onHttpClientRequestCreated);\n    };\n\n    /**\n     * You may be wondering why we register these diagnostics-channel listeners\n     * in such a convoluted way (as InstrumentationNodeModuleDefinition...)˝,\n     * instead of simply subscribing to the events once in here.\n     * The reason for this is timing semantics: These functions are called once the http or https module is loaded.\n     * If we'd subscribe before that, there seem to be conflicts with the OTEL native instrumentation in some scenarios,\n     * especially the \"import-on-top\" pattern of setting up ESM applications.\n     */\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('http', ['*'], wrap, unwrap),\n      new instrumentation.InstrumentationNodeModuleDefinition('https', ['*'], wrap, unwrap),\n    ];\n  }\n\n  /**\n   * This is triggered when an outgoing request finishes.\n   * It has access to the final request and response objects.\n   */\n   _onOutgoingRequestFinish(request, response) {\n    debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Handling finished outgoing request');\n\n    const _breadcrumbs = this.getConfig().breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    // Note: We cannot rely on the map being set by `_onOutgoingRequestCreated`, because that is not run in Node <22\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /**\n   * This is triggered when an outgoing request is created.\n   * It has access to the request object, and can mutate it before the request is sent.\n   */\n   _onOutgoingRequestCreated(request) {\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    // Add trace propagation headers\n    const url = getRequestUrl.getRequestUrl(request);\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    const tracePropagationTargets = core.getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? core.getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = addedHeaders;\n\n    // We do not want to overwrite existing header here, if it was already set\n    if (sentryTrace && !request.getHeader('sentry-trace')) {\n      try {\n        request.setHeader('sentry-trace', sentryTrace);\n        debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Added sentry-trace header to outgoing request');\n      } catch (error) {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.error(\n            INSTRUMENTATION_NAME,\n            'Failed to add sentry-trace header to outgoing request:',\n            core.isError(error) ? error.message : 'Unknown error',\n          );\n      }\n    }\n\n    if (baggage$1) {\n      // For baggage, we make sure to merge this into a possibly existing header\n      const newBaggage = baggage.mergeBaggageHeaders(request.getHeader('baggage'), baggage$1);\n      if (newBaggage) {\n        try {\n          request.setHeader('baggage', newBaggage);\n          debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Added baggage header to outgoing request');\n        } catch (error) {\n          debugBuild.DEBUG_BUILD &&\n            core.debug.error(\n              INSTRUMENTATION_NAME,\n              'Failed to add baggage header to outgoing request:',\n              core.isError(error) ? error.message : 'Unknown error',\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Patch a server.emit function to handle process isolation for incoming requests.\n   * This will only patch the emit function if it was not already patched.\n   */\n   _patchServerEmitOnce(server) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalEmit = server.emit;\n\n    // This means it was already patched, do nothing\n    if ((originalEmit ).__sentry_patched__) {\n      return;\n    }\n\n    debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Patching server.emit');\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n    const { ignoreIncomingRequestBody, maxIncomingRequestBodySize = 'medium' } = instrumentation.getConfig();\n\n    const newEmit = new Proxy(originalEmit, {\n      apply(target, thisArg, args) {\n        // Only traces request events\n        if (args[0] !== 'request') {\n          return target.apply(thisArg, args);\n        }\n\n        debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Handling incoming request');\n\n        const isolationScope = core.getIsolationScope().clone();\n        const request = args[1] ;\n        const response = args[2] ;\n\n        const normalizedRequest = core.httpRequestToRequestData(request);\n\n        // request.ip is non-standard but some frameworks set this\n        const ipAddress = (request ).ip || request.socket?.remoteAddress;\n\n        const url = request.url || '/';\n        if (!ignoreIncomingRequestBody?.(url, request) && maxIncomingRequestBodySize !== 'none') {\n          patchRequestToCaptureBody(request, isolationScope, maxIncomingRequestBodySize);\n        }\n\n        // Update the isolation scope, isolate this request\n        isolationScope.setSDKProcessingMetadata({ normalizedRequest, ipAddress });\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core.stripUrlQueryAndFragment(url);\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        if (instrumentation.getConfig().trackIncomingRequestsAsSessions !== false) {\n          recordRequestSession({\n            requestIsolationScope: isolationScope,\n            response,\n            sessionFlushingDelayMS: instrumentation.getConfig().sessionFlushingDelayMS ?? 60000,\n          });\n        }\n\n        return core.withIsolationScope(isolationScope, () => {\n          // Set a new propagationSpanId for this request\n          // We rely on the fact that `withIsolationScope()` will implicitly also fork the current scope\n          // This way we can save an \"unnecessary\" `withScope()` invocation\n          core.getCurrentScope().getPropagationContext().propagationSpanId = core.generateSpanId();\n\n          // If we don't want to extract the trace from the header, we can skip this\n          if (!instrumentation.getConfig().extractIncomingTraceFromHeader) {\n            return target.apply(thisArg, args);\n          }\n\n          const ctx = api.propagation.extract(api.context.active(), normalizedRequest.headers);\n          return api.context.with(ctx, () => {\n            return target.apply(thisArg, args);\n          });\n        });\n      },\n    });\n\n    core.addNonEnumerableProperty(newEmit, '__sentry_patched__', true);\n\n    server.emit = newEmit;\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core$1.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (!ignoreOutgoingRequests) {\n      return false;\n    }\n\n    const options = getRequestOptions(request);\n    const url = getRequestUrl.getRequestUrl(request);\n    return ignoreOutgoingRequests(url, options);\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response?.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core.parseUrl(url.toString());\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(\n  req,\n  isolationScope,\n  maxIncomingRequestBodySize,\n) {\n  let bodyByteLength = 0;\n  const chunks = [];\n\n  debugBuild.DEBUG_BUILD && core.debug.log(INSTRUMENTATION_NAME, 'Patching request.on');\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  const maxBodySize =\n    maxIncomingRequestBodySize === 'small'\n      ? 1000\n      : maxIncomingRequestBodySize === 'medium'\n        ? 10000\n        : MAX_BODY_BYTE_LENGTH;\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          debugBuild.DEBUG_BUILD &&\n            core.debug.log(INSTRUMENTATION_NAME, `Handling request.on(\"data\") with maximum body size of ${maxBodySize}b`);\n\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const chunk = args[0] ;\n                const bufferifiedChunk = Buffer.from(chunk);\n\n                if (bodyByteLength < maxBodySize) {\n                  chunks.push(bufferifiedChunk);\n                  bodyByteLength += bufferifiedChunk.byteLength;\n                } else if (debugBuild.DEBUG_BUILD) {\n                  core.debug.log(\n                    INSTRUMENTATION_NAME,\n                    `Dropping request body chunk because maximum body length of ${maxBodySize}b is exceeded.`,\n                  );\n                }\n              } catch (err) {\n                debugBuild.DEBUG_BUILD && core.debug.error(INSTRUMENTATION_NAME, 'Encountered error while storing body chunk.');\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    req.on('end', () => {\n      try {\n        const body = Buffer.concat(chunks).toString('utf-8');\n        if (body) {\n          // Using Buffer.byteLength here, because the body may contain characters that are not 1 byte long\n          const bodyByteLength = Buffer.byteLength(body, 'utf-8');\n          const truncatedBody =\n            bodyByteLength > maxBodySize\n              ? `${Buffer.from(body)\n                  .subarray(0, maxBodySize - 3)\n                  .toString('utf-8')}...`\n              : body;\n\n          isolationScope.setSDKProcessingMetadata({ normalizedRequest: { data: truncatedBody } });\n        }\n      } catch (error) {\n        if (debugBuild.DEBUG_BUILD) {\n          core.debug.error(INSTRUMENTATION_NAME, 'Error building captured request body', error);\n        }\n      }\n    });\n  } catch (error) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.debug.error(INSTRUMENTATION_NAME, 'Error patching request to capture body', error);\n    }\n  }\n}\n\nfunction getRequestOptions(request) {\n  return {\n    method: request.method,\n    protocol: request.protocol,\n    host: request.host,\n    hostname: request.host,\n    path: request.path,\n    headers: request.getHeaders(),\n  };\n}\n\n/**\n * Starts a session and tracks it in the context of a given isolation scope.\n * When the passed response is finished, the session is put into a task and is\n * aggregated with other sessions that may happen in a certain time window\n * (sessionFlushingDelayMs).\n *\n * The sessions are always aggregated by the client that is on the current scope\n * at the time of ending the response (if there is one).\n */\n// Exported for unit tests\nfunction recordRequestSession({\n  requestIsolationScope,\n  response,\n  sessionFlushingDelayMS,\n}\n\n) {\n  requestIsolationScope.setSDKProcessingMetadata({\n    requestSession: { status: 'ok' },\n  });\n  response.once('close', () => {\n    // We need to grab the client off the current scope instead of the isolation scope because the isolation scope doesn't hold any client out of the box.\n    const client = core.getClient();\n    const requestSession = requestIsolationScope.getScopeData().sdkProcessingMetadata.requestSession;\n\n    if (client && requestSession) {\n      debugBuild.DEBUG_BUILD && core.debug.log(`Recorded request session with status: ${requestSession.status}`);\n\n      const roundedDate = new Date();\n      roundedDate.setSeconds(0, 0);\n      const dateBucketKey = roundedDate.toISOString();\n\n      const existingClientAggregate = clientToRequestSessionAggregatesMap.get(client);\n      const bucket = existingClientAggregate?.[dateBucketKey] || { exited: 0, crashed: 0, errored: 0 };\n      bucket[({ ok: 'exited', crashed: 'crashed', errored: 'errored' } )[requestSession.status]]++;\n\n      if (existingClientAggregate) {\n        existingClientAggregate[dateBucketKey] = bucket;\n      } else {\n        debugBuild.DEBUG_BUILD && core.debug.log('Opened new request session aggregate.');\n        const newClientAggregate = { [dateBucketKey]: bucket };\n        clientToRequestSessionAggregatesMap.set(client, newClientAggregate);\n\n        const flushPendingClientAggregates = () => {\n          clearTimeout(timeout);\n          unregisterClientFlushHook();\n          clientToRequestSessionAggregatesMap.delete(client);\n\n          const aggregatePayload = Object.entries(newClientAggregate).map(\n            ([timestamp, value]) => ({\n              started: timestamp,\n              exited: value.exited,\n              errored: value.errored,\n              crashed: value.crashed,\n            }),\n          );\n          client.sendSession({ aggregates: aggregatePayload });\n        };\n\n        const unregisterClientFlushHook = client.on('flush', () => {\n          debugBuild.DEBUG_BUILD && core.debug.log('Sending request session aggregate due to client flush');\n          flushPendingClientAggregates();\n        });\n        const timeout = setTimeout(() => {\n          debugBuild.DEBUG_BUILD && core.debug.log('Sending request session aggregate due to flushing schedule');\n          flushPendingClientAggregates();\n        }, sessionFlushingDelayMS).unref();\n      }\n    }\n  });\n}\n\nconst clientToRequestSessionAggregatesMap = new Map\n\n();\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\nexports.recordRequestSession = recordRequestSession;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/http/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new SentryHttpInstrumentation.SentryHttpInstrumentation(options);\n  },\n);\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const dropSpansForIncomingRequestStatusCodes = options.dropSpansForIncomingRequestStatusCodes ?? [\n    [401, 404],\n    [300, 399],\n  ];\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentSentryHttp({\n        ...options,\n        extractIncomingTraceFromHeader: true,\n        propagateTraceInOutgoingRequests: true,\n      });\n    },\n    processEvent(event) {\n      // Drop transaction if it has a status code that should be ignored\n      if (event.type === 'transaction') {\n        const statusCode = event.contexts?.trace?.data?.['http.response.status_code'];\n        if (\n          typeof statusCode === 'number' &&\n          dropSpansForIncomingRequestStatusCodes.some(code => {\n            if (typeof code === 'number') {\n              return code === statusCode;\n            }\n\n            const [min, max] = code;\n            return statusCode >= min && statusCode <= max;\n          })\n        ) {\n          return null;\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\nexports.httpIntegration = httpIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsNEdBQTBCO0FBQ3JELGtDQUFrQyxtQkFBTyxDQUFDLDhJQUFnQzs7QUFFMUU7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IFNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1NlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIdHRwJztcblxuY29uc3QgaW5zdHJ1bWVudFNlbnRyeUh0dHAgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGAke0lOVEVHUkFUSU9OX05BTUV9LnNlbnRyeWAsXG4gIG9wdGlvbnMgPT4ge1xuICAgIHJldHVybiBuZXcgU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5TZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uKG9wdGlvbnMpO1xuICB9LFxuKTtcblxuLyoqXG4gKiBUaGUgaHR0cCBpbnRlZ3JhdGlvbiBpbnN0cnVtZW50cyBOb2RlJ3MgaW50ZXJuYWwgaHR0cCBhbmQgaHR0cHMgbW9kdWxlcy5cbiAqIEl0IGNyZWF0ZXMgYnJlYWRjcnVtYnMgZm9yIG91dGdvaW5nIEhUVFAgcmVxdWVzdHMgd2hpY2ggd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBzcGFuLlxuICovXG5jb25zdCBodHRwSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgZHJvcFNwYW5zRm9ySW5jb21pbmdSZXF1ZXN0U3RhdHVzQ29kZXMgPSBvcHRpb25zLmRyb3BTcGFuc0ZvckluY29taW5nUmVxdWVzdFN0YXR1c0NvZGVzID8/IFtcbiAgICBbNDAxLCA0MDRdLFxuICAgIFszMDAsIDM5OV0sXG4gIF07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRTZW50cnlIdHRwKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZXh0cmFjdEluY29taW5nVHJhY2VGcm9tSGVhZGVyOiB0cnVlLFxuICAgICAgICBwcm9wYWdhdGVUcmFjZUluT3V0Z29pbmdSZXF1ZXN0czogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICAvLyBEcm9wIHRyYW5zYWN0aW9uIGlmIGl0IGhhcyBhIHN0YXR1cyBjb2RlIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICAgIGlmIChldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSBldmVudC5jb250ZXh0cz8udHJhY2U/LmRhdGE/LlsnaHR0cC5yZXNwb25zZS5zdGF0dXNfY29kZSddO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHN0YXR1c0NvZGUgPT09ICdudW1iZXInICYmXG4gICAgICAgICAgZHJvcFNwYW5zRm9ySW5jb21pbmdSZXF1ZXN0U3RhdHVzQ29kZXMuc29tZShjb2RlID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvZGUgPT09IHN0YXR1c0NvZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IFttaW4sIG1heF0gPSBjb2RlO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1c0NvZGUgPj0gbWluICYmIHN0YXR1c0NvZGUgPD0gbWF4O1xuICAgICAgICAgIH0pXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICB9O1xufSk7XG5cbmV4cG9ydHMuaHR0cEludGVncmF0aW9uID0gaHR0cEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || `Object.${a}` === b || a === `Object.${b}` || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixFQUFFLDJCQUEyQixFQUFFO0FBQzdEOztBQUVBLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGUga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGxvY2FsIHZhcmlhYmxlcyBvbiB0aGUgZXJyb3Igb2JqZWN0LlxuICovXG5jb25zdCBMT0NBTF9WQVJJQUJMRVNfS0VZID0gJ19fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmF0ZSBsaW1pdGVyIHRoYXQgd2lsbCBjYWxsIHRoZSBkaXNhYmxlIGNhbGxiYWNrIHdoZW4gdGhlIHJhdGUgbGltaXQgaXMgcmVhY2hlZCBhbmQgdGhlIGVuYWJsZSBjYWxsYmFja1xuICogd2hlbiBhIHRpbWVvdXQgaGFzIG9jY3VycmVkLlxuICogQHBhcmFtIG1heFBlclNlY29uZCBNYXhpbXVtIG51bWJlciBvZiBjYWxscyBwZXIgc2Vjb25kXG4gKiBAcGFyYW0gZW5hYmxlIENhbGxiYWNrIHRvIGVuYWJsZSBjYXB0dXJlXG4gKiBAcGFyYW0gZGlzYWJsZSBDYWxsYmFjayB0byBkaXNhYmxlIGNhcHR1cmVcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2FsbCB0byBpbmNyZW1lbnQgdGhlIHJhdGUgbGltaXRlciBjb3VudFxuICovXG5mdW5jdGlvbiBjcmVhdGVSYXRlTGltaXRlcihcbiAgbWF4UGVyU2Vjb25kLFxuICBlbmFibGUsXG4gIGRpc2FibGUsXG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHJldHJ5U2Vjb25kcyA9IDU7XG4gIGxldCBkaXNhYmxlZFRpbWVvdXQgPSAwO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICBpZiAoY291bnQgPiBtYXhQZXJTZWNvbmQpIHtcbiAgICAgICAgcmV0cnlTZWNvbmRzICo9IDI7XG4gICAgICAgIGRpc2FibGUocmV0cnlTZWNvbmRzKTtcblxuICAgICAgICAvLyBDYXAgYXQgb25lIGRheVxuICAgICAgICBpZiAocmV0cnlTZWNvbmRzID4gODY0MDApIHtcbiAgICAgICAgICByZXRyeVNlY29uZHMgPSA4NjQwMDtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlZFRpbWVvdXQgPSByZXRyeVNlY29uZHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZW91dCAtPSAxO1xuXG4gICAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgfSwgMTAwMCkudW5yZWYoKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvdW50ICs9IDE7XG4gIH07XG59XG5cbi8vIEFkZCB0eXBlcyBmb3IgdGhlIGV4Y2VwdGlvbiBldmVudCBkYXRhXG5cbi8qKiBDb3VsZCB0aGlzIGJlIGFuIGFub255bW91cyBmdW5jdGlvbj8gKi9cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCAmJiAobmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PT0gJz8nIHx8IG5hbWUgPT09ICc8YW5vbnltb3VzPicpO1xufVxuXG4vKiogRG8gdGhlIGZ1bmN0aW9uIG5hbWVzIGFwcGVhciB0byBtYXRjaD8gKi9cbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZXNNYXRjaChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiIHx8IGBPYmplY3QuJHthfWAgPT09IGIgfHwgYSA9PT0gYE9iamVjdC4ke2J9YCB8fCAoaXNBbm9ueW1vdXMoYSkgJiYgaXNBbm9ueW1vdXMoYikpO1xufVxuXG5leHBvcnRzLkxPQ0FMX1ZBUklBQkxFU19LRVkgPSBMT0NBTF9WQVJJQUJMRVNfS0VZO1xuZXhwb3J0cy5jcmVhdGVSYXRlTGltaXRlciA9IGNyZWF0ZVJhdGVMaW1pdGVyO1xuZXhwb3J0cy5mdW5jdGlvbk5hbWVzTWF0Y2ggPSBmdW5jdGlvbk5hbWVzTWF0Y2g7XG5leHBvcnRzLmlzQW5vbnltb3VzID0gaXNBbm9ueW1vdXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLG9HQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxpSkFBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsK0lBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNBc3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLWFzeW5jLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc1N5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1zeW5jLmpzJyk7XG5cbmNvbnN0IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiBub2RlVmVyc2lvbi5OT0RFX1ZFUlNJT04ubWFqb3IgPCAxOSA/IGxvY2FsVmFyaWFibGVzU3luYy5sb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbihvcHRpb25zKSA6IGxvY2FsVmFyaWFibGVzQXN5bmMubG9jYWxWYXJpYWJsZXNBc3luY0ludGVncmF0aW9uKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5sb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZS1jb3JlIDEwLjMuMCAoYmQ4Y2NlMSkgfCBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0ICovCmltcG9ydHtTZXNzaW9uIGFzIGV9ZnJvbSJub2RlOmluc3BlY3Rvci9wcm9taXNlcyI7aW1wb3J0e3dvcmtlckRhdGEgYXMgdH1mcm9tIm5vZGU6d29ya2VyX3RocmVhZHMiO2NvbnN0IG49Z2xvYmFsVGhpcyxpPXt9O2NvbnN0IG89Il9fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fIjtjb25zdCBhPXQ7ZnVuY3Rpb24gcyguLi5lKXthLmRlYnVnJiZmdW5jdGlvbihlKXtpZighKCJjb25zb2xlImluIG4pKXJldHVybiBlKCk7Y29uc3QgdD1uLmNvbnNvbGUsbz17fSxhPU9iamVjdC5rZXlzKGkpO2EuZm9yRWFjaChlPT57Y29uc3Qgbj1pW2VdO29bZV09dFtlXSx0W2VdPW59KTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2EuZm9yRWFjaChlPT57dFtlXT1vW2VdfSl9fSgoKT0+Y29uc29sZS5sb2coIltMb2NhbFZhcmlhYmxlcyBXb3JrZXJdIiwuLi5lKSl9YXN5bmMgZnVuY3Rpb24gYyhlLHQsbixpKXtjb25zdCBvPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7aVtuXT1vLnJlc3VsdC5maWx0ZXIoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkuc29ydCgoZSx0KT0+cGFyc2VJbnQoZS5uYW1lLDEwKS1wYXJzZUludCh0Lm5hbWUsMTApKS5tYXAoZT0+ZS52YWx1ZT8udmFsdWUpfWFzeW5jIGZ1bmN0aW9uIHIoZSx0LG4saSl7Y29uc3Qgbz1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pO2lbbl09by5yZXN1bHQubWFwKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKS5yZWR1Y2UoKGUsW3Qsbl0pPT4oZVt0XT1uLGUpLHt9KX1mdW5jdGlvbiB1KGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGwoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksaT17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0LnZhbHVlPy5vYmplY3RJZCYmIkFycmF5Ij09PXQudmFsdWUuY2xhc3NOYW1lKXtjb25zdCBuPXQudmFsdWUub2JqZWN0SWQ7YXdhaXQgYyhlLG4sdC5uYW1lLGkpfWVsc2UgaWYodC52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dC52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCByKGUsbix0Lm5hbWUsaSl9ZWxzZSB0LnZhbHVlJiZ1KHQsaSk7cmV0dXJuIGl9bGV0IGY7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxzKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKT0+e249ITF9KSx0Lm9uKCJEZWJ1Z2dlci5wYXVzZWQiLGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6aX0pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYoZj8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgYT1bXTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTpvLHRoaXM6c309aVt0XSxjPW4uZmluZChlPT4ibG9jYWwiPT09ZS50eXBlKSxyPSJnbG9iYWwiIT09cy5jbGFzc05hbWUmJnMuY2xhc3NOYW1lP2Ake3MuY2xhc3NOYW1lfS4ke299YDpvO2lmKHZvaWQgMD09PWM/Lm9iamVjdC5vYmplY3RJZClhW3RdPXtmdW5jdGlvbjpyfTtlbHNle2NvbnN0IG49YXdhaXQgbChlLGMub2JqZWN0Lm9iamVjdElkKTthW3RdPXtmdW5jdGlvbjpyLHZhcnM6bn19fWF3YWl0IGUucG9zdCgiUnVudGltZS5jYWxsRnVuY3Rpb25PbiIse2Z1bmN0aW9uRGVjbGFyYXRpb246YGZ1bmN0aW9uKCkgeyB0aGlzLiR7b30gPSB0aGlzLiR7b30gfHwgJHtKU09OLnN0cmluZ2lmeShhKX07IH1gLHNpbGVudDohMCxvYmplY3RJZDpufSksYXdhaXQgZS5wb3N0KCJSdW50aW1lLnJlbGVhc2VPYmplY3QiLHtvYmplY3RJZDpufSl9KHQsZS5wYXJhbXMpLnRoZW4oYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9LGFzeW5jIGU9PntuJiZhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnJlc3VtZSIpfSl9KSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLmVuYWJsZSIpO2NvbnN0IGk9ITEhPT1hLmNhcHR1cmVBbGxFeGNlcHRpb25zO2lmKGF3YWl0IHQucG9zdCgiRGVidWdnZXIuc2V0UGF1c2VPbkV4Y2VwdGlvbnMiLHtzdGF0ZTppPyJhbGwiOiJ1bmNhdWdodCJ9KSxpKXtjb25zdCBlPWEubWF4RXhjZXB0aW9uc1BlclNlY29uZHx8NTA7Zj1mdW5jdGlvbihlLHQsbil7bGV0IGk9MCxvPTUsYT0wO3JldHVybiBzZXRJbnRlcnZhbCgoKT0+ezA9PT1hP2k+ZSYmKG8qPTIsbihvKSxvPjg2NDAwJiYobz04NjQwMCksYT1vKTooYS09MSwwPT09YSYmdCgpKSxpPTB9LDFlMykudW5yZWYoKSwoKT0+e2krPTF9fShlLGFzeW5jKCk9PntzKCJSYXRlLWxpbWl0IGxpZnRlZC4iKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6ImFsbCJ9KX0sYXN5bmMgZT0+e3MoYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSl9fSkoKS5jYXRjaChlPT57cygiRmFpbGVkIHRvIHN0YXJ0IGRlYnVnZ2VyIixlKX0pLHNldEludGVydmFsKCgpPT57fSwxZTQpOw==';\n\nfunction log(...args) {\n  core.debug.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of event.exception?.values || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n      env: { ...process.env, NODE_OPTIONS: undefined },\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    async setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.debug.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.debug.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.debug.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.debug.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (prop.value?.objectId && prop.value.className === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (prop.value?.objectId && prop.value.className === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (prop.value) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => v.value?.value);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, v.value?.value])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(exception.stacktrace?.frames);\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of event.exception?.values || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    async setupOnce() {\n      const client = core.getClient();\n      const clientOptions = client?.getOptions();\n\n      if (!clientOptions?.includeLocalVariables) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.debug.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.debug.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            rateLimiter?.();\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, data.description);\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (localScope?.object.objectId === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  session.getLocalVariables(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  }),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.debug.log('Local variables rate-limit lifted.');\n                session.setPauseOnExceptions(true);\n              },\n              seconds => {\n                core.debug.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                session.setPauseOnExceptions(false);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.debug.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/modules.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/modules.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\n/**\n * `__SENTRY_SERVER_MODULES__` can be replaced at build time with the modules loaded by the server.\n * Right now, we leverage this in Next.js to circumvent the problem that we do not get access to these things at runtime.\n */\nconst SERVER_MODULES = typeof {\"@dnd-kit/core\":\"^6.3.1\",\"@dnd-kit/sortable\":\"^10.0.0\",\"@dnd-kit/utilities\":\"^3.2.2\",\"@hookform/resolvers\":\"^5.1.1\",\"@mdxeditor/editor\":\"^3.39.1\",\"@prisma/client\":\"^6.11.1\",\"@radix-ui/react-accordion\":\"^1.2.11\",\"@radix-ui/react-alert-dialog\":\"^1.1.14\",\"@radix-ui/react-aspect-ratio\":\"^1.1.7\",\"@radix-ui/react-avatar\":\"^1.1.10\",\"@radix-ui/react-checkbox\":\"^1.3.2\",\"@radix-ui/react-collapsible\":\"^1.1.11\",\"@radix-ui/react-context-menu\":\"^2.2.15\",\"@radix-ui/react-dialog\":\"^1.1.14\",\"@radix-ui/react-dropdown-menu\":\"^2.1.15\",\"@radix-ui/react-hover-card\":\"^1.1.14\",\"@radix-ui/react-label\":\"^2.1.7\",\"@radix-ui/react-menubar\":\"^1.1.15\",\"@radix-ui/react-navigation-menu\":\"^1.2.13\",\"@radix-ui/react-popover\":\"^1.1.14\",\"@radix-ui/react-progress\":\"^1.1.7\",\"@radix-ui/react-radio-group\":\"^1.3.7\",\"@radix-ui/react-scroll-area\":\"^1.2.9\",\"@radix-ui/react-select\":\"^2.2.5\",\"@radix-ui/react-separator\":\"^1.1.7\",\"@radix-ui/react-slider\":\"^1.3.5\",\"@radix-ui/react-slot\":\"^1.2.3\",\"@radix-ui/react-switch\":\"^1.2.5\",\"@radix-ui/react-tabs\":\"^1.1.12\",\"@radix-ui/react-toast\":\"^1.2.14\",\"@radix-ui/react-toggle\":\"^1.1.9\",\"@radix-ui/react-toggle-group\":\"^1.1.10\",\"@radix-ui/react-tooltip\":\"^1.2.7\",\"@reactuses/core\":\"^6.0.5\",\"@sentry/nextjs\":\"^10.3.0\",\"@supabase/ssr\":\"^0.6.1\",\"@supabase/supabase-js\":\"^2.54.0\",\"@tailwindcss/postcss\":\"^4\",\"@tanstack/react-query\":\"^5.82.0\",\"@tanstack/react-table\":\"^8.21.3\",\"@vercel/analytics\":\"^1.5.0\",\"axios\":\"^1.10.0\",\"class-variance-authority\":\"^0.7.1\",\"clsx\":\"^2.1.1\",\"cmdk\":\"^1.1.1\",\"date-fns\":\"^4.1.0\",\"embla-carousel-react\":\"^8.6.0\",\"framer-motion\":\"^12.23.2\",\"gray-matter\":\"^4.0.3\",\"input-otp\":\"^1.4.2\",\"lucide-react\":\"^0.525.0\",\"next\":\"15.3.5\",\"next-auth\":\"^4.24.11\",\"next-intl\":\"^4.3.4\",\"next-themes\":\"^0.4.6\",\"prisma\":\"^6.11.1\",\"react\":\"^19.0.0\",\"react-day-picker\":\"^9.8.0\",\"react-dom\":\"^19.0.0\",\"react-hook-form\":\"^7.60.0\",\"react-markdown\":\"^10.1.0\",\"react-resizable-panels\":\"^3.0.3\",\"react-syntax-highlighter\":\"^15.6.1\",\"recharts\":\"^2.15.4\",\"remark\":\"^15.0.1\",\"remark-html\":\"^16.0.1\",\"sharp\":\"^0.34.3\",\"socket.io\":\"^4.8.1\",\"socket.io-client\":\"^4.8.1\",\"sonner\":\"^2.0.6\",\"tailwind-merge\":\"^3.3.1\",\"tailwindcss\":\"^4\",\"tailwindcss-animate\":\"^1.0.7\",\"tsx\":\"^4.20.3\",\"uuid\":\"^11.1.0\",\"vaul\":\"^1.1.2\",\"zod\":\"^4.0.16\",\"zustand\":\"^5.0.6\",\"@cypress/code-coverage\":\"^3.14.5\",\"@eslint/eslintrc\":\"^3\",\"@playwright/test\":\"^1.54.2\",\"@testing-library/jest-dom\":\"^6.6.4\",\"@testing-library/react\":\"^16.3.0\",\"@types/jest\":\"^30.0.0\",\"@types/node\":\"^20\",\"@types/react\":\"^19\",\"@types/react-dom\":\"^19\",\"cypress\":\"^14.5.4\",\"eslint\":\"^9.33.0\",\"eslint-config-next\":\"15.3.5\",\"identity-obj-proxy\":\"^3.0.0\",\"jest\":\"^30.0.5\",\"jest-environment-jsdom\":\"^30.0.5\",\"nodemon\":\"^3.1.10\",\"puppeteer\":\"^24.16.0\",\"tw-animate-css\":\"^1.3.5\",\"typescript\":\"^5\"} === 'undefined' ? {} : {\"@dnd-kit/core\":\"^6.3.1\",\"@dnd-kit/sortable\":\"^10.0.0\",\"@dnd-kit/utilities\":\"^3.2.2\",\"@hookform/resolvers\":\"^5.1.1\",\"@mdxeditor/editor\":\"^3.39.1\",\"@prisma/client\":\"^6.11.1\",\"@radix-ui/react-accordion\":\"^1.2.11\",\"@radix-ui/react-alert-dialog\":\"^1.1.14\",\"@radix-ui/react-aspect-ratio\":\"^1.1.7\",\"@radix-ui/react-avatar\":\"^1.1.10\",\"@radix-ui/react-checkbox\":\"^1.3.2\",\"@radix-ui/react-collapsible\":\"^1.1.11\",\"@radix-ui/react-context-menu\":\"^2.2.15\",\"@radix-ui/react-dialog\":\"^1.1.14\",\"@radix-ui/react-dropdown-menu\":\"^2.1.15\",\"@radix-ui/react-hover-card\":\"^1.1.14\",\"@radix-ui/react-label\":\"^2.1.7\",\"@radix-ui/react-menubar\":\"^1.1.15\",\"@radix-ui/react-navigation-menu\":\"^1.2.13\",\"@radix-ui/react-popover\":\"^1.1.14\",\"@radix-ui/react-progress\":\"^1.1.7\",\"@radix-ui/react-radio-group\":\"^1.3.7\",\"@radix-ui/react-scroll-area\":\"^1.2.9\",\"@radix-ui/react-select\":\"^2.2.5\",\"@radix-ui/react-separator\":\"^1.1.7\",\"@radix-ui/react-slider\":\"^1.3.5\",\"@radix-ui/react-slot\":\"^1.2.3\",\"@radix-ui/react-switch\":\"^1.2.5\",\"@radix-ui/react-tabs\":\"^1.1.12\",\"@radix-ui/react-toast\":\"^1.2.14\",\"@radix-ui/react-toggle\":\"^1.1.9\",\"@radix-ui/react-toggle-group\":\"^1.1.10\",\"@radix-ui/react-tooltip\":\"^1.2.7\",\"@reactuses/core\":\"^6.0.5\",\"@sentry/nextjs\":\"^10.3.0\",\"@supabase/ssr\":\"^0.6.1\",\"@supabase/supabase-js\":\"^2.54.0\",\"@tailwindcss/postcss\":\"^4\",\"@tanstack/react-query\":\"^5.82.0\",\"@tanstack/react-table\":\"^8.21.3\",\"@vercel/analytics\":\"^1.5.0\",\"axios\":\"^1.10.0\",\"class-variance-authority\":\"^0.7.1\",\"clsx\":\"^2.1.1\",\"cmdk\":\"^1.1.1\",\"date-fns\":\"^4.1.0\",\"embla-carousel-react\":\"^8.6.0\",\"framer-motion\":\"^12.23.2\",\"gray-matter\":\"^4.0.3\",\"input-otp\":\"^1.4.2\",\"lucide-react\":\"^0.525.0\",\"next\":\"15.3.5\",\"next-auth\":\"^4.24.11\",\"next-intl\":\"^4.3.4\",\"next-themes\":\"^0.4.6\",\"prisma\":\"^6.11.1\",\"react\":\"^19.0.0\",\"react-day-picker\":\"^9.8.0\",\"react-dom\":\"^19.0.0\",\"react-hook-form\":\"^7.60.0\",\"react-markdown\":\"^10.1.0\",\"react-resizable-panels\":\"^3.0.3\",\"react-syntax-highlighter\":\"^15.6.1\",\"recharts\":\"^2.15.4\",\"remark\":\"^15.0.1\",\"remark-html\":\"^16.0.1\",\"sharp\":\"^0.34.3\",\"socket.io\":\"^4.8.1\",\"socket.io-client\":\"^4.8.1\",\"sonner\":\"^2.0.6\",\"tailwind-merge\":\"^3.3.1\",\"tailwindcss\":\"^4\",\"tailwindcss-animate\":\"^1.0.7\",\"tsx\":\"^4.20.3\",\"uuid\":\"^11.1.0\",\"vaul\":\"^1.1.2\",\"zod\":\"^4.0.16\",\"zustand\":\"^5.0.6\",\"@cypress/code-coverage\":\"^3.14.5\",\"@eslint/eslintrc\":\"^3\",\"@playwright/test\":\"^1.54.2\",\"@testing-library/jest-dom\":\"^6.6.4\",\"@testing-library/react\":\"^16.3.0\",\"@types/jest\":\"^30.0.0\",\"@types/node\":\"^20\",\"@types/react\":\"^19\",\"@types/react-dom\":\"^19\",\"cypress\":\"^14.5.4\",\"eslint\":\"^9.33.0\",\"eslint-config-next\":\"15.3.5\",\"identity-obj-proxy\":\"^3.0.0\",\"jest\":\"^30.0.5\",\"jest-environment-jsdom\":\"^30.0.5\",\"nodemon\":\"^3.1.10\",\"puppeteer\":\"^24.16.0\",\"tw-animate-css\":\"^1.3.5\",\"typescript\":\"^5\"};\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n    getModules: _getModules,\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n * For this, multiple sources are used:\n * - They can be injected at build time into the __SENTRY_SERVER_MODULES__ variable (e.g. in Next.js)\n * - They are extracted from the dependencies & devDependencies in the package.json file\n * - They are extracted from the require.cache (CJS only)\n */\nconst modulesIntegration = _modulesIntegration;\n\nfunction getRequireCachePaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules() {\n  return {\n    ...SERVER_MODULES,\n    ...getModulesFromPackageJson(),\n    ...(commonjs.isCjs() ? collectRequireModules() : {}),\n  };\n}\n\n/** Extract information about package.json modules from require.cache */\nfunction collectRequireModules() {\n  const mainPaths = __webpack_require__.c[__webpack_require__.s]?.paths || [];\n  const paths = getRequireCachePaths();\n\n  // We start with the modules from package.json (if possible)\n  // These may be overwritten by more specific versions from the require.cache\n  const infos = {};\n  const seen = new Set();\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen.has(orig)) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen.add(orig);\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nfunction getPackageJson() {\n  try {\n    const filePath = node_path.join(process.cwd(), 'package.json');\n    const packageJson = JSON.parse(node_fs.readFileSync(filePath, 'utf8')) ;\n\n    return packageJson;\n  } catch {\n    return {};\n  }\n}\n\nfunction getModulesFromPackageJson() {\n  const packageJson = getPackageJson();\n\n  return {\n    ...packageJson.dependencies,\n    ...packageJson.devDependencies,\n  };\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyx1R0FBc0I7O0FBRS9DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtyRkFBeUIsc0JBQXNCLEVBQUUsa3JGQUF5Qjs7QUFFeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHFCQUFhLGVBQWUscUJBQWE7QUFDcEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQiw0Q0FBWTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBub2RlX2ZzID0gcmVxdWlyZSgnbm9kZTpmcycpO1xuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbmpzLmpzJyk7XG5cbmxldCBtb2R1bGVDYWNoZTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb2R1bGVzJztcblxuLyoqXG4gKiBgX19TRU5UUllfU0VSVkVSX01PRFVMRVNfX2AgY2FuIGJlIHJlcGxhY2VkIGF0IGJ1aWxkIHRpbWUgd2l0aCB0aGUgbW9kdWxlcyBsb2FkZWQgYnkgdGhlIHNlcnZlci5cbiAqIFJpZ2h0IG5vdywgd2UgbGV2ZXJhZ2UgdGhpcyBpbiBOZXh0LmpzIHRvIGNpcmN1bXZlbnQgdGhlIHByb2JsZW0gdGhhdCB3ZSBkbyBub3QgZ2V0IGFjY2VzcyB0byB0aGVzZSB0aGluZ3MgYXQgcnVudGltZS5cbiAqL1xuY29uc3QgU0VSVkVSX01PRFVMRVMgPSB0eXBlb2YgX19TRU5UUllfU0VSVkVSX01PRFVMRVNfXyA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IF9fU0VOVFJZX1NFUlZFUl9NT0RVTEVTX187XG5cbmNvbnN0IF9tb2R1bGVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICBldmVudC5tb2R1bGVzID0ge1xuICAgICAgICAuLi5ldmVudC5tb2R1bGVzLFxuICAgICAgICAuLi5fZ2V0TW9kdWxlcygpLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0sXG4gICAgZ2V0TW9kdWxlczogX2dldE1vZHVsZXMsXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkIG5vZGUgbW9kdWxlcyAvIHBhY2thZ2VzIHRvIHRoZSBldmVudC5cbiAqIEZvciB0aGlzLCBtdWx0aXBsZSBzb3VyY2VzIGFyZSB1c2VkOlxuICogLSBUaGV5IGNhbiBiZSBpbmplY3RlZCBhdCBidWlsZCB0aW1lIGludG8gdGhlIF9fU0VOVFJZX1NFUlZFUl9NT0RVTEVTX18gdmFyaWFibGUgKGUuZy4gaW4gTmV4dC5qcylcbiAqIC0gVGhleSBhcmUgZXh0cmFjdGVkIGZyb20gdGhlIGRlcGVuZGVuY2llcyAmIGRldkRlcGVuZGVuY2llcyBpbiB0aGUgcGFja2FnZS5qc29uIGZpbGVcbiAqIC0gVGhleSBhcmUgZXh0cmFjdGVkIGZyb20gdGhlIHJlcXVpcmUuY2FjaGUgKENKUyBvbmx5KVxuICovXG5jb25zdCBtb2R1bGVzSW50ZWdyYXRpb24gPSBfbW9kdWxlc0ludGVncmF0aW9uO1xuXG5mdW5jdGlvbiBnZXRSZXF1aXJlQ2FjaGVQYXRocygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5jYWNoZSA/IE9iamVjdC5rZXlzKHJlcXVpcmUuY2FjaGUgKSA6IFtdO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGFja2FnZS5qc29uIG1vZHVsZXMgKi9cbmZ1bmN0aW9uIGNvbGxlY3RNb2R1bGVzKCkge1xuICByZXR1cm4ge1xuICAgIC4uLlNFUlZFUl9NT0RVTEVTLFxuICAgIC4uLmdldE1vZHVsZXNGcm9tUGFja2FnZUpzb24oKSxcbiAgICAuLi4oY29tbW9uanMuaXNDanMoKSA/IGNvbGxlY3RSZXF1aXJlTW9kdWxlcygpIDoge30pLFxuICB9O1xufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyBmcm9tIHJlcXVpcmUuY2FjaGUgKi9cbmZ1bmN0aW9uIGNvbGxlY3RSZXF1aXJlTW9kdWxlcygpIHtcbiAgY29uc3QgbWFpblBhdGhzID0gcmVxdWlyZS5tYWluPy5wYXRocyB8fCBbXTtcbiAgY29uc3QgcGF0aHMgPSBnZXRSZXF1aXJlQ2FjaGVQYXRocygpO1xuXG4gIC8vIFdlIHN0YXJ0IHdpdGggdGhlIG1vZHVsZXMgZnJvbSBwYWNrYWdlLmpzb24gKGlmIHBvc3NpYmxlKVxuICAvLyBUaGVzZSBtYXkgYmUgb3ZlcndyaXR0ZW4gYnkgbW9yZSBzcGVjaWZpYyB2ZXJzaW9ucyBmcm9tIHRoZSByZXF1aXJlLmNhY2hlXG4gIGNvbnN0IGluZm9zID0ge307XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG5cbiAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICBsZXQgZGlyID0gcGF0aDtcblxuICAgIC8qKiBUcmF2ZXJzZSBkaXJlY3RvcmllcyB1cHdhcmQgaW4gdGhlIHNlYXJjaCBvZiBwYWNrYWdlLmpzb24gZmlsZSAqL1xuICAgIGNvbnN0IHVwZGlyID0gKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZyA9IGRpcjtcbiAgICAgIGRpciA9IG5vZGVfcGF0aC5kaXJuYW1lKG9yaWcpO1xuXG4gICAgICBpZiAoIWRpciB8fCBvcmlnID09PSBkaXIgfHwgc2Vlbi5oYXMob3JpZykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChtYWluUGF0aHMuaW5kZXhPZihkaXIpIDwgMCkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGtnZmlsZSA9IG5vZGVfcGF0aC5qb2luKG9yaWcsICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIHNlZW4uYWRkKG9yaWcpO1xuXG4gICAgICBpZiAoIW5vZGVfZnMuZXhpc3RzU3luYyhwa2dmaWxlKSkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2Uobm9kZV9mcy5yZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSlcblxuO1xuICAgICAgICBpbmZvc1tpbmZvLm5hbWVdID0gaW5mby52ZXJzaW9uO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGlyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBpbmZvcztcbn1cblxuLyoqIEZldGNoZXMgdGhlIGxpc3Qgb2YgbW9kdWxlcyBhbmQgdGhlIHZlcnNpb25zIGxvYWRlZCBieSB0aGUgZW50cnkgZmlsZSBmb3IgeW91ciBub2RlLmpzIGFwcC4gKi9cbmZ1bmN0aW9uIF9nZXRNb2R1bGVzKCkge1xuICBpZiAoIW1vZHVsZUNhY2hlKSB7XG4gICAgbW9kdWxlQ2FjaGUgPSBjb2xsZWN0TW9kdWxlcygpO1xuICB9XG4gIHJldHVybiBtb2R1bGVDYWNoZTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFja2FnZUpzb24oKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBub2RlX3BhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncGFja2FnZS5qc29uJyk7XG4gICAgY29uc3QgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKG5vZGVfZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpKSA7XG5cbiAgICByZXR1cm4gcGFja2FnZUpzb247XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVzRnJvbVBhY2thZ2VKc29uKCkge1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGdldFBhY2thZ2VKc29uKCk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMsXG4gICAgLi4ucGFja2FnZUpzb24uZGV2RGVwZW5kZW5jaWVzLFxuICB9O1xufVxuXG5leHBvcnRzLm1vZHVsZXNJbnRlZ3JhdGlvbiA9IG1vZHVsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst diagch = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/baggage.js\");\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\n// For baggage, we make sure to merge this into a possibly existing header\nconst BAGGAGE_HEADER_REGEX = /baggage: (.*)\\r\\n/;\n\n/**\n * This custom node-fetch instrumentation is used to instrument outgoing fetch requests.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js-contrib/blob/28e209a9da36bc4e1f8c2b0db7360170ed46cb80/plugins/node/instrumentation-undici/src/undici.ts\n */\nclass SentryNodeFetchInstrumentation extends instrumentation.InstrumentationBase {\n  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n  // unsubscribing.\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-node-fetch', core.SDK_VERSION, config);\n    this._channelSubs = [];\n    this._propagationDecisionMap = new core.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** No need to instrument files/modules. */\n   init() {\n    return undefined;\n  }\n\n  /** Disable the instrumentation. */\n   disable() {\n    super.disable();\n    this._channelSubs.forEach(sub => sub.unsubscribe());\n    this._channelSubs = [];\n  }\n\n  /** Enable the instrumentation. */\n   enable() {\n    // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n    // If constructed with `{enabled: false}`, this `.enable()` is still called,\n    // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n    //\n    // For now, this class will setup for instrumenting if `.enable()` is\n    // called, but use `this.getConfig().enabled` to determine if\n    // instrumentation should be generated. This covers the more likely common\n    // case of config being given a construction time, rather than later via\n    // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n    super.enable();\n\n    // This method is called by the super-class constructor before ours is\n    // called. So we need to ensure the property is initalized.\n    this._channelSubs = this._channelSubs || [];\n\n    // Avoid to duplicate subscriptions\n    if (this._channelSubs.length > 0) {\n      return;\n    }\n\n    this._subscribeToChannel('undici:request:create', this._onRequestCreated.bind(this));\n    this._subscribeToChannel('undici:request:headers', this._onResponseHeaders.bind(this));\n  }\n\n  /**\n   * This method is called when a request is created.\n   * You can still mutate the request here before it is sent.\n   */\n   _onRequestCreated({ request }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const shouldIgnore = this._shouldIgnoreOutgoingRequest(request);\n    // We store this decisision for later so we do not need to re-evaluate it\n    // Additionally, the active context is not correct in _onResponseHeaders, so we need to make sure it is evaluated here\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    const url = getAbsoluteUrl(request.origin, request.path);\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    // The propagator _may_ overwrite this, but this should be fine as it is the same data\n    const tracePropagationTargets = core.getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? core.getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = addedHeaders;\n\n    // We do not want to overwrite existing headers here\n    // If the core UndiciInstrumentation is registered, it will already have set the headers\n    // We do not want to add any then\n    if (Array.isArray(request.headers)) {\n      const requestHeaders = request.headers;\n\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(SENTRY_TRACE_HEADER)) {\n        requestHeaders.push(SENTRY_TRACE_HEADER, sentryTrace);\n      }\n\n      // For baggage, we make sure to merge this into a possibly existing header\n      const existingBaggagePos = requestHeaders.findIndex(header => header === SENTRY_BAGGAGE_HEADER);\n      if (baggage$1 && existingBaggagePos === -1) {\n        requestHeaders.push(SENTRY_BAGGAGE_HEADER, baggage$1);\n      } else if (baggage$1) {\n        const existingBaggage = requestHeaders[existingBaggagePos + 1];\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          requestHeaders[existingBaggagePos + 1] = merged;\n        }\n      }\n    } else {\n      const requestHeaders = request.headers;\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(`${SENTRY_TRACE_HEADER}:`)) {\n        request.headers += `${SENTRY_TRACE_HEADER}: ${sentryTrace}\\r\\n`;\n      }\n\n      const existingBaggage = request.headers.match(BAGGAGE_HEADER_REGEX)?.[1];\n      if (baggage$1 && !existingBaggage) {\n        request.headers += `${SENTRY_BAGGAGE_HEADER}: ${baggage$1}\\r\\n`;\n      } else if (baggage$1) {\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          request.headers = request.headers.replace(BAGGAGE_HEADER_REGEX, `baggage: ${merged}\\r\\n`);\n        }\n      }\n    }\n  }\n\n  /**\n   * This method is called when a response is received.\n   */\n   _onResponseHeaders({ request, response }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const _breadcrumbs = config.breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /** Subscribe to a diagnostics channel. */\n   _subscribeToChannel(\n    diagnosticChannel,\n    onMessage,\n  ) {\n    // `diagnostics_channel` had a ref counting bug until v18.19.0.\n    // https://github.com/nodejs/node/pull/47520\n    const useNewSubscribe = nodeVersion.NODE_MAJOR > 18 || (nodeVersion.NODE_MAJOR === 18 && nodeVersion.NODE_MINOR >= 19);\n\n    let unsubscribe;\n    if (useNewSubscribe) {\n      diagch.subscribe?.(diagnosticChannel, onMessage);\n      unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n    } else {\n      const channel = diagch.channel(diagnosticChannel);\n      channel.subscribe(onMessage);\n      unsubscribe = () => channel.unsubscribe(onMessage);\n    }\n\n    this._channelSubs.push({\n      name: diagnosticChannel,\n      unsubscribe,\n    });\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core$1.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    // Add trace propagation headers\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (typeof ignoreOutgoingRequests !== 'function' || !url) {\n      return false;\n    }\n\n    return ignoreOutgoingRequests(url);\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const parsedUrl = core.parseUrl(url);\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\nfunction getAbsoluteUrl(origin, path = '/') {\n  try {\n    const url = new URL(path, origin);\n    return url.toString();\n  } catch {\n    // fallback: Construct it on our own\n    const url = `${origin}`;\n\n    if (url.endsWith('/') && path.startsWith('/')) {\n      return `${url}${path.slice(1)}`;\n    }\n\n    if (!url.endsWith('/') && !path.startsWith('/')) {\n      return `${url}/${path.slice(1)}`;\n    }\n\n    return `${url}${path}`;\n  }\n}\n\nexports.SentryNodeFetchInstrumentation = SentryNodeFetchInstrumentation;\n//# sourceMappingURL=SentryNodeFetchInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst SentryNodeFetchInstrumentation = __webpack_require__(/*! ./SentryNodeFetchInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentSentryNodeFetch = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  SentryNodeFetchInstrumentation.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsNEdBQTBCO0FBQ3JELHVDQUF1QyxtQkFBTyxDQUFDLDhKQUFxQzs7QUFFcEY7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2gvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IFNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTm9kZUZldGNoJztcblxuY29uc3QgaW5zdHJ1bWVudFNlbnRyeU5vZGVGZXRjaCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgYCR7SU5URUdSQVRJT05fTkFNRX0uc2VudHJ5YCxcbiAgU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLlNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbixcbiAgKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfSxcbik7XG5cbmNvbnN0IF9uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ05vZGVGZXRjaCcsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFNlbnRyeU5vZGVGZXRjaChvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBuYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.debug.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const opts = {\n    mode: 'warn',\n    ...options,\n  } ;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, opts));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    const level = options.mode === 'strict' ? 'fatal' : 'error';\n\n    // this can be set in places where we cannot reliably get access to the active span/error\n    // when the error bubbles up to this handler, we can use this to set the active span\n    const activeSpanForError =\n      reason && typeof reason === 'object' ? (reason )._sentry_active_span : undefined;\n\n    const activeSpanWrapper = activeSpanForError\n      ? (fn) => core.withActiveSpan(activeSpanForError, fn)\n      : (fn) => fn();\n\n    activeSpanWrapper(() => {\n      core.captureException(reason, {\n        originalException: promise,\n        captureContext: {\n          extra: { unhandledPromiseRejection: true },\n          level,\n        },\n        mechanism: {\n          handled: false,\n          type: 'onunhandledrejection',\n        },\n      });\n    });\n\n    handleRejection(reason, options.mode);\n  };\n}\n\n/**\n * Handler for `mode` option\n */\nfunction handleRejection(reason, mode) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      console.error(reason && typeof reason === 'object' && 'stack' in reason ? reason.stack : reason);\n    });\n  } else if (mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLGlIQUEyQjs7QUFFekQ7O0FBRUEsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGVycm9yaGFuZGxpbmcgPSByZXF1aXJlKCcuLi91dGlscy9lcnJvcmhhbmRsaW5nLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnT25VbmhhbmRsZWRSZWplY3Rpb24nO1xuXG5jb25zdCBfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgbW9kZTogJ3dhcm4nLFxuICAgIC4uLm9wdGlvbnMsXG4gIH0gO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGdsb2JhbC5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIoY2xpZW50LCBvcHRzKSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgYSBnbG9iYWwgcHJvbWlzZSByZWplY3Rpb24gaGFuZGxlci5cbiAqL1xuY29uc3Qgb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIFNlbmQgYW4gZXhjZXB0aW9uIHdpdGggcmVhc29uXG4gKiBAcGFyYW0gcmVhc29uIHN0cmluZ1xuICogQHBhcmFtIHByb21pc2UgcHJvbWlzZVxuICpcbiAqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIoXG4gIGNsaWVudCxcbiAgb3B0aW9ucyxcbikge1xuICByZXR1cm4gZnVuY3Rpb24gc2VuZFVuaGFuZGxlZFByb21pc2UocmVhc29uLCBwcm9taXNlKSB7XG4gICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxldmVsID0gb3B0aW9ucy5tb2RlID09PSAnc3RyaWN0JyA/ICdmYXRhbCcgOiAnZXJyb3InO1xuXG4gICAgLy8gdGhpcyBjYW4gYmUgc2V0IGluIHBsYWNlcyB3aGVyZSB3ZSBjYW5ub3QgcmVsaWFibHkgZ2V0IGFjY2VzcyB0byB0aGUgYWN0aXZlIHNwYW4vZXJyb3JcbiAgICAvLyB3aGVuIHRoZSBlcnJvciBidWJibGVzIHVwIHRvIHRoaXMgaGFuZGxlciwgd2UgY2FuIHVzZSB0aGlzIHRvIHNldCB0aGUgYWN0aXZlIHNwYW5cbiAgICBjb25zdCBhY3RpdmVTcGFuRm9yRXJyb3IgPVxuICAgICAgcmVhc29uICYmIHR5cGVvZiByZWFzb24gPT09ICdvYmplY3QnID8gKHJlYXNvbiApLl9zZW50cnlfYWN0aXZlX3NwYW4gOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBhY3RpdmVTcGFuV3JhcHBlciA9IGFjdGl2ZVNwYW5Gb3JFcnJvclxuICAgICAgPyAoZm4pID0+IGNvcmUud2l0aEFjdGl2ZVNwYW4oYWN0aXZlU3BhbkZvckVycm9yLCBmbilcbiAgICAgIDogKGZuKSA9PiBmbigpO1xuXG4gICAgYWN0aXZlU3BhbldyYXBwZXIoKCkgPT4ge1xuICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogcHJvbWlzZSxcbiAgICAgICAgY2FwdHVyZUNvbnRleHQ6IHtcbiAgICAgICAgICBleHRyYTogeyB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uOiB0cnVlIH0sXG4gICAgICAgICAgbGV2ZWwsXG4gICAgICAgIH0sXG4gICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6ICdvbnVuaGFuZGxlZHJlamVjdGlvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMubW9kZSk7XG4gIH07XG59XG5cbi8qKlxuICogSGFuZGxlciBmb3IgYG1vZGVgIG9wdGlvblxuICovXG5mdW5jdGlvbiBoYW5kbGVSZWplY3Rpb24ocmVhc29uLCBtb2RlKSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzdjZjZmOWU5NjRhYTAwNzcyOTY1MzkxYzIzYWNkYTZkNzE5NzJhOWEvbGliL2ludGVybmFsL3Byb2Nlc3MvcHJvbWlzZXMuanMjTDIzNC1MMjQwXG4gIGNvbnN0IHJlamVjdGlvbldhcm5pbmcgPVxuICAgICdUaGlzIGVycm9yIG9yaWdpbmF0ZWQgZWl0aGVyIGJ5ICcgK1xuICAgICd0aHJvd2luZyBpbnNpZGUgb2YgYW4gYXN5bmMgZnVuY3Rpb24gd2l0aG91dCBhIGNhdGNoIGJsb2NrLCAnICtcbiAgICAnb3IgYnkgcmVqZWN0aW5nIGEgcHJvbWlzZSB3aGljaCB3YXMgbm90IGhhbmRsZWQgd2l0aCAuY2F0Y2goKS4nICtcbiAgICAnIFRoZSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbjonO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKG1vZGUgPT09ICd3YXJuJykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgdHlwZW9mIHJlYXNvbiA9PT0gJ29iamVjdCcgJiYgJ3N0YWNrJyBpbiByZWFzb24gPyByZWFzb24uc3RhY2sgOiByZWFzb24pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgfSk7XG4gICAgZXJyb3JoYW5kbGluZy5sb2dBbmRFeGl0UHJvY2VzcyhyZWFzb24pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnRzLm1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlciA9IG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcjtcbmV4cG9ydHMub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/processSession.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/processSession.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ProcessSession';\n\n/**\n * Records a Session for the current process to track release health.\n */\nconst processSessionIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      core.startSession();\n\n      // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n      // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n      // such as calling process.exit() or uncaught exceptions.\n      // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n      process.on('beforeExit', () => {\n        const session = core.getIsolationScope().getSession();\n\n        // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n        // Terminal Status i.e. Exited or Crashed because\n        // \"When a session is moved away from ok it must not be updated anymore.\"\n        // Ref: https://develop.sentry.dev/sdk/sessions/\n        if (session?.status !== 'ok') {\n          core.endSession();\n        }\n      });\n    },\n  };\n});\n\nexports.processSessionIntegration = processSessionIntegration;\n//# sourceMappingURL=processSession.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1Nlc3Npb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1Nlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcm9jZXNzU2Vzc2lvbic7XG5cbi8qKlxuICogUmVjb3JkcyBhIFNlc3Npb24gZm9yIHRoZSBjdXJyZW50IHByb2Nlc3MgdG8gdHJhY2sgcmVsZWFzZSBoZWFsdGguXG4gKi9cbmNvbnN0IHByb2Nlc3NTZXNzaW9uSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvcmUuc3RhcnRTZXNzaW9uKCk7XG5cbiAgICAgIC8vIEVtaXR0ZWQgaW4gdGhlIGNhc2Ugb2YgaGVhbHRoeSBzZXNzaW9ucywgZXJyb3Igb2YgYG1lY2hhbmlzbS5oYW5kbGVkOiB0cnVlYCBhbmQgdW5oYW5kbGVkcmVqZWN0aW9ucyBiZWNhdXNlXG4gICAgICAvLyBUaGUgJ2JlZm9yZUV4aXQnIGV2ZW50IGlzIG5vdCBlbWl0dGVkIGZvciBjb25kaXRpb25zIGNhdXNpbmcgZXhwbGljaXQgdGVybWluYXRpb24sXG4gICAgICAvLyBzdWNoIGFzIGNhbGxpbmcgcHJvY2Vzcy5leGl0KCkgb3IgdW5jYXVnaHQgZXhjZXB0aW9ucy5cbiAgICAgIC8vIFJlZjogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19ldmVudF9iZWZvcmVleGl0XG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gY29yZS5nZXRJc29sYXRpb25TY29wZSgpLmdldFNlc3Npb24oKTtcblxuICAgICAgICAvLyBPbmx5IGNhbGwgZW5kU2Vzc2lvbiwgaWYgdGhlIFNlc3Npb24gZXhpc3RzIG9uIFNjb3BlIGFuZCBTZXNzaW9uU3RhdHVzIGlzIG5vdCBhXG4gICAgICAgIC8vIFRlcm1pbmFsIFN0YXR1cyBpLmUuIEV4aXRlZCBvciBDcmFzaGVkIGJlY2F1c2VcbiAgICAgICAgLy8gXCJXaGVuIGEgc2Vzc2lvbiBpcyBtb3ZlZCBhd2F5IGZyb20gb2sgaXQgbXVzdCBub3QgYmUgdXBkYXRlZCBhbnltb3JlLlwiXG4gICAgICAgIC8vIFJlZjogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL3Nlc3Npb25zL1xuICAgICAgICBpZiAoc2Vzc2lvbj8uc3RhdHVzICE9PSAnb2snKSB7XG4gICAgICAgICAgY29yZS5lbmRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5wcm9jZXNzU2Vzc2lvbkludGVncmF0aW9uID0gcHJvY2Vzc1Nlc3Npb25JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3NTZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/processSession.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      try {\n        if (false) {}\n      } catch {\n        // ignore\n      }\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.debug.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n    core.suppressTracing(() => {\n      const req = http.request(\n        {\n          method: 'POST',\n          path: spotlightUrl.pathname,\n          hostname: spotlightUrl.hostname,\n          port: spotlightUrl.port,\n          headers: {\n            'Content-Type': 'application/x-sentry-envelope',\n          },\n        },\n        res => {\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n            // Reset failed requests counter on success\n            failedRequests = 0;\n          }\n          res.on('data', () => {\n            // Drain socket\n          });\n\n          res.on('end', () => {\n            // Drain socket\n          });\n          res.setEncoding('utf8');\n        },\n      );\n\n      req.on('error', () => {\n        failedRequests++;\n        core.debug.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n      });\n      req.write(serializedEnvelope);\n      req.end();\n    });\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    core.debug.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQThELEVBQUUsRUFFbkU7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0osd0RBQXdELElBQUk7QUFDNUQ7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgY29yZS5kZWJ1Zy53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gaWdub3JlXG4gICAgICB9XG4gICAgICBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBfb3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBVc2UgdGhpcyBpbnRlZ3JhdGlvbiB0byBzZW5kIGVycm9ycyBhbmQgdHJhbnNhY3Rpb25zIHRvIFNwb3RsaWdodC5cbiAqXG4gKiBMZWFybiBtb3JlIGFib3V0IHNwb3RsaWdodCBhdCBodHRwczovL3Nwb3RsaWdodGpzLmNvbVxuICpcbiAqIEltcG9ydGFudDogVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIHdpdGggTm9kZSAxOCBvciBuZXdlci5cbiAqL1xuY29uc3Qgc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9zcG90bGlnaHRJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3BvdGxpZ2h0VXJsID0gcGFyc2VTaWRlY2FyVXJsKG9wdGlvbnMuc2lkZWNhclVybCk7XG4gIGlmICghc3BvdGxpZ2h0VXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGZhaWxlZFJlcXVlc3RzID0gMDtcblxuICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgKGVudmVsb3BlKSA9PiB7XG4gICAgaWYgKGZhaWxlZFJlcXVlc3RzID4gMykge1xuICAgICAgY29yZS5kZWJ1Zy53YXJuKCdbU3BvdGxpZ2h0XSBEaXNhYmxlZCBTZW50cnkgLT4gU3BvdGxpZ2h0IGludGVncmF0aW9uIGR1ZSB0byB0b28gbWFueSBmYWlsZWQgcmVxdWVzdHMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpYWxpemVkRW52ZWxvcGUgPSBjb3JlLnNlcmlhbGl6ZUVudmVsb3BlKGVudmVsb3BlKTtcbiAgICBjb3JlLnN1cHByZXNzVHJhY2luZygoKSA9PiB7XG4gICAgICBjb25zdCByZXEgPSBodHRwLnJlcXVlc3QoXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBwYXRoOiBzcG90bGlnaHRVcmwucGF0aG5hbWUsXG4gICAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiBzcG90bGlnaHRVcmwucG9ydCxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSAmJiByZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDApIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGZhaWxlZCByZXF1ZXN0cyBjb3VudGVyIG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLm9uKCdkYXRhJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgcmVxLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgICAgY29yZS5kZWJ1Zy53YXJuKCdbU3BvdGxpZ2h0XSBGYWlsZWQgdG8gc2VuZCBlbnZlbG9wZSB0byBTcG90bGlnaHQgU2lkZWNhcicpO1xuICAgICAgfSk7XG4gICAgICByZXEud3JpdGUoc2VyaWFsaXplZEVudmVsb3BlKTtcbiAgICAgIHJlcS5lbmQoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lkZWNhclVybCh1cmwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChgJHt1cmx9YCk7XG4gIH0gY2F0Y2gge1xuICAgIGNvcmUuZGVidWcud2FybihgW1Nwb3RsaWdodF0gSW52YWxpZCBzaWRlY2FyIFVSTDogJHt1cmx9YCk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuZXhwb3J0cy5zcG90bGlnaHRJbnRlZ3JhdGlvbiA9IHNwb3RsaWdodEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BvdGxpZ2h0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/winston.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/integrations/winston.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ../logs/capture.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/capture.js\");\n\nconst DEFAULT_CAPTURED_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n// See: https://github.com/winstonjs/triple-beam\nconst LEVEL_SYMBOL = Symbol.for('level');\nconst MESSAGE_SYMBOL = Symbol.for('message');\nconst SPLAT_SYMBOL = Symbol.for('splat');\n\n/**\n * Options for the Sentry Winston transport.\n */\n\n/**\n * Creates a new Sentry Winston transport that fowards logs to Sentry. Requires the `enableLogs` option to be enabled.\n *\n * Supports Winston 3.x.x.\n *\n * @param TransportClass - The Winston transport class to extend.\n * @returns The extended transport class.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n *\n * @example\n * ```ts\n * const winston = require('winston');\n * const Transport = require('winston-transport');\n *\n * const SentryWinstonTransport = Sentry.createSentryWinstonTransport(Transport);\n *\n * const logger = winston.createLogger({\n *   transports: [new SentryWinstonTransport()],\n * });\n * ```\n */\nfunction createSentryWinstonTransport(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TransportClass,\n  sentryWinstonOptions,\n) {\n  // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n  class SentryWinstonTransport extends TransportClass {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     constructor(options) {\n      super(options);\n      this._levels = new Set(sentryWinstonOptions?.levels ?? DEFAULT_CAPTURED_LEVELS);\n    }\n\n    /**\n     * Forwards a winston log to the Sentry SDK.\n     */\n     log(info, callback) {\n      try {\n        setImmediate(() => {\n          // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n          this.emit('logged', info);\n        });\n\n        if (!isObject(info)) {\n          return;\n        }\n\n        const levelFromSymbol = info[LEVEL_SYMBOL];\n\n        // See: https://github.com/winstonjs/winston?tab=readme-ov-file#streams-objectmode-and-info-objects\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { level, message, timestamp, ...attributes } = info;\n        // Remove all symbols from the remaining attributes\n        attributes[LEVEL_SYMBOL] = undefined;\n        attributes[MESSAGE_SYMBOL] = undefined;\n        attributes[SPLAT_SYMBOL] = undefined;\n\n        const logSeverityLevel = WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP[levelFromSymbol ] ?? 'info';\n        if (this._levels.has(logSeverityLevel)) {\n          capture.captureLog(logSeverityLevel, message , {\n            ...attributes,\n            'sentry.origin': 'auto.logging.winston',\n          });\n        }\n      } catch {\n        // do nothing\n      }\n\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n  return SentryWinstonTransport ;\n}\n\nfunction isObject(anything) {\n  return typeof anything === 'object' && anything != null;\n}\n\n// npm\n// {\n//   error: 0,\n//   warn: 1,\n//   info: 2,\n//   http: 3,\n//   verbose: 4,\n//   debug: 5,\n//   silly: 6\n// }\n//\n// syslog\n// {\n//   emerg: 0,\n//   alert: 1,\n//   crit: 2,\n//   error: 3,\n//   warning: 4,\n//   notice: 5,\n//   info: 6,\n//   debug: 7,\n// }\nconst WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP = {\n  // npm\n  silly: 'trace',\n  // npm and syslog\n  debug: 'debug',\n  // npm\n  verbose: 'debug',\n  // npm\n  http: 'debug',\n  // npm and syslog\n  info: 'info',\n  // syslog\n  notice: 'info',\n  // npm\n  warn: 'warn',\n  // syslog\n  warning: 'warn',\n  // npm and syslog\n  error: 'error',\n  // syslog\n  emerg: 'fatal',\n  // syslog\n  alert: 'fatal',\n  // syslog\n  crit: 'fatal',\n};\n\nexports.createSentryWinstonTransport = createSentryWinstonTransport;\n//# sourceMappingURL=winston.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvd2luc3Rvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyxtR0FBb0I7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy93aW5zdG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi4vbG9ncy9jYXB0dXJlLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfQ0FQVFVSRURfTEVWRUxTID0gWyd0cmFjZScsICdkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnZmF0YWwnXTtcblxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3RyaXBsZS1iZWFtXG5jb25zdCBMRVZFTF9TWU1CT0wgPSBTeW1ib2wuZm9yKCdsZXZlbCcpO1xuY29uc3QgTUVTU0FHRV9TWU1CT0wgPSBTeW1ib2wuZm9yKCdtZXNzYWdlJyk7XG5jb25zdCBTUExBVF9TWU1CT0wgPSBTeW1ib2wuZm9yKCdzcGxhdCcpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBTZW50cnkgV2luc3RvbiB0cmFuc3BvcnQuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNlbnRyeSBXaW5zdG9uIHRyYW5zcG9ydCB0aGF0IGZvd2FyZHMgbG9ncyB0byBTZW50cnkuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogU3VwcG9ydHMgV2luc3RvbiAzLngueC5cbiAqXG4gKiBAcGFyYW0gVHJhbnNwb3J0Q2xhc3MgLSBUaGUgV2luc3RvbiB0cmFuc3BvcnQgY2xhc3MgdG8gZXh0ZW5kLlxuICogQHJldHVybnMgVGhlIGV4dGVuZGVkIHRyYW5zcG9ydCBjbGFzcy5cbiAqXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgbWV0aG9kIHdpbGwgZXhwZXJpZW5jZSBicmVha2luZyBjaGFuZ2VzLiBUaGlzIGlzIG5vdCB5ZXQgcGFydCBvZlxuICogdGhlIHN0YWJsZSBTZW50cnkgU0RLIEFQSSBhbmQgY2FuIGJlIGNoYW5nZWQgb3IgcmVtb3ZlZCB3aXRob3V0IHdhcm5pbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuICogY29uc3QgVHJhbnNwb3J0ID0gcmVxdWlyZSgnd2luc3Rvbi10cmFuc3BvcnQnKTtcbiAqXG4gKiBjb25zdCBTZW50cnlXaW5zdG9uVHJhbnNwb3J0ID0gU2VudHJ5LmNyZWF0ZVNlbnRyeVdpbnN0b25UcmFuc3BvcnQoVHJhbnNwb3J0KTtcbiAqXG4gKiBjb25zdCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XG4gKiAgIHRyYW5zcG9ydHM6IFtuZXcgU2VudHJ5V2luc3RvblRyYW5zcG9ydCgpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNlbnRyeVdpbnN0b25UcmFuc3BvcnQoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIFRyYW5zcG9ydENsYXNzLFxuICBzZW50cnlXaW5zdG9uT3B0aW9ucyxcbikge1xuICAvLyBAdHMtaWdub3JlIC0gV2Uga25vdyB0aGlzIGlzIHNhZmUgYmVjYXVzZSBTZW50cnlXaW5zdG9uVHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0Q2xhc3NcbiAgY2xhc3MgU2VudHJ5V2luc3RvblRyYW5zcG9ydCBleHRlbmRzIFRyYW5zcG9ydENsYXNzIHtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgdGhpcy5fbGV2ZWxzID0gbmV3IFNldChzZW50cnlXaW5zdG9uT3B0aW9ucz8ubGV2ZWxzID8/IERFRkFVTFRfQ0FQVFVSRURfTEVWRUxTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3J3YXJkcyBhIHdpbnN0b24gbG9nIHRvIHRoZSBTZW50cnkgU0RLLlxuICAgICAqL1xuICAgICBsb2coaW5mbywgY2FsbGJhY2spIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIFdlIGtub3cgdGhpcyBpcyBzYWZlIGJlY2F1c2UgU2VudHJ5V2luc3RvblRyYW5zcG9ydCBleHRlbmRzIFRyYW5zcG9ydENsYXNzXG4gICAgICAgICAgdGhpcy5lbWl0KCdsb2dnZWQnLCBpbmZvKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFpc09iamVjdChpbmZvKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxldmVsRnJvbVN5bWJvbCA9IGluZm9bTEVWRUxfU1lNQk9MXTtcblxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbj90YWI9cmVhZG1lLW92LWZpbGUjc3RyZWFtcy1vYmplY3Rtb2RlLWFuZC1pbmZvLW9iamVjdHNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICBjb25zdCB7IGxldmVsLCBtZXNzYWdlLCB0aW1lc3RhbXAsIC4uLmF0dHJpYnV0ZXMgfSA9IGluZm87XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgc3ltYm9scyBmcm9tIHRoZSByZW1haW5pbmcgYXR0cmlidXRlc1xuICAgICAgICBhdHRyaWJ1dGVzW0xFVkVMX1NZTUJPTF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGF0dHJpYnV0ZXNbTUVTU0FHRV9TWU1CT0xdID0gdW5kZWZpbmVkO1xuICAgICAgICBhdHRyaWJ1dGVzW1NQTEFUX1NZTUJPTF0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgbG9nU2V2ZXJpdHlMZXZlbCA9IFdJTlNUT05fTEVWRUxfVE9fTE9HX1NFVkVSSVRZX0xFVkVMX01BUFtsZXZlbEZyb21TeW1ib2wgXSA/PyAnaW5mbyc7XG4gICAgICAgIGlmICh0aGlzLl9sZXZlbHMuaGFzKGxvZ1NldmVyaXR5TGV2ZWwpKSB7XG4gICAgICAgICAgY2FwdHVyZS5jYXB0dXJlTG9nKGxvZ1NldmVyaXR5TGV2ZWwsIG1lc3NhZ2UgLCB7XG4gICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgJ3NlbnRyeS5vcmlnaW4nOiAnYXV0by5sb2dnaW5nLndpbnN0b24nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gU2VudHJ5V2luc3RvblRyYW5zcG9ydCA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFueXRoaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgYW55dGhpbmcgPT09ICdvYmplY3QnICYmIGFueXRoaW5nICE9IG51bGw7XG59XG5cbi8vIG5wbVxuLy8ge1xuLy8gICBlcnJvcjogMCxcbi8vICAgd2FybjogMSxcbi8vICAgaW5mbzogMixcbi8vICAgaHR0cDogMyxcbi8vICAgdmVyYm9zZTogNCxcbi8vICAgZGVidWc6IDUsXG4vLyAgIHNpbGx5OiA2XG4vLyB9XG4vL1xuLy8gc3lzbG9nXG4vLyB7XG4vLyAgIGVtZXJnOiAwLFxuLy8gICBhbGVydDogMSxcbi8vICAgY3JpdDogMixcbi8vICAgZXJyb3I6IDMsXG4vLyAgIHdhcm5pbmc6IDQsXG4vLyAgIG5vdGljZTogNSxcbi8vICAgaW5mbzogNixcbi8vICAgZGVidWc6IDcsXG4vLyB9XG5jb25zdCBXSU5TVE9OX0xFVkVMX1RPX0xPR19TRVZFUklUWV9MRVZFTF9NQVAgPSB7XG4gIC8vIG5wbVxuICBzaWxseTogJ3RyYWNlJyxcbiAgLy8gbnBtIGFuZCBzeXNsb2dcbiAgZGVidWc6ICdkZWJ1ZycsXG4gIC8vIG5wbVxuICB2ZXJib3NlOiAnZGVidWcnLFxuICAvLyBucG1cbiAgaHR0cDogJ2RlYnVnJyxcbiAgLy8gbnBtIGFuZCBzeXNsb2dcbiAgaW5mbzogJ2luZm8nLFxuICAvLyBzeXNsb2dcbiAgbm90aWNlOiAnaW5mbycsXG4gIC8vIG5wbVxuICB3YXJuOiAnd2FybicsXG4gIC8vIHN5c2xvZ1xuICB3YXJuaW5nOiAnd2FybicsXG4gIC8vIG5wbSBhbmQgc3lzbG9nXG4gIGVycm9yOiAnZXJyb3InLFxuICAvLyBzeXNsb2dcbiAgZW1lcmc6ICdmYXRhbCcsXG4gIC8vIHN5c2xvZ1xuICBhbGVydDogJ2ZhdGFsJyxcbiAgLy8gc3lzbG9nXG4gIGNyaXQ6ICdmYXRhbCcsXG59O1xuXG5leHBvcnRzLmNyZWF0ZVNlbnRyeVdpbnN0b25UcmFuc3BvcnQgPSBjcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luc3Rvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/winston.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/capture.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/logs/capture.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n */\nfunction captureLog(level, ...args) {\n  const [messageOrMessageTemplate, paramsOrAttributes, maybeAttributes] = args;\n  if (Array.isArray(paramsOrAttributes)) {\n    const attributes = { ...maybeAttributes };\n    attributes['sentry.message.template'] = messageOrMessageTemplate;\n    paramsOrAttributes.forEach((param, index) => {\n      attributes[`sentry.message.parameter.${index}`] = param;\n    });\n    const message = node_util.format(messageOrMessageTemplate, ...paramsOrAttributes);\n    core._INTERNAL_captureLog({ level, message, attributes });\n  } else {\n    core._INTERNAL_captureLog({ level, message: messageOrMessageTemplate, attributes: paramsOrAttributes });\n  }\n}\n\nexports.captureLog = captureLog;\n//# sourceMappingURL=capture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9sb2dzL2NhcHR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsNkNBQTZDLE1BQU07QUFDbkQsS0FBSztBQUNMO0FBQ0EsZ0NBQWdDLDRCQUE0QjtBQUM1RCxJQUFJO0FBQ0osZ0NBQWdDLDBFQUEwRTtBQUMxRztBQUNBOztBQUVBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9sb2dzL2NhcHR1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG5vZGVfdXRpbCA9IHJlcXVpcmUoJ25vZGU6dXRpbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgZ2l2ZW4gbGV2ZWwuXG4gKlxuICogQHBhcmFtIGxldmVsIC0gVGhlIGxldmVsIG9mIHRoZSBsb2cuXG4gKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGxvZy5cbiAqIEBwYXJhbSBhdHRyaWJ1dGVzIC0gQXJiaXRyYXJ5IHN0cnVjdHVyZWQgZGF0YSB0aGF0IHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9nIC0gZS5nLiwgdXNlcklkOiAxMDAuXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVMb2cobGV2ZWwsIC4uLmFyZ3MpIHtcbiAgY29uc3QgW21lc3NhZ2VPck1lc3NhZ2VUZW1wbGF0ZSwgcGFyYW1zT3JBdHRyaWJ1dGVzLCBtYXliZUF0dHJpYnV0ZXNdID0gYXJncztcbiAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zT3JBdHRyaWJ1dGVzKSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7IC4uLm1heWJlQXR0cmlidXRlcyB9O1xuICAgIGF0dHJpYnV0ZXNbJ3NlbnRyeS5tZXNzYWdlLnRlbXBsYXRlJ10gPSBtZXNzYWdlT3JNZXNzYWdlVGVtcGxhdGU7XG4gICAgcGFyYW1zT3JBdHRyaWJ1dGVzLmZvckVhY2goKHBhcmFtLCBpbmRleCkgPT4ge1xuICAgICAgYXR0cmlidXRlc1tgc2VudHJ5Lm1lc3NhZ2UucGFyYW1ldGVyLiR7aW5kZXh9YF0gPSBwYXJhbTtcbiAgICB9KTtcbiAgICBjb25zdCBtZXNzYWdlID0gbm9kZV91dGlsLmZvcm1hdChtZXNzYWdlT3JNZXNzYWdlVGVtcGxhdGUsIC4uLnBhcmFtc09yQXR0cmlidXRlcyk7XG4gICAgY29yZS5fSU5URVJOQUxfY2FwdHVyZUxvZyh7IGxldmVsLCBtZXNzYWdlLCBhdHRyaWJ1dGVzIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvcmUuX0lOVEVSTkFMX2NhcHR1cmVMb2coeyBsZXZlbCwgbWVzc2FnZTogbWVzc2FnZU9yTWVzc2FnZVRlbXBsYXRlLCBhdHRyaWJ1dGVzOiBwYXJhbXNPckF0dHJpYnV0ZXMgfSk7XG4gIH1cbn1cblxuZXhwb3J0cy5jYXB0dXJlTG9nID0gY2FwdHVyZUxvZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcHR1cmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/capture.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/exports.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/logs/exports.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ./capture.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/capture.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * @summary Capture a log with the `trace` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('Starting database connection', {\n *   database: 'users',\n *   connectionId: 'conn_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace('Database connection %s established for %s',\n *   ['successful', 'users'],\n *   { connectionId: 'conn_123' }\n * );\n * ```\n */\nfunction trace(...args) {\n  capture.captureLog('trace', ...args);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Cache miss for user profile', {\n *   userId: 'user_123',\n *   cacheKey: 'profile:user_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug('Cache %s for %s: %s',\n *   ['miss', 'user profile', 'key not found'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction debug(...args) {\n  capture.captureLog('debug', ...args);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User profile updated', {\n *   userId: 'user_123',\n *   updatedFields: ['email', 'preferences']\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info('User %s updated their %s',\n *   ['John Doe', 'profile settings'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction info(...args) {\n  capture.captureLog('info', ...args);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Rate limit approaching', {\n *   endpoint: '/api/users',\n *   currentRate: '95/100',\n *   resetTime: '2024-03-20T10:00:00Z'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn('Rate limit %s for %s: %s',\n *   ['approaching', '/api/users', '95/100 requests'],\n *   { resetTime: '2024-03-20T10:00:00Z' }\n * );\n * ```\n */\nfunction warn(...args) {\n  capture.captureLog('warn', ...args);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to process payment', {\n *   orderId: 'order_123',\n *   errorCode: 'PAYMENT_FAILED',\n *   amount: 99.99\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error('Payment processing failed for order %s: %s',\n *   ['order_123', 'insufficient funds'],\n *   { amount: 99.99 }\n * );\n * ```\n */\nfunction error(...args) {\n  capture.captureLog('error', ...args);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Database connection pool exhausted', {\n *   database: 'users',\n *   activeConnections: 100,\n *   maxConnections: 100\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal('Database %s: %s connections active',\n *   ['connection pool exhausted', '100/100'],\n *   { database: 'users' }\n * );\n * ```\n */\nfunction fatal(...args) {\n  capture.captureLog('fatal', ...args);\n}\n\nexports.fmt = core.fmt;\nexports.debug = debug;\nexports.error = error;\nexports.fatal = fatal;\nexports.info = info;\nexports.trace = trace;\nexports.warn = warn;\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9sb2dzL2V4cG9ydHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQWM7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1gsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsWUFBWTtBQUNaLGFBQWE7QUFDYixZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvbG9ncy9leHBvcnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi9jYXB0dXJlLmpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogQHN1bW1hcnkgQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBgdHJhY2VgIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLnRyYWNlKCdTdGFydGluZyBkYXRhYmFzZSBjb25uZWN0aW9uJywge1xuICogICBkYXRhYmFzZTogJ3VzZXJzJyxcbiAqICAgY29ubmVjdGlvbklkOiAnY29ubl8xMjMnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci50cmFjZSgnRGF0YWJhc2UgY29ubmVjdGlvbiAlcyBlc3RhYmxpc2hlZCBmb3IgJXMnLFxuICogICBbJ3N1Y2Nlc3NmdWwnLCAndXNlcnMnXSxcbiAqICAgeyBjb25uZWN0aW9uSWQ6ICdjb25uXzEyMycgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiB0cmFjZSguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygndHJhY2UnLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBkZWJ1Z2AgbGV2ZWwuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZGVidWcoJ0NhY2hlIG1pc3MgZm9yIHVzZXIgcHJvZmlsZScsIHtcbiAqICAgdXNlcklkOiAndXNlcl8xMjMnLFxuICogICBjYWNoZUtleTogJ3Byb2ZpbGU6dXNlcl8xMjMnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5kZWJ1ZygnQ2FjaGUgJXMgZm9yICVzOiAlcycsXG4gKiAgIFsnbWlzcycsICd1c2VyIHByb2ZpbGUnLCAna2V5IG5vdCBmb3VuZCddLFxuICogICB7IHVzZXJJZDogJ3VzZXJfMTIzJyB9XG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcbiAgY2FwdHVyZS5jYXB0dXJlTG9nKCdkZWJ1ZycsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYGluZm9gIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLmluZm8oJ1VzZXIgcHJvZmlsZSB1cGRhdGVkJywge1xuICogICB1c2VySWQ6ICd1c2VyXzEyMycsXG4gKiAgIHVwZGF0ZWRGaWVsZHM6IFsnZW1haWwnLCAncHJlZmVyZW5jZXMnXVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuaW5mbygnVXNlciAlcyB1cGRhdGVkIHRoZWlyICVzJyxcbiAqICAgWydKb2huIERvZScsICdwcm9maWxlIHNldHRpbmdzJ10sXG4gKiAgIHsgdXNlcklkOiAndXNlcl8xMjMnIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5mbyguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnaW5mbycsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYHdhcm5gIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLndhcm4oJ1JhdGUgbGltaXQgYXBwcm9hY2hpbmcnLCB7XG4gKiAgIGVuZHBvaW50OiAnL2FwaS91c2VycycsXG4gKiAgIGN1cnJlbnRSYXRlOiAnOTUvMTAwJyxcbiAqICAgcmVzZXRUaW1lOiAnMjAyNC0wMy0yMFQxMDowMDowMFonXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci53YXJuKCdSYXRlIGxpbWl0ICVzIGZvciAlczogJXMnLFxuICogICBbJ2FwcHJvYWNoaW5nJywgJy9hcGkvdXNlcnMnLCAnOTUvMTAwIHJlcXVlc3RzJ10sXG4gKiAgIHsgcmVzZXRUaW1lOiAnMjAyNC0wMy0yMFQxMDowMDowMFonIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gd2FybiguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnd2FybicsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYGVycm9yYCBsZXZlbC4gUmVxdWlyZXMgdGhlIGBlbmFibGVMb2dzYCBvcHRpb24gdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgcGF5bWVudCcsIHtcbiAqICAgb3JkZXJJZDogJ29yZGVyXzEyMycsXG4gKiAgIGVycm9yQ29kZTogJ1BBWU1FTlRfRkFJTEVEJyxcbiAqICAgYW1vdW50OiA5OS45OVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZXJyb3IoJ1BheW1lbnQgcHJvY2Vzc2luZyBmYWlsZWQgZm9yIG9yZGVyICVzOiAlcycsXG4gKiAgIFsnb3JkZXJfMTIzJywgJ2luc3VmZmljaWVudCBmdW5kcyddLFxuICogICB7IGFtb3VudDogOTkuOTkgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBlcnJvciguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnZXJyb3InLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBmYXRhbGAgbGV2ZWwuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZmF0YWwoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gcG9vbCBleGhhdXN0ZWQnLCB7XG4gKiAgIGRhdGFiYXNlOiAndXNlcnMnLFxuICogICBhY3RpdmVDb25uZWN0aW9uczogMTAwLFxuICogICBtYXhDb25uZWN0aW9uczogMTAwXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5mYXRhbCgnRGF0YWJhc2UgJXM6ICVzIGNvbm5lY3Rpb25zIGFjdGl2ZScsXG4gKiAgIFsnY29ubmVjdGlvbiBwb29sIGV4aGF1c3RlZCcsICcxMDAvMTAwJ10sXG4gKiAgIHsgZGF0YWJhc2U6ICd1c2VycycgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBmYXRhbCguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnZmF0YWwnLCAuLi5hcmdzKTtcbn1cblxuZXhwb3J0cy5mbXQgPSBjb3JlLmZtdDtcbmV4cG9ydHMuZGVidWcgPSBkZWJ1ZztcbmV4cG9ydHMuZXJyb3IgPSBlcnJvcjtcbmV4cG9ydHMuZmF0YWwgPSBmYXRhbDtcbmV4cG9ydHMuaW5mbyA9IGluZm87XG5leHBvcnRzLnRyYWNlID0gdHJhY2U7XG5leHBvcnRzLndhcm4gPSB3YXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb3J0cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/logs/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/nodeVersion.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\nconst NODE_MINOR = NODE_VERSION.minor;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_MINOR = NODE_MINOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBOT0RFX1ZFUlNJT04gPSBjb3JlLnBhcnNlU2VtdmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZSkgO1xuY29uc3QgTk9ERV9NQUpPUiA9IE5PREVfVkVSU0lPTi5tYWpvcjtcbmNvbnN0IE5PREVfTUlOT1IgPSBOT0RFX1ZFUlNJT04ubWlub3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfTUlOT1IgPSBOT0RFX01JTk9SO1xuZXhwb3J0cy5OT0RFX1ZFUlNJT04gPSBOT0RFX1ZFUlNJT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlVmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/contextManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/otel/contextManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Scopes are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDBCQUEwQixtQkFBTyxDQUFDLDZIQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQyxtR0FBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL290ZWwvY29udGV4dE1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbnRleHRBc3luY0hvb2tzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rcycpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBjdXN0b20gQ29udGV4dE1hbmFnZXIgZm9yIE9wZW5UZWxlbWV0cnksIHdoaWNoIGV4dGVuZHMgdGhlIGRlZmF1bHQgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlci5cbiAqIEl0IGVuc3VyZXMgdGhhdCB3ZSBjcmVhdGUgYSBuZXcgaHViIHBlciBjb250ZXh0LCBzbyB0aGF0IHRoZSBPVEVMIENvbnRleHQgJiB0aGUgU2VudHJ5IFNjb3BlcyBhcmUgYWx3YXlzIGluIHN5bmMuXG4gKlxuICogTm90ZSB0aGF0IHdlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQXN5bmNIb29rcyB3aXRoIHRoaXMsXG4gKiBidXQgc2luY2UgdGhpcyBzaG91bGQgd29yayBmb3IgTm9kZSAxNCsgYW55aG93IHRoYXQgc2hvdWxkIGJlIGdvb2QgZW5vdWdoLlxuICovXG5jb25zdCBTZW50cnlDb250ZXh0TWFuYWdlciA9IG9wZW50ZWxlbWV0cnkud3JhcENvbnRleHRNYW5hZ2VyQ2xhc3MoY29udGV4dEFzeW5jSG9va3MuQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlcik7XG5cbmV4cG9ydHMuU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBTZW50cnlDb250ZXh0TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHRNYW5hZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/instrument.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/otel/instrument.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  creatorOrClass,\n  optionsCallback,\n) {\n  if (optionsCallback) {\n    return _generateInstrumentOnceWithOptions(\n      name,\n      creatorOrClass ,\n      optionsCallback,\n    );\n  }\n\n  return _generateInstrumentOnce(name, creatorOrClass );\n}\n\n// The plain version without handling of options\n// Should not be used with custom options that are mutated in the creator!\nfunction _generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return instrumented;\n      }\n\n      const instrumentation$1 = creator(options);\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n// This version handles options properly\nfunction _generateInstrumentOnceWithOptions\n\n(\n  name,\n  instrumentationClass,\n  optionsCallback,\n) {\n  return Object.assign(\n    (_options) => {\n      const options = optionsCallback(_options);\n\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // Ensure we update options\n        instrumented.setConfig(options);\n        return instrumented;\n      }\n\n      const instrumentation$1 = new instrumentationClass(options) ;\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n/**\n * Ensure a given callback is called when the instrumentation is actually wrapping something.\n * This can be used to ensure some logic is only called when the instrumentation is actually active.\n *\n * This function returns a function that can be invoked with a callback.\n * This callback will either be invoked immediately\n * (e.g. if the instrumentation was already wrapped, or if _wrap could not be patched),\n * or once the instrumentation is actually wrapping something.\n *\n * Make sure to call this function right after adding the instrumentation, otherwise it may be too late!\n * The returned callback can be used any time, and also multiple times.\n */\nfunction instrumentWhenWrapped(instrumentation) {\n  let isWrapped = false;\n  let callbacks = [];\n\n  if (!hasWrap(instrumentation)) {\n    isWrapped = true;\n  } else {\n    const originalWrap = instrumentation['_wrap'];\n\n    instrumentation['_wrap'] = (...args) => {\n      isWrapped = true;\n      callbacks.forEach(callback => callback());\n      callbacks = [];\n      return originalWrap(...args);\n    };\n  }\n\n  const registerCallback = (callback) => {\n    if (isWrapped) {\n      callback();\n    } else {\n      callbacks.push(callback);\n    }\n  };\n\n  return registerCallback;\n}\n\nfunction hasWrap(\n  instrumentation,\n) {\n  return typeof (instrumentation )['_wrap'] === 'function';\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\nexports.instrumentWhenWrapped = instrumentWhenWrapped;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2luc3RydW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMscUhBQWdDOztBQUVoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMLE1BQU0sVUFBVTtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLEtBQUs7QUFDTCxNQUFNLFVBQVU7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2luc3RydW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNyZWF0b3JPckNsYXNzLFxuICBvcHRpb25zQ2FsbGJhY2ssXG4pIHtcbiAgaWYgKG9wdGlvbnNDYWxsYmFjaykge1xuICAgIHJldHVybiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zKFxuICAgICAgbmFtZSxcbiAgICAgIGNyZWF0b3JPckNsYXNzICxcbiAgICAgIG9wdGlvbnNDYWxsYmFjayxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKG5hbWUsIGNyZWF0b3JPckNsYXNzICk7XG59XG5cbi8vIFRoZSBwbGFpbiB2ZXJzaW9uIHdpdGhvdXQgaGFuZGxpbmcgb2Ygb3B0aW9uc1xuLy8gU2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggY3VzdG9tIG9wdGlvbnMgdGhhdCBhcmUgbXV0YXRlZCBpbiB0aGUgY3JlYXRvciFcbmZ1bmN0aW9uIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBuYW1lLFxuICBjcmVhdG9yLFxuKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSBwcm92aWRlZCwgZW5zdXJlIHdlIHVwZGF0ZSB0aGVtXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudGVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24kMSA9IGNyZWF0b3Iob3B0aW9ucyk7XG4gICAgICBJTlNUUlVNRU5URURbbmFtZV0gPSBpbnN0cnVtZW50YXRpb24kMTtcblxuICAgICAgaW5zdHJ1bWVudGF0aW9uLnJlZ2lzdGVySW5zdHJ1bWVudGF0aW9ucyh7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnM6IFtpbnN0cnVtZW50YXRpb24kMV0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbiQxO1xuICAgIH0sXG4gICAgeyBpZDogbmFtZSB9LFxuICApO1xufVxuXG4vLyBUaGlzIHZlcnNpb24gaGFuZGxlcyBvcHRpb25zIHByb3Blcmx5XG5mdW5jdGlvbiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zXG5cbihcbiAgbmFtZSxcbiAgaW5zdHJ1bWVudGF0aW9uQ2xhc3MsXG4gIG9wdGlvbnNDYWxsYmFjayxcbikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAoX29wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25zQ2FsbGJhY2soX29wdGlvbnMpO1xuXG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBFbnN1cmUgd2UgdXBkYXRlIG9wdGlvbnNcbiAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGluc3RydW1lbnRlZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uJDEgPSBuZXcgaW5zdHJ1bWVudGF0aW9uQ2xhc3Mob3B0aW9ucykgO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uJDE7XG5cbiAgICAgIGluc3RydW1lbnRhdGlvbi5yZWdpc3Rlckluc3RydW1lbnRhdGlvbnMoe1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zOiBbaW5zdHJ1bWVudGF0aW9uJDFdLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbnN0cnVtZW50YXRpb24kMTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBnaXZlbiBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IHdyYXBwaW5nIHNvbWV0aGluZy5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZW5zdXJlIHNvbWUgbG9naWMgaXMgb25seSBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IGFjdGl2ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBpbnZva2VkIHdpdGggYSBjYWxsYmFjay5cbiAqIFRoaXMgY2FsbGJhY2sgd2lsbCBlaXRoZXIgYmUgaW52b2tlZCBpbW1lZGlhdGVseVxuICogKGUuZy4gaWYgdGhlIGluc3RydW1lbnRhdGlvbiB3YXMgYWxyZWFkeSB3cmFwcGVkLCBvciBpZiBfd3JhcCBjb3VsZCBub3QgYmUgcGF0Y2hlZCksXG4gKiBvciBvbmNlIHRoZSBpbnN0cnVtZW50YXRpb24gaXMgYWN0dWFsbHkgd3JhcHBpbmcgc29tZXRoaW5nLlxuICpcbiAqIE1ha2Ugc3VyZSB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmlnaHQgYWZ0ZXIgYWRkaW5nIHRoZSBpbnN0cnVtZW50YXRpb24sIG90aGVyd2lzZSBpdCBtYXkgYmUgdG9vIGxhdGUhXG4gKiBUaGUgcmV0dXJuZWQgY2FsbGJhY2sgY2FuIGJlIHVzZWQgYW55IHRpbWUsIGFuZCBhbHNvIG11bHRpcGxlIHRpbWVzLlxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKSB7XG4gIGxldCBpc1dyYXBwZWQgPSBmYWxzZTtcbiAgbGV0IGNhbGxiYWNrcyA9IFtdO1xuXG4gIGlmICghaGFzV3JhcChpbnN0cnVtZW50YXRpb24pKSB7XG4gICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBvcmlnaW5hbFdyYXAgPSBpbnN0cnVtZW50YXRpb25bJ193cmFwJ107XG5cbiAgICBpbnN0cnVtZW50YXRpb25bJ193cmFwJ10gPSAoLi4uYXJncykgPT4ge1xuICAgICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgICAgY2FsbGJhY2tzID0gW107XG4gICAgICByZXR1cm4gb3JpZ2luYWxXcmFwKC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBjb25zdCByZWdpc3RlckNhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGlzV3JhcHBlZCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gcmVnaXN0ZXJDYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaGFzV3JhcChcbiAgaW5zdHJ1bWVudGF0aW9uLFxuKSB7XG4gIHJldHVybiB0eXBlb2YgKGluc3RydW1lbnRhdGlvbiApWydfd3JhcCddID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnRzLklOU1RSVU1FTlRFRCA9IElOU1RSVU1FTlRFRDtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGdlbmVyYXRlSW5zdHJ1bWVudE9uY2U7XG5leHBvcnRzLmluc3RydW1lbnRXaGVuV3JhcHBlZCA9IGluc3RydW1lbnRXaGVuV3JhcHBlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/logger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/otel/logger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Setup the OTEL logger to use our own debug logger.\n */\nfunction setupOpenTelemetryLogger() {\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(\n    {\n      error: core.debug.error,\n      warn: core.debug.warn,\n      info: core.debug.log,\n      debug: core.debug.log,\n      verbose: core.debug.log,\n    },\n    api.DiagLogLevel.DEBUG,\n  );\n}\n\nexports.setupOpenTelemetryLogger = setupOpenTelemetryLogger;\n//# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2xvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogU2V0dXAgdGhlIE9URUwgbG9nZ2VyIHRvIHVzZSBvdXIgb3duIGRlYnVnIGxvZ2dlci5cbiAqL1xuZnVuY3Rpb24gc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCkge1xuICAvLyBEaXNhYmxlIGRpYWcsIHRvIGVuc3VyZSB0aGlzIHdvcmtzIGV2ZW4gaWYgY2FsbGVkIG11bHRpcGxlIHRpbWVzXG4gIGFwaS5kaWFnLmRpc2FibGUoKTtcbiAgYXBpLmRpYWcuc2V0TG9nZ2VyKFxuICAgIHtcbiAgICAgIGVycm9yOiBjb3JlLmRlYnVnLmVycm9yLFxuICAgICAgd2FybjogY29yZS5kZWJ1Zy53YXJuLFxuICAgICAgaW5mbzogY29yZS5kZWJ1Zy5sb2csXG4gICAgICBkZWJ1ZzogY29yZS5kZWJ1Zy5sb2csXG4gICAgICB2ZXJib3NlOiBjb3JlLmRlYnVnLmxvZyxcbiAgICB9LFxuICAgIGFwaS5EaWFnTG9nTGV2ZWwuREVCVUcsXG4gICk7XG59XG5cbmV4cG9ydHMuc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyID0gc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/otel/logger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/proxy/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9wcm94eS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxtQkFBTyxDQUFDLDhCQUFZOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvcHJveHkvYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xucmVxdWlyZSgnbm9kZTpodHRwcycpO1xuXG4vKipcbiAqIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBmb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL3RyZWUvYjEzMzI5NWZkMTZmNjQ3NTU3OGI2YjE1YmQ5YjRlMzNlY2IwZDBiN1xuICogV2l0aCB0aGUgZm9sbG93aW5nIExJQ0VOU0U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgTmF0aGFuIFJhamxpY2ggPG5hdGhhbkB0b290YWxsbmF0ZS5uZXQ+KlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOipcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuKlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdBZ2VudEJhc2VJbnRlcm5hbFN0YXRlJyk7XG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cC5BZ2VudCB7XG5cbiAgLy8gU2V0IGJ5IGBodHRwLkFnZW50YCAtIG1pc3NpbmcgZnJvbSBgQHR5cGVzL25vZGVgXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXNbSU5URVJOQUxdID0ge307XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhbiBgaHR0cGAgb3IgYGh0dHBzYCByZXF1ZXN0LlxuICAgKi9cbiAgaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIHRoZSBgc2VjdXJlRW5kcG9pbnRgIHByb3BlcnR5IGV4cGxpY2l0bHksIHNpbmNlIHRoaXNcbiAgICAgIC8vIG1lYW5zIHRoYXQgYSBwYXJlbnQgYEFnZW50YCBpcyBcInBhc3NpbmcgdGhyb3VnaFwiIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICBpZiAodHlwZW9mIChvcHRpb25zICkuc2VjdXJlRW5kcG9pbnQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWN1cmVFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gZXhwbGljaXQgYHNlY3VyZWAgZW5kcG9pbnQsIGNoZWNrIGlmIGBwcm90b2NvbGAgcHJvcGVydHkgaXNcbiAgICAgIC8vIHNldC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIGNhc2Ugc2luY2UgdXNpbmcgYSBmdWxsIHN0cmluZyBVUkxcbiAgICAgIC8vIG9yIGBVUkxgIGluc3RhbmNlIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gdXNhZ2UuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBpZiBubyBgcHJvdG9jb2xgIHByb3BlcnR5IHdhcyBzZXQsIHRoZW4gZmFsbCBiYWNrIHRvXG4gICAgLy8gY2hlY2tpbmcgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBjdXJyZW50IGNhbGwgc3RhY2ssIGFuZCB0cnkgdG9cbiAgICAvLyBkZXRlY3QgdGhlIFwiaHR0cHNcIiBtb2R1bGUuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKHR5cGVvZiBzdGFjayAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RhY2suc3BsaXQoJ1xcbicpLnNvbWUobCA9PiBsLmluZGV4T2YoJyhodHRwcy5qczonKSAhPT0gLTEgfHwgbC5pbmRleE9mKCdub2RlOmh0dHBzOicpICE9PSAtMSk7XG4gIH1cblxuICBjcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYikge1xuICAgIGNvbnN0IGNvbm5lY3RPcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNlY3VyZUVuZHBvaW50OiB0aGlzLmlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucyksXG4gICAgfTtcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0KHJlcSwgY29ubmVjdE9wdHMpKVxuICAgICAgLnRoZW4oc29ja2V0ID0+IHtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIGh0dHAuQWdlbnQpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBhZGRSZXF1ZXN0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICAgIHJldHVybiBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIGNvbm5lY3RPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gc29ja2V0O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBjcmVhdGVTb2NrZXQoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgIHN1cGVyLmNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH0sIGNiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldDtcbiAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIGlmICghc29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNvY2tldCB3YXMgcmV0dXJuZWQgaW4gdGhlIGBjb25uZWN0KClgIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cblxuICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbSU5URVJOQUxdLmRlZmF1bHRQb3J0ID8/ICh0aGlzLnByb3RvY29sID09PSAnaHR0cHM6JyA/IDQ0MyA6IDgwKTtcbiAgfVxuXG4gIHNldCBkZWZhdWx0UG9ydCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCA9IHY7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHByb3RvY29sKCkge1xuICAgIHJldHVybiB0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCA/PyAodGhpcy5pc1NlY3VyZUVuZHBvaW50KCkgPyAnaHR0cHM6JyA6ICdodHRwOicpO1xuICB9XG5cbiAgc2V0IHByb3RvY29sKHYpIHtcbiAgICBpZiAodGhpc1tJTlRFUk5BTF0pIHtcbiAgICAgIHRoaXNbSU5URVJOQUxdLnByb3RvY29sID0gdjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5BZ2VudCA9IEFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/proxy/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debugLog(...args) {\n  core.debug.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debugLog('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debugLog('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debugLog('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debugLog('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debugLog('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n} HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debugLog(...args) {\n  core.debug.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debugLog('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debugLog('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debugLog('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.subarray(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debugLog('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5mdW5jdGlvbiBkZWJ1Z0xvZyguLi5hcmdzKSB7XG4gIGNvcmUuZGVidWcubG9nKCdbaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2VdJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUHJveHlSZXNwb25zZShzb2NrZXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gICAgLy8gdGhlIENPTk5FQ1QgcmVzcG9uc2UsIHNvIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gXCIyMDBcIlxuICAgIC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXG4gICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBjb25zdCBiID0gc29ja2V0LnJlYWQoKTtcbiAgICAgIGlmIChiKSBvbmRhdGEoYik7XG4gICAgICBlbHNlIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCByZWFkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnTG9nKCdvbmVuZCcpO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignUHJveHkgY29ubmVjdGlvbiBlbmRlZCBiZWZvcmUgcmVjZWl2aW5nIENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnTG9nKCdvbmVycm9yICVvJywgZXJyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZGF0YShiKSB7XG4gICAgICBidWZmZXJzLnB1c2goYik7XG4gICAgICBidWZmZXJzTGVuZ3RoICs9IGIubGVuZ3RoO1xuXG4gICAgICBjb25zdCBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgICBjb25zdCBlbmRPZkhlYWRlcnMgPSBidWZmZXJlZC5pbmRleE9mKCdcXHJcXG5cXHJcXG4nKTtcblxuICAgICAgaWYgKGVuZE9mSGVhZGVycyA9PT0gLTEpIHtcbiAgICAgICAgLy8ga2VlcCBidWZmZXJpbmdcbiAgICAgICAgZGVidWdMb2coJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XG4gICAgICAgIHJlYWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXJQYXJ0cyA9IGJ1ZmZlcmVkLnN1YmFycmF5KDAsIGVuZE9mSGVhZGVycykudG9TdHJpbmcoJ2FzY2lpJykuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgY29uc3QgZmlyc3RMaW5lID0gaGVhZGVyUGFydHMuc2hpZnQoKTtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdObyBoZWFkZXIgcmVjZWl2ZWQgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlJykpO1xuICAgICAgfVxuICAgICAgY29uc3QgZmlyc3RMaW5lUGFydHMgPSBmaXJzdExpbmUuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSArKGZpcnN0TGluZVBhcnRzWzFdIHx8IDApO1xuICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IGZpcnN0TGluZVBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlclBhcnRzKSB7XG4gICAgICAgIGlmICghaGVhZGVyKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZmlyc3RDb2xvbiA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGlmIChmaXJzdENvbG9uID09PSAtMSkge1xuICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZTogXCIke2hlYWRlcn1cImApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBoZWFkZXIuc2xpY2UoMCwgZmlyc3RDb2xvbikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc2xpY2UoZmlyc3RDb2xvbiArIDEpLnRyaW1TdGFydCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gaGVhZGVyc1trZXldO1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1trZXldID0gW2N1cnJlbnQsIHZhbHVlXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVidWdMb2coJ2dvdCBwcm94eSBzZXJ2ZXIgcmVzcG9uc2U6ICVvICVvJywgZmlyc3RMaW5lLCBoZWFkZXJzKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBjb25uZWN0OiB7XG4gICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGJ1ZmZlcmVkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5vbignZW5kJywgb25lbmQpO1xuXG4gICAgcmVhZCgpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSBwYXJzZVByb3h5UmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wcm94eS1yZXNwb25zZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/api.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/sdk/api.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/client.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/sdk/client.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const serverName =\n      options.includeServerName === false\n        ? undefined\n        : options.serverName || global.process.env.SENTRY_NAME || os.hostname();\n\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName,\n    };\n\n    if (options.openTelemetryInstrumentations) {\n      instrumentation.registerInstrumentations({\n        instrumentations: options.openTelemetryInstrumentations,\n      });\n    }\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.debug.log(`Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`);\n\n    super(clientOptions);\n\n    if (this.getOptions().enableLogs) {\n      this._logOnExitFlushListener = () => {\n        core._INTERNAL_flushLogsBuffer(this);\n      };\n\n      if (serverName) {\n        this.on('beforeCaptureLog', log => {\n          log.attributes = {\n            ...log.attributes,\n            'server.address': serverName,\n          };\n        });\n      }\n\n      process.on('beforeExit', this._logOnExitFlushListener);\n    }\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n\n    await provider?.forceFlush();\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    if (this._logOnExitFlushListener) {\n      process.off('beforeExit', this._logOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(() => {\n        debugBuild.DEBUG_BUILD && core.debug.log('Flushing client reports based on interval.');\n        this._flushOutcomes();\n      }, clientOptions.clientReportFlushInterval ?? DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n\n  /** Custom implementation for OTEL, so we can handle scope-span linking. */\n   _getTraceInfoFromScope(\n    scope,\n  ) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n\n    return opentelemetry.getTraceContextForScope(this, scope);\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"import-in-the-middle\");\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader() {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 21 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered) {\n      try {\n        const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/esmLoader.js', document.baseURI).href)), {\n          data: { addHookMessagePort, include: [] },\n          transferList: [addHookMessagePort],\n        });\n      } catch (error) {\n        core.debug.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry] You are using Node.js v${process.versions.node} in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or upgrade your Node.js version.`,\n      );\n    });\n  }\n}\n\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\n//# sourceMappingURL=esmLoader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvZXNtTG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQywwQkFBMEIsbUJBQU8sQ0FBQyxrREFBc0I7QUFDeEQscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBLDBHQUEwRyxxREFBaUM7QUFDM0ksa0JBQWtCLGlDQUFpQztBQUNuRDtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx1QkFBdUI7QUFDbEU7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvc2RrL2VzbUxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW1wb3J0SW5UaGVNaWRkbGUgPSByZXF1aXJlKCdpbXBvcnQtaW4tdGhlLW1pZGRsZScpO1xuY29uc3QgbW9kdWxlTW9kdWxlID0gcmVxdWlyZSgnbW9kdWxlJyk7XG5cbnZhciBfZG9jdW1lbnRDdXJyZW50U2NyaXB0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgOiBudWxsO1xuLyoqIEluaXRpYWxpemUgdGhlIEVTTSBsb2FkZXIuICovXG5mdW5jdGlvbiBtYXliZUluaXRpYWxpemVFc21Mb2FkZXIoKSB7XG4gIGNvbnN0IFtub2RlTWFqb3IgPSAwLCBub2RlTWlub3IgPSAwXSA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpLm1hcChOdW1iZXIpO1xuXG4gIC8vIFJlZ2lzdGVyIGhvb2sgd2FzIGFkZGVkIGluIHYyMC42LjAgYW5kIHYxOC4xOS4wXG4gIGlmIChub2RlTWFqb3IgPj0gMjEgfHwgKG5vZGVNYWpvciA9PT0gMjAgJiYgbm9kZU1pbm9yID49IDYpIHx8IChub2RlTWFqb3IgPT09IDE4ICYmIG5vZGVNaW5vciA+PSAxOSkpIHtcbiAgICBpZiAoIWNvcmUuR0xPQkFMX09CSi5fc2VudHJ5RXNtTG9hZGVySG9va1JlZ2lzdGVyZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgYWRkSG9va01lc3NhZ2VQb3J0IH0gPSBpbXBvcnRJblRoZU1pZGRsZS5jcmVhdGVBZGRIb29rTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciByZWdpc3RlciBpcyBhdmFpbGFibGUgaW4gdGhlc2UgdmVyc2lvbnNcbiAgICAgICAgbW9kdWxlTW9kdWxlLmRlZmF1bHQucmVnaXN0ZXIoJ2ltcG9ydC1pbi10aGUtbWlkZGxlL2hvb2subWpzJywgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCd1JyArICdybCcpLnBhdGhUb0ZpbGVVUkwoX19maWxlbmFtZSkuaHJlZiA6IChfZG9jdW1lbnRDdXJyZW50U2NyaXB0ICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJiBfZG9jdW1lbnRDdXJyZW50U2NyaXB0LnNyYyB8fCBuZXcgVVJMKCdzZGsvZXNtTG9hZGVyLmpzJywgZG9jdW1lbnQuYmFzZVVSSSkuaHJlZikpLCB7XG4gICAgICAgICAgZGF0YTogeyBhZGRIb29rTWVzc2FnZVBvcnQsIGluY2x1ZGU6IFtdIH0sXG4gICAgICAgICAgdHJhbnNmZXJMaXN0OiBbYWRkSG9va01lc3NhZ2VQb3J0XSxcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb3JlLmRlYnVnLndhcm4oJ0ZhaWxlZCB0byByZWdpc3RlciBFU00gaG9vaycsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgW1NlbnRyeV0gWW91IGFyZSB1c2luZyBOb2RlLmpzIHYke3Byb2Nlc3MudmVyc2lvbnMubm9kZX0gaW4gRVNNIG1vZGUgKFwiaW1wb3J0IHN5bnRheFwiKS4gVGhlIFNlbnRyeSBOb2RlLmpzIFNESyBpcyBub3QgY29tcGF0aWJsZSB3aXRoIEVTTSBpbiBOb2RlLmpzIHZlcnNpb25zIGJlZm9yZSAxOC4xOS4wIG9yIGJlZm9yZSAyMC42LjAuIFBsZWFzZSBlaXRoZXIgYnVpbGQgeW91ciBhcHBsaWNhdGlvbiB3aXRoIENvbW1vbkpTIChcInJlcXVpcmUoKSBzeW50YXhcIiksIG9yIHVwZ3JhZGUgeW91ciBOb2RlLmpzIHZlcnNpb24uYCxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0cy5tYXliZUluaXRpYWxpemVFc21Mb2FkZXIgPSBtYXliZUluaXRpYWxpemVFc21Mb2FkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc21Mb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/sdk/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/modules.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/node-fetch/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\");\nconst processSession = __webpack_require__(/*! ../integrations/processSession.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/processSession.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/client.js\");\nconst esmLoader = __webpack_require__(/*! ./esmLoader.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js\");\n\n/**\n * Get default integrations for the Node-Core SDK.\n */\nfunction getDefaultIntegrations() {\n  return [\n    // Common\n    // TODO(v11): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    core.consoleIntegration(),\n    index.httpIntegration(),\n    index$1.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$2.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    processSession.processSessionIntegration(),\n    modules.modulesIntegration(),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.debug.enable();\n    } else {\n      // use `console.warn` rather than `debug.warn` since by non-debug bundles have all `debug.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    esmLoader.maybeInitializeEsmLoader();\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  core.applySdkMetadata(options, 'node-core');\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.debug.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.debug.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    core.debug.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n  const spotlight =\n    options.spotlight ?? envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true }) ?? process.env.SENTRY_SPOTLIGHT;\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const mergedOptions = {\n    ...options,\n    dsn: options.dsn ?? process.env.SENTRY_DSN,\n    environment: options.environment ?? process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: options.sendClientReports ?? true,\n    transport: options.transport ?? http.makeNodeTransport,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    release,\n    tracesSampleRate,\n    spotlight,\n    debug: envToBool.envToBool(options.debug ?? process.env.SENTRY_DEBUG),\n  };\n\n  const integrations = options.integrations;\n  const defaultIntegrations = options.defaultIntegrations ?? getDefaultIntegrationsImpl(mergedOptions);\n\n  return {\n    ...mergedOptions,\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations,\n      integrations,\n    }),\n  };\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLG1HQUF1QjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyxpR0FBbUI7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsNkhBQWlDO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLG1IQUE0QjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQyw2SEFBaUM7QUFDOUQsY0FBYyxtQkFBTyxDQUFDLHlIQUErQjtBQUNyRCxnQkFBZ0IsbUJBQU8sQ0FBQywrSUFBMEM7QUFDbEUsZ0JBQWdCLG1CQUFPLENBQUMsbUhBQTRCO0FBQ3BELGdCQUFnQixtQkFBTyxDQUFDLHFJQUFxQztBQUM3RCw0QkFBNEIsbUJBQU8sQ0FBQywySUFBd0M7QUFDNUUsNkJBQTZCLG1CQUFPLENBQUMsNklBQXlDO0FBQzlFLHVCQUF1QixtQkFBTyxDQUFDLGlJQUFtQztBQUNsRSxrQkFBa0IsbUJBQU8sQ0FBQyx1SEFBOEI7QUFDeEQsYUFBYSxtQkFBTyxDQUFDLHlHQUF1QjtBQUM1QyxpQkFBaUIsbUJBQU8sQ0FBQyx1R0FBc0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMseUdBQXVCO0FBQ2pELFlBQVksbUJBQU8sQ0FBQyxvRkFBVTtBQUM5QixlQUFlLG1CQUFPLENBQUMsMEZBQWE7QUFDcEMsa0JBQWtCLG1CQUFPLENBQUMsZ0dBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEseURBQXlELE1BQU07QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLCtCQUErQix1Q0FBdUM7O0FBRXRFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUU7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsY0FBYztBQUMzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsWUFBWTtBQUNaLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvc2RrL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9jaGlsZFByb2Nlc3MuanMnKTtcbmNvbnN0IGNvbnRleHQgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvY29udGV4dC5qcycpO1xuY29uc3QgY29udGV4dGxpbmVzID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL2NvbnRleHRsaW5lcy5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanMnKTtcbmNvbnN0IG1vZHVsZXMgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcycpO1xuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL2luZGV4LmpzJyk7XG5jb25zdCBvbnVuY2F1Z2h0ZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL29udW5jYXVnaHRleGNlcHRpb24uanMnKTtcbmNvbnN0IG9udW5oYW5kbGVkcmVqZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzJyk7XG5jb25zdCBwcm9jZXNzU2Vzc2lvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9wcm9jZXNzU2Vzc2lvbi5qcycpO1xuY29uc3Qgc3BvdGxpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydHMvaHR0cC5qcycpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb25qcy5qcycpO1xuY29uc3QgZW52VG9Cb29sID0gcmVxdWlyZSgnLi4vdXRpbHMvZW52VG9Cb29sLmpzJyk7XG5jb25zdCBhcGkgPSByZXF1aXJlKCcuL2FwaS5qcycpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQuanMnKTtcbmNvbnN0IGVzbUxvYWRlciA9IHJlcXVpcmUoJy4vZXNtTG9hZGVyLmpzJyk7XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgTm9kZS1Db3JlIFNESy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBDb21tb25cbiAgICAvLyBUT0RPKHYxMSk6IFJlcGxhY2Ugd2l0aCBgZXZlbnRGaWx0ZXJzSW50ZWdyYXRpb25gIG9uY2Ugd2UgcmVtb3ZlIHRoZSBkZXByZWNhdGVkIGBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uYFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvcmUuaW5ib3VuZEZpbHRlcnNJbnRlZ3JhdGlvbigpLFxuICAgIGNvcmUuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKCksXG4gICAgY29yZS5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbigpLFxuICAgIGNvcmUucmVxdWVzdERhdGFJbnRlZ3JhdGlvbigpLFxuICAgIC8vIE5hdGl2ZSBXcmFwcGVyc1xuICAgIGNvcmUuY29uc29sZUludGVncmF0aW9uKCksXG4gICAgaW5kZXguaHR0cEludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMS5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbigpLFxuICAgIC8vIEdsb2JhbCBIYW5kbGVyc1xuICAgIG9udW5jYXVnaHRleGNlcHRpb24ub25VbmNhdWdodEV4Y2VwdGlvbkludGVncmF0aW9uKCksXG4gICAgb251bmhhbmRsZWRyZWplY3Rpb24ub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbigpLFxuICAgIC8vIEV2ZW50IEluZm9cbiAgICBjb250ZXh0bGluZXMuY29udGV4dExpbmVzSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQyLmxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24oKSxcbiAgICBjb250ZXh0Lm5vZGVDb250ZXh0SW50ZWdyYXRpb24oKSxcbiAgICBjaGlsZFByb2Nlc3MuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24oKSxcbiAgICBwcm9jZXNzU2Vzc2lvbi5wcm9jZXNzU2Vzc2lvbkludGVncmF0aW9uKCksXG4gICAgbW9kdWxlcy5tb2R1bGVzSW50ZWdyYXRpb24oKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZS5cbiAqL1xuZnVuY3Rpb24gaW5pdChvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IGFueSBpbnRlZ3JhdGlvbnMgYWRkZWQgYnkgZGVmYXVsdC5cbiAqL1xuZnVuY3Rpb24gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gX2luaXQob3B0aW9ucywgKCkgPT4gW10pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gX2luaXQoXG4gIF9vcHRpb25zID0ge30sXG4gIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsLFxuKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBnZXRDbGllbnRPcHRpb25zKF9vcHRpb25zLCBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCk7XG5cbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgY29yZS5kZWJ1Zy5lbmFibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlIGBjb25zb2xlLndhcm5gIHJhdGhlciB0aGFuIGBkZWJ1Zy53YXJuYCBzaW5jZSBieSBub24tZGVidWcgYnVuZGxlcyBoYXZlIGFsbCBgZGVidWcueGAgc3RhdGVtZW50cyBzdHJpcHBlZFxuICAgICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb21tb25qcy5pc0NqcygpICYmIG9wdGlvbnMucmVnaXN0ZXJFc21Mb2FkZXJIb29rcyAhPT0gZmFsc2UpIHtcbiAgICBlc21Mb2FkZXIubWF5YmVJbml0aWFsaXplRXNtTG9hZGVyKCk7XG4gIH1cblxuICBvcGVudGVsZW1ldHJ5LnNldE9wZW5UZWxlbWV0cnlDb250ZXh0QXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcblxuICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gIHNjb3BlLnVwZGF0ZShvcHRpb25zLmluaXRpYWxTY29wZSk7XG5cbiAgaWYgKG9wdGlvbnMuc3BvdGxpZ2h0ICYmICFvcHRpb25zLmludGVncmF0aW9ucy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gc3BvdGxpZ2h0LklOVEVHUkFUSU9OX05BTUUpKSB7XG4gICAgb3B0aW9ucy5pbnRlZ3JhdGlvbnMucHVzaChcbiAgICAgIHNwb3RsaWdodC5zcG90bGlnaHRJbnRlZ3JhdGlvbih7XG4gICAgICAgIHNpZGVjYXJVcmw6IHR5cGVvZiBvcHRpb25zLnNwb3RsaWdodCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnNwb3RsaWdodCA6IHVuZGVmaW5lZCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgJ25vZGUtY29yZScpO1xuXG4gIGNvbnN0IGNsaWVudCQxID0gbmV3IGNsaWVudC5Ob2RlQ2xpZW50KG9wdGlvbnMpO1xuICAvLyBUaGUgY2xpZW50IGlzIG9uIHRoZSBjdXJyZW50IHNjb3BlLCBmcm9tIHdoZXJlIGl0IGdlbmVyYWxseSBpcyBpbmhlcml0ZWRcbiAgY29yZS5nZXRDdXJyZW50U2NvcGUoKS5zZXRDbGllbnQoY2xpZW50JDEpO1xuXG4gIGNsaWVudCQxLmluaXQoKTtcblxuICBjb3JlLmRlYnVnLmxvZyhgUnVubmluZyBpbiAke2NvbW1vbmpzLmlzQ2pzKCkgPyAnQ29tbW9uSlMnIDogJ0VTTSd9IG1vZGUuYCk7XG5cbiAgY2xpZW50JDEuc3RhcnRDbGllbnRSZXBvcnRUcmFja2luZygpO1xuXG4gIHVwZGF0ZVNjb3BlRnJvbUVudlZhcmlhYmxlcygpO1xuXG4gIG9wZW50ZWxlbWV0cnkuZW5oYW5jZURzY1dpdGhPcGVuVGVsZW1ldHJ5Um9vdFNwYW5OYW1lKGNsaWVudCQxKTtcbiAgb3BlbnRlbGVtZXRyeS5zZXR1cEV2ZW50Q29udGV4dFRyYWNlKGNsaWVudCQxKTtcblxuICByZXR1cm4gY2xpZW50JDE7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgdGhhdCB5b3VyIE9wZW5UZWxlbWV0cnkgc2V0dXAgaXMgY29ycmVjdC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXAoKSB7XG4gIGlmICghZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNldHVwID0gb3BlbnRlbGVtZXRyeS5vcGVuVGVsZW1ldHJ5U2V0dXBDaGVjaygpO1xuXG4gIGNvbnN0IHJlcXVpcmVkID0gWydTZW50cnlDb250ZXh0TWFuYWdlcicsICdTZW50cnlQcm9wYWdhdG9yJ107XG5cbiAgaWYgKGNvcmUuaGFzU3BhbnNFbmFibGVkKCkpIHtcbiAgICByZXF1aXJlZC5wdXNoKCdTZW50cnlTcGFuUHJvY2Vzc29yJyk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGsgb2YgcmVxdWlyZWQpIHtcbiAgICBpZiAoIXNldHVwLmluY2x1ZGVzKGspKSB7XG4gICAgICBjb3JlLmRlYnVnLmVycm9yKFxuICAgICAgICBgWW91IGhhdmUgdG8gc2V0IHVwIHRoZSAke2t9LiBXaXRob3V0IHRoaXMsIHRoZSBPcGVuVGVsZW1ldHJ5ICYgU2VudHJ5IGludGVncmF0aW9uIHdpbGwgbm90IHdvcmsgcHJvcGVybHkuYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZXR1cC5pbmNsdWRlcygnU2VudHJ5U2FtcGxlcicpKSB7XG4gICAgY29yZS5kZWJ1Zy53YXJuKFxuICAgICAgJ1lvdSBoYXZlIHRvIHNldCB1cCB0aGUgU2VudHJ5U2FtcGxlci4gV2l0aG91dCB0aGlzLCB0aGUgT3BlblRlbGVtZXRyeSAmIFNlbnRyeSBpbnRlZ3JhdGlvbiBtYXkgc3RpbGwgd29yaywgYnV0IHNhbXBsZSByYXRlcyBzZXQgZm9yIHRoZSBTZW50cnkgU0RLIHdpbGwgbm90IGJlIHJlc3BlY3RlZC4gSWYgeW91IHVzZSBhIGN1c3RvbSBzYW1wbGVyLCBtYWtlIHN1cmUgdG8gdXNlIGB3cmFwU2FtcGxpbmdEZWNpc2lvbmAuJyxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudE9wdGlvbnMoXG4gIG9wdGlvbnMsXG4gIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsLFxuKSB7XG4gIGNvbnN0IHJlbGVhc2UgPSBnZXRSZWxlYXNlKG9wdGlvbnMucmVsZWFzZSk7XG4gIGNvbnN0IHNwb3RsaWdodCA9XG4gICAgb3B0aW9ucy5zcG90bGlnaHQgPz8gZW52VG9Cb29sLmVudlRvQm9vbChwcm9jZXNzLmVudi5TRU5UUllfU1BPVExJR0hULCB7IHN0cmljdDogdHJ1ZSB9KSA/PyBwcm9jZXNzLmVudi5TRU5UUllfU1BPVExJR0hUO1xuICBjb25zdCB0cmFjZXNTYW1wbGVSYXRlID0gZ2V0VHJhY2VzU2FtcGxlUmF0ZShvcHRpb25zLnRyYWNlc1NhbXBsZVJhdGUpO1xuXG4gIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBkc246IG9wdGlvbnMuZHNuID8/IHByb2Nlc3MuZW52LlNFTlRSWV9EU04sXG4gICAgZW52aXJvbm1lbnQ6IG9wdGlvbnMuZW52aXJvbm1lbnQgPz8gcHJvY2Vzcy5lbnYuU0VOVFJZX0VOVklST05NRU5ULFxuICAgIHNlbmRDbGllbnRSZXBvcnRzOiBvcHRpb25zLnNlbmRDbGllbnRSZXBvcnRzID8/IHRydWUsXG4gICAgdHJhbnNwb3J0OiBvcHRpb25zLnRyYW5zcG9ydCA/PyBodHRwLm1ha2VOb2RlVHJhbnNwb3J0LFxuICAgIHN0YWNrUGFyc2VyOiBjb3JlLnN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyhvcHRpb25zLnN0YWNrUGFyc2VyIHx8IGFwaS5kZWZhdWx0U3RhY2tQYXJzZXIpLFxuICAgIHJlbGVhc2UsXG4gICAgdHJhY2VzU2FtcGxlUmF0ZSxcbiAgICBzcG90bGlnaHQsXG4gICAgZGVidWc6IGVudlRvQm9vbC5lbnZUb0Jvb2wob3B0aW9ucy5kZWJ1ZyA/PyBwcm9jZXNzLmVudi5TRU5UUllfREVCVUcpLFxuICB9O1xuXG4gIGNvbnN0IGludGVncmF0aW9ucyA9IG9wdGlvbnMuaW50ZWdyYXRpb25zO1xuICBjb25zdCBkZWZhdWx0SW50ZWdyYXRpb25zID0gb3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID8/IGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsKG1lcmdlZE9wdGlvbnMpO1xuXG4gIHJldHVybiB7XG4gICAgLi4ubWVyZ2VkT3B0aW9ucyxcbiAgICBpbnRlZ3JhdGlvbnM6IGNvcmUuZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCh7XG4gICAgICBkZWZhdWx0SW50ZWdyYXRpb25zLFxuICAgICAgaW50ZWdyYXRpb25zLFxuICAgIH0pLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRSZWxlYXNlKHJlbGVhc2UpIHtcbiAgaWYgKHJlbGVhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZWxlYXNlO1xuICB9XG5cbiAgY29uc3QgZGV0ZWN0ZWRSZWxlYXNlID0gYXBpLmdldFNlbnRyeVJlbGVhc2UoKTtcbiAgaWYgKGRldGVjdGVkUmVsZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGRldGVjdGVkUmVsZWFzZTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNlc1NhbXBsZVJhdGUodHJhY2VzU2FtcGxlUmF0ZSkge1xuICBpZiAodHJhY2VzU2FtcGxlUmF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRyYWNlc1NhbXBsZVJhdGU7XG4gIH1cblxuICBjb25zdCBzYW1wbGVSYXRlRnJvbUVudiA9IHByb2Nlc3MuZW52LlNFTlRSWV9UUkFDRVNfU0FNUExFX1JBVEU7XG4gIGlmICghc2FtcGxlUmF0ZUZyb21FbnYpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgcGFyc2VkID0gcGFyc2VGbG9hdChzYW1wbGVSYXRlRnJvbUVudik7XG4gIHJldHVybiBpc0Zpbml0ZShwYXJzZWQpID8gcGFyc2VkIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBzY29wZSBhbmQgcHJvcGFnYXRpb24gY29udGV4dCBiYXNlZCBvbiBlbnZpcm9ubWVudGFsIHZhcmlhYmxlcy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yZmNzL2Jsb2IvbWFpbi90ZXh0LzAwNzEtY29udGludWUtdHJhY2Utb3Zlci1wcm9jZXNzLWJvdW5kYXJpZXMubWRcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVNjb3BlRnJvbUVudlZhcmlhYmxlcygpIHtcbiAgaWYgKGVudlRvQm9vbC5lbnZUb0Jvb2wocHJvY2Vzcy5lbnYuU0VOVFJZX1VTRV9FTlZJUk9OTUVOVCkgIT09IGZhbHNlKSB7XG4gICAgY29uc3Qgc2VudHJ5VHJhY2VFbnYgPSBwcm9jZXNzLmVudi5TRU5UUllfVFJBQ0U7XG4gICAgY29uc3QgYmFnZ2FnZUVudiA9IHByb2Nlc3MuZW52LlNFTlRSWV9CQUdHQUdFO1xuICAgIGNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IGNvcmUucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMoc2VudHJ5VHJhY2VFbnYsIGJhZ2dhZ2VFbnYpO1xuICAgIGNvcmUuZ2V0Q3VycmVudFNjb3BlKCkuc2V0UHJvcGFnYXRpb25Db250ZXh0KHByb3BhZ2F0aW9uQ29udGV4dCk7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXREZWZhdWx0SW50ZWdyYXRpb25zID0gZ2V0RGVmYXVsdEludGVncmF0aW9ucztcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyA9IGluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucztcbmV4cG9ydHMudmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXAgPSB2YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/scope.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/sdk/scope.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * Update the active isolation scope.\n * Should be used with caution!\n */\nfunction setIsolationScope(isolationScope) {\n  const scopes = opentelemetry.getScopesFromContext(api.context.active());\n  if (scopes) {\n    scopes.isolationScope = isolationScope;\n  }\n}\n\nexports.setIsolationScope = setIsolationScope;\n//# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvc2NvcGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsWUFBWSxtQkFBTyxDQUFDLDZGQUFvQjtBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyxtR0FBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvc2NvcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgYWN0aXZlIGlzb2xhdGlvbiBzY29wZS5cbiAqIFNob3VsZCBiZSB1c2VkIHdpdGggY2F1dGlvbiFcbiAqL1xuZnVuY3Rpb24gc2V0SXNvbGF0aW9uU2NvcGUoaXNvbGF0aW9uU2NvcGUpIHtcbiAgY29uc3Qgc2NvcGVzID0gb3BlbnRlbGVtZXRyeS5nZXRTY29wZXNGcm9tQ29udGV4dChhcGkuY29udGV4dC5hY3RpdmUoKSk7XG4gIGlmIChzY29wZXMpIHtcbiAgICBzY29wZXMuaXNvbGF0aW9uU2NvcGUgPSBpc29sYXRpb25TY29wZTtcbiAgfVxufVxuXG5leHBvcnRzLnNldElzb2xhdGlvblNjb3BlID0gc2V0SXNvbGF0aW9uU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/sdk/scope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/transports/http.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/transports/http.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v11): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, options.httpModule ?? nativeHttpModule, agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy = no_proxy\n    ?.split(',')\n    .some(\n      exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n    );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? null;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBBZGRzIGFuIG9yaWdpbiB0byBhbiBPVEVMIFNwYW4uICovXG5mdW5jdGlvbiBhZGRPcmlnaW5Ub1NwYW4oc3Bhbiwgb3JpZ2luKSB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sIG9yaWdpbik7XG59XG5cbmV4cG9ydHMuYWRkT3JpZ2luVG9TcGFuID0gYWRkT3JpZ2luVG9TcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkT3JpZ2luVG9TcGFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/baggage.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/baggage.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Merge two baggage headers into one, where the existing one takes precedence.\n * The order of the existing baggage will be preserved, and new entries will be added to the end.\n */\nfunction mergeBaggageHeaders(\n  existing,\n  baggage,\n) {\n  if (!existing) {\n    return baggage;\n  }\n\n  const existingBaggageEntries = core.parseBaggageHeader(existing);\n  const newBaggageEntries = core.parseBaggageHeader(baggage);\n\n  if (!newBaggageEntries) {\n    return existing;\n  }\n\n  // Existing entries take precedence, ensuring order remains stable for minimal changes\n  const mergedBaggageEntries = { ...existingBaggageEntries };\n  Object.entries(newBaggageEntries).forEach(([key, value]) => {\n    if (!mergedBaggageEntries[key]) {\n      mergedBaggageEntries[key] = value;\n    }\n  });\n\n  return core.objectToBaggageHeader(mergedBaggageEntries);\n}\n\nexports.mergeBaggageHeaders = mergeBaggageHeaders;\n//# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9iYWdnYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvYmFnZ2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIE1lcmdlIHR3byBiYWdnYWdlIGhlYWRlcnMgaW50byBvbmUsIHdoZXJlIHRoZSBleGlzdGluZyBvbmUgdGFrZXMgcHJlY2VkZW5jZS5cbiAqIFRoZSBvcmRlciBvZiB0aGUgZXhpc3RpbmcgYmFnZ2FnZSB3aWxsIGJlIHByZXNlcnZlZCwgYW5kIG5ldyBlbnRyaWVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VCYWdnYWdlSGVhZGVycyhcbiAgZXhpc3RpbmcsXG4gIGJhZ2dhZ2UsXG4pIHtcbiAgaWYgKCFleGlzdGluZykge1xuICAgIHJldHVybiBiYWdnYWdlO1xuICB9XG5cbiAgY29uc3QgZXhpc3RpbmdCYWdnYWdlRW50cmllcyA9IGNvcmUucGFyc2VCYWdnYWdlSGVhZGVyKGV4aXN0aW5nKTtcbiAgY29uc3QgbmV3QmFnZ2FnZUVudHJpZXMgPSBjb3JlLnBhcnNlQmFnZ2FnZUhlYWRlcihiYWdnYWdlKTtcblxuICBpZiAoIW5ld0JhZ2dhZ2VFbnRyaWVzKSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nO1xuICB9XG5cbiAgLy8gRXhpc3RpbmcgZW50cmllcyB0YWtlIHByZWNlZGVuY2UsIGVuc3VyaW5nIG9yZGVyIHJlbWFpbnMgc3RhYmxlIGZvciBtaW5pbWFsIGNoYW5nZXNcbiAgY29uc3QgbWVyZ2VkQmFnZ2FnZUVudHJpZXMgPSB7IC4uLmV4aXN0aW5nQmFnZ2FnZUVudHJpZXMgfTtcbiAgT2JqZWN0LmVudHJpZXMobmV3QmFnZ2FnZUVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICghbWVyZ2VkQmFnZ2FnZUVudHJpZXNba2V5XSkge1xuICAgICAgbWVyZ2VkQmFnZ2FnZUVudHJpZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvcmUub2JqZWN0VG9CYWdnYWdlSGVhZGVyKG1lcmdlZEJhZ2dhZ2VFbnRyaWVzKTtcbn1cblxuZXhwb3J0cy5tZXJnZUJhZ2dhZ2VIZWFkZXJzID0gbWVyZ2VCYWdnYWdlSGVhZGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhZ2dhZ2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/baggage.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  try {\n    return  true && typeof module.exports !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQTZCO0FBQ3hDLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2NvbW1vbmpzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKiogRGV0ZWN0IENvbW1vbkpTLiAqL1xuZnVuY3Rpb24gaXNDanMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzLmlzQ2pzID0gaXNDanM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb25qcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxpQkFBaUIsbUJBQU8sQ0FBQyxnR0FBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi9jb21tb25qcy5qcycpO1xuXG5jb25zdCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IChwa2cpID0+ICh7XG4gIHBhY2thZ2U6IHBrZyxcbiAgJ2phdmFzY3JpcHQuaXNfY2pzJzogY29tbW9uanMuaXNDanMoKSxcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/debug.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/debug.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nlet cachedDebuggerEnabled;\n\n/**\n * Was the debugger enabled when this function was first called?\n */\nasync function isDebuggerEnabled() {\n  if (cachedDebuggerEnabled === undefined) {\n    try {\n      // Node can be built without inspector support\n      const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n      cachedDebuggerEnabled = !!inspector.url();\n    } catch {\n      cachedDebuggerEnabled = false;\n    }\n  }\n\n  return cachedDebuggerEnabled;\n}\n\nexports.isDebuggerEnabled = isDebuggerEnabled;\n//# sourceMappingURL=debug.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrSUFBd0I7QUFDdEQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2RlYnVnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5sZXQgY2FjaGVkRGVidWdnZXJFbmFibGVkO1xuXG4vKipcbiAqIFdhcyB0aGUgZGVidWdnZXIgZW5hYmxlZCB3aGVuIHRoaXMgZnVuY3Rpb24gd2FzIGZpcnN0IGNhbGxlZD9cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaXNEZWJ1Z2dlckVuYWJsZWQoKSB7XG4gIGlmIChjYWNoZWREZWJ1Z2dlckVuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBOb2RlIGNhbiBiZSBidWlsdCB3aXRob3V0IGluc3BlY3RvciBzdXBwb3J0XG4gICAgICBjb25zdCBpbnNwZWN0b3IgPSBhd2FpdCBpbXBvcnQoJ25vZGU6aW5zcGVjdG9yJyk7XG4gICAgICBjYWNoZWREZWJ1Z2dlckVuYWJsZWQgPSAhIWluc3BlY3Rvci51cmwoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGNhY2hlZERlYnVnZ2VyRW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWNoZWREZWJ1Z2dlckVuYWJsZWQ7XG59XG5cbmV4cG9ydHMuaXNEZWJ1Z2dlckVuYWJsZWQgPSBpc0RlYnVnZ2VyRW5hYmxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/debug.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const clientOptions = core.getClient()?.getOptions();\n  if (\n    !clientOptions?.disableInstrumentationWarnings &&\n    !instrumentation.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasSpansEnabled(clientOptions)\n  ) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMscUhBQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxnR0FBZTtBQUN4Qyw0Q0FBNEMsbUJBQU8sQ0FBQyxzSkFBMEM7O0FBRTlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixNQUFNLG9FQUFvRSxNQUFNO0FBQ3RHO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxpTEFBaUwsS0FBSztBQUNsTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcycpO1xuXG4vKipcbiAqIENoZWNrcyBhbmQgd2FybnMgaWYgYSBmcmFtZXdvcmsgaXNuJ3Qgd3JhcHBlZCBieSBvcGVudGVsZW1ldHJ5LlxuICovXG5mdW5jdGlvbiBlbnN1cmVJc1dyYXBwZWQoXG4gIG1heWJlV3JhcHBlZEZ1bmN0aW9uLFxuICBuYW1lLFxuKSB7XG4gIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjb3JlLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCk7XG4gIGlmIChcbiAgICAhY2xpZW50T3B0aW9ucz8uZGlzYWJsZUluc3RydW1lbnRhdGlvbldhcm5pbmdzICYmXG4gICAgIWluc3RydW1lbnRhdGlvbi5pc1dyYXBwZWQobWF5YmVXcmFwcGVkRnVuY3Rpb24pICYmXG4gICAgY29yZS5pc0VuYWJsZWQoKSAmJlxuICAgIGNvcmUuaGFzU3BhbnNFbmFibGVkKGNsaWVudE9wdGlvbnMpXG4gICkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFRoaXMgaXMgbGlrZWx5IGJlY2F1c2UgeW91IHJlcXVpcmVkL2ltcG9ydGVkICR7bmFtZX0gYmVmb3JlIGNhbGxpbmcgXFxgU2VudHJ5LmluaXQoKVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBTZW50cnkgaW4gYSBzZXBhcmF0ZSBmaWxlIHRoYXQgeW91IFxcYC0taW1wb3J0XFxgIHdoZW4gcnVubmluZyBub2RlLCBzZWU6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzLyR7bmFtZX0vaW5zdGFsbC9lc20vLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3JlLmdldEdsb2JhbFNjb3BlKCkuc2V0Q29udGV4dCgnbWlzc2luZ19pbnN0cnVtZW50YXRpb24nLCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dChuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmVJc1dyYXBwZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/envToBool.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/envToBool.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options?.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IEZBTFNZX0VOVl9WQUxVRVMgPSBuZXcgU2V0KFsnZmFsc2UnLCAnZicsICduJywgJ25vJywgJ29mZicsICcwJ10pO1xuY29uc3QgVFJVVEhZX0VOVl9WQUxVRVMgPSBuZXcgU2V0KFsndHJ1ZScsICd0JywgJ3knLCAneWVzJywgJ29uJywgJzEnXSk7XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gd2hpY2ggY2FzdHMgYW4gRU5WIHZhcmlhYmxlIHZhbHVlIHRvIGB0cnVlYCBvciBgZmFsc2VgIHVzaW5nIHRoZSBjb25zdGFudHMgZGVmaW5lZCBhYm92ZS5cbiAqIEluIHN0cmljdCBtb2RlLCBpdCBtYXkgcmV0dXJuIGBudWxsYCBpZiB0aGUgdmFsdWUgZG9lc24ndCBtYXRjaCBhbnkgb2YgdGhlIHByZWRlZmluZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGVudiB2YXJpYWJsZVxuICogQHBhcmFtIG9wdGlvbnMgLS0gT25seSBoYXMgYHN0cmljdGAga2V5IGZvciBub3csIHdoaWNoIHJlcXVpcmVzIGEgc3RyaWN0IG1hdGNoIGZvciBgdHJ1ZWAgaW4gVFJVVEhZX0VOVl9WQUxVRVNcbiAqIEByZXR1cm5zIHRydWUvZmFsc2UgaWYgdGhlIGxvd2VyY2FzZSB2YWx1ZSBtYXRjaGVzIHRoZSBwcmVkZWZpbmVkIHZhbHVlcyBhYm92ZS4gSWYgbm90LCBudWxsIGluIHN0cmljdCBtb2RlLFxuICogICAgICAgICAgYW5kIEJvb2xlYW4odmFsdWUpIGluIGxvb3NlIG1vZGUuXG4gKi9cbmZ1bmN0aW9uIGVudlRvQm9vbCh2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBub3JtYWxpemVkID0gU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChGQUxTWV9FTlZfVkFMVUVTLmhhcyhub3JtYWxpemVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChUUlVUSFlfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zPy5zdHJpY3QgPyBudWxsIDogQm9vbGVhbih2YWx1ZSk7XG59XG5cbmV4cG9ydHMuRkFMU1lfRU5WX1ZBTFVFUyA9IEZBTFNZX0VOVl9WQUxVRVM7XG5leHBvcnRzLlRSVVRIWV9FTlZfVkFMVUVTID0gVFJVVEhZX0VOVl9WQUxVRVM7XG5leHBvcnRzLmVudlRvQm9vbCA9IGVudlRvQm9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudlRvQm9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    options?.shutdownTimeout && options.shutdownTimeout > 0 ? options.shutdownTimeout : DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.debug.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.debug.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxpR0FBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2Vycm9yaGFuZGxpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcud2FybignTm8gTm9kZUNsaWVudCB3YXMgZGVmaW5lZCwgd2UgYXJlIGV4aXRpbmcgdGhlIHByb2Nlc3Mgbm93LicpO1xuICAgIGdsb2JhbC5wcm9jZXNzLmV4aXQoMSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gIGNvbnN0IHRpbWVvdXQgPVxuICAgIG9wdGlvbnM/LnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgPyBvcHRpb25zLnNodXRkb3duVGltZW91dCA6IERFRkFVTFRfU0hVVERPV05fVElNRU9VVDtcbiAgY2xpZW50LmNsb3NlKHRpbWVvdXQpLnRoZW4oXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmVycm9yKGVycm9yKTtcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnRzLmxvZ0FuZEV4aXRQcm9jZXNzID0gbG9nQW5kRXhpdFByb2Nlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcmhhbmRsaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKiogQnVpbGQgYSBmdWxsIFVSTCBmcm9tIHJlcXVlc3Qgb3B0aW9ucy4gKi9cbmZ1bmN0aW9uIGdldFJlcXVlc3RVcmwocmVxdWVzdE9wdGlvbnMpIHtcbiAgY29uc3QgcHJvdG9jb2wgPSByZXF1ZXN0T3B0aW9ucy5wcm90b2NvbCB8fCAnJztcbiAgY29uc3QgaG9zdG5hbWUgPSByZXF1ZXN0T3B0aW9ucy5ob3N0bmFtZSB8fCByZXF1ZXN0T3B0aW9ucy5ob3N0IHx8ICcnO1xuICAvLyBEb24ndCBsb2cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgLy8gQWxzbyBkb24ndCBhZGQgcG9ydCBpZiB0aGUgaG9zdG5hbWUgYWxyZWFkeSBpbmNsdWRlcyBhIHBvcnRcbiAgY29uc3QgcG9ydCA9XG4gICAgIXJlcXVlc3RPcHRpb25zLnBvcnQgfHwgcmVxdWVzdE9wdGlvbnMucG9ydCA9PT0gODAgfHwgcmVxdWVzdE9wdGlvbnMucG9ydCA9PT0gNDQzIHx8IC9eKC4qKTooXFxkKykkLy50ZXN0KGhvc3RuYW1lKVxuICAgICAgPyAnJ1xuICAgICAgOiBgOiR7cmVxdWVzdE9wdGlvbnMucG9ydH1gO1xuICBjb25zdCBwYXRoID0gcmVxdWVzdE9wdGlvbnMucGF0aCA/IHJlcXVlc3RPcHRpb25zLnBhdGggOiAnLyc7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0fSR7cGF0aH1gO1xufVxuXG5leHBvcnRzLmdldFJlcXVlc3RVcmwgPSBnZXRSZXF1ZXN0VXJsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UmVxdWVzdFVybC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/module.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/node-core/build/cjs/utils/module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n\n    return decodedFile;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQyxHQUFHLFlBQVk7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsV0FBVyxHQUFHLFlBQVk7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogbm9ybWFsaXplcyBXaW5kb3dzIHBhdGhzICovXG5mdW5jdGlvbiBub3JtYWxpemVXaW5kb3dzUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLnJlcGxhY2UoL15bQS1aXTovLCAnJykgLy8gcmVtb3ZlIFdpbmRvd3Mtc3R5bGUgcHJlZml4XG4gICAgLnJlcGxhY2UoL1xcXFwvZywgJy8nKTsgLy8gcmVwbGFjZSBhbGwgYFxcYCBpbnN0YW5jZXMgd2l0aCBgL2Bcbn1cblxuLyoqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIG1vZHVsZSBuYW1lIGZyb20gYSBmaWxlbmFtZSAqL1xuZnVuY3Rpb24gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lKFxuICBiYXNlUGF0aCA9IHByb2Nlc3MuYXJndlsxXSA/IGNvcmUuZGlybmFtZShwcm9jZXNzLmFyZ3ZbMV0pIDogcHJvY2Vzcy5jd2QoKSxcbiAgaXNXaW5kb3dzID0gbm9kZV9wYXRoLnNlcCA9PT0gJ1xcXFwnLFxuKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRCYXNlID0gaXNXaW5kb3dzID8gbm9ybWFsaXplV2luZG93c1BhdGgoYmFzZVBhdGgpIDogYmFzZVBhdGg7XG5cbiAgcmV0dXJuIChmaWxlbmFtZSkgPT4ge1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxpemVkRmlsZW5hbWUgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBsZXQgeyBkaXIsIGJhc2U6IGZpbGUsIGV4dCB9ID0gbm9kZV9wYXRoLnBvc2l4LnBhcnNlKG5vcm1hbGl6ZWRGaWxlbmFtZSk7XG5cbiAgICBpZiAoZXh0ID09PSAnLmpzJyB8fCBleHQgPT09ICcubWpzJyB8fCBleHQgPT09ICcuY2pzJykge1xuICAgICAgZmlsZSA9IGZpbGUuc2xpY2UoMCwgZXh0Lmxlbmd0aCAqIC0xKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZmlsZSBuYW1lIG1pZ2h0IGJlIFVSSS1lbmNvZGVkIHdoaWNoIHdlIHdhbnQgdG8gZGVjb2RlIHRvXG4gICAgLy8gdGhlIG9yaWdpbmFsIGZpbGUgbmFtZS5cbiAgICBjb25zdCBkZWNvZGVkRmlsZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlKTtcblxuICAgIGlmICghZGlyKSB7XG4gICAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICAgIGRpciA9ICcuJztcbiAgICB9XG5cbiAgICBjb25zdCBuID0gZGlyLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzJyk7XG4gICAgaWYgKG4gPiAtMSkge1xuICAgICAgcmV0dXJuIGAke2Rpci5zbGljZShuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpfToke2RlY29kZWRGaWxlfWA7XG4gICAgfVxuXG4gICAgLy8gTGV0J3Mgc2VlIGlmIGl0J3MgYSBwYXJ0IG9mIHRoZSBtYWluIG1vZHVsZVxuICAgIC8vIFRvIGJlIGEgcGFydCBvZiBtYWluIG1vZHVsZSwgaXQgaGFzIHRvIHNoYXJlIHRoZSBzYW1lIGJhc2VcbiAgICBpZiAoZGlyLnN0YXJ0c1dpdGgobm9ybWFsaXplZEJhc2UpKSB7XG4gICAgICBjb25zdCBtb2R1bGVOYW1lID0gZGlyLnNsaWNlKG5vcm1hbGl6ZWRCYXNlLmxlbmd0aCArIDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuICAgICAgcmV0dXJuIG1vZHVsZU5hbWUgPyBgJHttb2R1bGVOYW1lfToke2RlY29kZWRGaWxlfWAgOiBkZWNvZGVkRmlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVjb2RlZEZpbGU7XG4gIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node-core/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUVoRixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2RlYnVnLWJ1aWxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/node-fetch/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/tracing/fastify/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./integrations/tracing/postgresjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$4 = __webpack_require__(/*! ./integrations/tracing/vercelai/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/openai/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst launchDarkly = __webpack_require__(/*! ./integrations/featureFlagShims/launchDarkly.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\");\nconst openFeature = __webpack_require__(/*! ./integrations/featureFlagShims/openFeature.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\");\nconst statsig = __webpack_require__(/*! ./integrations/featureFlagShims/statsig.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\");\nconst unleash = __webpack_require__(/*! ./integrations/featureFlagShims/unleash.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\");\nconst firebase = __webpack_require__(/*! ./integrations/tracing/firebase/firebase.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst index$6 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$7 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = index$1.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = index$2.fastifyIntegration;\nexports.setupFastifyErrorHandler = index$2.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.postgresJsIntegration = postgresjs.postgresJsIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.vercelAIIntegration = index$4.vercelAIIntegration;\nexports.openAIIntegration = index$5.openAIIntegration;\nexports.buildLaunchDarklyFlagUsedHandler = launchDarkly.buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegration = launchDarkly.launchDarklyIntegrationShim;\nexports.OpenFeatureIntegrationHook = openFeature.OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegration = openFeature.openFeatureIntegrationShim;\nexports.statsigIntegration = statsig.statsigIntegrationShim;\nexports.unleashIntegration = unleash.unleashIntegrationShim;\nexports.firebaseIntegration = firebase.firebaseIntegration;\nexports.getDefaultIntegrations = index$6.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$6.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$6.init;\nexports.initWithoutDefaultIntegrations = index$6.initWithoutDefaultIntegrations;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$7.getAutoPerformanceIntegrations;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.NODE_VERSION = nodeCore.NODE_VERSION;\nexports.NodeClient = nodeCore.NodeClient;\nexports.SentryContextManager = nodeCore.SentryContextManager;\nexports.anrIntegration = nodeCore.anrIntegration;\nexports.childProcessIntegration = nodeCore.childProcessIntegration;\nexports.contextLinesIntegration = nodeCore.contextLinesIntegration;\nexports.createGetModuleFromFilename = nodeCore.createGetModuleFromFilename;\nexports.createSentryWinstonTransport = nodeCore.createSentryWinstonTransport;\nexports.cron = nodeCore.cron;\nexports.defaultStackParser = nodeCore.defaultStackParser;\nexports.disableAnrDetectionForCallback = nodeCore.disableAnrDetectionForCallback;\nexports.generateInstrumentOnce = nodeCore.generateInstrumentOnce;\nexports.getSentryRelease = nodeCore.getSentryRelease;\nexports.localVariablesIntegration = nodeCore.localVariablesIntegration;\nexports.logger = nodeCore.logger;\nexports.makeNodeTransport = nodeCore.makeNodeTransport;\nexports.modulesIntegration = nodeCore.modulesIntegration;\nexports.nodeContextIntegration = nodeCore.nodeContextIntegration;\nexports.onUncaughtExceptionIntegration = nodeCore.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = nodeCore.onUnhandledRejectionIntegration;\nexports.spotlightIntegration = nodeCore.spotlightIntegration;\nexports.validateOpenTelemetrySetup = nodeCore.validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the LaunchDarkly integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst launchDarklyIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The launchDarklyIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'LaunchDarkly',\n  };\n});\n\n/**\n * This is a shim for the LaunchDarkly flag used handler.\n */\nfunction buildLaunchDarklyFlagUsedHandlerShim() {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The buildLaunchDarklyFlagUsedHandler() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n    synchronous: true,\n    method: () => null,\n  };\n}\n\nexports.buildLaunchDarklyFlagUsedHandlerShim = buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegrationShim = launchDarklyIntegrationShim;\n//# sourceMappingURL=launchDarkly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvbGF1bmNoRGFya2x5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEM7QUFDNUMsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9sYXVuY2hEYXJrbHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIExhdW5jaERhcmtseSBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvbigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdMYXVuY2hEYXJrbHknLFxuICB9O1xufSk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBMYXVuY2hEYXJrbHkgZmxhZyB1c2VkIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbSgpIHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXIoKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnc2VudHJ5LWZsYWctYXVkaXRvcicsXG4gICAgdHlwZTogJ2ZsYWctdXNlZCcsXG4gICAgc3luY2hyb25vdXM6IHRydWUsXG4gICAgbWV0aG9kOiAoKSA9PiBudWxsLFxuICB9O1xufVxuXG5leHBvcnRzLmJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbSA9IGJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbTtcbmV4cG9ydHMubGF1bmNoRGFya2x5SW50ZWdyYXRpb25TaGltID0gbGF1bmNoRGFya2x5SW50ZWdyYXRpb25TaGltO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF1bmNoRGFya2x5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the OpenFeature integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst openFeatureIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The openFeatureIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'OpenFeature',\n  };\n});\n\n/**\n * This is a shim for the OpenFeature integration hook.\n */\nclass OpenFeatureIntegrationHookShim {\n  /**\n   *\n   */\n   constructor() {\n    if (!core.isBrowser()) {\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('The OpenFeatureIntegrationHook can only be used in the browser.');\n      });\n    }\n  }\n\n  /**\n   *\n   */\n   after() {\n    // No-op\n  }\n\n  /**\n   *\n   */\n   error() {\n    // No-op\n  }\n}\n\nexports.OpenFeatureIntegrationHookShim = OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegrationShim = openFeatureIntegrationShim;\n//# sourceMappingURL=openFeature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvb3BlbkZlYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvb3BlbkZlYXR1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIE9wZW5GZWF0dXJlIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IG9wZW5GZWF0dXJlSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgb3BlbkZlYXR1cmVJbnRlZ3JhdGlvbigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdPcGVuRmVhdHVyZScsXG4gIH07XG59KTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIE9wZW5GZWF0dXJlIGludGVncmF0aW9uIGhvb2suXG4gKi9cbmNsYXNzIE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbSB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghY29yZS5pc0Jyb3dzZXIoKSkge1xuICAgICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gICBhZnRlcigpIHtcbiAgICAvLyBOby1vcFxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICAgZXJyb3IoKSB7XG4gICAgLy8gTm8tb3BcbiAgfVxufVxuXG5leHBvcnRzLk9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbSA9IE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbTtcbmV4cG9ydHMub3BlbkZlYXR1cmVJbnRlZ3JhdGlvblNoaW0gPSBvcGVuRmVhdHVyZUludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5GZWF0dXJlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Statsig integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst statsigIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The statsigIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Statsig',\n  };\n});\n\nexports.statsigIntegrationShim = statsigIntegrationShim;\n//# sourceMappingURL=statsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvc3RhdHNpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvc3RhdHNpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgU3RhdHNpZyBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCBzdGF0c2lnSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgc3RhdHNpZ0ludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1N0YXRzaWcnLFxuICB9O1xufSk7XG5cbmV4cG9ydHMuc3RhdHNpZ0ludGVncmF0aW9uU2hpbSA9IHN0YXRzaWdJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0c2lnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Unleash integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst unleashIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The unleashIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Unleash',\n  };\n});\n\nexports.unleashIntegrationShim = unleashIntegrationShim;\n//# sourceMappingURL=unleash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvdW5sZWFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvdW5sZWFzaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgVW5sZWFzaCBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCB1bmxlYXNoSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgdW5sZWFzaEludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1VubGVhc2gnLFxuICB9O1xufSk7XG5cbmV4cG9ydHMudW5sZWFzaEludGVncmF0aW9uU2hpbSA9IHVubGVhc2hJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmxlYXNoLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        nodeCore.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDBCQUEwQixtQkFBTyxDQUFDLDJIQUFtQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMkZBQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxtQkFBbUI7QUFDekQsc0NBQXNDLGFBQWE7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25GcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpbGVTeXN0ZW0nO1xuXG4vKipcbiAqIFRoaXMgaW50ZWdyYXRpb24gd2lsbCBjcmVhdGUgc3BhbnMgZm9yIGBmc2AgQVBJIG9wZXJhdGlvbnMsIGxpa2UgcmVhZGluZyBhbmQgd3JpdGluZyBmaWxlcy5cbiAqXG4gKiAqKldBUk5JTkc6KiogVGhpcyBpbnRlZ3JhdGlvbiBtYXkgYWRkIHNpZ25pZmljYW50IG92ZXJoZWFkIHRvIHlvdXIgYXBwbGljYXRpb24uIEVzcGVjaWFsbHkgaW4gc2NlbmFyaW9zIHdpdGggYSBsb3Qgb2ZcbiAqIGZpbGUgSS9PLCBsaWtlIGZvciBleGFtcGxlIHdoZW4gcnVubmluZyBhIGZyYW1ld29yayBkZXYgc2VydmVyLCBpbmNsdWRpbmcgdGhpcyBpbnRlZ3JhdGlvbiBjYW4gbWFzc2l2ZWx5IHNsb3cgZG93blxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGlzIGludGVncmF0aW9uLlxuICovXG5jb25zdCBmc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihcbiAgKFxuICAgIG9wdGlvbnNcblxuID0ge30sXG4gICkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgc2V0dXBPbmNlKCkge1xuICAgICAgICBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICAgICAgICAgIElOVEVHUkFUSU9OX05BTUUsXG4gICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgIG5ldyBpbnN0cnVtZW50YXRpb25Gcy5Gc0luc3RydW1lbnRhdGlvbih7XG4gICAgICAgICAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgICAgICAgICBlbmRIb29rKGZ1bmN0aW9uTmFtZSwgeyBhcmdzLCBzcGFuLCBlcnJvciB9KSB7XG4gICAgICAgICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKGBmcy4ke2Z1bmN0aW9uTmFtZX1gKTtcblxuICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogJ2ZpbGUnLFxuICAgICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5maWxlLmZzJyxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJlY29yZEVycm9yTWVzc2FnZXNBc1NwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIEZTX09QRVJBVElPTlNfV0lUSF9QQVRIX0FSRy5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdwYXRoX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9UQVJHRVRfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3RhcmdldF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncGF0aF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiYgRlNfT1BFUkFUSU9OU19XSVRIX1BSRUZJWC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdwcmVmaXhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX0VYSVNUSU5HX1BBVEhfTkVXX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdleGlzdGluZ19wYXRoX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCduZXdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfU1JDX0RFU1QuaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdzcmNfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2Rlc3RfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX09MRF9QQVRIX05FV19QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnb2xkX3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ25ld19wYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIG9wdGlvbnMucmVjb3JkRXJyb3JNZXNzYWdlc0FzU3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdmc19lcnJvcicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApKCk7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG4pO1xuXG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfT0xEX1BBVEhfTkVXX1BBVEggPSBbJ3JlbmFtZScsICdyZW5hbWVTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfU1JDX0RFU1QgPSBbJ2NvcHlGaWxlJywgJ2NwJywgJ2NvcHlGaWxlU3luYycsICdjcFN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9FWElTVElOR19QQVRIX05FV19QQVRIID0gWydsaW5rJywgJ2xpbmtTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfUFJFRklYID0gWydta2R0ZW1wJywgJ21rZHRlbXBTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfVEFSR0VUX1BBVEggPSBbJ3N5bWxpbmsnLCAnc3ltbGlua1N5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9QQVRIX0FSRyA9IFtcbiAgJ2FjY2VzcycsXG4gICdhcHBlbmRGaWxlJyxcbiAgJ2NobW9kJyxcbiAgJ2Nob3duJyxcbiAgJ2V4aXN0cycsXG4gICdta2RpcicsXG4gICdsY2hvd24nLFxuICAnbHN0YXQnLFxuICAnbHV0aW1lcycsXG4gICdvcGVuJyxcbiAgJ29wZW5kaXInLFxuICAncmVhZGRpcicsXG4gICdyZWFkRmlsZScsXG4gICdyZWFkbGluaycsXG4gICdyZWFscGF0aCcsXG4gICdyZWFscGF0aC5uYXRpdmUnLFxuICAncm0nLFxuICAncm1kaXInLFxuICAnc3RhdCcsXG4gICd0cnVuY2F0ZScsXG4gICd1bmxpbmsnLFxuICAndXRpbWVzJyxcbiAgJ3dyaXRlRmlsZScsXG4gICdhY2Nlc3NTeW5jJyxcbiAgJ2FwcGVuZEZpbGVTeW5jJyxcbiAgJ2NobW9kU3luYycsXG4gICdjaG93blN5bmMnLFxuICAnZXhpc3RzU3luYycsXG4gICdsY2hvd25TeW5jJyxcbiAgJ2xzdGF0U3luYycsXG4gICdsdXRpbWVzU3luYycsXG4gICdvcGVuZGlyU3luYycsXG4gICdta2RpclN5bmMnLFxuICAnb3BlblN5bmMnLFxuICAncmVhZGRpclN5bmMnLFxuICAncmVhZEZpbGVTeW5jJyxcbiAgJ3JlYWRsaW5rU3luYycsXG4gICdyZWFscGF0aFN5bmMnLFxuICAncmVhbHBhdGhTeW5jLm5hdGl2ZScsXG4gICdybWRpclN5bmMnLFxuICAncm1TeW5jJyxcbiAgJ3N0YXRTeW5jJyxcbiAgJ3RydW5jYXRlU3luYycsXG4gICd1bmxpbmtTeW5jJyxcbiAgJ3V0aW1lc1N5bmMnLFxuICAnd3JpdGVGaWxlU3luYycsXG5dO1xuXG5leHBvcnRzLmZzSW50ZWdyYXRpb24gPSBmc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new nodeCore.SentryHttpInstrumentation(options);\n  },\n);\n\nconst instrumentOtelHttp = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  if (typeof options.spans === 'boolean') {\n    return options.spans;\n  }\n\n  if (clientOptions.skipOpenTelemetrySetup) {\n    return false;\n  }\n\n  // IMPORTANT: We only disable span instrumentation when spans are not enabled _and_ we are on Node 22+,\n  // as otherwise the necessary diagnostics channel is not available yet\n  if (!core.hasSpansEnabled(clientOptions) && nodeCore.NODE_VERSION.major >= 22) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const dropSpansForIncomingRequestStatusCodes = options.dropSpansForIncomingRequestStatusCodes ?? [\n    [401, 404],\n    [300, 399],\n  ];\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is Sentry-specific instrumentation for request isolation and breadcrumbs\n      instrumentSentryHttp({\n        ...options,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle incoming trace extraction ourselves\n        extractIncomingTraceFromHeader: !instrumentSpans,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle trace propagation ourselves\n        propagateTraceInOutgoingRequests: !instrumentSpans,\n      });\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Drop transaction if it has a status code that should be ignored\n      if (event.type === 'transaction') {\n        const statusCode = event.contexts?.trace?.data?.['http.response.status_code'];\n        if (\n          typeof statusCode === 'number' &&\n          dropSpansForIncomingRequestStatusCodes.some(code => {\n            if (typeof code === 'number') {\n              return code === statusCode;\n            }\n\n            const [min, max] = code;\n            return statusCode >= min && statusCode <= max;\n          })\n        ) {\n          return null;\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ...options.instrumentation?._experimentalConfig,\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = nodeCore.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = request.method?.toUpperCase();\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests?.(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      nodeCore.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports._shouldInstrumentSpans = _shouldInstrumentSpans;\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentOtelNodeFetch = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationUndici.UndiciInstrumentation,\n  (options) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  nodeCore.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  return typeof options.spans === 'boolean'\n    ? options.spans\n    : !clientOptions.skipOpenTelemetrySetup && core.hasSpansEnabled(clientOptions);\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2gvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsOEJBQThCLG1CQUFPLENBQUMsbUlBQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87O0FBRXhCO0FBQ0EsY0FBYyxJQUFJLEVBQUUsY0FBYztBQUNsQzs7QUFFQTtBQUNBLGNBQWMsSUFBSSxHQUFHLGNBQWM7QUFDbkM7O0FBRUEsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2Qjs7QUFFQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25VbmRpY2kgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdW5kaWNpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTm9kZUZldGNoJztcblxuY29uc3QgaW5zdHJ1bWVudE90ZWxOb2RlRmV0Y2ggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICBpbnN0cnVtZW50YXRpb25VbmRpY2kuVW5kaWNpSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBnZXRDb25maWdXaXRoRGVmYXVsdHMob3B0aW9ucyk7XG4gIH0sXG4pO1xuXG5jb25zdCBpbnN0cnVtZW50U2VudHJ5Tm9kZUZldGNoID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgYCR7SU5URUdSQVRJT05fTkFNRX0uc2VudHJ5YCxcbiAgbm9kZUNvcmUuU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9LFxuKTtcblxuY29uc3QgX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTm9kZUZldGNoJyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50U3BhbnMgPSBfc2hvdWxkSW5zdHJ1bWVudFNwYW5zKG9wdGlvbnMsIGNvcmUuZ2V0Q2xpZW50KCk/LmdldE9wdGlvbnMoKSk7XG5cbiAgICAgIC8vIFRoaXMgaXMgdGhlIFwicmVndWxhclwiIE9URUwgaW5zdHJ1bWVudGF0aW9uIHRoYXQgZW1pdHMgc3BhbnNcbiAgICAgIGlmIChpbnN0cnVtZW50U3BhbnMpIHtcbiAgICAgICAgaW5zdHJ1bWVudE90ZWxOb2RlRmV0Y2gob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgaXMgdGhlIFNlbnRyeS1zcGVjaWZpYyBpbnN0cnVtZW50YXRpb24gdGhhdCBjcmVhdGVzIGJyZWFkY3J1bWJzICYgcHJvcGFnYXRlcyB0cmFjZXNcbiAgICAgIC8vIFRoaXMgbXVzdCBiZSByZWdpc3RlcmVkIGFmdGVyIHRoZSBPVEVMIG9uZSwgdG8gZW5zdXJlIHRoYXQgdGhlIGNvcmUgdHJhY2UgcHJvcGFnYXRpb24gbG9naWMgdGFrZXMgcHJlc2VkZW5jZVxuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgc2VudHJ5LXRyYWNlIGhlYWRlciBtYXkgYmUgc2V0IG11bHRpcGxlIHRpbWVzXG4gICAgICBpbnN0cnVtZW50U2VudHJ5Tm9kZUZldGNoKG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24pO1xuXG4vLyBNYXRjaGluZyB0aGUgYmVoYXZpb3Igb2YgdGhlIGJhc2UgaW5zdHJ1bWVudGF0aW9uXG5mdW5jdGlvbiBnZXRBYnNvbHV0ZVVybChvcmlnaW4sIHBhdGggPSAnLycpIHtcbiAgY29uc3QgdXJsID0gYCR7b3JpZ2lufWA7XG5cbiAgaWYgKHVybC5lbmRzV2l0aCgnLycpICYmIHBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcmV0dXJuIGAke3VybH0ke3BhdGguc2xpY2UoMSl9YDtcbiAgfVxuXG4gIGlmICghdXJsLmVuZHNXaXRoKCcvJykgJiYgIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcmV0dXJuIGAke3VybH0vJHtwYXRoLnNsaWNlKDEpfWA7XG4gIH1cblxuICByZXR1cm4gYCR7dXJsfSR7cGF0aH1gO1xufVxuXG5mdW5jdGlvbiBfc2hvdWxkSW5zdHJ1bWVudFNwYW5zKG9wdGlvbnMsIGNsaWVudE9wdGlvbnMgPSB7fSkge1xuICAvLyBJZiBgc3BhbnNgIGlzIHBhc3NlZCBpbiwgaXQgdGFrZXMgcHJlY2VkZW5jZVxuICAvLyBFbHNlLCB3ZSBieSBkZWZhdWx0IGVtaXQgc3BhbnMsIHVubGVzcyBgc2tpcE9wZW5UZWxlbWV0cnlTZXR1cGAgaXMgc2V0IHRvIGB0cnVlYCBvciBzcGFucyBhcmUgbm90IGVuYWJsZWRcbiAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnNwYW5zID09PSAnYm9vbGVhbidcbiAgICA/IG9wdGlvbnMuc3BhbnNcbiAgICA6ICFjbGllbnRPcHRpb25zLnNraXBPcGVuVGVsZW1ldHJ5U2V0dXAgJiYgY29yZS5oYXNTcGFuc0VuYWJsZWQoY2xpZW50T3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zID0ge30pIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29uZmlnID0ge1xuICAgIHJlcXVpcmVQYXJlbnRmb3JTcGFuczogZmFsc2UsXG4gICAgaWdub3JlUmVxdWVzdEhvb2s6IHJlcXVlc3QgPT4ge1xuICAgICAgY29uc3QgdXJsID0gZ2V0QWJzb2x1dGVVcmwocmVxdWVzdC5vcmlnaW4sIHJlcXVlc3QucGF0aCk7XG4gICAgICBjb25zdCBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyA9IG9wdGlvbnMuaWdub3JlT3V0Z29pbmdSZXF1ZXN0cztcbiAgICAgIGNvbnN0IHNob3VsZElnbm9yZSA9IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzICYmIHVybCAmJiBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyh1cmwpO1xuXG4gICAgICByZXR1cm4gISFzaG91bGRJZ25vcmU7XG4gICAgfSxcbiAgICBzdGFydFNwYW5Ib29rOiAoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5ub2RlX2ZldGNoJyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSA7XG5cbiAgcmV0dXJuIGluc3RydW1lbnRhdGlvbkNvbmZpZztcbn1cblxuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyxxSUFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQW1xcGxpYic7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgY29uc3VtZUVuZEhvb2s6IChzcGFuKSA9PiB7XG4gICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLnB1Ymxpc2hlcicpO1xuICB9LFxufTtcblxuY29uc3QgaW5zdHJ1bWVudEFtcXBsaWIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FtcXBsaWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FtcXBsaWIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BhbXFwbGliSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvYW1xcGxpYi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmFtcXBsaWJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGFtcXBsaWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2FtcXBsaWJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW1xcGxpYkludGVncmF0aW9uID0gYW1xcGxpYkludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnRBbXFwbGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1xcGxpYi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  nodeCore.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyxxSUFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29ubmVjdCc7XG5cbmNvbnN0IGluc3RydW1lbnRDb25uZWN0ID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdC5Db25uZWN0SW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfY29ubmVjdEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRDb25uZWN0KCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0Nvbm5lY3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZW5jaGFsYWJzL2Nvbm5lY3QvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXIoYXBwKWAgYWZ0ZXIgeW91IGluaXRpYWxpemUgeW91ciBjb25uZWN0IGFwcC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbY29ubmVjdCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9jb25uZWN0LykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmNvbm5lY3RJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgY29ubmVjdEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfY29ubmVjdEludGVncmF0aW9uKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNvbm5lY3RFcnJvck1pZGRsZXdhcmUoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyKTtcbiAgbmV4dChlcnIpO1xufVxuXG4vKipcbiAqIEFkZCBhIENvbm5lY3QgbWlkZGxld2FyZSB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgQ29ubmVjdCBhcHAgdG8gYXR0YWNoIHRoZSBlcnJvciBoYW5kbGVyIHRvXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICogY29uc3QgY29ubmVjdCA9IHJlcXVpcmUoXCJjb25uZWN0XCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IGNvbm5lY3QoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdSBjb25uZWN0IHJvdXRlcyBoZXJlXG4gKlxuICogYXBwLmxpc3RlbigzMDAwKTtcbiAqIGBgYFxuICovXG5jb25zdCBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoY29ubmVjdEVycm9yTWlkZGxld2FyZSk7XG5cbiAgLy8gU2FkbHksIENvbm5lY3RJbnN0cnVtZW50YXRpb24gaGFzIG5vIHJlcXVlc3RIb29rLCBzbyB3ZSBuZWVkIHRvIGFkZCB0aGUgYXR0cmlidXRlcyBoZXJlXG4gIC8vIFdlIHJlZ2lzdGVyIHRoaXMgaG9vayBpbiB0aGlzIG1ldGhvZCwgYmVjYXVzZSBpZiB3ZSByZWdpc3RlciBpdCBpbiB0aGUgaW50ZWdyYXRpb24gYHNldHVwYCxcbiAgLy8gaXQgd291bGQgYWx3YXlzIHJ1biBldmVuIGZvciB1c2VycyB0aGF0IGFyZSBub3QgZXZlbiB1c2luZyBjb25uZWN0XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgYWRkQ29ubmVjdFNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgIH0pO1xuICB9XG5cbiAgbm9kZUNvcmUuZW5zdXJlSXNXcmFwcGVkKGFwcC51c2UsICdjb25uZWN0Jyk7XG59O1xuXG5mdW5jdGlvbiBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snY29ubmVjdC50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBjb25uZWN0IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5jb25uZWN0JyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uY29ubmVjdGAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRoZSBcIm1pZGRsZXdhcmUgLSBcIiBwcmVmaXhcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2Nvbm5lY3QubmFtZSddO1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICB9XG59XG5cbmV4cG9ydHMuY29ubmVjdEludGVncmF0aW9uID0gY29ubmVjdEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50Q29ubmVjdCA9IGluc3RydW1lbnRDb25uZWN0O1xuZXhwb3J0cy5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentDataloader();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      // This is called either immediately or when the instrumentation is wrapped\n      instrumentationWrappedCallback?.(() => {\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('dataloader')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n          }\n\n          // These are all possible dataloader span descriptions\n          // Still checking for the future versions\n          // in case they add support for `clear` and `prime`\n          if (\n            spanJSON.description === 'dataloader.load' ||\n            spanJSON.description === 'dataloader.loadMany' ||\n            spanJSON.description === 'dataloader.batch'\n          ) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n            // TODO: We can try adding `key` to the `data` attribute upstream.\n            // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n          }\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQ0FBa0MsbUJBQU8sQ0FBQywySUFBMkM7QUFDckYsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RhdGFsb2FkZXInO1xuXG5jb25zdCBpbnN0cnVtZW50RGF0YWxvYWRlciA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIuRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9kYXRhbG9hZGVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgZWl0aGVyIGltbWVkaWF0ZWx5IG9yIHdoZW4gdGhlIGluc3RydW1lbnRhdGlvbiBpcyB3cmFwcGVkXG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s/LigoKSA9PiB7XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgaWYgKHNwYW5KU09OLmRlc2NyaXB0aW9uPy5zdGFydHNXaXRoKCdkYXRhbG9hZGVyJykpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZGF0YWxvYWRlcicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZXNlIGFyZSBhbGwgcG9zc2libGUgZGF0YWxvYWRlciBzcGFuIGRlc2NyaXB0aW9uc1xuICAgICAgICAgIC8vIFN0aWxsIGNoZWNraW5nIGZvciB0aGUgZnV0dXJlIHZlcnNpb25zXG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGV5IGFkZCBzdXBwb3J0IGZvciBgY2xlYXJgIGFuZCBgcHJpbWVgXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWQnIHx8XG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZE1hbnknIHx8XG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIuYmF0Y2gnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdjYWNoZS5nZXQnKTtcbiAgICAgICAgICAgIC8vIFRPRE86IFdlIGNhbiB0cnkgYWRkaW5nIGBrZXlgIHRvIHRoZSBgZGF0YWAgYXR0cmlidXRlIHVwc3RyZWFtLlxuICAgICAgICAgICAgLy8gT3IgYWx0ZXJuYXRpdmVseSwgd2UgY2FuIGFkZCBgcmVxdWVzdEhvb2tgIHRvIHRoZSBkYXRhbG9hZGVyIGluc3RydW1lbnRhdGlvbi5cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtkYXRhbG9hZGVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9kYXRhbG9hZGVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZGF0YWxvYWRlckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2RhdGFsb2FkZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5kYXRhbG9hZGVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBkYXRhbG9hZGVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9kYXRhbG9hZGVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50RGF0YWxvYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFsb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nfunction requestHook(span) {\n  nodeCore.addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = core.spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info, defaultName) {\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request ;\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nconst instrumentExpress = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    request,\n    res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(\n    request,\n    _res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst minimatch = __webpack_require__(/*! minimatch */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/index.js\");\n\n/*\nVendored in and modified from @fastify/otel version 0.8.0\nhttps://github.com/fastify/otel/releases/tag/v0.8.0\n\nTried not to modify the original code too much keeping it as a JavaScript CJS module to make it easier to update when required\n\nModifications include:\n- Removed reading of package.json to get the version and package name\n\nMIT License\n\nCopyright (c) 2024 Fastify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n// SENTRY VENDOR NOTE\n// Instead of using the package.json file, we hard code the package name and version here.\nconst PACKAGE_NAME = '@fastify/otel';\nconst PACKAGE_VERSION = '0.8.0';\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6';\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError',\n];\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root',\n};\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler',\n};\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance');\nconst kRequestSpan = Symbol('fastify otel request spans');\nconst kRequestContext = Symbol('fastify otel request context');\nconst kAddHookOriginal = Symbol('fastify otel addhook original');\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original');\nconst kIgnorePaths = Symbol('fastify otel ignore path');\n\nclass FastifyOtelInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify';\n    this[kIgnorePaths] = null;\n    this._logger = api.diag.createComponentLogger({ namespace: PACKAGE_NAME });\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError('ignorePaths must be a string or a function');\n      }\n\n      const globMatcher = minimatch.minimatch;\n\n      this[kIgnorePaths] = routeOptions => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions);\n        } else {\n          return globMatcher(routeOptions.url, ignorePaths);\n        }\n      };\n    }\n  }\n\n  enable() {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin();\n      this._handleInitialization = message => {\n        message.fastify.register(FastifyInstrumentationPlugin);\n      };\n      dc.default.subscribe('fastify.initialization', this._handleInitialization);\n    }\n    return super.enable();\n  }\n\n  disable() {\n    if (this._handleInitialization) {\n      dc.default.unsubscribe('fastify.initialization', this._handleInitialization);\n      this._handleInitialization = undefined;\n    }\n    return super.disable();\n  }\n\n  // We do not do patching in this instrumentation\n  init() {\n    return [];\n  }\n\n  plugin() {\n    const instrumentation = this;\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true;\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel';\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    };\n\n    return FastifyInstrumentationPlugin;\n\n    function FastifyInstrumentationPlugin(instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation);\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook);\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler);\n      instance.decorateRequest('opentelemetry', function openetelemetry() {\n        const ctx = this[kRequestContext];\n        const span = this[kRequestSpan];\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return api.propagation.inject(ctx, carrier, setter);\n          },\n          extract: (carrier, getter) => {\n            return api.propagation.extract(ctx, carrier, getter);\n          },\n        };\n      });\n      instance.decorateRequest(kRequestSpan, null);\n      instance.decorateRequest(kRequestContext, null);\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation._logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`,\n          );\n          return;\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook];\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0 ? handlerLike.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n              });\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = [];\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME,\n                  }),\n                );\n              }\n\n              routeOptions[hook] = wrappedHandlers;\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook];\n        } else {\n          routeOptions.onSend = onSendHook;\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook];\n        } else {\n          routeOptions.onError = onErrorHook;\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0 ? routeOptions.handler.name : ANONYMOUS_FUNCTION_NAME,\n        });\n      });\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone();\n        } else if (\n          this[kInstrumentation][kIgnorePaths]?.({\n            url: request.url,\n            method: request.method,\n          }) === true\n        ) {\n          this[kInstrumentation]._logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`,\n          );\n          return hookDone();\n        }\n\n        let ctx = api.context.active();\n\n        if (api.trace.getSpan(ctx) == null) {\n          ctx = api.propagation.extract(ctx, request.headers);\n        }\n\n        const rpcMetadata = core.getRPCMetadata(ctx);\n\n        if (request.routeOptions.url != null && rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = request.routeOptions.url;\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan(\n          'request',\n          {\n            attributes: {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n              [semanticConventions.ATTR_HTTP_ROUTE]: request.url,\n              [semanticConventions.ATTR_HTTP_REQUEST_METHOD]: request.method,\n            },\n          },\n          ctx,\n        );\n\n        request[kRequestContext] = api.trace.setSpan(ctx, span);\n        request[kRequestSpan] = span;\n\n        api.context.with(request[kRequestContext], () => {\n          hookDone();\n        });\n      });\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.OK,\n            message: 'OK',\n          });\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone();\n      });\n\n      instance.addHook = addHookPatched;\n      instance.setNotFoundHandler = setNotFoundHandlerPatched;\n\n      done();\n\n      function onSendHook(request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: api.SpanStatusCode.OK,\n              message: 'OK',\n            });\n          }\n\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone(null, payload);\n      }\n\n      function onErrorHook(request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          span.recordException(error);\n        }\n\n        hookDone();\n      }\n\n      function addHookPatched(name, hook) {\n        const addHookOriginal = this[kAddHookOriginal];\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0 ? hook.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            }),\n          );\n        } else {\n          return addHookOriginal.call(this, name, hook);\n        }\n      }\n\n      function setNotFoundHandlerPatched(hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal];\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0 ? hooks.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, handler);\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          handler = handlerWrapper(handler, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, hooks, handler);\n        }\n      }\n\n      function handlerWrapper(handler, spanAttributes = {}) {\n        return function handlerWrapped(...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation];\n          const [request] = args;\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args);\n          }\n\n          const ctx = request[kRequestContext] ?? api.context.active();\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : this.pluginName /* c8 ignore next */ ?? ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes,\n            },\n            ctx,\n          );\n\n          return api.context.with(\n            api.trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args);\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end();\n                      return result;\n                    },\n                    error => {\n                      span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: error.message,\n                      });\n                      span.recordException(error);\n                      span.end();\n                      return Promise.reject(error);\n                    },\n                  );\n                }\n\n                span.end();\n                return res;\n              } catch (error) {\n                span.setStatus({\n                  code: api.SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                span.recordException(error);\n                span.end();\n                throw error;\n              }\n            },\n            this,\n          );\n        };\n      }\n    }\n  }\n}\n\nexports.FastifyOtelInstrumentation = FastifyOtelInstrumentation;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS9mYXN0aWZ5LW90ZWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsV0FBVyxtQkFBTyxDQUFDLDBEQUEwQjtBQUM3QyxZQUFZLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQywrRkFBcUI7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMscUhBQWdDO0FBQ2hFLDRCQUE0QixtQkFBTyxDQUFDLCtIQUFxQztBQUN6RSxrQkFBa0IsbUJBQU8sQ0FBQyx5R0FBVzs7QUFFckM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QseUJBQXlCOztBQUU3RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxxQkFBcUIsRUFBRSxrQkFBa0I7QUFDdkY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCLGFBQWEsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsaUJBQWlCLGFBQWEsS0FBSztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCLEVBQUUsYUFBYTtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsbUNBQW1DO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1CQUFtQixtQ0FBbUM7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxpQkFBaUIsSUFBSSxLQUFLO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxpQkFBaUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsaUJBQWlCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSwwREFBMEQ7QUFDMUQ7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS9mYXN0aWZ5LW90ZWwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRjID0gcmVxdWlyZSgnbm9kZTpkaWFnbm9zdGljc19jaGFubmVsJyk7XG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgbWluaW1hdGNoID0gcmVxdWlyZSgnbWluaW1hdGNoJyk7XG5cbi8qXG5WZW5kb3JlZCBpbiBhbmQgbW9kaWZpZWQgZnJvbSBAZmFzdGlmeS9vdGVsIHZlcnNpb24gMC44LjBcbmh0dHBzOi8vZ2l0aHViLmNvbS9mYXN0aWZ5L290ZWwvcmVsZWFzZXMvdGFnL3YwLjguMFxuXG5UcmllZCBub3QgdG8gbW9kaWZ5IHRoZSBvcmlnaW5hbCBjb2RlIHRvbyBtdWNoIGtlZXBpbmcgaXQgYXMgYSBKYXZhU2NyaXB0IENKUyBtb2R1bGUgdG8gbWFrZSBpdCBlYXNpZXIgdG8gdXBkYXRlIHdoZW4gcmVxdWlyZWRcblxuTW9kaWZpY2F0aW9ucyBpbmNsdWRlOlxuLSBSZW1vdmVkIHJlYWRpbmcgb2YgcGFja2FnZS5qc29uIHRvIGdldCB0aGUgdmVyc2lvbiBhbmQgcGFja2FnZSBuYW1lXG5cbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyNCBGYXN0aWZ5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cblxuLy8gU0VOVFJZIFZFTkRPUiBOT1RFXG4vLyBJbnN0ZWFkIG9mIHVzaW5nIHRoZSBwYWNrYWdlLmpzb24gZmlsZSwgd2UgaGFyZCBjb2RlIHRoZSBwYWNrYWdlIG5hbWUgYW5kIHZlcnNpb24gaGVyZS5cbmNvbnN0IFBBQ0tBR0VfTkFNRSA9ICdAZmFzdGlmeS9vdGVsJztcbmNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9ICcwLjguMCc7XG5cbi8vIENvbnN0YW50c1xuY29uc3QgU1VQUE9SVEVEX1ZFUlNJT05TID0gJz49NC4wLjAgPDYnO1xuY29uc3QgRkFTVElGWV9IT09LUyA9IFtcbiAgJ29uUmVxdWVzdCcsXG4gICdwcmVQYXJzaW5nJyxcbiAgJ3ByZVZhbGlkYXRpb24nLFxuICAncHJlSGFuZGxlcicsXG4gICdwcmVTZXJpYWxpemF0aW9uJyxcbiAgJ29uU2VuZCcsXG4gICdvblJlc3BvbnNlJyxcbiAgJ29uRXJyb3InLFxuXTtcbmNvbnN0IEFUVFJJQlVURV9OQU1FUyA9IHtcbiAgSE9PS19OQU1FOiAnaG9vay5uYW1lJyxcbiAgRkFTVElGWV9UWVBFOiAnZmFzdGlmeS50eXBlJyxcbiAgSE9PS19DQUxMQkFDS19OQU1FOiAnaG9vay5jYWxsYmFjay5uYW1lJyxcbiAgUk9PVDogJ2Zhc3RpZnkucm9vdCcsXG59O1xuY29uc3QgSE9PS19UWVBFUyA9IHtcbiAgUk9VVEU6ICdyb3V0ZS1ob29rJyxcbiAgSU5TVEFOQ0U6ICdob29rJyxcbiAgSEFORExFUjogJ3JlcXVlc3QtaGFuZGxlcicsXG59O1xuY29uc3QgQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgPSAnYW5vbnltb3VzJztcblxuLy8gU3ltYm9sc1xuY29uc3Qga0luc3RydW1lbnRhdGlvbiA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIGluc3RhbmNlJyk7XG5jb25zdCBrUmVxdWVzdFNwYW4gPSBTeW1ib2woJ2Zhc3RpZnkgb3RlbCByZXF1ZXN0IHNwYW5zJyk7XG5jb25zdCBrUmVxdWVzdENvbnRleHQgPSBTeW1ib2woJ2Zhc3RpZnkgb3RlbCByZXF1ZXN0IGNvbnRleHQnKTtcbmNvbnN0IGtBZGRIb29rT3JpZ2luYWwgPSBTeW1ib2woJ2Zhc3RpZnkgb3RlbCBhZGRob29rIG9yaWdpbmFsJyk7XG5jb25zdCBrU2V0Tm90Rm91bmRPcmlnaW5hbCA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIHNldG5vdGZvdW5kIG9yaWdpbmFsJyk7XG5jb25zdCBrSWdub3JlUGF0aHMgPSBTeW1ib2woJ2Zhc3RpZnkgb3RlbCBpZ25vcmUgcGF0aCcpO1xuXG5jbGFzcyBGYXN0aWZ5T3RlbEluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoUEFDS0FHRV9OQU1FLCBQQUNLQUdFX1ZFUlNJT04sIGNvbmZpZyk7XG4gICAgdGhpcy5zZXJ2ZXJuYW1lID0gY29uZmlnPy5zZXJ2ZXJuYW1lID8/IHByb2Nlc3MuZW52Lk9URUxfU0VSVklDRV9OQU1FID8/ICdmYXN0aWZ5JztcbiAgICB0aGlzW2tJZ25vcmVQYXRoc10gPSBudWxsO1xuICAgIHRoaXMuX2xvZ2dlciA9IGFwaS5kaWFnLmNyZWF0ZUNvbXBvbmVudExvZ2dlcih7IG5hbWVzcGFjZTogUEFDS0FHRV9OQU1FIH0pO1xuXG4gICAgaWYgKGNvbmZpZz8uaWdub3JlUGF0aHMgIT0gbnVsbCB8fCBwcm9jZXNzLmVudi5PVEVMX0ZBU1RJRllfSUdOT1JFX1BBVEhTICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGlnbm9yZVBhdGhzID0gY29uZmlnPy5pZ25vcmVQYXRocyA/PyBwcm9jZXNzLmVudi5PVEVMX0ZBU1RJRllfSUdOT1JFX1BBVEhTO1xuXG4gICAgICBpZiAoKHR5cGVvZiBpZ25vcmVQYXRocyAhPT0gJ3N0cmluZycgfHwgaWdub3JlUGF0aHMubGVuZ3RoID09PSAwKSAmJiB0eXBlb2YgaWdub3JlUGF0aHMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWdub3JlUGF0aHMgbXVzdCBiZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdsb2JNYXRjaGVyID0gbWluaW1hdGNoLm1pbmltYXRjaDtcblxuICAgICAgdGhpc1trSWdub3JlUGF0aHNdID0gcm91dGVPcHRpb25zID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBpZ25vcmVQYXRocyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpZ25vcmVQYXRocyhyb3V0ZU9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBnbG9iTWF0Y2hlcihyb3V0ZU9wdGlvbnMudXJsLCBpZ25vcmVQYXRocyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZW5hYmxlKCkge1xuICAgIGlmICh0aGlzLl9oYW5kbGVJbml0aWFsaXphdGlvbiA9PT0gdW5kZWZpbmVkICYmIHRoaXMuZ2V0Q29uZmlnKCkucmVnaXN0ZXJPbkluaXRpYWxpemF0aW9uKSB7XG4gICAgICBjb25zdCBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luID0gdGhpcy5wbHVnaW4oKTtcbiAgICAgIHRoaXMuX2hhbmRsZUluaXRpYWxpemF0aW9uID0gbWVzc2FnZSA9PiB7XG4gICAgICAgIG1lc3NhZ2UuZmFzdGlmeS5yZWdpc3RlcihGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luKTtcbiAgICAgIH07XG4gICAgICBkYy5kZWZhdWx0LnN1YnNjcmliZSgnZmFzdGlmeS5pbml0aWFsaXphdGlvbicsIHRoaXMuX2hhbmRsZUluaXRpYWxpemF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmVuYWJsZSgpO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy5faGFuZGxlSW5pdGlhbGl6YXRpb24pIHtcbiAgICAgIGRjLmRlZmF1bHQudW5zdWJzY3JpYmUoJ2Zhc3RpZnkuaW5pdGlhbGl6YXRpb24nLCB0aGlzLl9oYW5kbGVJbml0aWFsaXphdGlvbik7XG4gICAgICB0aGlzLl9oYW5kbGVJbml0aWFsaXphdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmRpc2FibGUoKTtcbiAgfVxuXG4gIC8vIFdlIGRvIG5vdCBkbyBwYXRjaGluZyBpbiB0aGlzIGluc3RydW1lbnRhdGlvblxuICBpbml0KCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHBsdWdpbigpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgRmFzdGlmeUluc3RydW1lbnRhdGlvblBsdWdpbltTeW1ib2wuZm9yKCdza2lwLW92ZXJyaWRlJyldID0gdHJ1ZTtcbiAgICBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luW1N5bWJvbC5mb3IoJ2Zhc3RpZnkuZGlzcGxheS1uYW1lJyldID0gJ0BmYXN0aWZ5L290ZWwnO1xuICAgIEZhc3RpZnlJbnN0cnVtZW50YXRpb25QbHVnaW5bU3ltYm9sLmZvcigncGx1Z2luLW1ldGEnKV0gPSB7XG4gICAgICBmYXN0aWZ5OiBTVVBQT1JURURfVkVSU0lPTlMsXG4gICAgICBuYW1lOiAnQGZhc3RpZnkvb3RlbCcsXG4gICAgfTtcblxuICAgIHJldHVybiBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luO1xuXG4gICAgZnVuY3Rpb24gRmFzdGlmeUluc3RydW1lbnRhdGlvblBsdWdpbihpbnN0YW5jZSwgb3B0cywgZG9uZSkge1xuICAgICAgaW5zdGFuY2UuZGVjb3JhdGUoa0luc3RydW1lbnRhdGlvbiwgaW5zdHJ1bWVudGF0aW9uKTtcbiAgICAgIC8vIGFkZEhvb2sgYW5kIG5vdGZvdW5kSGFuZGxlciBhcmUgZXNzZW50aWFsbHkgaW5oZXJpdGVkIGZyb20gdGhlIHByb3RvdHlwZVxuICAgICAgLy8gd2hhdCBpcyBpbXBvcnRhbnQgaXMgdG8gYm91bmQgaXQgdG8gdGhlIHJpZ2h0IGluc3RhbmNlXG4gICAgICBpbnN0YW5jZS5kZWNvcmF0ZShrQWRkSG9va09yaWdpbmFsLCBpbnN0YW5jZS5hZGRIb29rKTtcbiAgICAgIGluc3RhbmNlLmRlY29yYXRlKGtTZXROb3RGb3VuZE9yaWdpbmFsLCBpbnN0YW5jZS5zZXROb3RGb3VuZEhhbmRsZXIpO1xuICAgICAgaW5zdGFuY2UuZGVjb3JhdGVSZXF1ZXN0KCdvcGVudGVsZW1ldHJ5JywgZnVuY3Rpb24gb3BlbmV0ZWxlbWV0cnkoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXNba1JlcXVlc3RDb250ZXh0XTtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHRoaXNba1JlcXVlc3RTcGFuXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzcGFuLFxuICAgICAgICAgIHRyYWNlcjogaW5zdHJ1bWVudGF0aW9uLnRyYWNlcixcbiAgICAgICAgICBjb250ZXh0OiBjdHgsXG4gICAgICAgICAgaW5qZWN0OiAoY2Fycmllciwgc2V0dGVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXBpLnByb3BhZ2F0aW9uLmluamVjdChjdHgsIGNhcnJpZXIsIHNldHRlcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBleHRyYWN0OiAoY2FycmllciwgZ2V0dGVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXBpLnByb3BhZ2F0aW9uLmV4dHJhY3QoY3R4LCBjYXJyaWVyLCBnZXR0ZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmRlY29yYXRlUmVxdWVzdChrUmVxdWVzdFNwYW4sIG51bGwpO1xuICAgICAgaW5zdGFuY2UuZGVjb3JhdGVSZXF1ZXN0KGtSZXF1ZXN0Q29udGV4dCwgbnVsbCk7XG5cbiAgICAgIGluc3RhbmNlLmFkZEhvb2soJ29uUm91dGUnLCBmdW5jdGlvbiAocm91dGVPcHRpb25zKSB7XG4gICAgICAgIGlmIChpbnN0cnVtZW50YXRpb25ba0lnbm9yZVBhdGhzXT8uKHJvdXRlT3B0aW9ucykgPT09IHRydWUpIHtcbiAgICAgICAgICBpbnN0cnVtZW50YXRpb24uX2xvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIGBJZ25vcmluZyByb3V0ZSBpbnN0cnVtZW50YXRpb24gJHtyb3V0ZU9wdGlvbnMubWV0aG9kfSAke3JvdXRlT3B0aW9ucy51cmx9IGJlY2F1c2UgaXQgbWF0Y2hlcyB0aGUgaWdub3JlIHBhdGhgLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBob29rIG9mIEZBU1RJRllfSE9PS1MpIHtcbiAgICAgICAgICBpZiAocm91dGVPcHRpb25zW2hvb2tdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJMaWtlID0gcm91dGVPcHRpb25zW2hvb2tdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJMaWtlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJvdXRlT3B0aW9uc1tob29rXSA9IGhhbmRsZXJXcmFwcGVyKGhhbmRsZXJMaWtlLCB7XG4gICAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtIHJvdXRlIC0+ICR7aG9va31gLFxuICAgICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuRkFTVElGWV9UWVBFXTogSE9PS19UWVBFUy5ST1VURSxcbiAgICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdOiByb3V0ZU9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXJMaWtlLm5hbWU/Lmxlbmd0aCA+IDAgPyBoYW5kbGVyTGlrZS5uYW1lIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgLyogYzggaWdub3JlIG5leHQgKi8sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJMaWtlKSkge1xuICAgICAgICAgICAgICBjb25zdCB3cmFwcGVkSGFuZGxlcnMgPSBbXTtcblxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlckxpa2UpIHtcbiAgICAgICAgICAgICAgICB3cmFwcGVkSGFuZGxlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXJXcmFwcGVyKGhhbmRsZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfTkFNRV06IGAke3RoaXMucGx1Z2luTmFtZX0gLSByb3V0ZSAtPiAke2hvb2t9YCxcbiAgICAgICAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5GQVNUSUZZX1RZUEVdOiBIT09LX1RZUEVTLlJPVVRFLFxuICAgICAgICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdOiByb3V0ZU9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfQ0FMTEJBQ0tfTkFNRV06XG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5uYW1lPy5sZW5ndGggPiAwID8gaGFuZGxlci5uYW1lIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUsXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcm91dGVPcHRpb25zW2hvb2tdID0gd3JhcHBlZEhhbmRsZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGFsd2F5cyB3YW50IHRvIGFkZCB0aGUgb25TZW5kIGhvb2sgdG8gdGhlIHJvdXRlIHRvIGJlIGV4ZWN1dGVkIGxhc3RcbiAgICAgICAgaWYgKHJvdXRlT3B0aW9ucy5vblNlbmQgIT0gbnVsbCkge1xuICAgICAgICAgIHJvdXRlT3B0aW9ucy5vblNlbmQgPSBBcnJheS5pc0FycmF5KHJvdXRlT3B0aW9ucy5vblNlbmQpXG4gICAgICAgICAgICA/IFsuLi5yb3V0ZU9wdGlvbnMub25TZW5kLCBvblNlbmRIb29rXVxuICAgICAgICAgICAgOiBbcm91dGVPcHRpb25zLm9uU2VuZCwgb25TZW5kSG9va107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVPcHRpb25zLm9uU2VuZCA9IG9uU2VuZEhvb2s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBhbHdheXMgd2FudCB0byBhZGQgdGhlIG9uRXJyb3IgaG9vayB0byB0aGUgcm91dGUgdG8gYmUgZXhlY3V0ZWQgbGFzdFxuICAgICAgICBpZiAocm91dGVPcHRpb25zLm9uRXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgIHJvdXRlT3B0aW9ucy5vbkVycm9yID0gQXJyYXkuaXNBcnJheShyb3V0ZU9wdGlvbnMub25FcnJvcilcbiAgICAgICAgICAgID8gWy4uLnJvdXRlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9ySG9va11cbiAgICAgICAgICAgIDogW3JvdXRlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9ySG9va107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVPcHRpb25zLm9uRXJyb3IgPSBvbkVycm9ySG9vaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdXRlT3B0aW9ucy5oYW5kbGVyID0gaGFuZGxlcldyYXBwZXIocm91dGVPcHRpb25zLmhhbmRsZXIsIHtcbiAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX05BTUVdOiBgJHt0aGlzLnBsdWdpbk5hbWV9IC0gcm91dGUtaGFuZGxlcmAsXG4gICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5GQVNUSUZZX1RZUEVdOiBIT09LX1RZUEVTLkhBTkRMRVIsXG4gICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JPVVRFXTogcm91dGVPcHRpb25zLnVybCxcbiAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfQ0FMTEJBQ0tfTkFNRV06XG4gICAgICAgICAgICByb3V0ZU9wdGlvbnMuaGFuZGxlci5uYW1lLmxlbmd0aCA+IDAgPyByb3V0ZU9wdGlvbnMuaGFuZGxlci5uYW1lIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGluc3RhbmNlLmFkZEhvb2soJ29uUmVxdWVzdCcsIGZ1bmN0aW9uIChyZXF1ZXN0LCBfcmVwbHksIGhvb2tEb25lKSB7XG4gICAgICAgIGlmICh0aGlzW2tJbnN0cnVtZW50YXRpb25dLmlzRW5hYmxlZCgpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBob29rRG9uZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHRoaXNba0luc3RydW1lbnRhdGlvbl1ba0lnbm9yZVBhdGhzXT8uKHtcbiAgICAgICAgICAgIHVybDogcmVxdWVzdC51cmwsXG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIH0pID09PSB0cnVlXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXNba0luc3RydW1lbnRhdGlvbl0uX2xvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIGBJZ25vcmluZyByZXF1ZXN0ICR7cmVxdWVzdC5tZXRob2R9ICR7cmVxdWVzdC51cmx9IGJlY2F1c2UgaXQgbWF0Y2hlcyB0aGUgaWdub3JlIHBhdGhgLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGhvb2tEb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3R4ID0gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG5cbiAgICAgICAgaWYgKGFwaS50cmFjZS5nZXRTcGFuKGN0eCkgPT0gbnVsbCkge1xuICAgICAgICAgIGN0eCA9IGFwaS5wcm9wYWdhdGlvbi5leHRyYWN0KGN0eCwgcmVxdWVzdC5oZWFkZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJwY01ldGFkYXRhID0gY29yZS5nZXRSUENNZXRhZGF0YShjdHgpO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0LnJvdXRlT3B0aW9ucy51cmwgIT0gbnVsbCAmJiBycGNNZXRhZGF0YT8udHlwZSA9PT0gY29yZS5SUENUeXBlLkhUVFApIHtcbiAgICAgICAgICBycGNNZXRhZGF0YS5yb3V0ZSA9IHJlcXVlc3Qucm91dGVPcHRpb25zLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCdAb3BlbnRlbGVtZXRyeS9hcGknKS5TcGFufSAqL1xuICAgICAgICBjb25zdCBzcGFuID0gdGhpc1trSW5zdHJ1bWVudGF0aW9uXS50cmFjZXIuc3RhcnRTcGFuKFxuICAgICAgICAgICdyZXF1ZXN0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9OQU1FXTogaW5zdGFuY2Vba0luc3RydW1lbnRhdGlvbl0uc2VydmVybmFtZSxcbiAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5ST09UXTogJ0BmYXN0aWZ5L290ZWwnLFxuICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdOiByZXF1ZXN0LnVybCxcbiAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EXTogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3R4LFxuICAgICAgICApO1xuXG4gICAgICAgIHJlcXVlc3Rba1JlcXVlc3RDb250ZXh0XSA9IGFwaS50cmFjZS5zZXRTcGFuKGN0eCwgc3Bhbik7XG4gICAgICAgIHJlcXVlc3Rba1JlcXVlc3RTcGFuXSA9IHNwYW47XG5cbiAgICAgICAgYXBpLmNvbnRleHQud2l0aChyZXF1ZXN0W2tSZXF1ZXN0Q29udGV4dF0sICgpID0+IHtcbiAgICAgICAgICBob29rRG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBvblJlc3BvbnNlIGlzIHRoZSBsYXN0IGhvb2sgdG8gYmUgZXhlY3V0ZWQsIG9ubHkgYWRkZWQgZm9yIDQwNCBoYW5kbGVyc1xuICAgICAgaW5zdGFuY2UuYWRkSG9vaygnb25SZXNwb25zZScsIGZ1bmN0aW9uIChyZXF1ZXN0LCByZXBseSwgaG9va0RvbmUpIHtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHJlcXVlc3Rba1JlcXVlc3RTcGFuXTtcblxuICAgICAgICBpZiAoc3BhbiAhPSBudWxsKSB7XG4gICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLk9LLFxuICAgICAgICAgICAgbWVzc2FnZTogJ09LJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXTogNDA0LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0W2tSZXF1ZXN0U3Bhbl0gPSBudWxsO1xuXG4gICAgICAgIGhvb2tEb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgaW5zdGFuY2UuYWRkSG9vayA9IGFkZEhvb2tQYXRjaGVkO1xuICAgICAgaW5zdGFuY2Uuc2V0Tm90Rm91bmRIYW5kbGVyID0gc2V0Tm90Rm91bmRIYW5kbGVyUGF0Y2hlZDtcblxuICAgICAgZG9uZSgpO1xuXG4gICAgICBmdW5jdGlvbiBvblNlbmRIb29rKHJlcXVlc3QsIHJlcGx5LCBwYXlsb2FkLCBob29rRG9uZSkge1xuICAgICAgICAvKiogQHR5cGUge2ltcG9ydCgnQG9wZW50ZWxlbWV0cnkvYXBpJykuU3Bhbn0gKi9cbiAgICAgICAgY29uc3Qgc3BhbiA9IHJlcXVlc3Rba1JlcXVlc3RTcGFuXTtcblxuICAgICAgICBpZiAoc3BhbiAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlcGx5LnN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLk9LLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnT0snLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9SRVNQT05TRV9TVEFUVVNfQ09ERV06IHJlcGx5LnN0YXR1c0NvZGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3Rba1JlcXVlc3RTcGFuXSA9IG51bGw7XG5cbiAgICAgICAgaG9va0RvbmUobnVsbCwgcGF5bG9hZCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uRXJyb3JIb29rKHJlcXVlc3QsIHJlcGx5LCBlcnJvciwgaG9va0RvbmUpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtTcGFufSAqL1xuICAgICAgICBjb25zdCBzcGFuID0gcmVxdWVzdFtrUmVxdWVzdFNwYW5dO1xuXG4gICAgICAgIGlmIChzcGFuICE9IG51bGwpIHtcbiAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhvb2tEb25lKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZEhvb2tQYXRjaGVkKG5hbWUsIGhvb2spIHtcbiAgICAgICAgY29uc3QgYWRkSG9va09yaWdpbmFsID0gdGhpc1trQWRkSG9va09yaWdpbmFsXTtcblxuICAgICAgICBpZiAoRkFTVElGWV9IT09LUy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICAgIHJldHVybiBhZGRIb29rT3JpZ2luYWwuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgaGFuZGxlcldyYXBwZXIoaG9vaywge1xuICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtICR7bmFtZX1gLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuSU5TVEFOQ0UsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgICBob29rLm5hbWU/Lmxlbmd0aCA+IDAgPyBob29rLm5hbWUgOiBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSAvKiBjOCBpZ25vcmUgbmV4dCAqLyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGFkZEhvb2tPcmlnaW5hbC5jYWxsKHRoaXMsIG5hbWUsIGhvb2spO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldE5vdEZvdW5kSGFuZGxlclBhdGNoZWQoaG9va3MsIGhhbmRsZXIpIHtcbiAgICAgICAgY29uc3Qgc2V0Tm90Rm91bmRIYW5kbGVyT3JpZ2luYWwgPSB0aGlzW2tTZXROb3RGb3VuZE9yaWdpbmFsXTtcbiAgICAgICAgaWYgKHR5cGVvZiBob29rcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVyV3JhcHBlcihob29rcywge1xuICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX05BTUVdOiBgJHt0aGlzLnBsdWdpbk5hbWV9IC0gbm90LWZvdW5kLWhhbmRsZXJgLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5GQVNUSUZZX1RZUEVdOiBIT09LX1RZUEVTLklOU1RBTkNFLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICBob29rcy5uYW1lPy5sZW5ndGggPiAwID8gaG9va3MubmFtZSA6IEFOT05ZTU9VU19GVU5DVElPTl9OQU1FIC8qIGM4IGlnbm9yZSBuZXh0ICovLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldE5vdEZvdW5kSGFuZGxlck9yaWdpbmFsLmNhbGwodGhpcywgaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGhvb2tzLnByZVZhbGlkYXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MucHJlVmFsaWRhdGlvbiA9IGhhbmRsZXJXcmFwcGVyKGhvb2tzLnByZVZhbGlkYXRpb24sIHtcbiAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfTkFNRV06IGAke3RoaXMucGx1Z2luTmFtZX0gLSBub3QtZm91bmQtaGFuZGxlciAtIHByZVZhbGlkYXRpb25gLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuSU5TVEFOQ0UsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgICBob29rcy5wcmVWYWxpZGF0aW9uLm5hbWU/Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgID8gaG9va3MucHJlVmFsaWRhdGlvbi5uYW1lXG4gICAgICAgICAgICAgICAgICA6IEFOT05ZTU9VU19GVU5DVElPTl9OQU1FIC8qIGM4IGlnbm9yZSBuZXh0ICovLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhvb2tzLnByZUhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MucHJlSGFuZGxlciA9IGhhbmRsZXJXcmFwcGVyKGhvb2tzLnByZUhhbmRsZXIsIHtcbiAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfTkFNRV06IGAke3RoaXMucGx1Z2luTmFtZX0gLSBub3QtZm91bmQtaGFuZGxlciAtIHByZUhhbmRsZXJgLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuSU5TVEFOQ0UsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgICBob29rcy5wcmVIYW5kbGVyLm5hbWU/Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgID8gaG9va3MucHJlSGFuZGxlci5uYW1lXG4gICAgICAgICAgICAgICAgICA6IEFOT05ZTU9VU19GVU5DVElPTl9OQU1FIC8qIGM4IGlnbm9yZSBuZXh0ICovLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJXcmFwcGVyKGhhbmRsZXIsIHtcbiAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9OQU1FXTogaW5zdGFuY2Vba0luc3RydW1lbnRhdGlvbl0uc2VydmVybmFtZSxcbiAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtIG5vdC1mb3VuZC1oYW5kbGVyYCxcbiAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuRkFTVElGWV9UWVBFXTogSE9PS19UWVBFUy5JTlNUQU5DRSxcbiAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgaGFuZGxlci5uYW1lPy5sZW5ndGggPiAwID8gaGFuZGxlci5uYW1lIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgLyogYzggaWdub3JlIG5leHQgKi8sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2V0Tm90Rm91bmRIYW5kbGVyT3JpZ2luYWwuY2FsbCh0aGlzLCBob29rcywgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcldyYXBwZXIoaGFuZGxlciwgc3BhbkF0dHJpYnV0ZXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcldyYXBwZWQoLi4uYXJncykge1xuICAgICAgICAgIC8qKiBAdHlwZSB7RmFzdGlmeU90ZWxJbnN0cnVtZW50YXRpb259ICovXG4gICAgICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpc1trSW5zdHJ1bWVudGF0aW9uXTtcbiAgICAgICAgICBjb25zdCBbcmVxdWVzdF0gPSBhcmdzO1xuXG4gICAgICAgICAgaWYgKGluc3RydW1lbnRhdGlvbi5pc0VuYWJsZWQoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY3R4ID0gcmVxdWVzdFtrUmVxdWVzdENvbnRleHRdID8/IGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xuICAgICAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihcbiAgICAgICAgICAgIGBoYW5kbGVyIC0gJHtcbiAgICAgICAgICAgICAgaGFuZGxlci5uYW1lPy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBoYW5kbGVyLm5hbWVcbiAgICAgICAgICAgICAgICA6IHRoaXMucGx1Z2luTmFtZSAvKiBjOCBpZ25vcmUgbmV4dCAqLyA/PyBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHNwYW5BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoXG4gICAgICAgICAgICBhcGkudHJhY2Uuc2V0U3BhbihjdHgsIHNwYW4pLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGhhbmRsZXIuY2FsbCh0aGlzLCAuLi5hcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzPy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgY29kZTogYXBpLlNwYW5TdGF0dXNDb2RlLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnJvcik7XG4gICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5GYXN0aWZ5T3RlbEluc3RydW1lbnRhdGlvbiA9IEZhc3RpZnlPdGVsSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ./fastify-otel/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\");\nconst instrumentation = __webpack_require__(/*! ./v3/instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\");\n\n/**\n * Options for the Fastify integration.\n *\n * `shouldHandleError` - Callback method deciding whether error should be captured and sent to Sentry\n * This is used on Fastify v5 where Sentry handles errors in the diagnostics channel.\n * Fastify v3 and v4 use `setupFastifyErrorHandler` instead.\n *\n * @example\n *\n * ```javascript\n * Sentry.init({\n *   integrations: [\n *     Sentry.fastifyIntegration({\n *       shouldHandleError(_error, _request, reply) {\n *         return reply.statusCode >= 500;\n *       },\n *     });\n *   },\n * });\n * ```\n *\n */\n\nconst INTEGRATION_NAME = 'Fastify';\nconst INTEGRATION_NAME_V5 = 'Fastify-V5';\nconst INTEGRATION_NAME_V3 = 'Fastify-V3';\n\nconst instrumentFastifyV3 = nodeCore.generateInstrumentOnce(INTEGRATION_NAME_V3, () => new instrumentation.FastifyInstrumentationV3());\n\nfunction getFastifyIntegration() {\n  const client = core.getClient();\n  if (!client) {\n    return undefined;\n  } else {\n    return client.getIntegrationByName(INTEGRATION_NAME) ;\n  }\n}\n\nfunction handleFastifyError(\n\n  error,\n  request,\n  reply,\n  handlerOrigin,\n) {\n  const shouldHandleError = getFastifyIntegration()?.getShouldHandleError() || defaultShouldHandleError;\n  // Diagnostics channel runs before the onError hook, so we can use it to check if the handler was already registered\n  if (handlerOrigin === 'diagnostics-channel') {\n    this.diagnosticsChannelExists = true;\n  }\n\n  if (this.diagnosticsChannelExists && handlerOrigin === 'onError-hook') {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        'Fastify error handler was already registered via diagnostics channel.',\n        'You can safely remove `setupFastifyErrorHandler` call and set `shouldHandleError` on the integration options.',\n      );\n\n    // If the diagnostics channel already exists, we don't need to handle the error again\n    return;\n  }\n\n  if (shouldHandleError(error, request, reply)) {\n    core.captureException(error, { mechanism: { handled: false, type: 'fastify' } });\n  }\n}\n\nconst instrumentFastify = nodeCore.generateInstrumentOnce(INTEGRATION_NAME_V5, () => {\n  const fastifyOtelInstrumentationInstance = new index.FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  dc.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message ).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        debugBuild.DEBUG_BUILD && core.debug.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // This diagnostics channel only works on Fastify version 5\n  // For versions 3 and 4, we use `setupFastifyErrorHandler` instead\n  dc.subscribe('tracing:fastify.request.handler:error', message => {\n    const { error, request, reply } = message\n\n;\n\n    handleFastifyError.call(handleFastifyError, error, request, reply, 'diagnostics-channel');\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance ;\n});\n\nconst _fastifyIntegration = (({ shouldHandleError }) => {\n  let _shouldHandleError;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _shouldHandleError = shouldHandleError || defaultShouldHandleError;\n\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n    getShouldHandleError() {\n      return _shouldHandleError;\n    },\n    setShouldHandleError(fn) {\n      _shouldHandleError = fn;\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration((options = {}) =>\n  _fastifyIntegration(options),\n);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error, _request, reply) {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify, options) {\n  if (options?.shouldHandleError) {\n    getFastifyIntegration()?.setShouldHandleError(options.shouldHandleError);\n  }\n\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (request, reply, error) => {\n        handleFastifyError.call(handleFastifyError, error, request, reply, 'onError-hook');\n      });\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span) {\n  const spanJSON = core.spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient() {\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify) {\n  fastify.addHook('onRequest', async (request, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.instrumentFastifyV3 = instrumentFastifyV3;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\nexports.spanRequestSymbol = spanRequestSymbol;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gVmVuZG9yZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvY29uc3RhbnRzLnRzXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBzcGFuUmVxdWVzdFN5bWJvbCA9IFN5bWJvbCgnb3BlbnRlbGVtZXRyeS5pbnN0cnVtZW50YXRpb24uZmFzdGlmeS5yZXF1ZXN0X2FjdGl2ZV9zcGFuJyk7XG5cbmV4cG9ydHMuc3BhblJlcXVlc3RTeW1ib2wgPSBzcGFuUmVxdWVzdFN5bWJvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const FASTIFY_NAME = 'fastify.name'; AttributeNames[\"FASTIFY_NAME\"] = FASTIFY_NAME;\n  const FASTIFY_TYPE = 'fastify.type'; AttributeNames[\"FASTIFY_TYPE\"] = FASTIFY_TYPE;\n  const HOOK_NAME = 'hook.name'; AttributeNames[\"HOOK_NAME\"] = HOOK_NAME;\n  const PLUGIN_NAME = 'plugin.name'; AttributeNames[\"PLUGIN_NAME\"] = PLUGIN_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n\nexports.FastifyTypes = void 0; (function (FastifyTypes) {\n  const MIDDLEWARE = 'middleware'; FastifyTypes[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request_handler'; FastifyTypes[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyTypes || (exports.FastifyTypes = {}));\n\nexports.FastifyNames = void 0; (function (FastifyNames) {\n  const MIDDLEWARE = 'middleware'; FastifyNames[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request handler'; FastifyNames[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyNames || (exports.FastifyNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixXQUFXO0FBQ2pDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLHFDQUFxQztBQUNyQyxDQUFDLDZCQUE2QixzQkFBc0IsS0FBSzs7QUFFekQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSzs7QUFFckQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSztBQUNyRCIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gVmVuZG9yZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMudHNcbi8vXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gIGNvbnN0IEZBU1RJRllfTkFNRSA9ICdmYXN0aWZ5Lm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIkZBU1RJRllfTkFNRVwiXSA9IEZBU1RJRllfTkFNRTtcbiAgY29uc3QgRkFTVElGWV9UWVBFID0gJ2Zhc3RpZnkudHlwZSc7IEF0dHJpYnV0ZU5hbWVzW1wiRkFTVElGWV9UWVBFXCJdID0gRkFTVElGWV9UWVBFO1xuICBjb25zdCBIT09LX05BTUUgPSAnaG9vay5uYW1lJzsgQXR0cmlidXRlTmFtZXNbXCJIT09LX05BTUVcIl0gPSBIT09LX05BTUU7XG4gIGNvbnN0IFBMVUdJTl9OQU1FID0gJ3BsdWdpbi5uYW1lJzsgQXR0cmlidXRlTmFtZXNbXCJQTFVHSU5fTkFNRVwiXSA9IFBMVUdJTl9OQU1FO1xufSkoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG5cbmV4cG9ydHMuRmFzdGlmeVR5cGVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEZhc3RpZnlUeXBlcykge1xuICBjb25zdCBNSURETEVXQVJFID0gJ21pZGRsZXdhcmUnOyBGYXN0aWZ5VHlwZXNbXCJNSURETEVXQVJFXCJdID0gTUlERExFV0FSRTtcbiAgY29uc3QgUkVRVUVTVF9IQU5ETEVSID0gJ3JlcXVlc3RfaGFuZGxlcic7IEZhc3RpZnlUeXBlc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFJFUVVFU1RfSEFORExFUjtcbn0pKGV4cG9ydHMuRmFzdGlmeVR5cGVzIHx8IChleHBvcnRzLkZhc3RpZnlUeXBlcyA9IHt9KSk7XG5cbmV4cG9ydHMuRmFzdGlmeU5hbWVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEZhc3RpZnlOYW1lcykge1xuICBjb25zdCBNSURETEVXQVJFID0gJ21pZGRsZXdhcmUnOyBGYXN0aWZ5TmFtZXNbXCJNSURETEVXQVJFXCJdID0gTUlERExFV0FSRTtcbiAgY29uc3QgUkVRVUVTVF9IQU5ETEVSID0gJ3JlcXVlc3QgaGFuZGxlcic7IEZhc3RpZnlOYW1lc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFJFUVVFU1RfSEFORExFUjtcbn0pKGV4cG9ydHMuRmFzdGlmeU5hbWVzIHx8IChleHBvcnRzLkZhc3RpZnlOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nclass FastifyInstrumentationV3 extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n   _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request, reply, done) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request ;\n\n      const rpcMetadata = core.getRPCMetadata(api.context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === core.RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      core$1.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n   _wrapHandler(\n    pluginName,\n    hookName,\n    original,\n    syncFunctionWithDone,\n  ) {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function ( ...args) {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${AttributeNames.FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] ;\n\n      const span = utils.startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.MIDDLEWARE,\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] );\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs) {\n          utils.endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return utils.safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              utils.endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n   _wrapAddHook() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original) {\n      return function wrappedAddHook( ...args) {\n        const name = args[0] ;\n        const handler = args[1] ;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] );\n      };\n    };\n  }\n\n   _patchConstructor(moduleExports\n\n) {\n    const instrumentation = this;\n\n    function fastify( ...args) {\n      const app = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n   _patchSend() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original) {\n      return function send( ...args) {\n        const maybeError = args[0];\n\n        if (!instrumentation$1.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return instrumentation.safeExecuteInTheMiddle(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            utils.endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n   _hookPreHandler() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler( request, reply, done) {\n      if (!instrumentation$1.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request ;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${AttributeNames.FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes = {\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = utils.startSpan(reply, instrumentation$1.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation$1.getConfig();\n      if (requestHook) {\n        instrumentation.safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation$1._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient() {\n  const client = core$1.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span) {\n  const attributes = core$1.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nexports.FastifyInstrumentationV3 = FastifyInstrumentationV3;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nfunction startSpan(\n  reply,\n  tracer,\n  spanName,\n  spanAttributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans = reply[constants.spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, constants.spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nfunction endSpan(reply, err) {\n  const spans = reply[constants.spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span) => {\n    if (err) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[constants.spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\n\nfunction safeExecuteInTheMiddleMaybePromise(\n  execute,\n  onFinish,\n  preventThrowingError,\n) {\n  let error;\n  let result = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && true) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise(val) {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n\nexports.endSpan = endSpan;\nexports.safeExecuteInTheMiddleMaybePromise = safeExecuteInTheMiddleMaybePromise;\nexports.startSpan = startSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHVIQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDRDQUE0Qyw0QkFBNEI7O0FBRXhFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmLDBDQUEwQztBQUMxQyxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcblxuLy8gVmVuZG9yZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzQwN2Y2MTU5MWJhNjlhMzlhNjkwODI2NDM3OWQ0ZDk4YTQ4ZGJlYzQvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL3V0aWxzLnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9yZXF1aXJlLWpzZG9jICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogU3RhcnRzIFNwYW5cbiAqIEBwYXJhbSByZXBseSAtIHJlcGx5IGZ1bmN0aW9uXG4gKiBAcGFyYW0gdHJhY2VyIC0gdHJhY2VyXG4gKiBAcGFyYW0gc3Bhbk5hbWUgLSBzcGFuIG5hbWVcbiAqIEBwYXJhbSBzcGFuQXR0cmlidXRlcyAtIHNwYW4gYXR0cmlidXRlc1xuICovXG5mdW5jdGlvbiBzdGFydFNwYW4oXG4gIHJlcGx5LFxuICB0cmFjZXIsXG4gIHNwYW5OYW1lLFxuICBzcGFuQXR0cmlidXRlcyA9IHt9LFxuKSB7XG4gIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKHNwYW5OYW1lLCB7IGF0dHJpYnV0ZXM6IHNwYW5BdHRyaWJ1dGVzIH0pO1xuXG4gIGNvbnN0IHNwYW5zID0gcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXSB8fCBbXTtcbiAgc3BhbnMucHVzaChzcGFuKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXBseSwgY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBzcGFucyxcbiAgfSk7XG5cbiAgcmV0dXJuIHNwYW47XG59XG5cbi8qKlxuICogRW5kcyBzcGFuXG4gKiBAcGFyYW0gcmVwbHkgLSByZXBseSBmdW5jdGlvblxuICogQHBhcmFtIGVyciAtIGVycm9yXG4gKi9cbmZ1bmN0aW9uIGVuZFNwYW4ocmVwbHksIGVycikge1xuICBjb25zdCBzcGFucyA9IHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF0gfHwgW107XG4gIC8vIHRoZXJlIGlzIG5vIGFjdGl2ZSBzcGFuLCBvciBpdCBoYXMgYWxyZWFkeSBlbmRlZFxuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBiaW9tZS1pZ25vcmUgbGludC9jb21wbGV4aXR5L25vRm9yRWFjaDogPGV4cGxhbmF0aW9uPlxuICBzcGFucy5mb3JFYWNoKChzcGFuKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgfSk7XG4gICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnIpO1xuICAgIH1cbiAgICBzcGFuLmVuZCgpO1xuICB9KTtcbiAgZGVsZXRlIHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF07XG59XG5cbi8vIEBUT0RPIGFmdGVyIGFwcHJvdmUgYWRkIHRoaXMgdG8gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2UgYW5kIHJlcGxhY2UgdXNhZ2Vcbi8vIHdoZW4gaXQgd2lsbCBiZSByZWxlYXNlZFxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgbWlzc2luZyBjYXNlIGZyb20gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2Ugd2hlblxuICogZXhlY3V0ZSBjYW4gZWl0aGVyIHJldHVybiBhIHByb21pc2Ugb3Igdm9pZC4gQW5kIHVzaW5nIGFzeW5jIGlzIG5vdCBhblxuICogb3B0aW9uIGFzIGl0IGlzIHByb2R1Y2luZyB1bndhbnRlZCBzaWRlIGVmZmVjdHMuXG4gKiBAcGFyYW0gZXhlY3V0ZSAtIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gKiBAcGFyYW0gb25GaW5pc2ggLSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBmdW5jdGlvbiBleGVjdXRlZFxuICogQHBhcmFtIHByZXZlbnRUaHJvd2luZ0Vycm9yIC0gcHJldmVudCB0byB0aHJvdyBlcnJvciB3aGVuIGV4ZWN1dGVcbiAqIGZ1bmN0aW9uIGZhaWxzXG4gKi9cblxuZnVuY3Rpb24gc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZShcbiAgZXhlY3V0ZSxcbiAgb25GaW5pc2gsXG4gIHByZXZlbnRUaHJvd2luZ0Vycm9yLFxuKSB7XG4gIGxldCBlcnJvcjtcbiAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBleGVjdXRlKCk7XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC50aGVuKFxuICAgICAgICByZXMgPT4gb25GaW5pc2godW5kZWZpbmVkLCByZXMpLFxuICAgICAgICBlcnIgPT4gb25GaW5pc2goZXJyKSxcbiAgICAgICk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICghaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIG9uRmluaXNoKGVycm9yLCByZXN1bHQpO1xuICAgICAgaWYgKGVycm9yICYmIHRydWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbCwgJ3RoZW4nKT8udmFsdWUgPT09ICdmdW5jdGlvbicpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0cy5lbmRTcGFuID0gZW5kU3BhbjtcbmV4cG9ydHMuc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZSA9IHNhZmVFeGVjdXRlSW5UaGVNaWRkbGVNYXliZVByb21pc2U7XG5leHBvcnRzLnN0YXJ0U3BhbiA9IHN0YXJ0U3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst firebaseInstrumentation = __webpack_require__(/*! ./otel/firebaseInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Firebase';\n\nconst config = {\n  firestoreSpanCreationHook: span => {\n    nodeCore.addOriginToSpan(span , 'auto.firebase.otel.firestore');\n\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'db.query');\n  },\n};\n\nconst instrumentFirebase = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new firebaseInstrumentation.FirebaseInstrumentation(config));\n\nconst _firebaseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFirebase();\n    },\n  };\n}) ;\n\nconst firebaseIntegration = core.defineIntegration(_firebaseIntegration);\n\nexports.firebaseIntegration = firebaseIntegration;\nexports.instrumentFirebase = instrumentFirebase;\n//# sourceMappingURL=firebase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2UvZmlyZWJhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjtBQUM1QyxnQ0FBZ0MsbUJBQU8sQ0FBQywySkFBbUM7O0FBRTNFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9maXJlYmFzZS9maXJlYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZmlyZWJhc2VJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL290ZWwvZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdGaXJlYmFzZSc7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vazogc3BhbiA9PiB7XG4gICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4gLCAnYXV0by5maXJlYmFzZS5vdGVsLmZpcmVzdG9yZScpO1xuXG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnZGIucXVlcnknKTtcbiAgfSxcbn07XG5cbmNvbnN0IGluc3RydW1lbnRGaXJlYmFzZSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGZpcmViYXNlSW5zdHJ1bWVudGF0aW9uLkZpcmViYXNlSW5zdHJ1bWVudGF0aW9uKGNvbmZpZykpO1xuXG5jb25zdCBfZmlyZWJhc2VJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50RmlyZWJhc2UoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBmaXJlYmFzZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZmlyZWJhc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IGZpcmViYXNlSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRGaXJlYmFzZSA9IGluc3RydW1lbnRGaXJlYmFzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcmViYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst firestore = __webpack_require__(/*! ./patches/firestore.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\");\n\nconst DefaultFirebaseInstrumentationConfig = {};\nconst firestoreSupportedVersions = ['>=3.0.0 <5']; // firebase 9+\n\n/**\n * Instrumentation for Firebase services, specifically Firestore.\n */\nclass FirebaseInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = DefaultFirebaseInstrumentationConfig) {\n    super('@sentry/instrumentation-firebase', core.SDK_VERSION, config);\n  }\n\n  /**\n   * sets config\n   * @param config\n   */\n    setConfig(config = {}) {\n    super.setConfig({ ...DefaultFirebaseInstrumentationConfig, ...config });\n  }\n\n  /**\n   *\n   * @protected\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n   init() {\n    const modules = [];\n\n    modules.push(firestore.patchFirestore(this.tracer, firestoreSupportedVersions, this._wrap, this._unwrap, this.getConfig()));\n\n    return modules;\n  }\n}\n\nexports.FirebaseInstrumentation = FirebaseInstrumentation;\n//# sourceMappingURL=firebaseInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSx3QkFBd0IsbUJBQU8sQ0FBQyxxSEFBZ0M7QUFDaEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLDBJQUF3Qjs7QUFFbEQ7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHNCQUFzQixvREFBb0Q7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBmaXJlc3RvcmUgPSByZXF1aXJlKCcuL3BhdGNoZXMvZmlyZXN0b3JlLmpzJyk7XG5cbmNvbnN0IERlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZyA9IHt9O1xuY29uc3QgZmlyZXN0b3JlU3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49My4wLjAgPDUnXTsgLy8gZmlyZWJhc2UgOStcblxuLyoqXG4gKiBJbnN0cnVtZW50YXRpb24gZm9yIEZpcmViYXNlIHNlcnZpY2VzLCBzcGVjaWZpY2FsbHkgRmlyZXN0b3JlLlxuICovXG5jbGFzcyBGaXJlYmFzZUluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IERlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZykge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1maXJlYmFzZScsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogc2V0cyBjb25maWdcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgICBzZXRDb25maWcoY29uZmlnID0ge30pIHtcbiAgICBzdXBlci5zZXRDb25maWcoeyAuLi5EZWZhdWx0RmlyZWJhc2VJbnN0cnVtZW50YXRpb25Db25maWcsIC4uLmNvbmZpZyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZXMgPSBbXTtcblxuICAgIG1vZHVsZXMucHVzaChmaXJlc3RvcmUucGF0Y2hGaXJlc3RvcmUodGhpcy50cmFjZXIsIGZpcmVzdG9yZVN1cHBvcnRlZFZlcnNpb25zLCB0aGlzLl93cmFwLCB0aGlzLl91bndyYXAsIHRoaXMuZ2V0Q29uZmlnKCkpKTtcblxuICAgIHJldHVybiBtb2R1bGVzO1xuICB9XG59XG5cbmV4cG9ydHMuRmlyZWJhc2VJbnN0cnVtZW50YXRpb24gPSBGaXJlYmFzZUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcmViYXNlSW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n\n/**\n *\n * @param tracer - Opentelemetry Tracer\n * @param firestoreSupportedVersions - supported version of firebase/firestore\n * @param wrap - reference to native instrumentation wrap function\n * @param unwrap - reference to native instrumentation wrap function\n */\nfunction patchFirestore(\n  tracer,\n  firestoreSupportedVersions,\n  wrap,\n  unwrap,\n  config,\n) {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const defaultFirestoreSpanCreationHook = () => {};\n\n  let firestoreSpanCreationHook = defaultFirestoreSpanCreationHook;\n  const configFirestoreSpanCreationHook = config.firestoreSpanCreationHook;\n\n  if (typeof configFirestoreSpanCreationHook === 'function') {\n    firestoreSpanCreationHook = (span) => {\n      instrumentation.safeExecuteInTheMiddle(\n        () => configFirestoreSpanCreationHook(span),\n        error => {\n          if (!error) {\n            return;\n          }\n          api.diag.error(error?.message);\n        },\n        true,\n      );\n    };\n  }\n\n  const moduleFirestoreCJS = new instrumentation.InstrumentationNodeModuleDefinition(\n    '@firebase/firestore',\n    firestoreSupportedVersions,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (moduleExports) => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n  );\n  const files = [\n    '@firebase/firestore/dist/lite/index.node.cjs.js',\n    '@firebase/firestore/dist/lite/index.node.mjs.js',\n    '@firebase/firestore/dist/lite/index.rn.esm2017.js',\n    '@firebase/firestore/dist/lite/index.cjs.js',\n  ];\n\n  for (const file of files) {\n    moduleFirestoreCJS.files.push(\n      new instrumentation.InstrumentationNodeModuleFile(\n        file,\n        firestoreSupportedVersions,\n        moduleExports => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n        moduleExports => unwrapMethods(moduleExports, unwrap),\n      ),\n    );\n  }\n\n  return moduleFirestoreCJS;\n}\n\nfunction wrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  wrap,\n  unwrap,\n  tracer,\n  firestoreSpanCreationHook,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  unwrapMethods(moduleExports, unwrap);\n\n  wrap(moduleExports, 'addDoc', patchAddDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'getDocs', patchGetDocs(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'setDoc', patchSetDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'deleteDoc', patchDeleteDoc(tracer, firestoreSpanCreationHook));\n\n  return moduleExports;\n}\n\nfunction unwrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  unwrap,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  for (const method of ['addDoc', 'getDocs', 'setDoc', 'deleteDoc']) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (instrumentation.isWrapped(moduleExports[method])) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      unwrap(moduleExports, method);\n    }\n  }\n  return moduleExports;\n}\n\nfunction patchAddDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function addDoc(original) {\n    return function (\n      reference,\n      data,\n    ) {\n      const span = startDBSpan(tracer, 'addDoc', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference, data);\n      });\n    };\n  };\n}\n\nfunction patchDeleteDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function deleteDoc(original) {\n    return function (reference) {\n      const span = startDBSpan(tracer, 'deleteDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchGetDocs(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function getDocs(original) {\n    return function (\n      reference,\n    ) {\n      const span = startDBSpan(tracer, 'getDocs', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchSetDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function setDoc(original) {\n    return function (\n      reference,\n      data,\n      options,\n    ) {\n      const span = startDBSpan(tracer, 'setDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n\n      return executeContextWithSpan(span, () => {\n        return typeof options !== 'undefined' ? original(reference, data, options) : original(reference, data);\n      });\n    };\n  };\n}\n\nfunction executeContextWithSpan(span, callback) {\n  return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n    return instrumentation.safeExecuteInTheMiddle(\n      () => {\n        return callback();\n      },\n      err => {\n        if (err) {\n          span.recordException(err);\n        }\n        span.end();\n      },\n      true,\n    );\n  });\n}\n\nfunction startDBSpan(\n  tracer,\n  spanName,\n  reference,\n) {\n  const span = tracer.startSpan(`${spanName} ${reference.path}`, { kind: api.SpanKind.CLIENT });\n  addAttributes(span, reference);\n  span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, spanName);\n  return span;\n}\n\n/**\n * Gets the server address and port attributes from the Firestore settings.\n * It's best effort to extract the address and port from the settings, especially for IPv6.\n * @param span - The span to set attributes on.\n * @param settings - The Firestore settings containing host information.\n */\nfunction getPortAndAddress(settings)\n\n {\n  let address;\n  let port;\n\n  if (typeof settings.host === 'string') {\n    if (settings.host.startsWith('[')) {\n      // IPv6 addresses can be enclosed in square brackets, e.g., [2001:db8::1]:8080\n      if (settings.host.endsWith(']')) {\n        // IPv6 with square brackets without port\n        address = settings.host.replace(/^\\[|\\]$/g, '');\n      } else if (settings.host.includes(']:')) {\n        // IPv6 with square brackets with port\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(1, lastColonIndex).replace(/^\\[|\\]$/g, '');\n          port = settings.host.slice(lastColonIndex + 1);\n        }\n      }\n    } else {\n      // IPv4 or IPv6 without square brackets\n      // If it's an IPv6 address without square brackets, we assume it does not have a port.\n      if (net.isIPv6(settings.host)) {\n        address = settings.host;\n      }\n      // If it's an IPv4 address, we can extract the port if it exists.\n      else {\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(0, lastColonIndex);\n          port = settings.host.slice(lastColonIndex + 1);\n        } else {\n          address = settings.host;\n        }\n      }\n    }\n  }\n  return {\n    address: address,\n    port: port ? parseInt(port, 10) : undefined,\n  };\n}\n\nfunction addAttributes(\n  span,\n  reference,\n) {\n  const firestoreApp = reference.firestore.app;\n  const firestoreOptions = firestoreApp.options;\n  const json = reference.firestore.toJSON() || {};\n  const settings = json.settings || {};\n\n  const attributes = {\n    [semanticConventions.ATTR_DB_COLLECTION_NAME]: reference.path,\n    [semanticConventions.ATTR_DB_NAMESPACE]: firestoreApp.name,\n    [semanticConventions.ATTR_DB_SYSTEM_NAME]: 'firebase.firestore',\n    'firebase.firestore.type': reference.type,\n    'firebase.firestore.options.projectId': firestoreOptions.projectId,\n    'firebase.firestore.options.appId': firestoreOptions.appId,\n    'firebase.firestore.options.messagingSenderId': firestoreOptions.messagingSenderId,\n    'firebase.firestore.options.storageBucket': firestoreOptions.storageBucket,\n  };\n\n  const { address, port } = getPortAndAddress(settings);\n\n  if (address) {\n    attributes[semanticConventions.ATTR_SERVER_ADDRESS] = address;\n  }\n  if (port) {\n    attributes[semanticConventions.ATTR_SERVER_PORT] = port;\n  }\n\n  span.setAttributes(attributes);\n}\n\nexports.getPortAndAddress = getPortAndAddress;\nexports.patchFirestore = patchFirestore;\n//# sourceMappingURL=firestore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsK0lBQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBLGtKQUFrSjs7QUFFbEo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR2VuZXJpY1Bvb2wnO1xuXG5jb25zdCBpbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbC5HZW5lcmljUG9vbEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIGxldCBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IGluc3RydW1lbnRHZW5lcmljUG9vbCgpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcblxuICAgICAgICAgIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNwYW5KU09OLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgICAgLy8gdHlwbyBpbiBlbWl0dGVkIHNwYW4gZm9yIHZlcnNpb24gPD0gMC4zOC4wIG9mIEBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2xcbiAgICAgICAgICBjb25zdCBpc0dlbmVyaWNQb29sU3BhbiA9XG4gICAgICAgICAgICBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYXF1aXJlJyB8fCBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYWNxdWlyZSc7XG5cbiAgICAgICAgICBpZiAoaXNHZW5lcmljUG9vbFNwYW4pIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZ2VuZXJpY19wb29sJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtnZW5lcmljLXBvb2xdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dlbmVyaWMtcG9vbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGdlbmVyaWNQb29sSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZ2VuZXJpY3Bvb2wvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5nZW5lcmljUG9vbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dlbmVyaWNQb29sSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBnZW5lcmljUG9vbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50R2VuZXJpY1Bvb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmljUG9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationGraphql.GraphQLInstrumentation,\n  (_options) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span, result) {\n        nodeCore.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        // We want to ensure spans are marked as errored if there are errors in the result\n        // We only do that if the span is not already marked with a status\n        const resultWithMaybeError = result ;\n        if (resultWithMaybeError.errors?.length && !core.spanToJSON(span).status) {\n          span.setStatus({ code: api.SpanStatusCode.ERROR });\n        }\n\n        const attributes = core.spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations ).push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!core.spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', core.spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${core.spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          core.getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  nodeCore.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQywrSEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxrR0FBeUI7O0FBRXBEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsNEJBQTRCLEVBQUUsV0FBVztBQUNsRztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7QUFDSDs7QUFFQSx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hhcGkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnSGFwaSc7XG5cbmNvbnN0IGluc3RydW1lbnRIYXBpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hhcGldKGh0dHBzOi8vaGFwaS5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbaGFwaSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9oYXBpLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmhhcGlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdlcnJvcicgaW4gZXZlbnQgJiYgZXZlbnQuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2hhcGknLFxuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAnaGFwaUVycm9yUGx1Z2luJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGhhcGlFcnJvclBsdWdpbiA9IHtcbiAgbmFtZTogJ1NlbnRyeUhhcGlFcnJvclBsdWdpbicsXG4gIHZlcnNpb246IGNvcmUuU0RLX1ZFUlNJT04sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbiAoc2VydmVyQXJnKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyQXJnIDtcblxuICAgIHNlcnZlci5ldmVudHMub24oeyBuYW1lOiAncmVxdWVzdCcsIGNoYW5uZWxzOiBbJ2Vycm9yJ10gfSwgKHJlcXVlc3QsIGV2ZW50KSA9PiB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpICE9PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcmVxdWVzdC5yb3V0ZTtcbiAgICAgICAgaWYgKHJvdXRlLnBhdGgpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke3JvdXRlLm1ldGhvZC50b1VwcGVyQ2FzZSgpfSAke3JvdXRlLnBhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICBjb3JlLmRlYnVnLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBzdGlsbCB0aGUgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFcnJvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICBzZW5kRXJyb3JUb1NlbnRyeShldmVudC5lcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIEFkZCBhIEhhcGkgcGx1Z2luIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gc2VydmVyIFRoZSBIYXBpIHNlcnZlciB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBIYXBpID0gcmVxdWlyZSgnQGhhcGkvaGFwaScpO1xuICpcbiAqIGNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XG4gKiAgIGNvbnN0IHNlcnZlciA9IEhhcGkuc2VydmVyKCk7XG4gKlxuICogICAvLyBhbGwgeW91ciByb3V0ZXMgaGVyZVxuICpcbiAqICAgYXdhaXQgU2VudHJ5LnNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpO1xuICpcbiAqICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpIHtcbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGhhcGlFcnJvclBsdWdpbik7XG5cbiAgLy8gU2FkbHksIG1pZGRsZXdhcmUgc3BhbnMgZG8gbm90IGdvIHRocm91Z2ggYHJlcXVlc3RIb29rYCwgc28gd2UgaGFuZGxlIHRob3NlIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGhhcGlcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ../http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index$1 = __webpack_require__(/*! ./fastify/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst firebase = __webpack_require__(/*! ./firebase/firebase.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index$2 = __webpack_require__(/*! ./hapi/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst index$4 = __webpack_require__(/*! ./openai/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./postgresjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./prisma.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst index$3 = __webpack_require__(/*! ./vercelai/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    index$1.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    prisma.prismaIntegration(),\n    index$2.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n    index$3.vercelAIIntegration(),\n    index$4.openAIIntegration(),\n    postgresjs.postgresJsIntegration(),\n    firebase.firebaseIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    index$1.instrumentFastify,\n    index$1.instrumentFastifyV3,\n    index$2.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index$2.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n    index$3.instrumentVercelAi,\n    index$4.instrumentOpenAi,\n    postgresjs.instrumentPostgresJs,\n    firebase.instrumentFirebase,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsY0FBYyxtQkFBTyxDQUFDLHVHQUFrQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyxvSEFBb0I7QUFDNUMsaUJBQWlCLG1CQUFPLENBQUMsNEhBQXdCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLGdIQUFrQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyw4R0FBaUI7QUFDekMsY0FBYyxtQkFBTyxDQUFDLG9HQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyxnR0FBVTtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLG9HQUFZO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLDBHQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyxvR0FBWTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsc0dBQWE7QUFDcEMsZ0JBQWdCLG1CQUFPLENBQUMsa0hBQW1CO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLDBHQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLDhHQUFpQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsc0dBQWE7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLG9HQUFZO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLHdHQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHNIQUFxQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2h0dHAvaW5kZXguanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCcuL2V4cHJlc3MuanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2Zhc3RpZnkvaW5kZXguanMnKTtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZSgnLi9maXJlYmFzZS9maXJlYmFzZS5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBncmFwaHFsID0gcmVxdWlyZSgnLi9ncmFwaHFsLmpzJyk7XG5jb25zdCBpbmRleCQyID0gcmVxdWlyZSgnLi9oYXBpL2luZGV4LmpzJyk7XG5jb25zdCBrYWZrYSA9IHJlcXVpcmUoJy4va2Fma2EuanMnKTtcbmNvbnN0IGtvYSA9IHJlcXVpcmUoJy4va29hLmpzJyk7XG5jb25zdCBscnVtZW1vaXplciA9IHJlcXVpcmUoJy4vbHJ1bWVtb2l6ZXIuanMnKTtcbmNvbnN0IG1vbmdvID0gcmVxdWlyZSgnLi9tb25nby5qcycpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCcuL21vbmdvb3NlLmpzJyk7XG5jb25zdCBteXNxbCA9IHJlcXVpcmUoJy4vbXlzcWwuanMnKTtcbmNvbnN0IG15c3FsMiA9IHJlcXVpcmUoJy4vbXlzcWwyLmpzJyk7XG5jb25zdCBpbmRleCQ0ID0gcmVxdWlyZSgnLi9vcGVuYWkvaW5kZXguanMnKTtcbmNvbnN0IHBvc3RncmVzID0gcmVxdWlyZSgnLi9wb3N0Z3Jlcy5qcycpO1xuY29uc3QgcG9zdGdyZXNqcyA9IHJlcXVpcmUoJy4vcG9zdGdyZXNqcy5qcycpO1xuY29uc3QgcHJpc21hID0gcmVxdWlyZSgnLi9wcmlzbWEuanMnKTtcbmNvbnN0IHJlZGlzID0gcmVxdWlyZSgnLi9yZWRpcy5qcycpO1xuY29uc3QgdGVkaW91cyA9IHJlcXVpcmUoJy4vdGVkaW91cy5qcycpO1xuY29uc3QgaW5kZXgkMyA9IHJlcXVpcmUoJy4vdmVyY2VsYWkvaW5kZXguanMnKTtcblxuLyoqXG4gKiBXaXRoIE9URUwsIGFsbCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgd2lsbCBiZSBhZGRlZCwgYXMgT1RFTCBvbmx5IGluaXRpYWxpemVzIHRoZW0gd2hlbiB0aGUgcGF0Y2hlZCBwYWNrYWdlIGlzIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG5mdW5jdGlvbiBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSB7XG4gIHJldHVybiBbXG4gICAgZXhwcmVzcy5leHByZXNzSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQxLmZhc3RpZnlJbnRlZ3JhdGlvbigpLFxuICAgIGdyYXBocWwuZ3JhcGhxbEludGVncmF0aW9uKCksXG4gICAgbW9uZ28ubW9uZ29JbnRlZ3JhdGlvbigpLFxuICAgIG1vbmdvb3NlLm1vbmdvb3NlSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbC5teXNxbEludGVncmF0aW9uKCksXG4gICAgbXlzcWwyLm15c3FsMkludGVncmF0aW9uKCksXG4gICAgcmVkaXMucmVkaXNJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzLnBvc3RncmVzSW50ZWdyYXRpb24oKSxcbiAgICBwcmlzbWEucHJpc21hSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQyLmhhcGlJbnRlZ3JhdGlvbigpLFxuICAgIGtvYS5rb2FJbnRlZ3JhdGlvbigpLFxuICAgIGNvbm5lY3QuY29ubmVjdEludGVncmF0aW9uKCksXG4gICAgdGVkaW91cy50ZWRpb3VzSW50ZWdyYXRpb24oKSxcbiAgICBnZW5lcmljUG9vbC5nZW5lcmljUG9vbEludGVncmF0aW9uKCksXG4gICAga2Fma2Eua2Fma2FJbnRlZ3JhdGlvbigpLFxuICAgIGFtcXBsaWIuYW1xcGxpYkludGVncmF0aW9uKCksXG4gICAgbHJ1bWVtb2l6ZXIubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDMudmVyY2VsQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDQub3BlbkFJSW50ZWdyYXRpb24oKSxcbiAgICBwb3N0Z3Jlc2pzLnBvc3RncmVzSnNJbnRlZ3JhdGlvbigpLFxuICAgIGZpcmViYXNlLmZpcmViYXNlSW50ZWdyYXRpb24oKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIG1ldGhvZHMgdG8gaW5zdHJ1bWVudCBPVEVMLCB3aGVuIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpIHtcbiAgcmV0dXJuIFtcbiAgICBpbmRleC5pbnN0cnVtZW50T3RlbEh0dHAsXG4gICAgZXhwcmVzcy5pbnN0cnVtZW50RXhwcmVzcyxcbiAgICBjb25uZWN0Lmluc3RydW1lbnRDb25uZWN0LFxuICAgIGluZGV4JDEuaW5zdHJ1bWVudEZhc3RpZnksXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50RmFzdGlmeVYzLFxuICAgIGluZGV4JDIuaW5zdHJ1bWVudEhhcGksXG4gICAga2Fma2EuaW5zdHJ1bWVudEthZmthLFxuICAgIGtvYS5pbnN0cnVtZW50S29hLFxuICAgIGxydW1lbW9pemVyLmluc3RydW1lbnRMcnVNZW1vaXplcixcbiAgICBtb25nby5pbnN0cnVtZW50TW9uZ28sXG4gICAgbW9uZ29vc2UuaW5zdHJ1bWVudE1vbmdvb3NlLFxuICAgIG15c3FsLmluc3RydW1lbnRNeXNxbCxcbiAgICBteXNxbDIuaW5zdHJ1bWVudE15c3FsMixcbiAgICBwb3N0Z3Jlcy5pbnN0cnVtZW50UG9zdGdyZXMsXG4gICAgaW5kZXgkMi5pbnN0cnVtZW50SGFwaSxcbiAgICBncmFwaHFsLmluc3RydW1lbnRHcmFwaHFsLFxuICAgIHJlZGlzLmluc3RydW1lbnRSZWRpcyxcbiAgICB0ZWRpb3VzLmluc3RydW1lbnRUZWRpb3VzLFxuICAgIGdlbmVyaWNQb29sLmluc3RydW1lbnRHZW5lcmljUG9vbCxcbiAgICBhbXFwbGliLmluc3RydW1lbnRBbXFwbGliLFxuICAgIGluZGV4JDMuaW5zdHJ1bWVudFZlcmNlbEFpLFxuICAgIGluZGV4JDQuaW5zdHJ1bWVudE9wZW5BaSxcbiAgICBwb3N0Z3Jlc2pzLmluc3RydW1lbnRQb3N0Z3Jlc0pzLFxuICAgIGZpcmViYXNlLmluc3RydW1lbnRGaXJlYmFzZSxcbiAgXTtcbn1cblxuZXhwb3J0cy5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMgPSBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQgPSBnZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMscUlBQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkthZmthanMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2FqcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0thZmthJztcblxuY29uc3QgaW5zdHJ1bWVudEthZmthID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS2Fma2Fqcy5LYWZrYUpzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGNvbnN1bWVySG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwuY29uc3VtZXInKTtcbiAgICAgIH0sXG4gICAgICBwcm9kdWNlckhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLnByb2R1Y2VyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2thZmthSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEthZmthKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtrYWZrYWpzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9rYWZrYWpzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtga2Fma2FJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9rYWZrYS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmthZmthSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3Qga2Fma2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2thZmthSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnRLYWZrYTtcbmV4cG9ydHMua2Fma2FJbnRlZ3JhdGlvbiA9IGthZmthSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rYWZrYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentKnex();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { data } = core.spanToJSON(span);\n          // knex.version is always set in the span data\n          // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n          if ('knex.version' in data) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQywrSEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rbmV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LbmV4ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtuZXgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLbmV4JztcblxuY29uc3QgaW5zdHJ1bWVudEtuZXggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uS25leC5LbmV4SW5zdHJ1bWVudGF0aW9uKHsgcmVxdWlyZVBhcmVudFNwYW46IHRydWUgfSksXG4pO1xuXG5jb25zdCBfa25leEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudEtuZXgoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IG5vZGVDb3JlLmluc3RydW1lbnRXaGVuV3JhcHBlZChpbnN0cnVtZW50YXRpb24pO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgLy8ga25leC52ZXJzaW9uIGlzIGFsd2F5cyBzZXQgaW4gdGhlIHNwYW4gZGF0YVxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi8wMzA5Y2FlYWZjNDRhYzljYjEzYTMzNDViNzkwYjAxYjc2ZDA0OTdkL3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1rbmV4L3NyYy9pbnN0cnVtZW50YXRpb24udHMjTDEzOFxuICAgICAgICAgIGlmICgna25leC52ZXJzaW9uJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLmtuZXgnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEtuZXggaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgW0tuZXhdKGh0dHBzOi8va25leGpzLm9yZy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtuZXhJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGtuZXhJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tuZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50S25leDtcbmV4cG9ydHMua25leEludGVncmF0aW9uID0ga25leEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a25leC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationKoa.KoaInstrumentation,\n  (options = {}) => {\n    return {\n      ignoreLayersType: options.ignoreLayersType ,\n      requestHook(span, info) {\n        nodeCore.addOriginToSpan(span, 'auto.http.otel.koa');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // this is one of: middleware, router\n        const type = attributes['koa.type'];\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n        }\n\n        // Also update the name\n        const name = attributes['koa.name'];\n        if (typeof name === 'string') {\n          // Somehow, name is sometimes `''` for middleware spans\n          // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n          span.updateName(name || '< unknown >');\n        }\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    } ;\n  },\n);\n\nconst _koaIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @param {KoaOptions} options Configuration options for the Koa integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n *\n * @example\n * ```javascript\n * // To ignore middleware spans\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [\n *     Sentry.koaIntegration({\n *       ignoreLayersType: ['middleware']\n *     })\n *   ],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  nodeCore.ensureIsWrapped(app.use, 'koa');\n};\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDZIQUFvQztBQUN2RSw0QkFBNEIsbUJBQU8sQ0FBQywrSEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQywrRkFBc0I7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsS0FBSztBQUN2RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsRUFBRSxNQUFNO0FBQ3pFO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Lb2EgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tvYSc7XG5cbmNvbnN0IGluc3RydW1lbnRLb2EgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICBpbnN0cnVtZW50YXRpb25Lb2EuS29hSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlnbm9yZUxheWVyc1R5cGU6IG9wdGlvbnMuaWdub3JlTGF5ZXJzVHlwZSAsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuLCBpbmZvKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5odHRwLm90ZWwua29hJyk7XG5cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuXG4gICAgICAgIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByb3V0ZXJcbiAgICAgICAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2tvYS50eXBlJ107XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCBgJHt0eXBlfS5rb2FgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lXG4gICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydrb2EubmFtZSddO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gU29tZWhvdywgbmFtZSBpcyBzb21ldGltZXMgYCcnYCBmb3IgbWlkZGxld2FyZSBzcGFuc1xuICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9pc3N1ZXMvMjIyMFxuICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShuYW1lIHx8ICc8IHVua25vd24gPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSA9PT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3V0ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGluZm8uY29udGV4dD8ucmVxdWVzdD8ubWV0aG9kPy50b1VwcGVyQ2FzZSgpIHx8ICdHRVQnO1xuICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtyb3V0ZX1gKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9IDtcbiAgfSxcbik7XG5cbmNvbnN0IF9rb2FJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S29hKG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtLb2FdKGh0dHBzOi8va29hanMuY29tLykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBLb2FFcnJvckhhbmRsZXIoYXBwKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIEtvYSBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2tvYSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9rb2EvKS5cbiAqXG4gKiBAcGFyYW0ge0tvYU9wdGlvbnN9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgS29hIGludGVncmF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5rb2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gVG8gaWdub3JlIG1pZGRsZXdhcmUgc3BhbnNcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5LmtvYUludGVncmF0aW9uKHtcbiAqICAgICAgIGlnbm9yZUxheWVyc1R5cGU6IFsnbWlkZGxld2FyZSddXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3Qga29hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9rb2FJbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogQWRkIGFuIEtvYSBlcnJvciBoYW5kbGVyIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBUaGUgZXJyb3IgaGFuZGxlciBtdXN0IGJlIGJlZm9yZSBhbnkgb3RoZXIgbWlkZGxld2FyZSBhbmQgYWZ0ZXIgYWxsIGNvbnRyb2xsZXJzLlxuICpcbiAqIEBwYXJhbSBhcHAgVGhlIEV4cHJlc3MgaW5zdGFuY2VzXG4gKiBAcGFyYW0gb3B0aW9ucyB7RXhwcmVzc0hhbmRsZXJPcHRpb25zfSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBoYW5kbGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICogY29uc3QgS29hID0gcmVxdWlyZShcImtvYVwiKTtcbiAqXG4gKiBjb25zdCBhcHAgPSBuZXcgS29hKCk7XG4gKlxuICogU2VudHJ5LnNldHVwS29hRXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdXIgcm91dGVzLCBldGMuXG4gKlxuICogYXBwLmxpc3RlbigzMDAwKTtcbiAqIGBgYFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3Qgc2V0dXBLb2FFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBuZXh0KCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsK0lBQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9scnVtZW1vaXplci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTHJ1TWVtb2l6ZXInO1xuXG5jb25zdCBpbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplci5McnVNZW1vaXplckluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2xydU1lbW9pemVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudExydU1lbW9pemVyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtscnUtbWVtb2l6ZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2xydS1tZW1vaXplcikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGxydU1lbW9pemVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbHJ1bWVtb2l6ZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5scnVNZW1vaXplckludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGxydU1lbW9pemVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9scnVNZW1vaXplckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50THJ1TWVtb2l6ZXI7XG5leHBvcnRzLmxydU1lbW9pemVySW50ZWdyYXRpb24gPSBscnVNZW1vaXplckludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1bWVtb2l6ZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMscUlBQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb2RiID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nbyc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nbyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvZGIuTW9uZ29EQkluc3RydW1lbnRhdGlvbih7XG4gICAgICBkYlN0YXRlbWVudFNlcmlhbGl6ZXI6IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyLFxuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ28nKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG4vKipcbiAqIFJlcGxhY2VzIHZhbHVlcyBpbiBkb2N1bWVudCB3aXRoICc/JywgaGlkaW5nIFBJSSBhbmQgaGVscGluZyBncm91cGluZy5cbiAqL1xuZnVuY3Rpb24gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIoY29tbWFuZE9iaikge1xuICBjb25zdCByZXN1bHRPYmogPSBfc2NydWJTdGF0ZW1lbnQoY29tbWFuZE9iaik7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHRPYmopO1xufVxuXG5mdW5jdGlvbiBfc2NydWJTdGF0ZW1lbnQodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChlbGVtZW50ID0+IF9zY3J1YlN0YXRlbWVudChlbGVtZW50KSk7XG4gIH1cblxuICBpZiAoaXNDb21tYW5kT2JqKHZhbHVlKSkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7fTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAubWFwKChba2V5LCBlbGVtZW50XSkgPT4gW2tleSwgX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpXSlcbiAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgaWYgKGlzQ29tbWFuZEVudHJ5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgcHJldltjdXJyZW50WzBdXSA9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCBpbml0aWFsKTtcbiAgfVxuXG4gIC8vIEEgdmFsdWUgbGlrZSBzdHJpbmcgb3IgbnVtYmVyLCBwb3NzaWJsZSBjb250YWlucyBQSUksIHNjcnViIGl0XG4gIHJldHVybiAnPyc7XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZE9iaih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhaXNCdWZmZXIodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWx1ZSkge1xuICBsZXQgaXNCdWZmZXIgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIodmFsdWUpO1xuICB9XG4gIHJldHVybiBpc0J1ZmZlcjtcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kRW50cnkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5jb25zdCBfbW9uZ29JbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ28oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW21vbmdvZGJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvZGIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29JbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5fZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplciA9IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyO1xuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50TW9uZ287XG5leHBvcnRzLm1vbmdvSW50ZWdyYXRpb24gPSBtb25nb0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ28uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0NBQWdDLG1CQUFPLENBQUMsdUlBQXlDO0FBQ2pGLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvb3NlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ29vc2UnO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ29vc2UgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb29zZS5Nb25nb29zZUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nb29zZScpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb29zZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nb29zZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29vc2VdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvb3NlKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbW9uZ29vc2VJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9tb25nb29zZS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm1vbmdvb3NlSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBtb25nb29zZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29vc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudE1vbmdvb3NlO1xuZXhwb3J0cy5tb25nb29zZUludGVncmF0aW9uID0gbW9uZ29vc2VJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvb3NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNkJBQTZCLG1CQUFPLENBQUMsaUlBQXNDO0FBQzNFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBLGdJQUFnSTs7QUFFaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwnO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbC5NeVNRTEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfbXlzcWxJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9teXNxbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5teXNxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbXlzcWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnRNeXNxbDtcbmV4cG9ydHMubXlzcWxJbnRlZ3JhdGlvbiA9IG15c3FsSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1teXNxbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDhCQUE4QixtQkFBTyxDQUFDLG1JQUF1QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMkZBQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsMicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsMic7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbDIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbDIuTXlTUUwySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm15c3FsMicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9teXNxbDJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbDJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsMikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsMkludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsMi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbDJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsMkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudE15c3FsMjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsMi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\");\n\nconst instrumentOpenAi = nodeCore.generateInstrumentOnce(\n  core.OPENAI_INTEGRATION_NAME,\n  () => new instrumentation.SentryOpenAiInstrumentation({}),\n);\n\nconst _openAiIntegration = ((options = {}) => {\n  return {\n    name: core.OPENAI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentOpenAi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments OpenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.openAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst openAIIntegration = core.defineIntegration(_openAiIntegration);\n\nexports.instrumentOpenAi = instrumentOpenAi;\nexports.openAIIntegration = openAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsK0hBQXNCOztBQUV0RDtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudE9wZW5BaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGNvcmUuT1BFTkFJX0lOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb24uU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uKHt9KSxcbik7XG5cbmNvbnN0IF9vcGVuQWlJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogY29yZS5PUEVOQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgICBvcHRpb25zLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRPcGVuQWkoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgT3BlbkFJIFNESy5cbiAqXG4gKiBUaGlzIGludGVncmF0aW9uIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBXaGVuIGNvbmZpZ3VyZWQsIHRoaXMgaW50ZWdyYXRpb24gYXV0b21hdGljYWxseSBpbnN0cnVtZW50cyBPcGVuQUkgU0RLIGNsaWVudCBpbnN0YW5jZXNcbiAqIHRvIGNhcHR1cmUgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnMgZm9yIEdlbmVyYXRpdmUgQUkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm9wZW5BSUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBOZXZlciByZWNvcmQgaW5wdXRzL291dHB1dHMgcmVnYXJkbGVzcyBvZiBzZW5kRGVmYXVsdFBpaVxuICogU2VudHJ5LmluaXQoe1xuICogICBzZW5kRGVmYXVsdFBpaTogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lm9wZW5BSUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuY29uc3Qgb3BlbkFJSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9vcGVuQWlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE9wZW5BaSA9IGluc3RydW1lbnRPcGVuQWk7XG5leHBvcnRzLm9wZW5BSUludGVncmF0aW9uID0gb3BlbkFJSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=4.0.0 <6'];\n\n/**\n * Determines telemetry recording settings.\n */\nfunction determineRecordingSettings(\n  integrationOptions,\n  defaultEnabled,\n) {\n  const recordInputs = integrationOptions?.recordInputs ?? defaultEnabled;\n  const recordOutputs = integrationOptions?.recordOutputs ?? defaultEnabled;\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * Sentry OpenAI instrumentation using OpenTelemetry.\n */\nclass SentryOpenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-openai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('openai', supportedVersions, this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the OpenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.OpenAI;\n\n    const WrappedOpenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const scopeClient = core.getCurrentScope().getClient();\n      const integration = scopeClient?.getIntegrationByName(core.OPENAI_INTEGRATION_NAME);\n      const integrationOpts = integration?.options;\n      const defaultPii = Boolean(scopeClient?.getOptions().sendDefaultPii);\n\n      const { recordInputs, recordOutputs } = determineRecordingSettings(integrationOpts, defaultPii);\n\n      return core.instrumentOpenAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedOpenAI, Original);\n    Object.setPrototypeOf(WrappedOpenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedOpenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    try {\n      exports.OpenAI = WrappedOpenAI;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'OpenAI', {\n        value: WrappedOpenAI,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedOpenAI;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedOpenAI,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryOpenAiInstrumentation = SentryOpenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLHdEQUF3RCx5Q0FBeUMsMENBQTBDLG9EQUFvRCxxREFBcUQsaUJBQWlCOztBQUV0USx3QkFBd0IsbUJBQU8sQ0FBQyxxSEFBZ0M7QUFDaEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLDhCQUE4Qjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9vcGVuYWkvaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IFwiL21vbml0b3JpbmdcIjtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49NC4wLjAgPDYnXTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRlbGVtZXRyeSByZWNvcmRpbmcgc2V0dGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVJlY29yZGluZ1NldHRpbmdzKFxuICBpbnRlZ3JhdGlvbk9wdGlvbnMsXG4gIGRlZmF1bHRFbmFibGVkLFxuKSB7XG4gIGNvbnN0IHJlY29yZElucHV0cyA9IGludGVncmF0aW9uT3B0aW9ucz8ucmVjb3JkSW5wdXRzID8/IGRlZmF1bHRFbmFibGVkO1xuICBjb25zdCByZWNvcmRPdXRwdXRzID0gaW50ZWdyYXRpb25PcHRpb25zPy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRFbmFibGVkO1xuICByZXR1cm4geyByZWNvcmRJbnB1dHMsIHJlY29yZE91dHB1dHMgfTtcbn1cblxuLyoqXG4gKiBTZW50cnkgT3BlbkFJIGluc3RydW1lbnRhdGlvbiB1c2luZyBPcGVuVGVsZW1ldHJ5LlxuICovXG5jbGFzcyBTZW50cnlPcGVuQWlJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1vcGVuYWknLCBjb3JlLlNES19WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnN0cnVtZW50YXRpb24gYnkgZGVmaW5pbmcgdGhlIG1vZHVsZXMgdG8gYmUgcGF0Y2hlZC5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ29wZW5haScsIHN1cHBvcnRlZFZlcnNpb25zLCB0aGlzLl9wYXRjaC5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gbW9kdWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcmUgcGF0Y2ggbG9naWMgYXBwbHlpbmcgaW5zdHJ1bWVudGF0aW9uIHRvIHRoZSBPcGVuQUkgY2xpZW50IGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgIF9wYXRjaChleHBvcnRzKSB7XG4gICAgY29uc3QgT3JpZ2luYWwgPSBleHBvcnRzLk9wZW5BSTtcblxuICAgIGNvbnN0IFdyYXBwZWRPcGVuQUkgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QoT3JpZ2luYWwsIGFyZ3MpO1xuICAgICAgY29uc3Qgc2NvcGVDbGllbnQgPSBjb3JlLmdldEN1cnJlbnRTY29wZSgpLmdldENsaWVudCgpO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb24gPSBzY29wZUNsaWVudD8uZ2V0SW50ZWdyYXRpb25CeU5hbWUoY29yZS5PUEVOQUlfSU5URUdSQVRJT05fTkFNRSk7XG4gICAgICBjb25zdCBpbnRlZ3JhdGlvbk9wdHMgPSBpbnRlZ3JhdGlvbj8ub3B0aW9ucztcbiAgICAgIGNvbnN0IGRlZmF1bHRQaWkgPSBCb29sZWFuKHNjb3BlQ2xpZW50Py5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpO1xuXG4gICAgICBjb25zdCB7IHJlY29yZElucHV0cywgcmVjb3JkT3V0cHV0cyB9ID0gZGV0ZXJtaW5lUmVjb3JkaW5nU2V0dGluZ3MoaW50ZWdyYXRpb25PcHRzLCBkZWZhdWx0UGlpKTtcblxuICAgICAgcmV0dXJuIGNvcmUuaW5zdHJ1bWVudE9wZW5BaUNsaWVudChpbnN0YW5jZSAsIHtcbiAgICAgICAgcmVjb3JkSW5wdXRzLFxuICAgICAgICByZWNvcmRPdXRwdXRzLFxuICAgICAgfSk7XG4gICAgfSA7XG5cbiAgICAvLyBQcmVzZXJ2ZSBzdGF0aWMgYW5kIHByb3RvdHlwZSBjaGFpbnNcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZE9wZW5BSSwgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkT3BlbkFJLnByb3RvdHlwZSwgT3JpZ2luYWwucHJvdG90eXBlKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKSkge1xuICAgICAgaWYgKCFbJ2xlbmd0aCcsICduYW1lJywgJ3Byb3RvdHlwZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRPcGVuQUksIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBPcGVuQUkgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICB0cnkge1xuICAgICAgZXhwb3J0cy5PcGVuQUkgPSBXcmFwcGVkT3BlbkFJO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBkaXJlY3QgYXNzaWdubWVudCBmYWlscywgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnT3BlbkFJJywge1xuICAgICAgICB2YWx1ZTogV3JhcHBlZE9wZW5BSSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdyYXAgdGhlIGRlZmF1bHQgZXhwb3J0IGlmIGl0IHBvaW50cyB0byB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBPcGVuQUkgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICBpZiAoZXhwb3J0cy5kZWZhdWx0ID09PSBPcmlnaW5hbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gV3JhcHBlZE9wZW5BSTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZWRPcGVuQUksXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbiA9IFNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMEJBQTBCLG1CQUFPLENBQUMsMkhBQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uUGcgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQb3N0Z3Jlcyc7XG5cbmNvbnN0IGluc3RydW1lbnRQb3N0Z3JlcyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvblBnLlBnSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5wb3N0Z3JlcycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9wb3N0Z3Jlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQb3N0Z3JlcygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcGddKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BnKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcG9zdGdyZXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wb3N0Z3Jlcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnBvc3RncmVzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBwb3N0Z3Jlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcG9zdGdyZXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudFBvc3RncmVzO1xuZXhwb3J0cy5wb3N0Z3Jlc0ludGVncmF0aW9uID0gcG9zdGdyZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvc3RncmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\n// Instrumentation for https://github.com/porsager/postgres\n\nconst INTEGRATION_NAME = 'PostgresJs';\nconst SUPPORTED_VERSIONS = ['>=3.0.0 <4'];\n\nconst instrumentPostgresJs = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (options) =>\n    new PostgresJsInstrumentation({\n      requireParentSpan: options?.requireParentSpan ?? true,\n      requestHook: options?.requestHook,\n    }),\n);\n\n/**\n * Instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n * This instrumentation captures postgresjs queries and their attributes,\n */\nclass PostgresJsInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config) {\n    super('sentry-postgres-js', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation.\n   */\n   init() {\n    const instrumentationModule = new instrumentation.InstrumentationNodeModuleDefinition('postgres', SUPPORTED_VERSIONS);\n\n    ['src', 'cf/src', 'cjs/src'].forEach(path => {\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/connection.js`,\n          ['*'],\n          this._patchConnection.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/query.js`,\n          SUPPORTED_VERSIONS,\n          this._patchQuery.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n    });\n\n    return [instrumentationModule];\n  }\n\n  /**\n   * Determines whether a span should be created based on the current context.\n   * If `requireParentSpan` is set to true in the configuration, a span will\n   * only be created if there is a parent span available.\n   */\n   _shouldCreateSpans() {\n    const config = this.getConfig();\n    const hasParentSpan = api.trace.getSpan(api.context.active()) !== undefined;\n    return hasParentSpan || !config.requireParentSpan;\n  }\n\n  /**\n   * Patches the reject method of the Query class to set the span status and end it\n   */\n   _patchReject(rejectTarget, span) {\n    return new Proxy(rejectTarget, {\n      apply: (\n        rejectTarget,\n        rejectThisArg,\n        rejectArgs\n\n,\n      ) => {\n        span.setStatus({\n          code: core.SPAN_STATUS_ERROR,\n          // This message is the error message from the rejectArgs, when available\n          // e.g \"relation 'User' does not exist\"\n          message: rejectArgs?.[0]?.message || 'unknown_error',\n        });\n\n        const result = Reflect.apply(rejectTarget, rejectThisArg, rejectArgs);\n\n        // This status code is PG error code, e.g. '42P01' for \"relation does not exist\"\n        // https://www.postgresql.org/docs/current/errcodes-appendix.html\n        span.setAttribute(semanticConventions.ATTR_DB_RESPONSE_STATUS_CODE, rejectArgs?.[0]?.code || 'Unknown error');\n        // This is the error type, e.g. 'PostgresError' for a Postgres error\n        span.setAttribute(semanticConventions.ATTR_ERROR_TYPE, rejectArgs?.[0]?.name || 'Unknown error');\n\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the resolve method of the Query class to end the span when the query is resolved.\n   */\n   _patchResolve(resolveTarget, span) {\n    return new Proxy(resolveTarget, {\n      apply: (resolveTarget, resolveThisArg, resolveArgs) => {\n        const result = Reflect.apply(resolveTarget, resolveThisArg, resolveArgs);\n        const sqlCommand = resolveArgs?.[0]?.command;\n\n        if (sqlCommand) {\n          // SQL command is only available when the query is resolved successfully\n          span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, sqlCommand);\n        }\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the Query class to instrument the handle method.\n   */\n   _patchQuery(moduleExports\n\n) {\n    moduleExports.Query.prototype.handle = new Proxy(moduleExports.Query.prototype.handle, {\n      apply: async (\n        handleTarget,\n        handleThisArg\n\n,\n        handleArgs,\n      ) => {\n        if (!this._shouldCreateSpans()) {\n          // If we don't need to create spans, just call the original method\n          return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n        }\n\n        const sanitizedSqlQuery = this._sanitizeSqlQuery(handleThisArg.strings?.[0]);\n\n        return core.startSpanManual(\n          {\n            name: sanitizedSqlQuery || 'postgresjs.query',\n            op: 'db',\n          },\n          (span) => {\n            const scope = core.getCurrentScope();\n            const postgresConnectionContext = scope.getScopeData().contexts['postgresjsConnection']\n\n;\n\n            nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n\n            const { requestHook } = this.getConfig();\n\n            if (requestHook) {\n              instrumentation.safeExecuteInTheMiddle(\n                () => requestHook(span, sanitizedSqlQuery, postgresConnectionContext),\n                error => {\n                  if (error) {\n                    core.debug.error(`Error in requestHook for ${INTEGRATION_NAME} integration:`, error);\n                  }\n                },\n              );\n            }\n\n            // ATTR_DB_NAMESPACE is used to indicate the database name and the schema name\n            // It's only the database name as we don't have the schema information\n            const databaseName = postgresConnectionContext?.ATTR_DB_NAMESPACE || '<unknown database>';\n            const databaseHost = postgresConnectionContext?.ATTR_SERVER_ADDRESS || '<unknown host>';\n            const databasePort = postgresConnectionContext?.ATTR_SERVER_PORT || '<unknown port>';\n\n            span.setAttribute(semanticConventions.ATTR_DB_SYSTEM_NAME, 'postgres');\n            span.setAttribute(semanticConventions.ATTR_DB_NAMESPACE, databaseName);\n            span.setAttribute(semanticConventions.ATTR_SERVER_ADDRESS, databaseHost);\n            span.setAttribute(semanticConventions.ATTR_SERVER_PORT, databasePort);\n            span.setAttribute(semanticConventions.ATTR_DB_QUERY_TEXT, sanitizedSqlQuery);\n\n            handleThisArg.resolve = this._patchResolve(handleThisArg.resolve, span);\n            handleThisArg.reject = this._patchReject(handleThisArg.reject, span);\n\n            try {\n              return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n            } catch (error) {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n              });\n              span.end();\n              throw error; // Re-throw the error to propagate it\n            }\n          },\n        );\n      },\n    });\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the Connection class to set the database, host, and port attributes\n   * when a new connection is created.\n   */\n   _patchConnection(Connection) {\n    return new Proxy(Connection, {\n      apply: (connectionTarget, thisArg, connectionArgs) => {\n        const databaseName = connectionArgs[0]?.database || '<unknown database>';\n        const databaseHost = connectionArgs[0]?.host?.[0] || '<unknown host>';\n        const databasePort = connectionArgs[0]?.port?.[0] || '<unknown port>';\n\n        const scope = core.getCurrentScope();\n        scope.setContext('postgresjsConnection', {\n          ATTR_DB_NAMESPACE: databaseName,\n          ATTR_SERVER_ADDRESS: databaseHost,\n          ATTR_SERVER_PORT: databasePort,\n        });\n\n        return Reflect.apply(connectionTarget, thisArg, connectionArgs);\n      },\n    });\n  }\n\n  /**\n   * Sanitize SQL query as per the OTEL semantic conventions\n   * https://opentelemetry.io/docs/specs/semconv/database/database-spans/#sanitization-of-dbquerytext\n   */\n   _sanitizeSqlQuery(sqlQuery) {\n    if (!sqlQuery) {\n      return 'Unknown SQL Query';\n    }\n\n    return (\n      sqlQuery\n        .replace(/\\s+/g, ' ')\n        .trim() // Remove extra spaces including newlines and trim\n        .substring(0, 1024) // Truncate to 1024 characters\n        .replace(/--.*?(\\r?\\n|$)/g, '') // Single line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Multi-line comments\n        .replace(/;\\s*$/, '') // Remove trailing semicolons\n        .replace(/\\b\\d+\\b/g, '?') // Replace standalone numbers\n        // Collapse whitespace to a single space\n        .replace(/\\s+/g, ' ')\n        // Collapse IN and in clauses\n        // eg. IN (?, ?, ?, ?) to IN (?)\n        .replace(/\\bIN\\b\\s*\\(\\s*\\?(?:\\s*,\\s*\\?)*\\s*\\)/g, 'IN (?)')\n    );\n  }\n}\n\nconst _postgresJsIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgresJs();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresJsIntegration()],\n * });\n * ```\n */\n\nconst postgresJsIntegration = core.defineIntegration(_postgresJsIntegration);\n\nexports.PostgresJsInstrumentation = PostgresJsInstrumentation;\nexports.instrumentPostgresJs = instrumentPostgresJs;\nexports.postgresJsIntegration = postgresJsIntegration;\n//# sourceMappingURL=postgresjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXNqcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3hDLHdCQUF3QixtQkFBTyxDQUFDLHFIQUFnQztBQUNoRSw0QkFBNEIsbUJBQU8sQ0FBQywrSEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxvQkFBb0IsY0FBYzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxrQkFBa0I7QUFDbkY7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUEsaUNBQWlDO0FBQ2pDLDRCQUE0QjtBQUM1Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzanMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuLy8gSW5zdHJ1bWVudGF0aW9uIGZvciBodHRwczovL2dpdGh1Yi5jb20vcG9yc2FnZXIvcG9zdGdyZXNcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQb3N0Z3Jlc0pzJztcbmNvbnN0IFNVUFBPUlRFRF9WRVJTSU9OUyA9IFsnPj0zLjAuMCA8NCddO1xuXG5jb25zdCBpbnN0cnVtZW50UG9zdGdyZXNKcyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIChvcHRpb25zKSA9PlxuICAgIG5ldyBQb3N0Z3Jlc0pzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiBvcHRpb25zPy5yZXF1aXJlUGFyZW50U3BhbiA/PyB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2s6IG9wdGlvbnM/LnJlcXVlc3RIb29rLFxuICAgIH0pLFxuKTtcblxuLyoqXG4gKiBJbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcG9zdGdyZXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3Bvc3RncmVzKSBsaWJyYXJ5LlxuICogVGhpcyBpbnN0cnVtZW50YXRpb24gY2FwdHVyZXMgcG9zdGdyZXNqcyBxdWVyaWVzIGFuZCB0aGVpciBhdHRyaWJ1dGVzLFxuICovXG5jbGFzcyBQb3N0Z3Jlc0pzSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoJ3NlbnRyeS1wb3N0Z3Jlcy1qcycsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGluc3RydW1lbnRhdGlvbi5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbk1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ3Bvc3RncmVzJywgU1VQUE9SVEVEX1ZFUlNJT05TKTtcblxuICAgIFsnc3JjJywgJ2NmL3NyYycsICdjanMvc3JjJ10uZm9yRWFjaChwYXRoID0+IHtcbiAgICAgIGluc3RydW1lbnRhdGlvbk1vZHVsZS5maWxlcy5wdXNoKFxuICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVGaWxlKFxuICAgICAgICAgIGBwb3N0Z3Jlcy8ke3BhdGh9L2Nvbm5lY3Rpb24uanNgLFxuICAgICAgICAgIFsnKiddLFxuICAgICAgICAgIHRoaXMuX3BhdGNoQ29ubmVjdGlvbi5iaW5kKHRoaXMpLFxuICAgICAgICAgIHRoaXMuX3Vud3JhcC5iaW5kKHRoaXMpLFxuICAgICAgICApLFxuICAgICAgKTtcblxuICAgICAgaW5zdHJ1bWVudGF0aW9uTW9kdWxlLmZpbGVzLnB1c2goXG4gICAgICAgIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUoXG4gICAgICAgICAgYHBvc3RncmVzLyR7cGF0aH0vcXVlcnkuanNgLFxuICAgICAgICAgIFNVUFBPUlRFRF9WRVJTSU9OUyxcbiAgICAgICAgICB0aGlzLl9wYXRjaFF1ZXJ5LmJpbmQodGhpcyksXG4gICAgICAgICAgdGhpcy5fdW53cmFwLmJpbmQodGhpcyksXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtpbnN0cnVtZW50YXRpb25Nb2R1bGVdO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBhIHNwYW4gc2hvdWxkIGJlIGNyZWF0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICogSWYgYHJlcXVpcmVQYXJlbnRTcGFuYCBpcyBzZXQgdG8gdHJ1ZSBpbiB0aGUgY29uZmlndXJhdGlvbiwgYSBzcGFuIHdpbGxcbiAgICogb25seSBiZSBjcmVhdGVkIGlmIHRoZXJlIGlzIGEgcGFyZW50IHNwYW4gYXZhaWxhYmxlLlxuICAgKi9cbiAgIF9zaG91bGRDcmVhdGVTcGFucygpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGNvbnN0IGhhc1BhcmVudFNwYW4gPSBhcGkudHJhY2UuZ2V0U3BhbihhcGkuY29udGV4dC5hY3RpdmUoKSkgIT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gaGFzUGFyZW50U3BhbiB8fCAhY29uZmlnLnJlcXVpcmVQYXJlbnRTcGFuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdGNoZXMgdGhlIHJlamVjdCBtZXRob2Qgb2YgdGhlIFF1ZXJ5IGNsYXNzIHRvIHNldCB0aGUgc3BhbiBzdGF0dXMgYW5kIGVuZCBpdFxuICAgKi9cbiAgIF9wYXRjaFJlamVjdChyZWplY3RUYXJnZXQsIHNwYW4pIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KHJlamVjdFRhcmdldCwge1xuICAgICAgYXBwbHk6IChcbiAgICAgICAgcmVqZWN0VGFyZ2V0LFxuICAgICAgICByZWplY3RUaGlzQXJnLFxuICAgICAgICByZWplY3RBcmdzXG5cbixcbiAgICAgICkgPT4ge1xuICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUixcbiAgICAgICAgICAvLyBUaGlzIG1lc3NhZ2UgaXMgdGhlIGVycm9yIG1lc3NhZ2UgZnJvbSB0aGUgcmVqZWN0QXJncywgd2hlbiBhdmFpbGFibGVcbiAgICAgICAgICAvLyBlLmcgXCJyZWxhdGlvbiAnVXNlcicgZG9lcyBub3QgZXhpc3RcIlxuICAgICAgICAgIG1lc3NhZ2U6IHJlamVjdEFyZ3M/LlswXT8ubWVzc2FnZSB8fCAndW5rbm93bl9lcnJvcicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkocmVqZWN0VGFyZ2V0LCByZWplY3RUaGlzQXJnLCByZWplY3RBcmdzKTtcblxuICAgICAgICAvLyBUaGlzIHN0YXR1cyBjb2RlIGlzIFBHIGVycm9yIGNvZGUsIGUuZy4gJzQyUDAxJyBmb3IgXCJyZWxhdGlvbiBkb2VzIG5vdCBleGlzdFwiXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnBvc3RncmVzcWwub3JnL2RvY3MvY3VycmVudC9lcnJjb2Rlcy1hcHBlbmRpeC5odG1sXG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9EQl9SRVNQT05TRV9TVEFUVVNfQ09ERSwgcmVqZWN0QXJncz8uWzBdPy5jb2RlIHx8ICdVbmtub3duIGVycm9yJyk7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGVycm9yIHR5cGUsIGUuZy4gJ1Bvc3RncmVzRXJyb3InIGZvciBhIFBvc3RncmVzIGVycm9yXG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9FUlJPUl9UWVBFLCByZWplY3RBcmdzPy5bMF0/Lm5hbWUgfHwgJ1Vua25vd24gZXJyb3InKTtcblxuICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaGVzIHRoZSByZXNvbHZlIG1ldGhvZCBvZiB0aGUgUXVlcnkgY2xhc3MgdG8gZW5kIHRoZSBzcGFuIHdoZW4gdGhlIHF1ZXJ5IGlzIHJlc29sdmVkLlxuICAgKi9cbiAgIF9wYXRjaFJlc29sdmUocmVzb2x2ZVRhcmdldCwgc3Bhbikge1xuICAgIHJldHVybiBuZXcgUHJveHkocmVzb2x2ZVRhcmdldCwge1xuICAgICAgYXBwbHk6IChyZXNvbHZlVGFyZ2V0LCByZXNvbHZlVGhpc0FyZywgcmVzb2x2ZUFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5hcHBseShyZXNvbHZlVGFyZ2V0LCByZXNvbHZlVGhpc0FyZywgcmVzb2x2ZUFyZ3MpO1xuICAgICAgICBjb25zdCBzcWxDb21tYW5kID0gcmVzb2x2ZUFyZ3M/LlswXT8uY29tbWFuZDtcblxuICAgICAgICBpZiAoc3FsQ29tbWFuZCkge1xuICAgICAgICAgIC8vIFNRTCBjb21tYW5kIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gdGhlIHF1ZXJ5IGlzIHJlc29sdmVkIHN1Y2Nlc3NmdWxseVxuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9EQl9PUEVSQVRJT05fTkFNRSwgc3FsQ29tbWFuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2hlcyB0aGUgUXVlcnkgY2xhc3MgdG8gaW5zdHJ1bWVudCB0aGUgaGFuZGxlIG1ldGhvZC5cbiAgICovXG4gICBfcGF0Y2hRdWVyeShtb2R1bGVFeHBvcnRzXG5cbikge1xuICAgIG1vZHVsZUV4cG9ydHMuUXVlcnkucHJvdG90eXBlLmhhbmRsZSA9IG5ldyBQcm94eShtb2R1bGVFeHBvcnRzLlF1ZXJ5LnByb3RvdHlwZS5oYW5kbGUsIHtcbiAgICAgIGFwcGx5OiBhc3luYyAoXG4gICAgICAgIGhhbmRsZVRhcmdldCxcbiAgICAgICAgaGFuZGxlVGhpc0FyZ1xuXG4sXG4gICAgICAgIGhhbmRsZUFyZ3MsXG4gICAgICApID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9zaG91bGRDcmVhdGVTcGFucygpKSB7XG4gICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgbmVlZCB0byBjcmVhdGUgc3BhbnMsIGp1c3QgY2FsbCB0aGUgb3JpZ2luYWwgbWV0aG9kXG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoaGFuZGxlVGFyZ2V0LCBoYW5kbGVUaGlzQXJnLCBoYW5kbGVBcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNhbml0aXplZFNxbFF1ZXJ5ID0gdGhpcy5fc2FuaXRpemVTcWxRdWVyeShoYW5kbGVUaGlzQXJnLnN0cmluZ3M/LlswXSk7XG5cbiAgICAgICAgcmV0dXJuIGNvcmUuc3RhcnRTcGFuTWFudWFsKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IHNhbml0aXplZFNxbFF1ZXJ5IHx8ICdwb3N0Z3Jlc2pzLnF1ZXJ5JyxcbiAgICAgICAgICAgIG9wOiAnZGInLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKHNwYW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc3RncmVzQ29ubmVjdGlvbkNvbnRleHQgPSBzY29wZS5nZXRTY29wZURhdGEoKS5jb250ZXh0c1sncG9zdGdyZXNqc0Nvbm5lY3Rpb24nXVxuXG47XG5cbiAgICAgICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLnBvc3RncmVzJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgcmVxdWVzdEhvb2sgfSA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0SG9vaykge1xuICAgICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uc2FmZUV4ZWN1dGVJblRoZU1pZGRsZShcbiAgICAgICAgICAgICAgICAoKSA9PiByZXF1ZXN0SG9vayhzcGFuLCBzYW5pdGl6ZWRTcWxRdWVyeSwgcG9zdGdyZXNDb25uZWN0aW9uQ29udGV4dCksXG4gICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuZGVidWcuZXJyb3IoYEVycm9yIGluIHJlcXVlc3RIb29rIGZvciAke0lOVEVHUkFUSU9OX05BTUV9IGludGVncmF0aW9uOmAsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBVFRSX0RCX05BTUVTUEFDRSBpcyB1c2VkIHRvIGluZGljYXRlIHRoZSBkYXRhYmFzZSBuYW1lIGFuZCB0aGUgc2NoZW1hIG5hbWVcbiAgICAgICAgICAgIC8vIEl0J3Mgb25seSB0aGUgZGF0YWJhc2UgbmFtZSBhcyB3ZSBkb24ndCBoYXZlIHRoZSBzY2hlbWEgaW5mb3JtYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGRhdGFiYXNlTmFtZSA9IHBvc3RncmVzQ29ubmVjdGlvbkNvbnRleHQ/LkFUVFJfREJfTkFNRVNQQUNFIHx8ICc8dW5rbm93biBkYXRhYmFzZT4nO1xuICAgICAgICAgICAgY29uc3QgZGF0YWJhc2VIb3N0ID0gcG9zdGdyZXNDb25uZWN0aW9uQ29udGV4dD8uQVRUUl9TRVJWRVJfQUREUkVTUyB8fCAnPHVua25vd24gaG9zdD4nO1xuICAgICAgICAgICAgY29uc3QgZGF0YWJhc2VQb3J0ID0gcG9zdGdyZXNDb25uZWN0aW9uQ29udGV4dD8uQVRUUl9TRVJWRVJfUE9SVCB8fCAnPHVua25vd24gcG9ydD4nO1xuXG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfREJfU1lTVEVNX05BTUUsICdwb3N0Z3JlcycpO1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0RCX05BTUVTUEFDRSwgZGF0YWJhc2VOYW1lKTtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWRVJfQUREUkVTUywgZGF0YWJhc2VIb3N0KTtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWRVJfUE9SVCwgZGF0YWJhc2VQb3J0KTtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9EQl9RVUVSWV9URVhULCBzYW5pdGl6ZWRTcWxRdWVyeSk7XG5cbiAgICAgICAgICAgIGhhbmRsZVRoaXNBcmcucmVzb2x2ZSA9IHRoaXMuX3BhdGNoUmVzb2x2ZShoYW5kbGVUaGlzQXJnLnJlc29sdmUsIHNwYW4pO1xuICAgICAgICAgICAgaGFuZGxlVGhpc0FyZy5yZWplY3QgPSB0aGlzLl9wYXRjaFJlamVjdChoYW5kbGVUaGlzQXJnLnJlamVjdCwgc3Bhbik7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KGhhbmRsZVRhcmdldCwgaGFuZGxlVGhpc0FyZywgaGFuZGxlQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yOyAvLyBSZS10aHJvdyB0aGUgZXJyb3IgdG8gcHJvcGFnYXRlIGl0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW9kdWxlRXhwb3J0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaGVzIHRoZSBDb25uZWN0aW9uIGNsYXNzIHRvIHNldCB0aGUgZGF0YWJhc2UsIGhvc3QsIGFuZCBwb3J0IGF0dHJpYnV0ZXNcbiAgICogd2hlbiBhIG5ldyBjb25uZWN0aW9uIGlzIGNyZWF0ZWQuXG4gICAqL1xuICAgX3BhdGNoQ29ubmVjdGlvbihDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBQcm94eShDb25uZWN0aW9uLCB7XG4gICAgICBhcHBseTogKGNvbm5lY3Rpb25UYXJnZXQsIHRoaXNBcmcsIGNvbm5lY3Rpb25BcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFiYXNlTmFtZSA9IGNvbm5lY3Rpb25BcmdzWzBdPy5kYXRhYmFzZSB8fCAnPHVua25vd24gZGF0YWJhc2U+JztcbiAgICAgICAgY29uc3QgZGF0YWJhc2VIb3N0ID0gY29ubmVjdGlvbkFyZ3NbMF0/Lmhvc3Q/LlswXSB8fCAnPHVua25vd24gaG9zdD4nO1xuICAgICAgICBjb25zdCBkYXRhYmFzZVBvcnQgPSBjb25uZWN0aW9uQXJnc1swXT8ucG9ydD8uWzBdIHx8ICc8dW5rbm93biBwb3J0Pic7XG5cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgICBzY29wZS5zZXRDb250ZXh0KCdwb3N0Z3Jlc2pzQ29ubmVjdGlvbicsIHtcbiAgICAgICAgICBBVFRSX0RCX05BTUVTUEFDRTogZGF0YWJhc2VOYW1lLFxuICAgICAgICAgIEFUVFJfU0VSVkVSX0FERFJFU1M6IGRhdGFiYXNlSG9zdCxcbiAgICAgICAgICBBVFRSX1NFUlZFUl9QT1JUOiBkYXRhYmFzZVBvcnQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KGNvbm5lY3Rpb25UYXJnZXQsIHRoaXNBcmcsIGNvbm5lY3Rpb25BcmdzKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2FuaXRpemUgU1FMIHF1ZXJ5IGFzIHBlciB0aGUgT1RFTCBzZW1hbnRpYyBjb252ZW50aW9uc1xuICAgKiBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L2RhdGFiYXNlL2RhdGFiYXNlLXNwYW5zLyNzYW5pdGl6YXRpb24tb2YtZGJxdWVyeXRleHRcbiAgICovXG4gICBfc2FuaXRpemVTcWxRdWVyeShzcWxRdWVyeSkge1xuICAgIGlmICghc3FsUXVlcnkpIHtcbiAgICAgIHJldHVybiAnVW5rbm93biBTUUwgUXVlcnknO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBzcWxRdWVyeVxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgICAgIC50cmltKCkgLy8gUmVtb3ZlIGV4dHJhIHNwYWNlcyBpbmNsdWRpbmcgbmV3bGluZXMgYW5kIHRyaW1cbiAgICAgICAgLnN1YnN0cmluZygwLCAxMDI0KSAvLyBUcnVuY2F0ZSB0byAxMDI0IGNoYXJhY3RlcnNcbiAgICAgICAgLnJlcGxhY2UoLy0tLio/KFxccj9cXG58JCkvZywgJycpIC8vIFNpbmdsZSBsaW5lIGNvbW1lbnRzXG4gICAgICAgIC5yZXBsYWNlKC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2csICcnKSAvLyBNdWx0aS1saW5lIGNvbW1lbnRzXG4gICAgICAgIC5yZXBsYWNlKC87XFxzKiQvLCAnJykgLy8gUmVtb3ZlIHRyYWlsaW5nIHNlbWljb2xvbnNcbiAgICAgICAgLnJlcGxhY2UoL1xcYlxcZCtcXGIvZywgJz8nKSAvLyBSZXBsYWNlIHN0YW5kYWxvbmUgbnVtYmVyc1xuICAgICAgICAvLyBDb2xsYXBzZSB3aGl0ZXNwYWNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJylcbiAgICAgICAgLy8gQ29sbGFwc2UgSU4gYW5kIGluIGNsYXVzZXNcbiAgICAgICAgLy8gZWcuIElOICg/LCA/LCA/LCA/KSB0byBJTiAoPylcbiAgICAgICAgLnJlcGxhY2UoL1xcYklOXFxiXFxzKlxcKFxccypcXD8oPzpcXHMqLFxccypcXD8pKlxccypcXCkvZywgJ0lOICg/KScpXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBfcG9zdGdyZXNKc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQb3N0Z3Jlc0pzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtwb3N0Z3Jlc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG9zdGdyZXMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Bwb3N0Z3Jlc0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3Bvc3RncmVzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkucG9zdGdyZXNKc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5jb25zdCBwb3N0Z3Jlc0pzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0pzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLlBvc3RncmVzSnNJbnN0cnVtZW50YXRpb24gPSBQb3N0Z3Jlc0pzSW5zdHJ1bWVudGF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXNKcyA9IGluc3RydW1lbnRQb3N0Z3Jlc0pzO1xuZXhwb3J0cy5wb3N0Z3Jlc0pzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0pzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3N0Z3Jlc2pzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(instrument)/./node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nfunction isPrismaV6TracingHelper(helper) {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper() {\n  const prismaInstrumentationObject = (globalThis ).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends instrumentation.PrismaInstrumentation {\n   constructor() {\n    super();\n  }\n\n   enable() {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    // We still won't fully emit all the spans, but this could potentially be implemented in the future.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    let emittedWarning = false;\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      (prismaTracingHelper ).createEngineSpan = () => {\n        core.consoleSandbox(() => {\n          if (!emittedWarning) {\n            emittedWarning = true;\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] The Sentry SDK supports tracing with Prisma version 5 only with limited capabilities. For full tracing capabilities pass `prismaInstrumentation` for version 5 to the Sentry `prismaIntegration`. Read more: https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/',\n            );\n          }\n        });\n      };\n    }\n  }\n}\n\nconst instrumentPrisma = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  options => {\n    // Use a passed instrumentation instance to support older Prisma versions\n    if (options?.prismaInstrumentation) {\n      return options.prismaInstrumentation;\n    }\n\n    return new SentryPrismaInteropInstrumentation();\n  },\n);\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nconst prismaIntegration = core.defineIntegration(\n  ({\n    prismaInstrumentation,\n  }\n\n = {}) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrumentPrisma({ prismaInstrumentation });\n      },\n      setup(client) {\n        // If no tracing helper exists, we skip any work here\n        // this means that prisma is not being used\n        if (!getPrismaTracingHelper()) {\n          return;\n        }\n\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('prisma:')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n          }\n\n          // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n          if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n            span.updateName(spanJSON.data['db.query.text'] );\n          }\n\n          // In Prisma v5.22+, the `db.system` attribute is automatically set\n          // On older versions, this is missing, so we add it here\n          if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n            span.setAttribute('db.system', 'prisma');\n          }\n        });\n      },\n    };\n  },\n);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis = __webpack_require__(/*! @opentelemetry/instrumentation-redis */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = core.spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = core.spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = nodeCore.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedisModule = nodeCore.generateInstrumentOnce('Redis', () => {\n  return new instrumentationRedis.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedisModule();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMscUlBQXdDO0FBQy9FLDZCQUE2QixtQkFBTyxDQUFDLGlJQUFzQztBQUMzRSxhQUFhLG1CQUFPLENBQUMsaUZBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMkZBQW1CO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLHlHQUEyQjs7QUFFdEQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtGQUFrRjtBQUMzRzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLEdBQUc7QUFDSCxJQUFJLHNCQUFzQjtBQUMxQjs7QUFFQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb25SZWRpcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgcmVkaXNDYWNoZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JlZGlzQ2FjaGUuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZWRpcyc7XG5cbmxldCBfcmVkaXNPcHRpb25zID0ge307XG5cbmNvbnN0IGNhY2hlUmVzcG9uc2VIb29rID0gKHNwYW4sIHJlZGlzQ29tbWFuZCwgY21kQXJncywgcmVzcG9uc2UpID0+IHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5yZWRpcycpO1xuXG4gIGNvbnN0IHNhZmVLZXkgPSByZWRpc0NhY2hlLmdldENhY2hlS2V5U2FmZWx5KHJlZGlzQ29tbWFuZCwgY21kQXJncyk7XG4gIGNvbnN0IGNhY2hlT3BlcmF0aW9uID0gcmVkaXNDYWNoZS5nZXRDYWNoZU9wZXJhdGlvbihyZWRpc0NvbW1hbmQpO1xuXG4gIGlmIChcbiAgICAhc2FmZUtleSB8fFxuICAgICFjYWNoZU9wZXJhdGlvbiB8fFxuICAgICFfcmVkaXNPcHRpb25zLmNhY2hlUHJlZml4ZXMgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhWyduZXQucGVlci5uYW1lJ107XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhWyduZXQucGVlci5wb3J0J107XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZShjb3JlLnRydW5jYXRlKHNwYW5EZXNjcmlwdGlvbiwgMTAyNCkpO1xufTtcblxuY29uc3QgaW5zdHJ1bWVudElPUmVkaXMgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdJT1JlZGlzJywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbklvcmVkaXMuSU9SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudFJlZGlzTW9kdWxlID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnUmVkaXMnLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uUmVkaXMuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpc01vZHVsZSgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = core.spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyxxSUFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzSUFBc0k7O0FBRXRJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uVGVkaW91cyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IFRFRElVU19JTlNUUlVNRU5URURfTUVUSE9EUyA9IG5ldyBTZXQoW1xuICAnY2FsbFByb2NlZHVyZScsXG4gICdleGVjU3FsJyxcbiAgJ2V4ZWNTcWxCYXRjaCcsXG4gICdleGVjQnVsa0xvYWQnLFxuICAncHJlcGFyZScsXG4gICdleGVjdXRlJyxcbl0pO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1RlZGlvdXMnO1xuXG5jb25zdCBpbnN0cnVtZW50VGVkaW91cyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvblRlZGlvdXMuVGVkaW91c0luc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfdGVkaW91c0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudFRlZGlvdXMoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IG5vZGVDb3JlLmluc3RydW1lbnRXaGVuV3JhcHBlZChpbnN0cnVtZW50YXRpb24pO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAgIC8vIFRlZGl1cyBpbnRlZ3JhdGlvbiBhbHdheXMgc2V0IGEgc3BhbiBuYW1lIGFuZCBgZGIuc3lzdGVtYCBhdHRyaWJ1dGUgdG8gYG1zc3FsYC5cbiAgICAgICAgICBpZiAoIWRlc2NyaXB0aW9uIHx8IGRhdGFbJ2RiLnN5c3RlbSddICE9PSAnbXNzcWwnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gZGVzY3JpcHRpb24uc3BsaXQoJyAnKVswXSB8fCAnJztcbiAgICAgICAgICBpZiAoVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTLmhhcyhvcGVyYXRpb24pKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnRlZGlvdXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3RlZGlvdXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RlZGlvdXMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2B0ZWRpb3VzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvdGVkaW91cy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnRlZGlvdXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHRlZGlvdXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3RlZGlvdXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50VGVkaW91cztcbmV4cG9ydHMudGVkaW91c0ludGVncmF0aW9uID0gdGVkaW91c0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVkaW91cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1ZlcmNlbEFJJztcblxuZXhwb3J0cy5JTlRFR1JBVElPTl9OQU1FID0gSU5URUdSQVRJT05fTkFNRTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\nconst instrumentVercelAi = nodeCore.generateInstrumentOnce(constants.INTEGRATION_NAME, () => new instrumentation.SentryVercelAiInstrumentation({}));\n\n/**\n * Determines if the integration should be forced based on environment and package availability.\n * Returns true if the 'ai' package is available.\n */\nfunction shouldForceIntegration(client) {\n  const modules = client.getIntegrationByName('Modules');\n  return !!modules?.getModules?.()?.ai;\n}\n\nconst _vercelAIIntegration = ((options = {}) => {\n  let instrumentation;\n\n  return {\n    name: constants.INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    afterAllSetup(client) {\n      // Auto-detect if we should force the integration when running with 'ai' package available\n      // Note that this can only be detected if the 'Modules' integration is available, and running in CJS mode\n      const shouldForce = options.force ?? shouldForceIntegration(client);\n\n      if (shouldForce) {\n        core.addVercelAiProcessors(client);\n      } else {\n        instrumentation?.callWhenPatched(() => core.addVercelAiProcessors(client));\n      }\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n * This integration is not enabled by default, you need to manually add it.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * This integration adds tracing support to all `ai` function calls.\n * You need to opt-in to collecting spans for a specific call,\n * you can do so by setting `experimental_telemetry.isEnabled` to `true` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: true },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\n\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJGQUFtQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyxxSEFBZ0I7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsaUlBQXNCOztBQUV0RCxpSkFBaUo7O0FBRWpKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBEQUEwRDtBQUN4RixJQUFJO0FBQ0o7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IGluc3RydW1lbnRWZXJjZWxBaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoY29uc3RhbnRzLklOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb24uU2VudHJ5VmVyY2VsQWlJbnN0cnVtZW50YXRpb24oe30pKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnRlZ3JhdGlvbiBzaG91bGQgYmUgZm9yY2VkIGJhc2VkIG9uIGVudmlyb25tZW50IGFuZCBwYWNrYWdlIGF2YWlsYWJpbGl0eS5cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgJ2FpJyBwYWNrYWdlIGlzIGF2YWlsYWJsZS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkRm9yY2VJbnRlZ3JhdGlvbihjbGllbnQpIHtcbiAgY29uc3QgbW9kdWxlcyA9IGNsaWVudC5nZXRJbnRlZ3JhdGlvbkJ5TmFtZSgnTW9kdWxlcycpO1xuICByZXR1cm4gISFtb2R1bGVzPy5nZXRNb2R1bGVzPy4oKT8uYWk7XG59XG5cbmNvbnN0IF92ZXJjZWxBSUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNvbnN0YW50cy5JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudFZlcmNlbEFpKCk7XG4gICAgfSxcbiAgICBhZnRlckFsbFNldHVwKGNsaWVudCkge1xuICAgICAgLy8gQXV0by1kZXRlY3QgaWYgd2Ugc2hvdWxkIGZvcmNlIHRoZSBpbnRlZ3JhdGlvbiB3aGVuIHJ1bm5pbmcgd2l0aCAnYWknIHBhY2thZ2UgYXZhaWxhYmxlXG4gICAgICAvLyBOb3RlIHRoYXQgdGhpcyBjYW4gb25seSBiZSBkZXRlY3RlZCBpZiB0aGUgJ01vZHVsZXMnIGludGVncmF0aW9uIGlzIGF2YWlsYWJsZSwgYW5kIHJ1bm5pbmcgaW4gQ0pTIG1vZGVcbiAgICAgIGNvbnN0IHNob3VsZEZvcmNlID0gb3B0aW9ucy5mb3JjZSA/PyBzaG91bGRGb3JjZUludGVncmF0aW9uKGNsaWVudCk7XG5cbiAgICAgIGlmIChzaG91bGRGb3JjZSkge1xuICAgICAgICBjb3JlLmFkZFZlcmNlbEFpUHJvY2Vzc29ycyhjbGllbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uPy5jYWxsV2hlblBhdGNoZWQoKCkgPT4gY29yZS5hZGRWZXJjZWxBaVByb2Nlc3NvcnMoY2xpZW50KSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFthaV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWkpIGxpYnJhcnkuXG4gKiBUaGlzIGludGVncmF0aW9uIGlzIG5vdCBlbmFibGVkIGJ5IGRlZmF1bHQsIHlvdSBuZWVkIHRvIG1hbnVhbGx5IGFkZCBpdC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGFpYCBkb2N1bWVudGF0aW9uXShodHRwczovL3Nkay52ZXJjZWwuYWkvZG9jcy9haS1zZGstY29yZS90ZWxlbWV0cnkpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnZlcmNlbEFJSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gYWRkcyB0cmFjaW5nIHN1cHBvcnQgdG8gYWxsIGBhaWAgZnVuY3Rpb24gY2FsbHMuXG4gKiBZb3UgbmVlZCB0byBvcHQtaW4gdG8gY29sbGVjdGluZyBzcGFucyBmb3IgYSBzcGVjaWZpYyBjYWxsLFxuICogeW91IGNhbiBkbyBzbyBieSBzZXR0aW5nIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LmlzRW5hYmxlZGAgdG8gYHRydWVgIGluIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZVRleHQoe1xuICogICBtb2RlbDogb3BlbmFpKCdncHQtNC10dXJibycpLFxuICogICBleHBlcmltZW50YWxfdGVsZW1ldHJ5OiB7IGlzRW5hYmxlZDogdHJ1ZSB9LFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBjb2xsZWN0IGlucHV0cyBhbmQgb3V0cHV0cyBmb3IgYSBzcGVjaWZpYyBjYWxsLCB5b3UgbXVzdCBzcGVjaWZpY2FsbHkgb3B0LWluIHRvIGVhY2hcbiAqIGZ1bmN0aW9uIGNhbGwgYnkgc2V0dGluZyBgZXhwZXJpbWVudGFsX3RlbGVtZXRyeS5yZWNvcmRJbnB1dHNgIGFuZCBgZXhwZXJpbWVudGFsX3RlbGVtZXRyeS5yZWNvcmRPdXRwdXRzYFxuICogdG8gYHRydWVgLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlVGV4dCh7XG4gKiAgbW9kZWw6IG9wZW5haSgnZ3B0LTQtdHVyYm8nKSxcbiAqICBleHBlcmltZW50YWxfdGVsZW1ldHJ5OiB7IGlzRW5hYmxlZDogdHJ1ZSwgcmVjb3JkSW5wdXRzOiB0cnVlLCByZWNvcmRPdXRwdXRzOiB0cnVlIH0sXG4gKiB9KTtcbiAqL1xuY29uc3QgdmVyY2VsQUlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3ZlcmNlbEFJSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRWZXJjZWxBaSA9IGluc3RydW1lbnRWZXJjZWxBaTtcbmV4cG9ydHMudmVyY2VsQUlJbnRlZ3JhdGlvbiA9IHZlcmNlbEFJSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] ;\n\n/**\n * Determines whether to record inputs and outputs for Vercel AI telemetry based on the configuration hierarchy.\n *\n * The order of precedence is:\n * 1. The vercel ai integration options\n * 2. The experimental_telemetry options in the vercel ai method calls\n * 3. When telemetry is explicitly enabled (isEnabled: true), default to recording\n * 4. Otherwise, use the sendDefaultPii option from client options\n */\nfunction determineRecordingSettings(\n  integrationRecordingOptions,\n  methodTelemetryOptions,\n  telemetryExplicitlyEnabled,\n  defaultRecordingEnabled,\n) {\n  const recordInputs =\n    integrationRecordingOptions?.recordInputs !== undefined\n      ? integrationRecordingOptions.recordInputs\n      : methodTelemetryOptions.recordInputs !== undefined\n        ? methodTelemetryOptions.recordInputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  const recordOutputs =\n    integrationRecordingOptions?.recordOutputs !== undefined\n      ? integrationRecordingOptions.recordOutputs\n      : methodTelemetryOptions.recordOutputs !== undefined\n        ? methodTelemetryOptions.recordOutputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n   __init() {this._isPatched = false;}\n   __init2() {this._callbacks = [];}\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);SentryVercelAiInstrumentation.prototype.__init.call(this);SentryVercelAiInstrumentation.prototype.__init2.call(this);  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <5'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n   callWhenPatched(callback) {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n   _patch(moduleExports) {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    function generatePatch(originalMethod) {\n      return (...args) => {\n        const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n        const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n        const client = core.getCurrentScope().getClient();\n        const integration = client?.getIntegrationByName(constants.INTEGRATION_NAME);\n        const integrationOptions = integration?.options;\n        const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n        const { recordInputs, recordOutputs } = determineRecordingSettings(\n          integrationOptions,\n          existingExperimentalTelemetry,\n          isEnabled,\n          shouldRecordInputsAndOutputs,\n        );\n\n        args[0].experimental_telemetry = {\n          ...existingExperimentalTelemetry,\n          isEnabled: isEnabled !== undefined ? isEnabled : true,\n          recordInputs,\n          recordOutputs,\n        };\n\n        return core.handleCallbackErrors(\n          () => {\n            // @ts-expect-error we know that the method exists\n            return originalMethod.apply(this, args);\n          },\n          error => {\n            // This error bubbles up to unhandledrejection handler (if not handled before),\n            // where we do not know the active span anymore\n            // So to circumvent this, we set the active span on the error object\n            // which is picked up by the unhandledrejection handler\n            if (error && typeof error === 'object') {\n              core.addNonEnumerableProperty(error, '_sentry_active_span', core.getActiveSpan());\n            }\n          },\n        );\n      };\n    }\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} );\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;\nexports.determineRecordingSettings = determineRecordingSettings;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/node-fetch/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  const nodeCoreIntegrations = nodeCore.getDefaultIntegrations();\n\n  // Filter out the node-core HTTP and NodeFetch integrations and replace them with Node SDK's composite versions\n  return nodeCoreIntegrations\n    .filter(integration => integration.name !== 'Http' && integration.name !== 'NodeFetch')\n    .concat(index$1.httpIntegration(), index$2.nativeNodeFetchIntegration());\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(core.hasSpansEnabled(options) ? index.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Internal initialization function.\n */\nfunction _init(\n  options = {},\n  getDefaultIntegrationsImpl,\n) {\n  core.applySdkMetadata(options, 'node');\n\n  const client = nodeCore.init({\n    ...options,\n    // Only use Node SDK defaults if none provided\n    defaultIntegrations: options.defaultIntegrations ?? getDefaultIntegrationsImpl(options),\n  });\n\n  // Add Node SDK specific OpenTelemetry setup\n  if (client && !options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    nodeCore.validateOpenTelemetrySetup();\n  }\n\n  return client;\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBbUI7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsb0hBQStCO0FBQ3ZELGdCQUFnQixtQkFBTyxDQUFDLGdJQUFxQztBQUM3RCxjQUFjLG1CQUFPLENBQUMsMEhBQWtDO0FBQ3hELGlCQUFpQixtQkFBTyxDQUFDLHlGQUFlOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsZ0RBQWdEO0FBQ2hELFlBQVk7QUFDWixzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9odHRwL2luZGV4LmpzJyk7XG5jb25zdCBpbmRleCQyID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL25vZGUtZmV0Y2gvaW5kZXguanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcbmNvbnN0IGluaXRPdGVsID0gcmVxdWlyZSgnLi9pbml0T3RlbC5qcycpO1xuXG4vKipcbiAqIEdldCBkZWZhdWx0IGludGVncmF0aW9ucywgZXhjbHVkaW5nIHBlcmZvcm1hbmNlLlxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlKCkge1xuICBjb25zdCBub2RlQ29yZUludGVncmF0aW9ucyA9IG5vZGVDb3JlLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMoKTtcblxuICAvLyBGaWx0ZXIgb3V0IHRoZSBub2RlLWNvcmUgSFRUUCBhbmQgTm9kZUZldGNoIGludGVncmF0aW9ucyBhbmQgcmVwbGFjZSB0aGVtIHdpdGggTm9kZSBTREsncyBjb21wb3NpdGUgdmVyc2lvbnNcbiAgcmV0dXJuIG5vZGVDb3JlSW50ZWdyYXRpb25zXG4gICAgLmZpbHRlcihpbnRlZ3JhdGlvbiA9PiBpbnRlZ3JhdGlvbi5uYW1lICE9PSAnSHR0cCcgJiYgaW50ZWdyYXRpb24ubmFtZSAhPT0gJ05vZGVGZXRjaCcpXG4gICAgLmNvbmNhdChpbmRleCQxLmh0dHBJbnRlZ3JhdGlvbigpLCBpbmRleCQyLm5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uKCkpO1xufVxuXG4vKiogR2V0IHRoZSBkZWZhdWx0IGludGVncmF0aW9ucyBmb3IgdGhlIE5vZGUgU0RLLiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEludGVncmF0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBbXG4gICAgLi4uZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZSgpLFxuICAgIC8vIFdlIG9ubHkgYWRkIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyBpZiB0cmFjaW5nIGlzIGVuYWJsZWRcbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdHJhY2luZyBlbmFibGVkLCBlLmcuIGBleHByZXNzSW50ZWdyYXRpb24oKWAgd2lsbCBub3QgYmUgYWRkZWRcbiAgICAvLyBUaGlzIG1lYW5zIHRoYXQgZ2VuZXJhbGx5IHJlcXVlc3QgaXNvbGF0aW9uIHdpbGwgd29yayAoYmVjYXVzZSB0aGF0IGlzIGRvbmUgYnkgaHR0cEludGVncmF0aW9uKVxuICAgIC8vIEJ1dCBgdHJhbnNhY3Rpb25OYW1lYCB3aWxsIG5vdCBiZSBzZXQgYXV0b21hdGljYWxseVxuICAgIC4uLihjb3JlLmhhc1NwYW5zRW5hYmxlZChvcHRpb25zKSA/IGluZGV4LmdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIDogW10pLFxuICBdO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLlxuICovXG5mdW5jdGlvbiBpbml0KG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gX2luaXQob3B0aW9ucywgZ2V0RGVmYXVsdEludGVncmF0aW9ucyk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIF9pbml0KFxuICBvcHRpb25zID0ge30sXG4gIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsLFxuKSB7XG4gIGNvcmUuYXBwbHlTZGtNZXRhZGF0YShvcHRpb25zLCAnbm9kZScpO1xuXG4gIGNvbnN0IGNsaWVudCA9IG5vZGVDb3JlLmluaXQoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgLy8gT25seSB1c2UgTm9kZSBTREsgZGVmYXVsdHMgaWYgbm9uZSBwcm92aWRlZFxuICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnM6IG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA/PyBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbChvcHRpb25zKSxcbiAgfSk7XG5cbiAgLy8gQWRkIE5vZGUgU0RLIHNwZWNpZmljIE9wZW5UZWxlbWV0cnkgc2V0dXBcbiAgaWYgKGNsaWVudCAmJiAhb3B0aW9ucy5za2lwT3BlblRlbGVtZXRyeVNldHVwKSB7XG4gICAgaW5pdE90ZWwuaW5pdE9wZW5UZWxlbWV0cnkoY2xpZW50LCB7XG4gICAgICBzcGFuUHJvY2Vzc29yczogb3B0aW9ucy5vcGVuVGVsZW1ldHJ5U3BhblByb2Nlc3NvcnMsXG4gICAgfSk7XG4gICAgbm9kZUNvcmUudmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXAoKTtcbiAgfVxuXG4gIHJldHVybiBjbGllbnQ7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBTZW50cnkgZm9yIE5vZGUsIHdpdGhvdXQgYW55IGludGVncmF0aW9ucyBhZGRlZCBieSBkZWZhdWx0LlxuICovXG5mdW5jdGlvbiBpbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBfaW5pdChvcHRpb25zLCAoKSA9PiBbXSk7XG59XG5cbmV4cG9ydHMuZ2V0RGVmYXVsdEludGVncmF0aW9ucyA9IGdldERlZmF1bHRJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UgPSBnZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zID0gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/./node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/./node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"import-in-the-middle\");\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    nodeCore.setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader() {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 21 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered) {\n      try {\n        const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)), {\n          data: { addHookMessagePort, include: [] },\n          transferList: [addHookMessagePort],\n        });\n      } catch (error) {\n        core.debug.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry] You are using Node.js v${process.versions.node} in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or upgrade your Node.js version.`,\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.debug.enable();\n  }\n\n  if (!nodeCore.isCjs()) {\n    maybeInitializeEsmLoader();\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.debug.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: resources.defaultResource().merge(\n      resources.resourceFromAttributes({\n        [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n        [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n      }),\n    ),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new opentelemetry.SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  api.trace.setGlobalTracerProvider(provider);\n  api.propagation.setGlobalPropagator(new opentelemetry.SentryPropagator());\n  api.context.setGlobalContextManager(new nodeCore.SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nfunction flatten(input) {\n  const result = [];\n\n  const flattenHelper = (input) => {\n    input.forEach((el) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el );\n      } else {\n        result.push(el );\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9yZWRpc0NhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBTSU5HTEVfQVJHX0NPTU1BTkRTID0gWydnZXQnLCAnc2V0JywgJ3NldGV4J107XG5cbmNvbnN0IEdFVF9DT01NQU5EUyA9IFsnZ2V0JywgJ21nZXQnXTtcbmNvbnN0IFNFVF9DT01NQU5EUyA9IFsnc2V0JywgJ3NldGV4J107XG4vLyB0b2RvOiBkZWwsIGV4cGlyZVxuXG4vKiogQ2hlY2tzIGlmIGEgZ2l2ZW4gY29tbWFuZCBpcyBpbiB0aGUgbGlzdCBvZiByZWRpcyBjb21tYW5kcy5cbiAqICBVc2VmdWwgYmVjYXVzZSBjb21tYW5kcyBjYW4gY29tZSBpbiBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlIChkZXBlbmRpbmcgb24gdGhlIGxpYnJhcnkpLiAqL1xuZnVuY3Rpb24gaXNJbkNvbW1hbmRzKHJlZGlzQ29tbWFuZHMsIGNvbW1hbmQpIHtcbiAgcmV0dXJuIHJlZGlzQ29tbWFuZHMuaW5jbHVkZXMoY29tbWFuZC50b0xvd2VyQ2FzZSgpKTtcbn1cblxuLyoqIERldGVybWluZSBjYWNoZSBvcGVyYXRpb24gYmFzZWQgb24gcmVkaXMgc3RhdGVtZW50ICovXG5mdW5jdGlvbiBnZXRDYWNoZU9wZXJhdGlvbihcbiAgY29tbWFuZCxcbikge1xuICBpZiAoaXNJbkNvbW1hbmRzKEdFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLmdldCc7XG4gIH0gZWxzZSBpZiAoaXNJbkNvbW1hbmRzKFNFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLnB1dCc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZXlIYXNQcmVmaXgoa2V5LCBwcmVmaXhlcykge1xuICByZXR1cm4gcHJlZml4ZXMuc29tZShwcmVmaXggPT4ga2V5LnN0YXJ0c1dpdGgocHJlZml4KSk7XG59XG5cbi8qKiBTYWZlbHkgY29udmVydHMgYSByZWRpcyBrZXkgdG8gYSBzdHJpbmcgKGNvbW1hLXNlcGFyYXRlZCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cykgKi9cbmZ1bmN0aW9uIGdldENhY2hlS2V5U2FmZWx5KHJlZGlzQ29tbWFuZCwgY21kQXJncykge1xuICB0cnkge1xuICAgIGlmIChjbWRBcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHByb2Nlc3NBcmcgPSAoYXJnKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgQnVmZmVyLmlzQnVmZmVyKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIFthcmcudG9TdHJpbmcoKV07XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICByZXR1cm4gZmxhdHRlbihhcmcubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJzx1bmtub3duPiddO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEFyZyA9IGNtZEFyZ3NbMF07XG4gICAgaWYgKGlzSW5Db21tYW5kcyhTSU5HTEVfQVJHX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGZpcnN0QXJnICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQXJnKGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmxhdHRlbihjbWRBcmdzLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqIERldGVybWluZXMgd2hldGhlciBhIHJlZGlzIG9wZXJhdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBcImNhY2hlIG9wZXJhdGlvblwiIGJ5IGNoZWNraW5nIGlmIGEga2V5IGlzIHByZWZpeGVkLlxuICogIFdlIG9ubHkgc3VwcG9ydCBjZXJ0YWluIGNvbW1hbmRzIChzdWNoIGFzICdzZXQnLCAnZ2V0JywgJ21nZXQnKS4gKi9cbmZ1bmN0aW9uIHNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBrZXlzLCBwcmVmaXhlcykge1xuICBpZiAoIWdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqIENhbGN1bGF0ZXMgc2l6ZSBiYXNlZCBvbiB0aGUgY2FjaGUgcmVzcG9uc2UgdmFsdWUgKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpIHtcbiAgY29uc3QgZ2V0U2l6ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpLmxlbmd0aDtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKVxuICAgID8gcmVzcG9uc2UucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGdldFNpemUoY3Vycik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyAoYWNjICE9PSB1bmRlZmluZWQgPyBhY2MgKyBzaXplIDogc2l6ZSkgOiBhY2M7XG4gICAgICB9LCAwKVxuICAgIDogZ2V0U2l6ZShyZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oaW5wdXQpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgY29uc3QgZmxhdHRlbkhlbHBlciA9IChpbnB1dCkgPT4ge1xuICAgIGlucHV0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgICAgZmxhdHRlbkhlbHBlcihlbCApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnB1c2goZWwgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmbGF0dGVuSGVscGVyKGlucHV0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/brace-expansion/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/brace-expansion/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var balanced = __webpack_require__(/*! balanced-match */ \"(instrument)/./node_modules/balanced-match/index.js\");\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,(?!,).*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/brace-expansion/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/assert-valid-pattern.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/assert-valid-pattern.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertValidPattern = void 0;\nconst MAX_PATTERN_LENGTH = 1024 * 64;\nconst assertValidPattern = (pattern) => {\n    if (typeof pattern !== 'string') {\n        throw new TypeError('invalid pattern');\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError('pattern is too long');\n    }\n};\nexports.assertValidPattern = assertValidPattern;\n//# sourceMappingURL=assert-valid-pattern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvYXNzZXJ0LXZhbGlkLXBhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvYXNzZXJ0LXZhbGlkLXBhdHRlcm4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydFZhbGlkUGF0dGVybiA9IHZvaWQgMDtcbmNvbnN0IE1BWF9QQVRURVJOX0xFTkdUSCA9IDEwMjQgKiA2NDtcbmNvbnN0IGFzc2VydFZhbGlkUGF0dGVybiA9IChwYXR0ZXJuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhdHRlcm4nKTtcbiAgICB9XG4gICAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gTUFYX1BBVFRFUk5fTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdHRlcm4gaXMgdG9vIGxvbmcnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRWYWxpZFBhdHRlcm4gPSBhc3NlcnRWYWxpZFBhdHRlcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQtdmFsaWQtcGF0dGVybi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/assert-valid-pattern.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/ast.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/ast.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// parse a single path portion\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AST = void 0;\nconst brace_expressions_js_1 = __webpack_require__(/*! ./brace-expressions.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/brace-expressions.js\");\nconst unescape_js_1 = __webpack_require__(/*! ./unescape.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js\");\nconst types = new Set(['!', '?', '+', '*', '@']);\nconst isExtglobType = (c) => types.has(c);\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))';\nconst startNoDot = '(?!\\\\.)';\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.']);\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.']);\nconst reSpecials = new Set('().*{}+?[]^$\\\\!');\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// any single thing other than /\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?';\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\nclass AST {\n    type;\n    #root;\n    #hasMagic;\n    #uflag = false;\n    #parts = [];\n    #parent;\n    #parentIndex;\n    #negs;\n    #filledNegs = false;\n    #options;\n    #toString;\n    // set to true if it's an extglob with no children\n    // (which really means one child of '')\n    #emptyExt = false;\n    constructor(type, parent, options = {}) {\n        this.type = type;\n        // extglobs are inherently magical\n        if (type)\n            this.#hasMagic = true;\n        this.#parent = parent;\n        this.#root = this.#parent ? this.#parent.#root : this;\n        this.#options = this.#root === this ? options : this.#root.#options;\n        this.#negs = this.#root === this ? [] : this.#root.#negs;\n        if (type === '!' && !this.#root.#filledNegs)\n            this.#negs.push(this);\n        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;\n    }\n    get hasMagic() {\n        /* c8 ignore start */\n        if (this.#hasMagic !== undefined)\n            return this.#hasMagic;\n        /* c8 ignore stop */\n        for (const p of this.#parts) {\n            if (typeof p === 'string')\n                continue;\n            if (p.type || p.hasMagic)\n                return (this.#hasMagic = true);\n        }\n        // note: will be undefined until we generate the regexp src and find out\n        return this.#hasMagic;\n    }\n    // reconstructs the pattern\n    toString() {\n        if (this.#toString !== undefined)\n            return this.#toString;\n        if (!this.type) {\n            return (this.#toString = this.#parts.map(p => String(p)).join(''));\n        }\n        else {\n            return (this.#toString =\n                this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')');\n        }\n    }\n    #fillNegs() {\n        /* c8 ignore start */\n        if (this !== this.#root)\n            throw new Error('should only call on root');\n        if (this.#filledNegs)\n            return this;\n        /* c8 ignore stop */\n        // call toString() once to fill this out\n        this.toString();\n        this.#filledNegs = true;\n        let n;\n        while ((n = this.#negs.pop())) {\n            if (n.type !== '!')\n                continue;\n            // walk up the tree, appending everthing that comes AFTER parentIndex\n            let p = n;\n            let pp = p.#parent;\n            while (pp) {\n                for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {\n                    for (const part of n.#parts) {\n                        /* c8 ignore start */\n                        if (typeof part === 'string') {\n                            throw new Error('string part in extglob AST??');\n                        }\n                        /* c8 ignore stop */\n                        part.copyIn(pp.#parts[i]);\n                    }\n                }\n                p = pp;\n                pp = p.#parent;\n            }\n        }\n        return this;\n    }\n    push(...parts) {\n        for (const p of parts) {\n            if (p === '')\n                continue;\n            /* c8 ignore start */\n            if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n                throw new Error('invalid part: ' + p);\n            }\n            /* c8 ignore stop */\n            this.#parts.push(p);\n        }\n    }\n    toJSON() {\n        const ret = this.type === null\n            ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n            : [this.type, ...this.#parts.map(p => p.toJSON())];\n        if (this.isStart() && !this.type)\n            ret.unshift([]);\n        if (this.isEnd() &&\n            (this === this.#root ||\n                (this.#root.#filledNegs && this.#parent?.type === '!'))) {\n            ret.push({});\n        }\n        return ret;\n    }\n    isStart() {\n        if (this.#root === this)\n            return true;\n        // if (this.type) return !!this.#parent?.isStart()\n        if (!this.#parent?.isStart())\n            return false;\n        if (this.#parentIndex === 0)\n            return true;\n        // if everything AHEAD of this is a negation, then it's still the \"start\"\n        const p = this.#parent;\n        for (let i = 0; i < this.#parentIndex; i++) {\n            const pp = p.#parts[i];\n            if (!(pp instanceof AST && pp.type === '!')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isEnd() {\n        if (this.#root === this)\n            return true;\n        if (this.#parent?.type === '!')\n            return true;\n        if (!this.#parent?.isEnd())\n            return false;\n        if (!this.type)\n            return this.#parent?.isEnd();\n        // if not root, it'll always have a parent\n        /* c8 ignore start */\n        const pl = this.#parent ? this.#parent.#parts.length : 0;\n        /* c8 ignore stop */\n        return this.#parentIndex === pl - 1;\n    }\n    copyIn(part) {\n        if (typeof part === 'string')\n            this.push(part);\n        else\n            this.push(part.clone(this));\n    }\n    clone(parent) {\n        const c = new AST(this.type, parent);\n        for (const p of this.#parts) {\n            c.copyIn(p);\n        }\n        return c;\n    }\n    static #parseAST(str, ast, pos, opt) {\n        let escaping = false;\n        let inBrace = false;\n        let braceStart = -1;\n        let braceNeg = false;\n        if (ast.type === null) {\n            // outside of a extglob, append until we find a start\n            let i = pos;\n            let acc = '';\n            while (i < str.length) {\n                const c = str.charAt(i++);\n                // still accumulate escapes at this point, but we do ignore\n                // starts that are escaped\n                if (escaping || c === '\\\\') {\n                    escaping = !escaping;\n                    acc += c;\n                    continue;\n                }\n                if (inBrace) {\n                    if (i === braceStart + 1) {\n                        if (c === '^' || c === '!') {\n                            braceNeg = true;\n                        }\n                    }\n                    else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                        inBrace = false;\n                    }\n                    acc += c;\n                    continue;\n                }\n                else if (c === '[') {\n                    inBrace = true;\n                    braceStart = i;\n                    braceNeg = false;\n                    acc += c;\n                    continue;\n                }\n                if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n                    ast.push(acc);\n                    acc = '';\n                    const ext = new AST(c, ast);\n                    i = AST.#parseAST(str, ext, i, opt);\n                    ast.push(ext);\n                    continue;\n                }\n                acc += c;\n            }\n            ast.push(acc);\n            return i;\n        }\n        // some kind of extglob, pos is at the (\n        // find the next | or )\n        let i = pos + 1;\n        let part = new AST(null, ast);\n        const parts = [];\n        let acc = '';\n        while (i < str.length) {\n            const c = str.charAt(i++);\n            // still accumulate escapes at this point, but we do ignore\n            // starts that are escaped\n            if (escaping || c === '\\\\') {\n                escaping = !escaping;\n                acc += c;\n                continue;\n            }\n            if (inBrace) {\n                if (i === braceStart + 1) {\n                    if (c === '^' || c === '!') {\n                        braceNeg = true;\n                    }\n                }\n                else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                    inBrace = false;\n                }\n                acc += c;\n                continue;\n            }\n            else if (c === '[') {\n                inBrace = true;\n                braceStart = i;\n                braceNeg = false;\n                acc += c;\n                continue;\n            }\n            if (isExtglobType(c) && str.charAt(i) === '(') {\n                part.push(acc);\n                acc = '';\n                const ext = new AST(c, part);\n                part.push(ext);\n                i = AST.#parseAST(str, ext, i, opt);\n                continue;\n            }\n            if (c === '|') {\n                part.push(acc);\n                acc = '';\n                parts.push(part);\n                part = new AST(null, ast);\n                continue;\n            }\n            if (c === ')') {\n                if (acc === '' && ast.#parts.length === 0) {\n                    ast.#emptyExt = true;\n                }\n                part.push(acc);\n                acc = '';\n                ast.push(...parts, part);\n                return i;\n            }\n            acc += c;\n        }\n        // unfinished extglob\n        // if we got here, it was a malformed extglob! not an extglob, but\n        // maybe something else in there.\n        ast.type = null;\n        ast.#hasMagic = undefined;\n        ast.#parts = [str.substring(pos - 1)];\n        return i;\n    }\n    static fromGlob(pattern, options = {}) {\n        const ast = new AST(null, undefined, options);\n        AST.#parseAST(pattern, ast, 0, options);\n        return ast;\n    }\n    // returns the regular expression if there's magic, or the unescaped\n    // string if not.\n    toMMPattern() {\n        // should only be called on root\n        /* c8 ignore start */\n        if (this !== this.#root)\n            return this.#root.toMMPattern();\n        /* c8 ignore stop */\n        const glob = this.toString();\n        const [re, body, hasMagic, uflag] = this.toRegExpSource();\n        // if we're in nocase mode, and not nocaseMagicOnly, then we do\n        // still need a regular expression if we have to case-insensitively\n        // match capital/lowercase characters.\n        const anyMagic = hasMagic ||\n            this.#hasMagic ||\n            (this.#options.nocase &&\n                !this.#options.nocaseMagicOnly &&\n                glob.toUpperCase() !== glob.toLowerCase());\n        if (!anyMagic) {\n            return body;\n        }\n        const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');\n        return Object.assign(new RegExp(`^${re}$`, flags), {\n            _src: re,\n            _glob: glob,\n        });\n    }\n    get options() {\n        return this.#options;\n    }\n    // returns the string match, the regexp source, whether there's magic\n    // in the regexp (so a regular expression is required) and whether or\n    // not the uflag is needed for the regular expression (for posix classes)\n    // TODO: instead of injecting the start/end at this point, just return\n    // the BODY of the regexp, along with the start/end portions suitable\n    // for binding the start/end in either a joined full-path makeRe context\n    // (where we bind to (^|/), or a standalone matchPart context (where\n    // we bind to ^, and not /).  Otherwise slashes get duped!\n    //\n    // In part-matching mode, the start is:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n    // - if dots allowed or not possible: ^\n    // - if dots possible and not allowed: ^(?!\\.)\n    // end is:\n    // - if not isEnd(): nothing\n    // - else: $\n    //\n    // In full-path matching mode, we put the slash at the START of the\n    // pattern, so start is:\n    // - if first pattern: same as part-matching mode\n    // - if not isStart(): nothing\n    // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n    // - if dots allowed or not possible: /\n    // - if dots possible and not allowed: /(?!\\.)\n    // end is:\n    // - if last pattern, same as part-matching mode\n    // - else nothing\n    //\n    // Always put the (?:$|/) on negated tails, though, because that has to be\n    // there to bind the end of the negated pattern portion, and it's easier to\n    // just stick it in now rather than try to inject it later in the middle of\n    // the pattern.\n    //\n    // We can just always return the same end, and leave it up to the caller\n    // to know whether it's going to be used joined or in parts.\n    // And, if the start is adjusted slightly, can do the same there:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n    // - if dots allowed or not possible: (?:/|^)\n    // - if dots possible and not allowed: (?:/|^)(?!\\.)\n    //\n    // But it's better to have a simpler binding without a conditional, for\n    // performance, so probably better to return both start options.\n    //\n    // Then the caller just ignores the end if it's not the first pattern,\n    // and the start always gets applied.\n    //\n    // But that's always going to be $ if it's the ending pattern, or nothing,\n    // so the caller can just attach $ at the end of the pattern when building.\n    //\n    // So the todo is:\n    // - better detect what kind of start is needed\n    // - return both flavors of starting pattern\n    // - attach $ at the end of the pattern when creating the actual RegExp\n    //\n    // Ah, but wait, no, that all only applies to the root when the first pattern\n    // is not an extglob. If the first pattern IS an extglob, then we need all\n    // that dot prevention biz to live in the extglob portions, because eg\n    // +(*|.x*) can match .xy but not .yx.\n    //\n    // So, return the two flavors if it's #root and the first child is not an\n    // AST, otherwise leave it to the child AST to handle it, and there,\n    // use the (?:^|/) style of start binding.\n    //\n    // Even simplified further:\n    // - Since the start for a join is eg /(?!\\.) and the start for a part\n    // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n    // or start or whatever) and prepend ^ or / at the Regexp construction.\n    toRegExpSource(allowDot) {\n        const dot = allowDot ?? !!this.#options.dot;\n        if (this.#root === this)\n            this.#fillNegs();\n        if (!this.type) {\n            const noEmpty = this.isStart() && this.isEnd();\n            const src = this.#parts\n                .map(p => {\n                const [re, _, hasMagic, uflag] = typeof p === 'string'\n                    ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n                    : p.toRegExpSource(allowDot);\n                this.#hasMagic = this.#hasMagic || hasMagic;\n                this.#uflag = this.#uflag || uflag;\n                return re;\n            })\n                .join('');\n            let start = '';\n            if (this.isStart()) {\n                if (typeof this.#parts[0] === 'string') {\n                    // this is the string that will match the start of the pattern,\n                    // so we need to protect against dots and such.\n                    // '.' and '..' cannot match unless the pattern is that exactly,\n                    // even if it starts with . or dot:true is set.\n                    const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);\n                    if (!dotTravAllowed) {\n                        const aps = addPatternStart;\n                        // check if we have a possibility of matching . or ..,\n                        // and prevent that.\n                        const needNoTrav = \n                        // dots are allowed, and the pattern starts with [ or .\n                        (dot && aps.has(src.charAt(0))) ||\n                            // the pattern starts with \\., and then [ or .\n                            (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n                            // the pattern starts with \\.\\., and then [ or .\n                            (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)));\n                        // no need to prevent dots if it can't match a dot, or if a\n                        // sub-pattern will be preventing it anyway.\n                        const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));\n                        start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';\n                    }\n                }\n            }\n            // append the \"end of path portion\" pattern to negation tails\n            let end = '';\n            if (this.isEnd() &&\n                this.#root.#filledNegs &&\n                this.#parent?.type === '!') {\n                end = '(?:$|\\\\/)';\n            }\n            const final = start + src + end;\n            return [\n                final,\n                (0, unescape_js_1.unescape)(src),\n                (this.#hasMagic = !!this.#hasMagic),\n                this.#uflag,\n            ];\n        }\n        // We need to calculate the body *twice* if it's a repeat pattern\n        // at the start, once in nodot mode, then again in dot mode, so a\n        // pattern like *(?) can match 'x.y'\n        const repeated = this.type === '*' || this.type === '+';\n        // some kind of extglob\n        const start = this.type === '!' ? '(?:(?!(?:' : '(?:';\n        let body = this.#partsToRegExp(dot);\n        if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n            // invalid extglob, has to at least be *something* present, if it's\n            // the entire path portion.\n            const s = this.toString();\n            this.#parts = [s];\n            this.type = null;\n            this.#hasMagic = undefined;\n            return [s, (0, unescape_js_1.unescape)(this.toString()), false, false];\n        }\n        // XXX abstract out this map method\n        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot\n            ? ''\n            : this.#partsToRegExp(true);\n        if (bodyDotAllowed === body) {\n            bodyDotAllowed = '';\n        }\n        if (bodyDotAllowed) {\n            body = `(?:${body})(?:${bodyDotAllowed})*?`;\n        }\n        // an empty !() is exactly equivalent to a starNoEmpty\n        let final = '';\n        if (this.type === '!' && this.#emptyExt) {\n            final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;\n        }\n        else {\n            const close = this.type === '!'\n                ? // !() must match something,but !(x) can match ''\n                    '))' +\n                        (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n                        star +\n                        ')'\n                : this.type === '@'\n                    ? ')'\n                    : this.type === '?'\n                        ? ')?'\n                        : this.type === '+' && bodyDotAllowed\n                            ? ')'\n                            : this.type === '*' && bodyDotAllowed\n                                ? `)?`\n                                : `)${this.type}`;\n            final = start + body + close;\n        }\n        return [\n            final,\n            (0, unescape_js_1.unescape)(body),\n            (this.#hasMagic = !!this.#hasMagic),\n            this.#uflag,\n        ];\n    }\n    #partsToRegExp(dot) {\n        return this.#parts\n            .map(p => {\n            // extglob ASTs should only contain parent ASTs\n            /* c8 ignore start */\n            if (typeof p === 'string') {\n                throw new Error('string type in extglob ast??');\n            }\n            /* c8 ignore stop */\n            // can ignore hasMagic, because extglobs are already always magic\n            const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);\n            this.#uflag = this.#uflag || uflag;\n            return re;\n        })\n            .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n            .join('|');\n    }\n    static #parseGlob(glob, hasMagic, noEmpty = false) {\n        let escaping = false;\n        let re = '';\n        let uflag = false;\n        for (let i = 0; i < glob.length; i++) {\n            const c = glob.charAt(i);\n            if (escaping) {\n                escaping = false;\n                re += (reSpecials.has(c) ? '\\\\' : '') + c;\n                continue;\n            }\n            if (c === '\\\\') {\n                if (i === glob.length - 1) {\n                    re += '\\\\\\\\';\n                }\n                else {\n                    escaping = true;\n                }\n                continue;\n            }\n            if (c === '[') {\n                const [src, needUflag, consumed, magic] = (0, brace_expressions_js_1.parseClass)(glob, i);\n                if (consumed) {\n                    re += src;\n                    uflag = uflag || needUflag;\n                    i += consumed - 1;\n                    hasMagic = hasMagic || magic;\n                    continue;\n                }\n            }\n            if (c === '*') {\n                if (noEmpty && glob === '*')\n                    re += starNoEmpty;\n                else\n                    re += star;\n                hasMagic = true;\n                continue;\n            }\n            if (c === '?') {\n                re += qmark;\n                hasMagic = true;\n                continue;\n            }\n            re += regExpEscape(c);\n        }\n        return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag];\n    }\n}\nexports.AST = AST;\n//# sourceMappingURL=ast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/ast.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/brace-expressions.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/brace-expressions.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// translate the various posix character classes into unicode properties\n// this works across all unicode locales\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseClass = void 0;\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses = {\n    '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n    '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n    '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n    '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n    '[:cntrl:]': ['\\\\p{Cc}', true],\n    '[:digit:]': ['\\\\p{Nd}', true],\n    '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n    '[:lower:]': ['\\\\p{Ll}', true],\n    '[:print:]': ['\\\\p{C}', true],\n    '[:punct:]': ['\\\\p{P}', true],\n    '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n    '[:upper:]': ['\\\\p{Lu}', true],\n    '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n    '[:xdigit:]': ['A-Fa-f0-9', false],\n};\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s) => s.replace(/[[\\]\\\\-]/g, '\\\\$&');\n// escape all regexp magic characters\nconst regexpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges) => ranges.join('');\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nconst parseClass = (glob, position) => {\n    const pos = position;\n    /* c8 ignore start */\n    if (glob.charAt(pos) !== '[') {\n        throw new Error('not in a brace expression');\n    }\n    /* c8 ignore stop */\n    const ranges = [];\n    const negs = [];\n    let i = pos + 1;\n    let sawStart = false;\n    let uflag = false;\n    let escaping = false;\n    let negate = false;\n    let endPos = pos;\n    let rangeStart = '';\n    WHILE: while (i < glob.length) {\n        const c = glob.charAt(i);\n        if ((c === '!' || c === '^') && i === pos + 1) {\n            negate = true;\n            i++;\n            continue;\n        }\n        if (c === ']' && sawStart && !escaping) {\n            endPos = i + 1;\n            break;\n        }\n        sawStart = true;\n        if (c === '\\\\') {\n            if (!escaping) {\n                escaping = true;\n                i++;\n                continue;\n            }\n            // escaped \\ char, fall through and treat like normal char\n        }\n        if (c === '[' && !escaping) {\n            // either a posix class, a collation equivalent, or just a [\n            for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n                if (glob.startsWith(cls, i)) {\n                    // invalid, [a-[] is fine, but not [a-[:alpha]]\n                    if (rangeStart) {\n                        return ['$.', false, glob.length - pos, true];\n                    }\n                    i += cls.length;\n                    if (neg)\n                        negs.push(unip);\n                    else\n                        ranges.push(unip);\n                    uflag = uflag || u;\n                    continue WHILE;\n                }\n            }\n        }\n        // now it's just a normal character, effectively\n        escaping = false;\n        if (rangeStart) {\n            // throw this range away if it's not valid, but others\n            // can still match.\n            if (c > rangeStart) {\n                ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));\n            }\n            else if (c === rangeStart) {\n                ranges.push(braceEscape(c));\n            }\n            rangeStart = '';\n            i++;\n            continue;\n        }\n        // now might be the start of a range.\n        // can be either c-d or c-] or c<more...>] or c] at this point\n        if (glob.startsWith('-]', i + 1)) {\n            ranges.push(braceEscape(c + '-'));\n            i += 2;\n            continue;\n        }\n        if (glob.startsWith('-', i + 1)) {\n            rangeStart = c;\n            i += 2;\n            continue;\n        }\n        // not the start of a range, just a single character\n        ranges.push(braceEscape(c));\n        i++;\n    }\n    if (endPos < i) {\n        // didn't see the end of the class, not a valid class,\n        // but might still be valid as a literal match.\n        return ['', false, 0, false];\n    }\n    // if we got no ranges and no negates, then we have a range that\n    // cannot possibly match anything, and that poisons the whole glob\n    if (!ranges.length && !negs.length) {\n        return ['$.', false, glob.length - pos, true];\n    }\n    // if we got one positive range, and it's a single character, then that's\n    // not actually a magic pattern, it's just that one literal character.\n    // we should not treat that as \"magic\", we should just return the literal\n    // character. [_] is a perfectly valid way to escape glob magic chars.\n    if (negs.length === 0 &&\n        ranges.length === 1 &&\n        /^\\\\?.$/.test(ranges[0]) &&\n        !negate) {\n        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];\n        return [regexpEscape(r), false, endPos - pos, false];\n    }\n    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';\n    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';\n    const comb = ranges.length && negs.length\n        ? '(' + sranges + '|' + snegs + ')'\n        : ranges.length\n            ? sranges\n            : snegs;\n    return [comb, uflag, endPos - pos, true];\n};\nexports.parseClass = parseClass;\n//# sourceMappingURL=brace-expressions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvYnJhY2UtZXhwcmVzc2lvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixLQUFLO0FBQ0w7QUFDQSx1QkFBdUIsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHO0FBQ3ZDLHVCQUF1QixFQUFFLElBQUksR0FBRztBQUNoQztBQUNBLHVCQUF1QixHQUFHO0FBQzFCLHVCQUF1QixHQUFHO0FBQzFCLHVCQUF1QixHQUFHO0FBQzFCLHVCQUF1QixFQUFFLElBQUksRUFBRTtBQUMvQix1QkFBdUIsR0FBRztBQUMxQix1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsR0FBRztBQUMxQixzQkFBc0IsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9Eb2N1bWVudHMvR2l0SHViL0RPSk1BUkstSU5DLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9taW5pbWF0Y2gvZGlzdC9jb21tb25qcy9icmFjZS1leHByZXNzaW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIHRyYW5zbGF0ZSB0aGUgdmFyaW91cyBwb3NpeCBjaGFyYWN0ZXIgY2xhc3NlcyBpbnRvIHVuaWNvZGUgcHJvcGVydGllc1xuLy8gdGhpcyB3b3JrcyBhY3Jvc3MgYWxsIHVuaWNvZGUgbG9jYWxlc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUNsYXNzID0gdm9pZCAwO1xuLy8geyA8cG9zaXggY2xhc3M+OiBbPHRyYW5zbGF0aW9uPiwgL3UgZmxhZyByZXF1aXJlZCwgbmVnYXRlZF1cbmNvbnN0IHBvc2l4Q2xhc3NlcyA9IHtcbiAgICAnWzphbG51bTpdJzogWydcXFxccHtMfVxcXFxwe05sfVxcXFxwe05kfScsIHRydWVdLFxuICAgICdbOmFscGhhOl0nOiBbJ1xcXFxwe0x9XFxcXHB7Tmx9JywgdHJ1ZV0sXG4gICAgJ1s6YXNjaWk6XSc6IFsnXFxcXHgnICsgJzAwLVxcXFx4JyArICc3ZicsIGZhbHNlXSxcbiAgICAnWzpibGFuazpdJzogWydcXFxccHtac31cXFxcdCcsIHRydWVdLFxuICAgICdbOmNudHJsOl0nOiBbJ1xcXFxwe0NjfScsIHRydWVdLFxuICAgICdbOmRpZ2l0Ol0nOiBbJ1xcXFxwe05kfScsIHRydWVdLFxuICAgICdbOmdyYXBoOl0nOiBbJ1xcXFxwe1p9XFxcXHB7Q30nLCB0cnVlLCB0cnVlXSxcbiAgICAnWzpsb3dlcjpdJzogWydcXFxccHtMbH0nLCB0cnVlXSxcbiAgICAnWzpwcmludDpdJzogWydcXFxccHtDfScsIHRydWVdLFxuICAgICdbOnB1bmN0Ol0nOiBbJ1xcXFxwe1B9JywgdHJ1ZV0sXG4gICAgJ1s6c3BhY2U6XSc6IFsnXFxcXHB7Wn1cXFxcdFxcXFxyXFxcXG5cXFxcdlxcXFxmJywgdHJ1ZV0sXG4gICAgJ1s6dXBwZXI6XSc6IFsnXFxcXHB7THV9JywgdHJ1ZV0sXG4gICAgJ1s6d29yZDpdJzogWydcXFxccHtMfVxcXFxwe05sfVxcXFxwe05kfVxcXFxwe1BjfScsIHRydWVdLFxuICAgICdbOnhkaWdpdDpdJzogWydBLUZhLWYwLTknLCBmYWxzZV0sXG59O1xuLy8gb25seSBuZWVkIHRvIGVzY2FwZSBhIGZldyB0aGluZ3MgaW5zaWRlIG9mIGJyYWNlIGV4cHJlc3Npb25zXG4vLyBlc2NhcGVzOiBbIFxcIF0gLVxuY29uc3QgYnJhY2VFc2NhcGUgPSAocykgPT4gcy5yZXBsYWNlKC9bW1xcXVxcXFwtXS9nLCAnXFxcXCQmJyk7XG4vLyBlc2NhcGUgYWxsIHJlZ2V4cCBtYWdpYyBjaGFyYWN0ZXJzXG5jb25zdCByZWdleHBFc2NhcGUgPSAocykgPT4gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuLy8gZXZlcnl0aGluZyBoYXMgYWxyZWFkeSBiZWVuIGVzY2FwZWQsIHdlIGp1c3QgaGF2ZSB0byBqb2luXG5jb25zdCByYW5nZXNUb1N0cmluZyA9IChyYW5nZXMpID0+IHJhbmdlcy5qb2luKCcnKTtcbi8vIHRha2VzIGEgZ2xvYiBzdHJpbmcgYXQgYSBwb3NpeCBicmFjZSBleHByZXNzaW9uLCBhbmQgcmV0dXJuc1xuLy8gYW4gZXF1aXZhbGVudCByZWd1bGFyIGV4cHJlc3Npb24gc291cmNlLCBhbmQgYm9vbGVhbiBpbmRpY2F0aW5nXG4vLyB3aGV0aGVyIHRoZSAvdSBmbGFnIG5lZWRzIHRvIGJlIGFwcGxpZWQsIGFuZCB0aGUgbnVtYmVyIG9mIGNoYXJzXG4vLyBjb25zdW1lZCB0byBwYXJzZSB0aGUgY2hhcmFjdGVyIGNsYXNzLlxuLy8gVGhpcyBhbHNvIHJlbW92ZXMgb3V0IG9mIG9yZGVyIHJhbmdlcywgYW5kIHJldHVybnMgKCQuKSBpZiB0aGVcbi8vIGVudGlyZSBjbGFzcyBqdXN0IG5vIGdvb2QuXG5jb25zdCBwYXJzZUNsYXNzID0gKGdsb2IsIHBvc2l0aW9uKSA9PiB7XG4gICAgY29uc3QgcG9zID0gcG9zaXRpb247XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKGdsb2IuY2hhckF0KHBvcykgIT09ICdbJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbiBhIGJyYWNlIGV4cHJlc3Npb24nKTtcbiAgICB9XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICBjb25zdCByYW5nZXMgPSBbXTtcbiAgICBjb25zdCBuZWdzID0gW107XG4gICAgbGV0IGkgPSBwb3MgKyAxO1xuICAgIGxldCBzYXdTdGFydCA9IGZhbHNlO1xuICAgIGxldCB1ZmxhZyA9IGZhbHNlO1xuICAgIGxldCBlc2NhcGluZyA9IGZhbHNlO1xuICAgIGxldCBuZWdhdGUgPSBmYWxzZTtcbiAgICBsZXQgZW5kUG9zID0gcG9zO1xuICAgIGxldCByYW5nZVN0YXJ0ID0gJyc7XG4gICAgV0hJTEU6IHdoaWxlIChpIDwgZ2xvYi5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYyA9IGdsb2IuY2hhckF0KGkpO1xuICAgICAgICBpZiAoKGMgPT09ICchJyB8fCBjID09PSAnXicpICYmIGkgPT09IHBvcyArIDEpIHtcbiAgICAgICAgICAgIG5lZ2F0ZSA9IHRydWU7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gJ10nICYmIHNhd1N0YXJ0ICYmICFlc2NhcGluZykge1xuICAgICAgICAgICAgZW5kUG9zID0gaSArIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzYXdTdGFydCA9IHRydWU7XG4gICAgICAgIGlmIChjID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGlmICghZXNjYXBpbmcpIHtcbiAgICAgICAgICAgICAgICBlc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNjYXBlZCBcXCBjaGFyLCBmYWxsIHRocm91Z2ggYW5kIHRyZWF0IGxpa2Ugbm9ybWFsIGNoYXJcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gJ1snICYmICFlc2NhcGluZykge1xuICAgICAgICAgICAgLy8gZWl0aGVyIGEgcG9zaXggY2xhc3MsIGEgY29sbGF0aW9uIGVxdWl2YWxlbnQsIG9yIGp1c3QgYSBbXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtjbHMsIFt1bmlwLCB1LCBuZWddXSBvZiBPYmplY3QuZW50cmllcyhwb3NpeENsYXNzZXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2Iuc3RhcnRzV2l0aChjbHMsIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWQsIFthLVtdIGlzIGZpbmUsIGJ1dCBub3QgW2EtWzphbHBoYV1dXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyckLicsIGZhbHNlLCBnbG9iLmxlbmd0aCAtIHBvcywgdHJ1ZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaSArPSBjbHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmVnKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmVncy5wdXNoKHVuaXApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXMucHVzaCh1bmlwKTtcbiAgICAgICAgICAgICAgICAgICAgdWZsYWcgPSB1ZmxhZyB8fCB1O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBXSElMRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IGl0J3MganVzdCBhIG5vcm1hbCBjaGFyYWN0ZXIsIGVmZmVjdGl2ZWx5XG4gICAgICAgIGVzY2FwaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChyYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICAvLyB0aHJvdyB0aGlzIHJhbmdlIGF3YXkgaWYgaXQncyBub3QgdmFsaWQsIGJ1dCBvdGhlcnNcbiAgICAgICAgICAgIC8vIGNhbiBzdGlsbCBtYXRjaC5cbiAgICAgICAgICAgIGlmIChjID4gcmFuZ2VTdGFydCkge1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKGJyYWNlRXNjYXBlKHJhbmdlU3RhcnQpICsgJy0nICsgYnJhY2VFc2NhcGUoYykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYyA9PT0gcmFuZ2VTdGFydCkge1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKGJyYWNlRXNjYXBlKGMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSAnJztcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vdyBtaWdodCBiZSB0aGUgc3RhcnQgb2YgYSByYW5nZS5cbiAgICAgICAgLy8gY2FuIGJlIGVpdGhlciBjLWQgb3IgYy1dIG9yIGM8bW9yZS4uLj5dIG9yIGNdIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgaWYgKGdsb2Iuc3RhcnRzV2l0aCgnLV0nLCBpICsgMSkpIHtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKGJyYWNlRXNjYXBlKGMgKyAnLScpKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnbG9iLnN0YXJ0c1dpdGgoJy0nLCBpICsgMSkpIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBjO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm90IHRoZSBzdGFydCBvZiBhIHJhbmdlLCBqdXN0IGEgc2luZ2xlIGNoYXJhY3RlclxuICAgICAgICByYW5nZXMucHVzaChicmFjZUVzY2FwZShjKSk7XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgaWYgKGVuZFBvcyA8IGkpIHtcbiAgICAgICAgLy8gZGlkbid0IHNlZSB0aGUgZW5kIG9mIHRoZSBjbGFzcywgbm90IGEgdmFsaWQgY2xhc3MsXG4gICAgICAgIC8vIGJ1dCBtaWdodCBzdGlsbCBiZSB2YWxpZCBhcyBhIGxpdGVyYWwgbWF0Y2guXG4gICAgICAgIHJldHVybiBbJycsIGZhbHNlLCAwLCBmYWxzZV07XG4gICAgfVxuICAgIC8vIGlmIHdlIGdvdCBubyByYW5nZXMgYW5kIG5vIG5lZ2F0ZXMsIHRoZW4gd2UgaGF2ZSBhIHJhbmdlIHRoYXRcbiAgICAvLyBjYW5ub3QgcG9zc2libHkgbWF0Y2ggYW55dGhpbmcsIGFuZCB0aGF0IHBvaXNvbnMgdGhlIHdob2xlIGdsb2JcbiAgICBpZiAoIXJhbmdlcy5sZW5ndGggJiYgIW5lZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbJyQuJywgZmFsc2UsIGdsb2IubGVuZ3RoIC0gcG9zLCB0cnVlXTtcbiAgICB9XG4gICAgLy8gaWYgd2UgZ290IG9uZSBwb3NpdGl2ZSByYW5nZSwgYW5kIGl0J3MgYSBzaW5nbGUgY2hhcmFjdGVyLCB0aGVuIHRoYXQnc1xuICAgIC8vIG5vdCBhY3R1YWxseSBhIG1hZ2ljIHBhdHRlcm4sIGl0J3MganVzdCB0aGF0IG9uZSBsaXRlcmFsIGNoYXJhY3Rlci5cbiAgICAvLyB3ZSBzaG91bGQgbm90IHRyZWF0IHRoYXQgYXMgXCJtYWdpY1wiLCB3ZSBzaG91bGQganVzdCByZXR1cm4gdGhlIGxpdGVyYWxcbiAgICAvLyBjaGFyYWN0ZXIuIFtfXSBpcyBhIHBlcmZlY3RseSB2YWxpZCB3YXkgdG8gZXNjYXBlIGdsb2IgbWFnaWMgY2hhcnMuXG4gICAgaWYgKG5lZ3MubGVuZ3RoID09PSAwICYmXG4gICAgICAgIHJhbmdlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgL15cXFxcPy4kLy50ZXN0KHJhbmdlc1swXSkgJiZcbiAgICAgICAgIW5lZ2F0ZSkge1xuICAgICAgICBjb25zdCByID0gcmFuZ2VzWzBdLmxlbmd0aCA9PT0gMiA/IHJhbmdlc1swXS5zbGljZSgtMSkgOiByYW5nZXNbMF07XG4gICAgICAgIHJldHVybiBbcmVnZXhwRXNjYXBlKHIpLCBmYWxzZSwgZW5kUG9zIC0gcG9zLCBmYWxzZV07XG4gICAgfVxuICAgIGNvbnN0IHNyYW5nZXMgPSAnWycgKyAobmVnYXRlID8gJ14nIDogJycpICsgcmFuZ2VzVG9TdHJpbmcocmFuZ2VzKSArICddJztcbiAgICBjb25zdCBzbmVncyA9ICdbJyArIChuZWdhdGUgPyAnJyA6ICdeJykgKyByYW5nZXNUb1N0cmluZyhuZWdzKSArICddJztcbiAgICBjb25zdCBjb21iID0gcmFuZ2VzLmxlbmd0aCAmJiBuZWdzLmxlbmd0aFxuICAgICAgICA/ICcoJyArIHNyYW5nZXMgKyAnfCcgKyBzbmVncyArICcpJ1xuICAgICAgICA6IHJhbmdlcy5sZW5ndGhcbiAgICAgICAgICAgID8gc3Jhbmdlc1xuICAgICAgICAgICAgOiBzbmVncztcbiAgICByZXR1cm4gW2NvbWIsIHVmbGFnLCBlbmRQb3MgLSBwb3MsIHRydWVdO1xufTtcbmV4cG9ydHMucGFyc2VDbGFzcyA9IHBhcnNlQ2xhc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmFjZS1leHByZXNzaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/brace-expressions.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/escape.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/escape.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.escape = void 0;\n/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nconst escape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    // don't need to escape +@! because we escape the parens\n    // that make those magic, and escaping ! as [!] isn't valid,\n    // because [!]] is a valid glob class meaning not ']'.\n    return windowsPathsNoEscape\n        ? s.replace(/[?*()[\\]]/g, '[$&]')\n        : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&');\n};\nexports.escape = escape;\n//# sourceMappingURL=escape.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvZXNjYXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQ0FBZ0MsSUFBSTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvZXNjYXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc2NhcGUgPSB2b2lkIDA7XG4vKipcbiAqIEVzY2FwZSBhbGwgbWFnaWMgY2hhcmFjdGVycyBpbiBhIGdsb2IgcGF0dGVybi5cbiAqXG4gKiBJZiB0aGUge0BsaW5rIHdpbmRvd3NQYXRoc05vRXNjYXBlIHwgR2xvYk9wdGlvbnMud2luZG93c1BhdGhzTm9Fc2NhcGV9XG4gKiBvcHRpb24gaXMgdXNlZCwgdGhlbiBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkIGJ5IHdyYXBwaW5nIGluIGBbXWAsIGJlY2F1c2VcbiAqIGEgbWFnaWMgY2hhcmFjdGVyIHdyYXBwZWQgaW4gYSBjaGFyYWN0ZXIgY2xhc3MgY2FuIG9ubHkgYmUgc2F0aXNmaWVkIGJ5XG4gKiB0aGF0IGV4YWN0IGNoYXJhY3Rlci4gIEluIHRoaXMgbW9kZSwgYFxcYCBpcyBfbm90XyBlc2NhcGVkLCBiZWNhdXNlIGl0IGlzXG4gKiBub3QgaW50ZXJwcmV0ZWQgYXMgYSBtYWdpYyBjaGFyYWN0ZXIsIGJ1dCBpbnN0ZWFkIGFzIGEgcGF0aCBzZXBhcmF0b3IuXG4gKi9cbmNvbnN0IGVzY2FwZSA9IChzLCB7IHdpbmRvd3NQYXRoc05vRXNjYXBlID0gZmFsc2UsIH0gPSB7fSkgPT4ge1xuICAgIC8vIGRvbid0IG5lZWQgdG8gZXNjYXBlICtAISBiZWNhdXNlIHdlIGVzY2FwZSB0aGUgcGFyZW5zXG4gICAgLy8gdGhhdCBtYWtlIHRob3NlIG1hZ2ljLCBhbmQgZXNjYXBpbmcgISBhcyBbIV0gaXNuJ3QgdmFsaWQsXG4gICAgLy8gYmVjYXVzZSBbIV1dIGlzIGEgdmFsaWQgZ2xvYiBjbGFzcyBtZWFuaW5nIG5vdCAnXScuXG4gICAgcmV0dXJuIHdpbmRvd3NQYXRoc05vRXNjYXBlXG4gICAgICAgID8gcy5yZXBsYWNlKC9bPyooKVtcXF1dL2csICdbJCZdJylcbiAgICAgICAgOiBzLnJlcGxhY2UoL1s/KigpW1xcXVxcXFxdL2csICdcXFxcJCYnKTtcbn07XG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/escape.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/index.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unescape = exports.escape = exports.AST = exports.Minimatch = exports.match = exports.makeRe = exports.braceExpand = exports.defaults = exports.filter = exports.GLOBSTAR = exports.sep = exports.minimatch = void 0;\nconst brace_expansion_1 = __importDefault(__webpack_require__(/*! brace-expansion */ \"(instrument)/./node_modules/@sentry/node/node_modules/brace-expansion/index.js\"));\nconst assert_valid_pattern_js_1 = __webpack_require__(/*! ./assert-valid-pattern.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/assert-valid-pattern.js\");\nconst ast_js_1 = __webpack_require__(/*! ./ast.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/ast.js\");\nconst escape_js_1 = __webpack_require__(/*! ./escape.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/escape.js\");\nconst unescape_js_1 = __webpack_require__(/*! ./unescape.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js\");\nconst minimatch = (p, pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n};\nexports.minimatch = minimatch;\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/;\nconst starDotExtTest = (ext) => (f) => !f.startsWith('.') && f.endsWith(ext);\nconst starDotExtTestDot = (ext) => (f) => f.endsWith(ext);\nconst starDotExtTestNocase = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => !f.startsWith('.') && f.toLowerCase().endsWith(ext);\n};\nconst starDotExtTestNocaseDot = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => f.toLowerCase().endsWith(ext);\n};\nconst starDotStarRE = /^\\*+\\.\\*+$/;\nconst starDotStarTest = (f) => !f.startsWith('.') && f.includes('.');\nconst starDotStarTestDot = (f) => f !== '.' && f !== '..' && f.includes('.');\nconst dotStarRE = /^\\.\\*+$/;\nconst dotStarTest = (f) => f !== '.' && f !== '..' && f.startsWith('.');\nconst starRE = /^\\*+$/;\nconst starTest = (f) => f.length !== 0 && !f.startsWith('.');\nconst starTestDot = (f) => f.length !== 0 && f !== '.' && f !== '..';\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/;\nconst qmarksTestNocase = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestNocaseDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTest = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTestNoExt = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && !f.startsWith('.');\n};\nconst qmarksTestNoExtDot = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && f !== '.' && f !== '..';\n};\n/* c8 ignore start */\nconst defaultPlatform = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path = {\n    win32: { sep: '\\\\' },\n    posix: { sep: '/' },\n};\n/* c8 ignore stop */\nexports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep;\nexports.minimatch.sep = exports.sep;\nexports.GLOBSTAR = Symbol('globstar **');\nexports.minimatch.GLOBSTAR = exports.GLOBSTAR;\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?';\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?';\nconst filter = (pattern, options = {}) => (p) => (0, exports.minimatch)(p, pattern, options);\nexports.filter = filter;\nexports.minimatch.filter = exports.filter;\nconst ext = (a, b = {}) => Object.assign({}, a, b);\nconst defaults = (def) => {\n    if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n        return exports.minimatch;\n    }\n    const orig = exports.minimatch;\n    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));\n    return Object.assign(m, {\n        Minimatch: class Minimatch extends orig.Minimatch {\n            constructor(pattern, options = {}) {\n                super(pattern, ext(def, options));\n            }\n            static defaults(options) {\n                return orig.defaults(ext(def, options)).Minimatch;\n            }\n        },\n        AST: class AST extends orig.AST {\n            /* c8 ignore start */\n            constructor(type, parent, options = {}) {\n                super(type, parent, ext(def, options));\n            }\n            /* c8 ignore stop */\n            static fromGlob(pattern, options = {}) {\n                return orig.AST.fromGlob(pattern, ext(def, options));\n            }\n        },\n        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),\n        escape: (s, options = {}) => orig.escape(s, ext(def, options)),\n        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),\n        defaults: (options) => orig.defaults(ext(def, options)),\n        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),\n        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),\n        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),\n        sep: orig.sep,\n        GLOBSTAR: exports.GLOBSTAR,\n    });\n};\nexports.defaults = defaults;\nexports.minimatch.defaults = exports.defaults;\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nconst braceExpand = (pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [pattern];\n    }\n    return (0, brace_expansion_1.default)(pattern);\n};\nexports.braceExpand = braceExpand;\nexports.minimatch.braceExpand = exports.braceExpand;\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();\nexports.makeRe = makeRe;\nexports.minimatch.makeRe = exports.makeRe;\nconst match = (list, pattern, options = {}) => {\n    const mm = new Minimatch(pattern, options);\n    list = list.filter(f => mm.match(f));\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\nexports.match = match;\nexports.minimatch.match = exports.match;\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/;\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\nclass Minimatch {\n    options;\n    set;\n    pattern;\n    windowsPathsNoEscape;\n    nonegate;\n    negate;\n    comment;\n    empty;\n    preserveMultipleSlashes;\n    partial;\n    globSet;\n    globParts;\n    nocase;\n    isWindows;\n    platform;\n    windowsNoMagicRoot;\n    regexp;\n    constructor(pattern, options = {}) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        options = options || {};\n        this.options = options;\n        this.pattern = pattern;\n        this.platform = options.platform || defaultPlatform;\n        this.isWindows = this.platform === 'win32';\n        this.windowsPathsNoEscape =\n            !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            this.pattern = this.pattern.replace(/\\\\/g, '/');\n        }\n        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;\n        this.regexp = null;\n        this.negate = false;\n        this.nonegate = !!options.nonegate;\n        this.comment = false;\n        this.empty = false;\n        this.partial = !!options.partial;\n        this.nocase = !!this.options.nocase;\n        this.windowsNoMagicRoot =\n            options.windowsNoMagicRoot !== undefined\n                ? options.windowsNoMagicRoot\n                : !!(this.isWindows && this.nocase);\n        this.globSet = [];\n        this.globParts = [];\n        this.set = [];\n        // make the set of regexps etc.\n        this.make();\n    }\n    hasMagic() {\n        if (this.options.magicalBraces && this.set.length > 1) {\n            return true;\n        }\n        for (const pattern of this.set) {\n            for (const part of pattern) {\n                if (typeof part !== 'string')\n                    return true;\n            }\n        }\n        return false;\n    }\n    debug(..._) { }\n    make() {\n        const pattern = this.pattern;\n        const options = this.options;\n        // empty patterns and comments match nothing.\n        if (!options.nocomment && pattern.charAt(0) === '#') {\n            this.comment = true;\n            return;\n        }\n        if (!pattern) {\n            this.empty = true;\n            return;\n        }\n        // step 1: figure out negation, etc.\n        this.parseNegate();\n        // step 2: expand braces\n        this.globSet = [...new Set(this.braceExpand())];\n        if (options.debug) {\n            this.debug = (...args) => console.error(...args);\n        }\n        this.debug(this.pattern, this.globSet);\n        // step 3: now we have a set, so turn each one into a series of\n        // path-portion matching patterns.\n        // These will be regexps, except in the case of \"**\", which is\n        // set to the GLOBSTAR object for globstar behavior,\n        // and will not contain any / characters\n        //\n        // First, we preprocess to make the glob pattern sets a bit simpler\n        // and deduped.  There are some perf-killing patterns that can cause\n        // problems with a glob walk, but we can simplify them down a bit.\n        const rawGlobParts = this.globSet.map(s => this.slashSplit(s));\n        this.globParts = this.preprocess(rawGlobParts);\n        this.debug(this.pattern, this.globParts);\n        // glob --> regexps\n        let set = this.globParts.map((s, _, __) => {\n            if (this.isWindows && this.windowsNoMagicRoot) {\n                // check if it's a drive or unc path.\n                const isUNC = s[0] === '' &&\n                    s[1] === '' &&\n                    (s[2] === '?' || !globMagic.test(s[2])) &&\n                    !globMagic.test(s[3]);\n                const isDrive = /^[a-z]:/i.test(s[0]);\n                if (isUNC) {\n                    return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))];\n                }\n                else if (isDrive) {\n                    return [s[0], ...s.slice(1).map(ss => this.parse(ss))];\n                }\n            }\n            return s.map(ss => this.parse(ss));\n        });\n        this.debug(this.pattern, set);\n        // filter out everything that didn't compile properly.\n        this.set = set.filter(s => s.indexOf(false) === -1);\n        // do not treat the ? in UNC paths as magic\n        if (this.isWindows) {\n            for (let i = 0; i < this.set.length; i++) {\n                const p = this.set[i];\n                if (p[0] === '' &&\n                    p[1] === '' &&\n                    this.globParts[i][2] === '?' &&\n                    typeof p[3] === 'string' &&\n                    /^[a-z]:$/i.test(p[3])) {\n                    p[2] = '?';\n                }\n            }\n        }\n        this.debug(this.pattern, this.set);\n    }\n    // various transforms to equivalent pattern sets that are\n    // faster to process in a filesystem walk.  The goal is to\n    // eliminate what we can, and push all ** patterns as far\n    // to the right as possible, even if it increases the number\n    // of patterns that we have to process.\n    preprocess(globParts) {\n        // if we're not in globstar mode, then turn all ** into *\n        if (this.options.noglobstar) {\n            for (let i = 0; i < globParts.length; i++) {\n                for (let j = 0; j < globParts[i].length; j++) {\n                    if (globParts[i][j] === '**') {\n                        globParts[i][j] = '*';\n                    }\n                }\n            }\n        }\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            // aggressive optimization for the purpose of fs walking\n            globParts = this.firstPhasePreProcess(globParts);\n            globParts = this.secondPhasePreProcess(globParts);\n        }\n        else if (optimizationLevel >= 1) {\n            // just basic optimizations to remove some .. parts\n            globParts = this.levelOneOptimize(globParts);\n        }\n        else {\n            // just collapse multiple ** portions into one\n            globParts = this.adjascentGlobstarOptimize(globParts);\n        }\n        return globParts;\n    }\n    // just get rid of adjascent ** portions\n    adjascentGlobstarOptimize(globParts) {\n        return globParts.map(parts => {\n            let gs = -1;\n            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                let i = gs;\n                while (parts[i + 1] === '**') {\n                    i++;\n                }\n                if (i !== gs) {\n                    parts.splice(gs, i - gs);\n                }\n            }\n            return parts;\n        });\n    }\n    // get rid of adjascent ** and resolve .. portions\n    levelOneOptimize(globParts) {\n        return globParts.map(parts => {\n            parts = parts.reduce((set, part) => {\n                const prev = set[set.length - 1];\n                if (part === '**' && prev === '**') {\n                    return set;\n                }\n                if (part === '..') {\n                    if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n                        set.pop();\n                        return set;\n                    }\n                }\n                set.push(part);\n                return set;\n            }, []);\n            return parts.length === 0 ? [''] : parts;\n        });\n    }\n    levelTwoFileOptimize(parts) {\n        if (!Array.isArray(parts)) {\n            parts = this.slashSplit(parts);\n        }\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/<e>/<rest> -> <pre>/<rest>\n            if (!this.preserveMultipleSlashes) {\n                for (let i = 1; i < parts.length - 1; i++) {\n                    const p = parts[i];\n                    // don't squeeze out UNC patterns\n                    if (i === 1 && p === '' && parts[0] === '')\n                        continue;\n                    if (p === '.' || p === '') {\n                        didSomething = true;\n                        parts.splice(i, 1);\n                        i--;\n                    }\n                }\n                if (parts[0] === '.' &&\n                    parts.length === 2 &&\n                    (parts[1] === '.' || parts[1] === '')) {\n                    didSomething = true;\n                    parts.pop();\n                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n        return parts.length === 0 ? [''] : parts;\n    }\n    // First phase: single-pattern processing\n    // <pre> is 1 or more portions\n    // <rest> is 1 or more portions\n    // <p> is any portion other than ., .., '', or **\n    // <e> is . or ''\n    //\n    // **/.. is *brutal* for filesystem walking performance, because\n    // it effectively resets the recursive walk each time it occurs,\n    // and ** cannot be reduced out by a .. pattern part like a regexp\n    // or most strings (other than .., ., and '') can be.\n    //\n    // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n    // <pre>/<e>/<rest> -> <pre>/<rest>\n    // <pre>/<p>/../<rest> -> <pre>/<rest>\n    // **/**/<rest> -> **/<rest>\n    //\n    // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n    // this WOULD be allowed if ** did follow symlinks, or * didn't\n    firstPhasePreProcess(globParts) {\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n            for (let parts of globParts) {\n                let gs = -1;\n                while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                    let gss = gs;\n                    while (parts[gss + 1] === '**') {\n                        // <pre>/**/**/<rest> -> <pre>/**/<rest>\n                        gss++;\n                    }\n                    // eg, if gs is 2 and gss is 4, that means we have 3 **\n                    // parts, and can remove 2 of them.\n                    if (gss > gs) {\n                        parts.splice(gs + 1, gss - gs);\n                    }\n                    let next = parts[gs + 1];\n                    const p = parts[gs + 2];\n                    const p2 = parts[gs + 3];\n                    if (next !== '..')\n                        continue;\n                    if (!p ||\n                        p === '.' ||\n                        p === '..' ||\n                        !p2 ||\n                        p2 === '.' ||\n                        p2 === '..') {\n                        continue;\n                    }\n                    didSomething = true;\n                    // edit parts in place, and push the new one\n                    parts.splice(gs, 1);\n                    const other = parts.slice(0);\n                    other[gs] = '**';\n                    globParts.push(other);\n                    gs--;\n                }\n                // <pre>/<e>/<rest> -> <pre>/<rest>\n                if (!this.preserveMultipleSlashes) {\n                    for (let i = 1; i < parts.length - 1; i++) {\n                        const p = parts[i];\n                        // don't squeeze out UNC patterns\n                        if (i === 1 && p === '' && parts[0] === '')\n                            continue;\n                        if (p === '.' || p === '') {\n                            didSomething = true;\n                            parts.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    if (parts[0] === '.' &&\n                        parts.length === 2 &&\n                        (parts[1] === '.' || parts[1] === '')) {\n                        didSomething = true;\n                        parts.pop();\n                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n        } while (didSomething);\n        return globParts;\n    }\n    // second phase: multi-pattern dedupes\n    // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n    // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n    // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n    //\n    // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n    // ^-- not valid because ** doens't follow symlinks\n    secondPhasePreProcess(globParts) {\n        for (let i = 0; i < globParts.length - 1; i++) {\n            for (let j = i + 1; j < globParts.length; j++) {\n                const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);\n                if (matched) {\n                    globParts[i] = [];\n                    globParts[j] = matched;\n                    break;\n                }\n            }\n        }\n        return globParts.filter(gs => gs.length);\n    }\n    partsMatch(a, b, emptyGSMatch = false) {\n        let ai = 0;\n        let bi = 0;\n        let result = [];\n        let which = '';\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] === b[bi]) {\n                result.push(which === 'b' ? b[bi] : a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n                result.push(a[ai]);\n                ai++;\n            }\n            else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n                result.push(b[bi]);\n                bi++;\n            }\n            else if (a[ai] === '*' &&\n                b[bi] &&\n                (this.options.dot || !b[bi].startsWith('.')) &&\n                b[bi] !== '**') {\n                if (which === 'b')\n                    return false;\n                which = 'a';\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (b[bi] === '*' &&\n                a[ai] &&\n                (this.options.dot || !a[ai].startsWith('.')) &&\n                a[ai] !== '**') {\n                if (which === 'a')\n                    return false;\n                which = 'b';\n                result.push(b[bi]);\n                ai++;\n                bi++;\n            }\n            else {\n                return false;\n            }\n        }\n        // if we fall out of the loop, it means they two are identical\n        // as long as their lengths match\n        return a.length === b.length && result;\n    }\n    parseNegate() {\n        if (this.nonegate)\n            return;\n        const pattern = this.pattern;\n        let negate = false;\n        let negateOffset = 0;\n        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n            negate = !negate;\n            negateOffset++;\n        }\n        if (negateOffset)\n            this.pattern = pattern.slice(negateOffset);\n        this.negate = negate;\n    }\n    // set partial to true to test if, for example,\n    // \"/a/b\" matches the start of \"/*/b/*/d\"\n    // Partial means, if you run out of file before you run\n    // out of pattern, then that's fine, as long as all\n    // the parts match.\n    matchOne(file, pattern, partial = false) {\n        const options = this.options;\n        // UNC paths like //?/X:/... can match X:/... and vice versa\n        // Drive letters in absolute drive or unc paths are always compared\n        // case-insensitively.\n        if (this.isWindows) {\n            const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0]);\n            const fileUNC = !fileDrive &&\n                file[0] === '' &&\n                file[1] === '' &&\n                file[2] === '?' &&\n                /^[a-z]:$/i.test(file[3]);\n            const patternDrive = typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0]);\n            const patternUNC = !patternDrive &&\n                pattern[0] === '' &&\n                pattern[1] === '' &&\n                pattern[2] === '?' &&\n                typeof pattern[3] === 'string' &&\n                /^[a-z]:$/i.test(pattern[3]);\n            const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;\n            const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;\n            if (typeof fdi === 'number' && typeof pdi === 'number') {\n                const [fd, pd] = [file[fdi], pattern[pdi]];\n                if (fd.toLowerCase() === pd.toLowerCase()) {\n                    pattern[pdi] = fd;\n                    if (pdi > fdi) {\n                        pattern = pattern.slice(pdi);\n                    }\n                    else if (fdi > pdi) {\n                        file = file.slice(fdi);\n                    }\n                }\n            }\n        }\n        // resolve and reduce . and .. portions in the file as well.\n        // dont' need to do the second phase, because it's only one string[]\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            file = this.levelTwoFileOptimize(file);\n        }\n        this.debug('matchOne', this, { file, pattern });\n        this.debug('matchOne', file.length, pattern.length);\n        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {\n            this.debug('matchOne loop');\n            var p = pattern[pi];\n            var f = file[fi];\n            this.debug(pattern, p, f);\n            // should be impossible.\n            // some invalid regexp stuff in the set.\n            /* c8 ignore start */\n            if (p === false) {\n                return false;\n            }\n            /* c8 ignore stop */\n            if (p === exports.GLOBSTAR) {\n                this.debug('GLOBSTAR', [pattern, p, f]);\n                // \"**\"\n                // a/**/b/**/c would match the following:\n                // a/b/x/y/z/c\n                // a/x/y/z/b/c\n                // a/b/x/b/x/c\n                // a/b/c\n                // To do this, take the rest of the pattern after\n                // the **, and see if it would match the file remainder.\n                // If so, return success.\n                // If not, the ** \"swallows\" a segment, and try again.\n                // This is recursively awful.\n                //\n                // a/**/b/**/c matching a/b/x/y/z/c\n                // - a matches a\n                // - doublestar\n                //   - matchOne(b/x/y/z/c, b/**/c)\n                //     - b matches b\n                //     - doublestar\n                //       - matchOne(x/y/z/c, c) -> no\n                //       - matchOne(y/z/c, c) -> no\n                //       - matchOne(z/c, c) -> no\n                //       - matchOne(c, c) yes, hit\n                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n                    // options.dot is set.\n                    // . and .. are *never* matched by **, for explosively\n                    // exponential reasons.\n                    for (; fi < fl; fi++) {\n                        if (file[fi] === '.' ||\n                            file[fi] === '..' ||\n                            (!options.dot && file[fi].charAt(0) === '.'))\n                            return false;\n                    }\n                    return true;\n                }\n                // ok, let's see if we can swallow whatever we can.\n                while (fr < fl) {\n                    var swallowee = file[fr];\n                    this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee);\n                    // XXX remove this slice.  Just pass the start index.\n                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                        this.debug('globstar found match!', fr, fl, swallowee);\n                        // found a match.\n                        return true;\n                    }\n                    else {\n                        // can't swallow \".\" or \"..\" ever.\n                        // can only swallow \".foo\" when explicitly asked.\n                        if (swallowee === '.' ||\n                            swallowee === '..' ||\n                            (!options.dot && swallowee.charAt(0) === '.')) {\n                            this.debug('dot detected!', file, fr, pattern, pr);\n                            break;\n                        }\n                        // ** swallows a segment, and continue.\n                        this.debug('globstar swallow a segment, and continue');\n                        fr++;\n                    }\n                }\n                // no match was found.\n                // However, in partial mode, we can't say this is necessarily over.\n                /* c8 ignore start */\n                if (partial) {\n                    // ran out of file\n                    this.debug('\\n>>> no match, partial?', file, fr, pattern, pr);\n                    if (fr === fl) {\n                        return true;\n                    }\n                }\n                /* c8 ignore stop */\n                return false;\n            }\n            // something other than **\n            // non-magic patterns just have to match exactly\n            // patterns with magic have been turned into regexps.\n            let hit;\n            if (typeof p === 'string') {\n                hit = f === p;\n                this.debug('string match', p, f, hit);\n            }\n            else {\n                hit = p.test(f);\n                this.debug('pattern match', p, f, hit);\n            }\n            if (!hit)\n                return false;\n        }\n        // Note: ending in / means that we'll get a final \"\"\n        // at the end of the pattern.  This can only match a\n        // corresponding \"\" at the end of the file.\n        // If the file ends in /, then it can only match a\n        // a pattern that ends in /, unless the pattern just\n        // doesn't have any more for it. But, a/b/ should *not*\n        // match \"a/b/*\", even though \"\" matches against the\n        // [^/]*? pattern, except in partial mode, where it might\n        // simply not be reached yet.\n        // However, a/b/ should still satisfy a/*\n        // now either we fell off the end of the pattern, or we're done.\n        if (fi === fl && pi === pl) {\n            // ran out of pattern and filename at the same time.\n            // an exact hit!\n            return true;\n        }\n        else if (fi === fl) {\n            // ran out of file, but still had pattern left.\n            // this is ok if we're doing the match as part of\n            // a glob fs traversal.\n            return partial;\n        }\n        else if (pi === pl) {\n            // ran out of pattern, still have file left.\n            // this is only acceptable if we're on the very last\n            // empty segment of a file with a trailing slash.\n            // a/* should match a/b/\n            return fi === fl - 1 && file[fi] === '';\n            /* c8 ignore start */\n        }\n        else {\n            // should be unreachable.\n            throw new Error('wtf?');\n        }\n        /* c8 ignore stop */\n    }\n    braceExpand() {\n        return (0, exports.braceExpand)(this.pattern, this.options);\n    }\n    parse(pattern) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        const options = this.options;\n        // shortcuts\n        if (pattern === '**')\n            return exports.GLOBSTAR;\n        if (pattern === '')\n            return '';\n        // far and away, the most common glob pattern parts are\n        // *, *.*, and *.<ext>  Add a fast check method for those.\n        let m;\n        let fastTest = null;\n        if ((m = pattern.match(starRE))) {\n            fastTest = options.dot ? starTestDot : starTest;\n        }\n        else if ((m = pattern.match(starDotExtRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? starDotExtTestNocaseDot\n                    : starDotExtTestNocase\n                : options.dot\n                    ? starDotExtTestDot\n                    : starDotExtTest)(m[1]);\n        }\n        else if ((m = pattern.match(qmarksRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? qmarksTestNocaseDot\n                    : qmarksTestNocase\n                : options.dot\n                    ? qmarksTestDot\n                    : qmarksTest)(m);\n        }\n        else if ((m = pattern.match(starDotStarRE))) {\n            fastTest = options.dot ? starDotStarTestDot : starDotStarTest;\n        }\n        else if ((m = pattern.match(dotStarRE))) {\n            fastTest = dotStarTest;\n        }\n        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern();\n        if (fastTest && typeof re === 'object') {\n            // Avoids overriding in frozen environments\n            Reflect.defineProperty(re, 'test', { value: fastTest });\n        }\n        return re;\n    }\n    makeRe() {\n        if (this.regexp || this.regexp === false)\n            return this.regexp;\n        // at this point, this.set is a 2d array of partial\n        // pattern strings, or \"**\".\n        //\n        // It's better to use .match().  This function shouldn't\n        // be used, really, but it's pretty convenient sometimes,\n        // when you just want to work with a regex.\n        const set = this.set;\n        if (!set.length) {\n            this.regexp = false;\n            return this.regexp;\n        }\n        const options = this.options;\n        const twoStar = options.noglobstar\n            ? star\n            : options.dot\n                ? twoStarDot\n                : twoStarNoDot;\n        const flags = new Set(options.nocase ? ['i'] : []);\n        // regexpify non-globstar patterns\n        // if ** is only item, then we just do one twoStar\n        // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n        // if ** is last, append (\\/twoStar|) to previous\n        // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n        // then filter out GLOBSTAR symbols\n        let re = set\n            .map(pattern => {\n            const pp = pattern.map(p => {\n                if (p instanceof RegExp) {\n                    for (const f of p.flags.split(''))\n                        flags.add(f);\n                }\n                return typeof p === 'string'\n                    ? regExpEscape(p)\n                    : p === exports.GLOBSTAR\n                        ? exports.GLOBSTAR\n                        : p._src;\n            });\n            pp.forEach((p, i) => {\n                const next = pp[i + 1];\n                const prev = pp[i - 1];\n                if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {\n                    return;\n                }\n                if (prev === undefined) {\n                    if (next !== undefined && next !== exports.GLOBSTAR) {\n                        pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next;\n                    }\n                    else {\n                        pp[i] = twoStar;\n                    }\n                }\n                else if (next === undefined) {\n                    pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?';\n                }\n                else if (next !== exports.GLOBSTAR) {\n                    pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next;\n                    pp[i + 1] = exports.GLOBSTAR;\n                }\n            });\n            return pp.filter(p => p !== exports.GLOBSTAR).join('/');\n        })\n            .join('|');\n        // need to wrap in parens if we had more than one thing with |,\n        // otherwise only the first will be anchored to ^ and the last to $\n        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', ''];\n        // must match entire pattern\n        // ending in a * or ** will make it less strict.\n        re = '^' + open + re + close + '$';\n        // can match anything, as long as it's not this.\n        if (this.negate)\n            re = '^(?!' + re + ').+$';\n        try {\n            this.regexp = new RegExp(re, [...flags].join(''));\n            /* c8 ignore start */\n        }\n        catch (ex) {\n            // should be impossible\n            this.regexp = false;\n        }\n        /* c8 ignore stop */\n        return this.regexp;\n    }\n    slashSplit(p) {\n        // if p starts with // on windows, we preserve that\n        // so that UNC paths aren't broken.  Otherwise, any number of\n        // / characters are coalesced into one, unless\n        // preserveMultipleSlashes is set to true.\n        if (this.preserveMultipleSlashes) {\n            return p.split('/');\n        }\n        else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n            // add an extra '' for the one we lose\n            return ['', ...p.split(/\\/+/)];\n        }\n        else {\n            return p.split(/\\/+/);\n        }\n    }\n    match(f, partial = this.partial) {\n        this.debug('match', f, this.pattern);\n        // short-circuit in the case of busted things.\n        // comments, etc.\n        if (this.comment) {\n            return false;\n        }\n        if (this.empty) {\n            return f === '';\n        }\n        if (f === '/' && partial) {\n            return true;\n        }\n        const options = this.options;\n        // windows: need to use /, not \\\n        if (this.isWindows) {\n            f = f.split('\\\\').join('/');\n        }\n        // treat the test path as a set of pathparts.\n        const ff = this.slashSplit(f);\n        this.debug(this.pattern, 'split', ff);\n        // just ONE of the pattern sets in this.set needs to match\n        // in order for it to be valid.  If negating, then just one\n        // match means that we have failed.\n        // Either way, return on the first hit.\n        const set = this.set;\n        this.debug(this.pattern, 'set', set);\n        // Find the basename of the path by looking for the last non-empty segment\n        let filename = ff[ff.length - 1];\n        if (!filename) {\n            for (let i = ff.length - 2; !filename && i >= 0; i--) {\n                filename = ff[i];\n            }\n        }\n        for (let i = 0; i < set.length; i++) {\n            const pattern = set[i];\n            let file = ff;\n            if (options.matchBase && pattern.length === 1) {\n                file = [filename];\n            }\n            const hit = this.matchOne(file, pattern, partial);\n            if (hit) {\n                if (options.flipNegate) {\n                    return true;\n                }\n                return !this.negate;\n            }\n        }\n        // didn't get any hits.  this is success if it's a negative\n        // pattern, failure otherwise.\n        if (options.flipNegate) {\n            return false;\n        }\n        return this.negate;\n    }\n    static defaults(def) {\n        return exports.minimatch.defaults(def).Minimatch;\n    }\n}\nexports.Minimatch = Minimatch;\n/* c8 ignore start */\nvar ast_js_2 = __webpack_require__(/*! ./ast.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/ast.js\");\nObject.defineProperty(exports, \"AST\", ({ enumerable: true, get: function () { return ast_js_2.AST; } }));\nvar escape_js_2 = __webpack_require__(/*! ./escape.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/escape.js\");\nObject.defineProperty(exports, \"escape\", ({ enumerable: true, get: function () { return escape_js_2.escape; } }));\nvar unescape_js_2 = __webpack_require__(/*! ./unescape.js */ \"(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js\");\nObject.defineProperty(exports, \"unescape\", ({ enumerable: true, get: function () { return unescape_js_2.unescape; } }));\n/* c8 ignore stop */\nexports.minimatch.AST = ast_js_1.AST;\nexports.minimatch.Minimatch = Minimatch;\nexports.minimatch.escape = escape_js_1.escape;\nexports.minimatch.unescape = unescape_js_1.unescape;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unescape = void 0;\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nconst unescape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    return windowsPathsNoEscape\n        ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n        : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1');\n};\nexports.unescape = unescape;\n//# sourceMappingURL=unescape.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvdW5lc2NhcGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCO0FBQ0Esa0RBQWtELGFBQWE7QUFDL0Q7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixnQ0FBZ0MsSUFBSTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXIvRG9jdW1lbnRzL0dpdEh1Yi9ET0pNQVJLLUlOQy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvY29tbW9uanMvdW5lc2NhcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuZXNjYXBlID0gdm9pZCAwO1xuLyoqXG4gKiBVbi1lc2NhcGUgYSBzdHJpbmcgdGhhdCBoYXMgYmVlbiBlc2NhcGVkIHdpdGgge0BsaW5rIGVzY2FwZX0uXG4gKlxuICogSWYgdGhlIHtAbGluayB3aW5kb3dzUGF0aHNOb0VzY2FwZX0gb3B0aW9uIGlzIHVzZWQsIHRoZW4gc3F1YXJlLWJyYWNlXG4gKiBlc2NhcGVzIGFyZSByZW1vdmVkLCBidXQgbm90IGJhY2tzbGFzaCBlc2NhcGVzLiAgRm9yIGV4YW1wbGUsIGl0IHdpbGwgdHVyblxuICogdGhlIHN0cmluZyBgJ1sqXSdgIGludG8gYCpgLCBidXQgaXQgd2lsbCBub3QgdHVybiBgJ1xcXFwqJ2AgaW50byBgJyonYCxcbiAqIGJlY3Vhc2UgYFxcYCBpcyBhIHBhdGggc2VwYXJhdG9yIGluIGB3aW5kb3dzUGF0aHNOb0VzY2FwZWAgbW9kZS5cbiAqXG4gKiBXaGVuIGB3aW5kb3dzUGF0aHNOb0VzY2FwZWAgaXMgbm90IHNldCwgdGhlbiBib3RoIGJyYWNlIGVzY2FwZXMgYW5kXG4gKiBiYWNrc2xhc2ggZXNjYXBlcyBhcmUgcmVtb3ZlZC5cbiAqXG4gKiBTbGFzaGVzIChhbmQgYmFja3NsYXNoZXMgaW4gYHdpbmRvd3NQYXRoc05vRXNjYXBlYCBtb2RlKSBjYW5ub3QgYmUgZXNjYXBlZFxuICogb3IgdW5lc2NhcGVkLlxuICovXG5jb25zdCB1bmVzY2FwZSA9IChzLCB7IHdpbmRvd3NQYXRoc05vRXNjYXBlID0gZmFsc2UsIH0gPSB7fSkgPT4ge1xuICAgIHJldHVybiB3aW5kb3dzUGF0aHNOb0VzY2FwZVxuICAgICAgICA/IHMucmVwbGFjZSgvXFxbKFteXFwvXFxcXF0pXFxdL2csICckMScpXG4gICAgICAgIDogcy5yZXBsYWNlKC8oKD8hXFxcXCkufF4pXFxbKFteXFwvXFxcXF0pXFxdL2csICckMSQyJykucmVwbGFjZSgvXFxcXChbXlxcL10pL2csICckMScpO1xufTtcbmV4cG9ydHMudW5lc2NhcGUgPSB1bmVzY2FwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuZXNjYXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/node_modules/minimatch/dist/commonjs/unescape.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/opentelemetry/build/cjs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nfunction getParentSpanId(span) {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId ;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext )?.spanId;\n  }\n\n  return undefined;\n}\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!getParentSpanId(castSpan);\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[semanticConventions.ATTR_URL_FULL] || span.attributes[semanticConventions.SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || span.attributes[semanticConventions.SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = core.parseUrl(maybeUrlAttribute);\n\n      data.url = core.getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client class with things we need for OpenTelemetry support.\n * Make sure that the Client class passed in is non-abstract!\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  // @ts-expect-error We just assume that this is non-abstract, if you pass in an abstract class this would make it non-abstract\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = core.SDK_VERSION;\n      const tracer = api.trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      await provider?.forceFlush();\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return api.SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nconst SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = api.createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  core.addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return core.isSentryRequestUrl(httpUrl.toString(), core.getClient());\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === api.TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || attributes[semanticConventions.SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[semanticConventions.SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[semanticConventions.SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[semanticConventions.SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[semanticConventions.SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[semanticConventions.SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case api.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case api.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === api.SpanKind.CLIENT || kind === api.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[semanticConventions.SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? core.parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? core.getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === api.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: core.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: core.stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(\n  originalName,\n  attributes,\n  fallbackSource = 'custom',\n)\n\n {\n  const source = (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || fallbackSource;\n  const description = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = core.spanToJSON(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (core.hasSpansEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return api.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? core.dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  const traceStateBase = new core$1.TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends core$1.W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new core.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (core$1.isTracingSuppressed(context)) {\n      DEBUG_BUILD && core.debug.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = api.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = core.getClient()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD &&\n        core.debug.log('[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:', url);\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = core.parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${core.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== api.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, core.generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(\n  url,\n  tracePropagationTargets,\n  decisionMap,\n) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && core.debug.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = core.stringMatchesSomePattern(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD && !decision && core.debug.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n * The additional options can be passed to override the scope and client that is otherwise derived from the context.\n */\nfunction getInjectionData(\n  context,\n  options = {},\n)\n\n {\n  const span = api.trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = options.scope || getScopesFromContext(context)?.scope || core.getCurrentScope();\n  const client = options.client || core.getClient();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? core.getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = core.propagationContextFromHeaders(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  const client = core.getClient();\n  const incomingDsc = core.baggageHeaderToDynamicSamplingContext(baggage);\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId || (client && !core.shouldContinueTrace(client, incomingDsc?.org_id))) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return api.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return api.context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : core.getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : core.getIsolationScope(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = core.spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[semanticConventions.SEMATTRS_HTTP_URL] || spanData[semanticConventions.ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (core.spanToJSON(span).status === undefined) {\n            span.setStatus({ code: api.SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? api.trace.setSpan(api.context.active(), span) : api.trace.deleteSpan(api.context.active());\n  return api.context.with(newContextWithActiveSpan, () => callback(core.getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = core.getClient();\n  return client?.tracer || api.trace.getTracer('@sentry/opentelemetry', core.SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = api.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = api.trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = core.getRootSpan(parentSpan);\n  const dsc = core.getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = api.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return api.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(api.context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implementation here because we need an OTEL-specific way to get the span from a scope.\n */\nfunction getTraceContextForScope(\n  client,\n  scope,\n) {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && api.trace.getSpan(ctx);\n\n  const traceContext = span ? core.spanToTraceContext(span) : core.getTraceContextFromScope(scope);\n\n  const dynamicSamplingContext = span\n    ? core.getDynamicSamplingContextFromSpan(span)\n    : core.getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = core$1.suppressTracing(api.context.active());\n  return api.context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: core.spanToTraceContext(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = core.getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({\n  span,\n  scope,\n  client,\n} = {}) {\n  let ctx = (scope && getContextFromScope(scope)) ?? api.context.active();\n\n  if (span) {\n    const { scope } = core.getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || api.trace.setSpan(api.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx, { scope, client });\n\n  return {\n    'sentry-trace': core.generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: core.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = getContextFromScope(scope) || api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  core.setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || core.getCurrentScope();\n      const currentIsolationScope = currentScopes?.isolationScope || core.getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === api.SpanStatusCode.OK) {\n      return { code: core.SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === api.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: core.SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === api.SpanStatusCode.UNSET) {\n    return { code: core.SPAN_STATUS_OK };\n  } else {\n    return { code: core.SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[semanticConventions.SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return core.getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: core.SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n  // Essentially a a set of span ids that are already sent. The values are expiration\n  // times in this cache so we don't hold onto them indefinitely.\n\n  /* Internally, we use a debounced flush to give some wiggle room to the span processor to accumulate more spans. */\n\n   constructor(options\n\n) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n    this._sentSpans = new Map();\n    this._debouncedFlush = core.debounce(this.flush.bind(this), 1, { maxWait: 100 });\n  }\n\n  /**\n   * Export a single span.\n   * This is called by the span processor whenever a span is ended.\n   */\n   export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD &&\n          core.debug.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    const localParentId = getLocalParentId(span);\n    if (!localParentId || this._sentSpans.has(localParentId)) {\n      this._debouncedFlush();\n    }\n  }\n\n  /**\n   * Try to flush any pending spans immediately.\n   * This is called internally by the exporter (via _debouncedFlush),\n   * but can also be triggered externally if we force-flush.\n   */\n   flush() {\n    const finishedSpans = this._finishedSpanBuckets.flatMap(bucket => (bucket ? Array.from(bucket.spans) : []));\n\n    this._flushSentSpanCache();\n    const sentSpans = this._maybeSend(finishedSpans);\n\n    const sentSpanCount = sentSpans.size;\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n    DEBUG_BUILD &&\n      core.debug.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    const expirationDate = Date.now() + DEFAULT_TIMEOUT * 1000;\n\n    for (const span of sentSpans) {\n      this._sentSpans.set(span.spanContext().spanId, expirationDate);\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    }\n    // Cancel a pending debounced flush, if there is one\n    // This can be relevant if we directly flush, circumventing the debounce\n    // in that case, we want to cancel any pending debounced flush\n    this._debouncedFlush.cancel();\n  }\n\n  /**\n   * Clear the exporter.\n   * This is called when the span processor is shut down.\n   */\n   clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._sentSpans.clear();\n    this._debouncedFlush.cancel();\n  }\n\n  /**\n   * Send the given spans, but only if they are part of a finished transaction.\n   *\n   * Returns the sent spans.\n   * Spans remain unsent when their parent span is not yet finished.\n   * This will happen regularly, as child spans are generally finished before their parents.\n   * But it _could_ also happen because, for whatever reason, a parent span was lost.\n   * In this case, we'll eventually need to clean this up.\n   */\n   _maybeSend(spans) {\n    const grouped = groupSpansWithParents(spans);\n    const sentSpans = new Set();\n\n    const rootNodes = this._getCompletedRootNodes(grouped);\n\n    for (const root of rootNodes) {\n      const span = root.span;\n      sentSpans.add(span);\n      const transactionEvent = createTransactionForOtelSpan(span);\n\n      // Add an attribute to the transaction event to indicate that this transaction is an orphaned transaction\n      if (root.parentNode && this._sentSpans.has(root.parentNode.id)) {\n        const traceData = transactionEvent.contexts?.trace?.data;\n        if (traceData) {\n          traceData['sentry.parent_span_already_sent'] = true;\n        }\n      }\n\n      // We'll recursively add all the child spans to this array\n      const spans = transactionEvent.spans || [];\n\n      for (const child of root.children) {\n        createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n      }\n\n      // spans.sort() mutates the array, but we do not use this anymore after this point\n      // so we can safely mutate it here\n      transactionEvent.spans =\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans;\n\n      const measurements = core.timedEventsToMeasurements(span.events);\n      if (measurements) {\n        transactionEvent.measurements = measurements;\n      }\n\n      core.captureEvent(transactionEvent);\n    }\n\n    return sentSpans;\n  }\n\n  /** Remove \"expired\" span id entries from the _sentSpans cache. */\n   _flushSentSpanCache() {\n    const currentTimestamp = Date.now();\n    // Note, it is safe to delete items from the map as we go: https://stackoverflow.com/a/35943995/90297\n    for (const [spanId, expirationTime] of this._sentSpans.entries()) {\n      if (expirationTime <= currentTimestamp) {\n        this._sentSpans.delete(spanId);\n      }\n    }\n  }\n\n  /** Check if a node is a completed root node or a node whose parent has already been sent */\n   _nodeIsCompletedRootNodeOrHasSentParent(node) {\n    return !!node.span && (!node.parentNode || this._sentSpans.has(node.parentNode.id));\n  }\n\n  /** Get all completed root nodes from a list of nodes */\n   _getCompletedRootNodes(nodes) {\n    // TODO: We should be able to remove the explicit `node is SpanNodeCompleted` type guard\n    //       once we stop supporting TS < 5.5\n    return nodes.filter((node) => this._nodeIsCompletedRootNodeOrHasSentParent(node));\n  }\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = core.getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = {\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    links: core.convertSpanLinksForEnvelope(links),\n  };\n\n  const statusCode = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: core.spanTimeInputToSeconds(span.startTime),\n    timestamp: core.spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(span ),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: core.spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: core.spanTimeInputToSeconds(endTime) || undefined,\n    status: core.getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: core.timedEventsToMeasurements(span.events),\n    links: core.convertSpanLinksForEnvelope(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== api.SpanKind.INTERNAL) {\n    data['otel.kind'] = api.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = api.trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    core.addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === api.ROOT_CONTEXT) {\n    scopes = {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    core.setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  core.logSpanStart(span);\n\n  const client = core.getClient();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span) {\n  core.logSpanEnd(span);\n\n  const client = core.getClient();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!core.hasSpansEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[semanticConventions.SEMATTRS_HTTP_METHOD] || spanAttributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === api.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? sdkTraceBase.SamplingDecision.RECORD_AND_SAMPLED : sdkTraceBase.SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n    const sampleRand = core.parseSampleRate(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = core.sampleSpan(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: core.parseSampleRate(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && core.debug.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: sdkTraceBase.SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD && core.debug.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? sdkTraceBase.SamplingDecision.RECORD_AND_SAMPLED : sdkTraceBase.SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (api.isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD &&\n        core.debug.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && core.debug.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}\n\n) {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: sdkTraceBase.SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === sdkTraceBase.SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = api.trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new core$1.TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[semanticConventions.SEMATTRS_HTTP_URL] || spanAttributes[semanticConventions.ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = api.trace.getSpan(context);\n  return span && api.isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\nexports.getClient = core.getClient;\nexports.getDynamicSamplingContextFromSpan = core.getDynamicSamplingContextFromSpan;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION;\nexports.SentryPropagator = SentryPropagator;\nexports.SentrySampler = SentrySampler;\nexports.SentrySpanProcessor = SentrySpanProcessor;\nexports.continueTrace = continueTrace;\nexports.enhanceDscWithOpenTelemetryRootSpanName = enhanceDscWithOpenTelemetryRootSpanName;\nexports.getActiveSpan = getActiveSpan;\nexports.getRequestSpanData = getRequestSpanData;\nexports.getScopesFromContext = getScopesFromContext;\nexports.getSpanKind = getSpanKind;\nexports.getTraceContextForScope = getTraceContextForScope;\nexports.isSentryRequestSpan = isSentryRequestSpan;\nexports.openTelemetrySetupCheck = openTelemetrySetupCheck;\nexports.setOpenTelemetryContextAsyncContextStrategy = setOpenTelemetryContextAsyncContextStrategy;\nexports.setupEventContextTrace = setupEventContextTrace;\nexports.shouldPropagateTraceForUrl = shouldPropagateTraceForUrl;\nexports.spanHasAttributes = spanHasAttributes;\nexports.spanHasEvents = spanHasEvents;\nexports.spanHasKind = spanHasKind;\nexports.spanHasName = spanHasName;\nexports.spanHasParentId = spanHasParentId;\nexports.spanHasStatus = spanHasStatus;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;\nexports.wrapClientClass = wrapClientClass;\nexports.wrapContextManagerClass = wrapContextManagerClass;\nexports.wrapSamplingDecision = wrapSamplingDecision;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvb3BlbnRlbGVtZXRyeS9idWlsZC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNEJBQTRCLG1CQUFPLENBQUMsK0hBQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxZQUFZLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3hDLGVBQWUsbUJBQU8sQ0FBQywrRkFBcUI7QUFDNUMscUJBQXFCLG1CQUFPLENBQUMsbUhBQStCOztBQUU1RDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxhQUFhOztBQUV2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUseUJBQXlCOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msa0NBQWtDO0FBQ3hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDRCQUE0QjtBQUNoRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0Msa0JBQWtCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLElBQUksd0JBQXdCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsMENBQTBDOztBQUVwRDtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTtBQUNBLDZCQUE2QixZQUFZLEVBQUUsUUFBUTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpQkFBaUIsR0FBRyxrRUFBa0U7QUFDL0Y7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLE9BQU87O0FBRWxDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFVBQVUsc0JBQXNCO0FBQ2hDLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0JBQWdCLDhCQUE4QixLQUFLLGtCQUFrQjtBQUNyRTtBQUNBOztBQUVBLFlBQVksS0FBSztBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLGNBQWMsNkRBQTZEO0FBQ3ZGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUVoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5RkFBeUY7O0FBRXpGLFlBQVksbURBQW1EOztBQUUvRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRCxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsK0JBQStCLEVBQUUsT0FBTyxLQUFLLGlCQUFpQjtBQUM3RjtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRSxzQkFBc0I7QUFDakc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLHNCQUFzQjtBQUMxQjtBQUNBOztBQUVBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usd0JBQXdCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHFDQUFxQzs7QUFFL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0NBQWdDO0FBQzdEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHFDQUFxQzs7QUFFL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0NBQWdDO0FBQzdEO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxnQkFBZ0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUscUNBQXFDOztBQUUvQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSx5Q0FBeUM7O0FBRW5EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsa0JBQWtCO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTjs7QUFFQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxtREFBbUQsMEJBQTBCLGVBQWU7O0FBRXRHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyx3QkFBd0I7QUFDMUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsb0NBQW9DO0FBQ2pGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDLGtCQUFrQjtBQUN6RDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakIsUUFBUTtBQUNSLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYixJQUFJO0FBQ0osYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsY0FBYztBQUNuRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtCQUFrQixnREFBZ0QsOEJBQThCO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsZUFBZSxTQUFTLHdCQUF3QjtBQUNqRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxtREFBbUQ7QUFDN0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLFFBQVE7QUFDbEIsVUFBVSxxQ0FBcUM7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZEQUE2RCxZQUFZLDRCQUE0Qjs7QUFFckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSx3Q0FBd0M7O0FBRWxELFVBQVUsMkNBQTJDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBLFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsMEVBQTBFOztBQUVwRjtBQUNBOztBQUVBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsOENBQThDO0FBQ2xGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsOENBQThDO0FBQ2xGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsOENBQThDO0FBQ2xGOztBQUVBLFlBQVksaUJBQWlCOztBQUU3QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0EsMkZBQTJGLE9BQU8sUUFBUSxTQUFTOztBQUVuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLFNBQVMsSUFBSSxjQUFjO0FBQy9HO0FBQ0E7O0FBRUE7QUFDQSx3RkFBd0YsU0FBUyxJQUFJLGNBQWM7QUFDbkg7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsMEJBQTBCO0FBQzdGOztBQUVBO0FBQ0EsbUVBQW1FLFdBQVc7QUFDOUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYTtBQUNiOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQix5Q0FBeUM7QUFDekMsbURBQW1EO0FBQ25ELHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckIsMkJBQTJCO0FBQzNCLHFCQUFxQjtBQUNyQiwrQ0FBK0M7QUFDL0MscUJBQXFCO0FBQ3JCLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsK0JBQStCO0FBQy9CLG1EQUFtRDtBQUNuRCw4QkFBOEI7QUFDOUIsa0NBQWtDO0FBQ2xDLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQix1QkFBdUI7QUFDdkIscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixpQkFBaUI7QUFDakIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLCtCQUErQjtBQUMvQiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VyL0RvY3VtZW50cy9HaXRIdWIvRE9KTUFSSy1JTkMuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L29wZW50ZWxlbWV0cnkvYnVpbGQvY2pzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29yZScpO1xuY29uc3Qgc2RrVHJhY2VCYXNlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UnKTtcblxuLyoqIElmIHRoaXMgYXR0cmlidXRlIGlzIHRydWUsIGl0IG1lYW5zIHRoYXQgdGhlIHBhcmVudCBpcyBhIHJlbW90ZSBzcGFuLiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9QQVJFTlRfSVNfUkVNT1RFID0gJ3NlbnRyeS5wYXJlbnRJc1JlbW90ZSc7XG5cbi8vIFRoZXNlIGFyZSBub3Qgc3RhbmRhcmRpemVkIHlldCwgYnV0IHVzZWQgYnkgdGhlIGdyYXBocWwgaW5zdHJ1bWVudGF0aW9uXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OID0gJ3NlbnRyeS5ncmFwaHFsLm9wZXJhdGlvbic7XG5cbi8qKlxuICogR2V0IHRoZSBwYXJlbnQgc3BhbiBpZCBmcm9tIGEgc3Bhbi5cbiAqIEluIE9UZWwgdjEsIHRoZSBwYXJlbnQgc3BhbiBpZCBpcyBhY2Nlc3NlZCBhcyBgcGFyZW50U3BhbklkYFxuICogSW4gT1RlbCB2MiwgdGhlIHBhcmVudCBzcGFuIGlkIGlzIGFjY2Vzc2VkIGFzIGBzcGFuSWRgIG9uIHRoZSBgcGFyZW50U3BhbkNvbnRleHRgXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudFNwYW5JZChzcGFuKSB7XG4gIGlmICgncGFyZW50U3BhbklkJyBpbiBzcGFuKSB7XG4gICAgcmV0dXJuIHNwYW4ucGFyZW50U3BhbklkIDtcbiAgfSBlbHNlIGlmICgncGFyZW50U3BhbkNvbnRleHQnIGluIHNwYW4pIHtcbiAgICByZXR1cm4gKHNwYW4ucGFyZW50U3BhbkNvbnRleHQgKT8uc3BhbklkO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIGdpdmVuIHNwYW4gaGFzIGF0dHJpYnV0ZXMuXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBiYXNlIGBTcGFuYCB0eXBlIGRvZXMgbm90IGhhdmUgYXR0cmlidXRlcyxcbiAqIHNvIGluIHBsYWNlcyB3aGVyZSB3ZSBhcmUgcGFzc2VkIGEgZ2VuZXJpYyBzcGFuLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIHdhbnQgdG8gYWNjZXNzIHRoZW0uXG4gKi9cbmZ1bmN0aW9uIHNwYW5IYXNBdHRyaWJ1dGVzKFxuICBzcGFuLFxuKSB7XG4gIGNvbnN0IGNhc3RTcGFuID0gc3BhbiA7XG4gIHJldHVybiAhIWNhc3RTcGFuLmF0dHJpYnV0ZXMgJiYgdHlwZW9mIGNhc3RTcGFuLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gc3BhbiBoYXMgYSBraW5kLlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYmFzZSBgU3BhbmAgdHlwZSBkb2VzIG5vdCBoYXZlIGEga2luZCxcbiAqIHNvIGluIHBsYWNlcyB3aGVyZSB3ZSBhcmUgcGFzc2VkIGEgZ2VuZXJpYyBzcGFuLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIHdhbnQgdG8gYWNjZXNzIGl0LlxuICovXG5mdW5jdGlvbiBzcGFuSGFzS2luZChzcGFuKSB7XG4gIGNvbnN0IGNhc3RTcGFuID0gc3BhbiA7XG4gIHJldHVybiB0eXBlb2YgY2FzdFNwYW4ua2luZCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBnaXZlbiBzcGFuIGhhcyBhIHN0YXR1cy5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJhc2UgYFNwYW5gIHR5cGUgZG9lcyBub3QgaGF2ZSBhIHN0YXR1cyxcbiAqIHNvIGluIHBsYWNlcyB3aGVyZSB3ZSBhcmUgcGFzc2VkIGEgZ2VuZXJpYyBzcGFuLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIHdhbnQgdG8gYWNjZXNzIGl0LlxuICovXG5mdW5jdGlvbiBzcGFuSGFzU3RhdHVzKFxuICBzcGFuLFxuKSB7XG4gIGNvbnN0IGNhc3RTcGFuID0gc3BhbiA7XG4gIHJldHVybiAhIWNhc3RTcGFuLnN0YXR1cztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIGdpdmVuIHNwYW4gaGFzIGEgbmFtZS5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJhc2UgYFNwYW5gIHR5cGUgZG9lcyBub3QgaGF2ZSBhIG5hbWUsXG4gKiBzbyBpbiBwbGFjZXMgd2hlcmUgd2UgYXJlIHBhc3NlZCBhIGdlbmVyaWMgc3Bhbiwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSB3YW50IHRvIGFjY2VzcyBpdC5cbiAqL1xuZnVuY3Rpb24gc3Bhbkhhc05hbWUoc3Bhbikge1xuICBjb25zdCBjYXN0U3BhbiA9IHNwYW4gO1xuICByZXR1cm4gISFjYXN0U3Bhbi5uYW1lO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gc3BhbiBoYXMgYSBraW5kLlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYmFzZSBgU3BhbmAgdHlwZSBkb2VzIG5vdCBoYXZlIGEga2luZCxcbiAqIHNvIGluIHBsYWNlcyB3aGVyZSB3ZSBhcmUgcGFzc2VkIGEgZ2VuZXJpYyBzcGFuLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIHdhbnQgdG8gYWNjZXNzIGl0LlxuICovXG5mdW5jdGlvbiBzcGFuSGFzUGFyZW50SWQoXG4gIHNwYW4sXG4pIHtcbiAgY29uc3QgY2FzdFNwYW4gPSBzcGFuIDtcbiAgcmV0dXJuICEhZ2V0UGFyZW50U3BhbklkKGNhc3RTcGFuKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIGdpdmVuIHNwYW4gaGFzIGV2ZW50cy5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJhc2UgYFNwYW5gIHR5cGUgZG9lcyBub3QgaGF2ZSBldmVudHMsXG4gKiBzbyBpbiBwbGFjZXMgd2hlcmUgd2UgYXJlIHBhc3NlZCBhIGdlbmVyaWMgc3Bhbiwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSB3YW50IHRvIGFjY2VzcyBpdC5cbiAqL1xuZnVuY3Rpb24gc3Bhbkhhc0V2ZW50cyhcbiAgc3Bhbixcbikge1xuICBjb25zdCBjYXN0U3BhbiA9IHNwYW4gO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjYXN0U3Bhbi5ldmVudHMpO1xufVxuXG4vKipcbiAqIEdldCBzYW5pdGl6aWVkIHJlcXVlc3QgZGF0YSBmcm9tIGFuIE9URUwgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFNwYW5EYXRhKHNwYW4pIHtcbiAgLy8gVGhlIGJhc2UgYFNwYW5gIHR5cGUgaGFzIG5vIGBhdHRyaWJ1dGVzYCwgc28gd2UgbmVlZCB0byBndWFyZCBoZXJlIGFnYWluc3QgdGhhdFxuICBpZiAoIXNwYW5IYXNBdHRyaWJ1dGVzKHNwYW4pKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IG1heWJlVXJsQXR0cmlidXRlID0gKHNwYW4uYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfVVJMX0ZVTExdIHx8IHNwYW4uYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLlNFTUFUVFJTX0hUVFBfVVJMXSlcblxuO1xuXG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgdXJsOiBtYXliZVVybEF0dHJpYnV0ZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAnaHR0cC5tZXRob2QnOiAoc3Bhbi5hdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EXSB8fCBzcGFuLmF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19IVFRQX01FVEhPRF0pXG5cbixcbiAgfTtcblxuICAvLyBEZWZhdWx0IHRvIEdFVCBpZiBVUkwgaXMgc2V0IGJ1dCBtZXRob2QgaXMgbm90XG4gIGlmICghZGF0YVsnaHR0cC5tZXRob2QnXSAmJiBkYXRhLnVybCkge1xuICAgIGRhdGFbJ2h0dHAubWV0aG9kJ10gPSAnR0VUJztcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBtYXliZVVybEF0dHJpYnV0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHVybCA9IGNvcmUucGFyc2VVcmwobWF5YmVVcmxBdHRyaWJ1dGUpO1xuXG4gICAgICBkYXRhLnVybCA9IGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHVybCk7XG5cbiAgICAgIGlmICh1cmwuc2VhcmNoKSB7XG4gICAgICAgIGRhdGFbJ2h0dHAucXVlcnknXSA9IHVybC5zZWFyY2g7XG4gICAgICB9XG4gICAgICBpZiAodXJsLmhhc2gpIHtcbiAgICAgICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gdXJsLmhhc2g7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vLyBUeXBlc2NyaXB0IGNvbXBsYWlucyBpZiB3ZSBkbyBub3QgdXNlIGAuLi5hcmdzOiBhbnlbXWAgZm9yIHRoZSBtaXhpbiwgd2l0aDpcbi8vIEEgbWl4aW4gY2xhc3MgbXVzdCBoYXZlIGEgY29uc3RydWN0b3Igd2l0aCBhIHNpbmdsZSByZXN0IHBhcmFtZXRlciBvZiB0eXBlICdhbnlbXScudHMoMjU0NSlcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBXcmFwIGFuIENsaWVudCBjbGFzcyB3aXRoIHRoaW5ncyB3ZSBuZWVkIGZvciBPcGVuVGVsZW1ldHJ5IHN1cHBvcnQuXG4gKiBNYWtlIHN1cmUgdGhhdCB0aGUgQ2xpZW50IGNsYXNzIHBhc3NlZCBpbiBpcyBub24tYWJzdHJhY3QhXG4gKlxuICogVXNhZ2U6XG4gKiBjb25zdCBPcGVuVGVsZW1ldHJ5Q2xpZW50ID0gZ2V0V3JhcHBlZENsaWVudENsYXNzKE5vZGVDbGllbnQpO1xuICogY29uc3QgY2xpZW50ID0gbmV3IE9wZW5UZWxlbWV0cnlDbGllbnQob3B0aW9ucyk7XG4gKi9cbmZ1bmN0aW9uIHdyYXBDbGllbnRDbGFzc1xuXG4oQ2xpZW50Q2xhc3MpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBqdXN0IGFzc3VtZSB0aGF0IHRoaXMgaXMgbm9uLWFic3RyYWN0LCBpZiB5b3UgcGFzcyBpbiBhbiBhYnN0cmFjdCBjbGFzcyB0aGlzIHdvdWxkIG1ha2UgaXQgbm9uLWFic3RyYWN0XG4gIGNsYXNzIE9wZW5UZWxlbWV0cnlDbGllbnQgZXh0ZW5kcyBDbGllbnRDbGFzcyAge1xuXG4gICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8qKiBHZXQgdGhlIE9URUwgdHJhY2VyLiAqL1xuICAgICBnZXQgdHJhY2VyKCkge1xuICAgICAgaWYgKHRoaXMuX3RyYWNlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhY2VyO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuYW1lID0gJ0BzZW50cnkvb3BlbnRlbGVtZXRyeSc7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gY29yZS5TREtfVkVSU0lPTjtcbiAgICAgIGNvbnN0IHRyYWNlciA9IGFwaS50cmFjZS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbik7XG4gICAgICB0aGlzLl90cmFjZXIgPSB0cmFjZXI7XG5cbiAgICAgIHJldHVybiB0cmFjZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLnRyYWNlUHJvdmlkZXI7XG4gICAgICBhd2FpdCBwcm92aWRlcj8uZm9yY2VGbHVzaCgpO1xuICAgICAgcmV0dXJuIHN1cGVyLmZsdXNoKHRpbWVvdXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPcGVuVGVsZW1ldHJ5Q2xpZW50IDtcbn1cbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG4vKipcbiAqIEdldCB0aGUgc3BhbiBraW5kIGZyb20gYSBzcGFuLlxuICogRm9yIHdoYXRldmVyIHJlYXNvbiwgdGhpcyBpcyBub3QgcHVibGljIEFQSSBvbiB0aGUgZ2VuZXJpYyBcIlNwYW5cIiB0eXBlLFxuICogc28gd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBhY3R1YWxseSBoYXZlIGEgYFNES1RyYWNlQmFzZVNwYW5gIHdoZXJlIHdlIGNhbiBmZXRjaCB0aGlzIGZyb20uXG4gKiBPdGhlcndpc2UsIHdlIGZhbGwgYmFjayB0byBgU3BhbktpbmQuSU5URVJOQUxgLlxuICovXG5mdW5jdGlvbiBnZXRTcGFuS2luZChzcGFuKSB7XG4gIGlmIChzcGFuSGFzS2luZChzcGFuKSkge1xuICAgIHJldHVybiBzcGFuLmtpbmQ7XG4gIH1cblxuICByZXR1cm4gYXBpLlNwYW5LaW5kLklOVEVSTkFMO1xufVxuXG5jb25zdCBTRU5UUllfVFJBQ0VfSEVBREVSID0gJ3NlbnRyeS10cmFjZSc7XG5jb25zdCBTRU5UUllfQkFHR0FHRV9IRUFERVIgPSAnYmFnZ2FnZSc7XG5cbmNvbnN0IFNFTlRSWV9UUkFDRV9TVEFURV9EU0MgPSAnc2VudHJ5LmRzYyc7XG5jb25zdCBTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HID0gJ3NlbnRyeS5zYW1wbGVkX25vdF9yZWNvcmRpbmcnO1xuY29uc3QgU0VOVFJZX1RSQUNFX1NUQVRFX1VSTCA9ICdzZW50cnkudXJsJztcbmNvbnN0IFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVfUkFORCA9ICdzZW50cnkuc2FtcGxlX3JhbmQnO1xuY29uc3QgU0VOVFJZX1RSQUNFX1NUQVRFX1NBTVBMRV9SQVRFID0gJ3NlbnRyeS5zYW1wbGVfcmF0ZSc7XG5cbmNvbnN0IFNFTlRSWV9TQ09QRVNfQ09OVEVYVF9LRVkgPSBhcGkuY3JlYXRlQ29udGV4dEtleSgnc2VudHJ5X3Njb3BlcycpO1xuXG5jb25zdCBTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkgPSBhcGkuY3JlYXRlQ29udGV4dEtleSgnc2VudHJ5X2ZvcmtfaXNvbGF0aW9uX3Njb3BlJyk7XG5cbmNvbnN0IFNFTlRSWV9GT1JLX1NFVF9TQ09QRV9DT05URVhUX0tFWSA9IGFwaS5jcmVhdGVDb250ZXh0S2V5KCdzZW50cnlfZm9ya19zZXRfc2NvcGUnKTtcblxuY29uc3QgU0VOVFJZX0ZPUktfU0VUX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSA9IGFwaS5jcmVhdGVDb250ZXh0S2V5KCdzZW50cnlfZm9ya19zZXRfaXNvbGF0aW9uX3Njb3BlJyk7XG5cbmNvbnN0IFNDT1BFX0NPTlRFWFRfRklFTEQgPSAnX3Njb3BlQ29udGV4dCc7XG5cbi8qKlxuICogVHJ5IHRvIGdldCB0aGUgY3VycmVudCBzY29wZXMgZnJvbSB0aGUgZ2l2ZW4gT1RFTCBjb250ZXh0LlxuICogVGhpcyByZXF1aXJlcyBhIENvbnRleHQgTWFuYWdlciB0aGF0IHdhcyB3cmFwcGVkIHdpdGggZ2V0V3JhcHBlZENvbnRleHRNYW5hZ2VyLlxuICovXG5mdW5jdGlvbiBnZXRTY29wZXNGcm9tQ29udGV4dChjb250ZXh0KSB7XG4gIHJldHVybiBjb250ZXh0LmdldFZhbHVlKFNFTlRSWV9TQ09QRVNfQ09OVEVYVF9LRVkpIDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGN1cnJlbnQgc2NvcGVzIG9uIGFuIE9URUwgY29udGV4dC5cbiAqIFRoaXMgd2lsbCByZXR1cm4gYSBmb3JrZWQgY29udGV4dCB3aXRoIHRoZSBQcm9wYWdhdGlvbiBDb250ZXh0IHNldC5cbiAqL1xuZnVuY3Rpb24gc2V0U2NvcGVzT25Db250ZXh0KGNvbnRleHQsIHNjb3Blcykge1xuICByZXR1cm4gY29udGV4dC5zZXRWYWx1ZShTRU5UUllfU0NPUEVTX0NPTlRFWFRfS0VZLCBzY29wZXMpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29udGV4dCBvbiB0aGUgc2NvcGUgc28gd2UgY2FuIGxhdGVyIGxvb2sgaXQgdXAuXG4gKiBXZSBuZWVkIHRoaXMgdG8gZ2V0IHRoZSBjb250ZXh0IGZyb20gdGhlIHNjb3BlIGluIHRoZSBgdHJhY2VgIGZ1bmN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gc2V0Q29udGV4dE9uU2NvcGUoc2NvcGUsIGNvbnRleHQpIHtcbiAgY29yZS5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc2NvcGUsIFNDT1BFX0NPTlRFWFRfRklFTEQsIGNvbnRleHQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY29udGV4dCByZWxhdGVkIHRvIGEgc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHRGcm9tU2NvcGUoc2NvcGUpIHtcbiAgcmV0dXJuIChzY29wZSApW1NDT1BFX0NPTlRFWFRfRklFTERdO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb3RlbFNwYW4gQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBPVEVMIFNwYW4gaXMgYW4gaHR0cCByZXF1ZXN0IHRvIHNlbnRyeS5cbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZnVuY3Rpb24gaXNTZW50cnlSZXF1ZXN0U3BhbihzcGFuKSB7XG4gIGlmICghc3Bhbkhhc0F0dHJpYnV0ZXMoc3BhbikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB7IGF0dHJpYnV0ZXMgfSA9IHNwYW47XG5cbiAgLy8gYEFUVFJfVVJMX0ZVTExgIGlzIHRoZSBuZXcgYXR0cmlidXRlLCBidXQgd2Ugc3RpbGwgc3VwcG9ydCB0aGUgb2xkIG9uZSwgYEFUVFJfSFRUUF9VUkxgLCBmb3Igbm93LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgaHR0cFVybCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19IVFRQX1VSTF0gfHwgYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfVVJMX0ZVTExdO1xuXG4gIGlmICghaHR0cFVybCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb3JlLmlzU2VudHJ5UmVxdWVzdFVybChodHRwVXJsLnRvU3RyaW5nKCksIGNvcmUuZ2V0Q2xpZW50KCkpO1xufVxuXG4vKipcbiAqIE9wZW5UZWxlbWV0cnkgb25seSBrbm93cyBhYm91dCBTQU1QTEVEIG9yIE5PTkUgZGVjaXNpb24sXG4gKiBidXQgZm9yIHVzIGl0IGlzIGltcG9ydGFudCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdW5zZXQgYW5kIHVuc2FtcGxlZC5cbiAqXG4gKiBCb3RoIG9mIHRoZXNlIGFyZSBpZGVudGlmaWVkIGFzIGB0cmFjZUZsYWdzID09PSBUcmFjZWdGbGFncy5OT05FYCxcbiAqIGJ1dCB3ZSBhZGRpdGlvbmFsbHkgbG9vayBhdCBhIHNwZWNpYWwgdHJhY2Ugc3RhdGUgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZW0uXG4gKi9cbmZ1bmN0aW9uIGdldFNhbXBsaW5nRGVjaXNpb24oc3BhbkNvbnRleHQpIHtcbiAgY29uc3QgeyB0cmFjZUZsYWdzLCB0cmFjZVN0YXRlIH0gPSBzcGFuQ29udGV4dDtcblxuICBjb25zdCBzYW1wbGVkTm90UmVjb3JkaW5nID0gdHJhY2VTdGF0ZSA/IHRyYWNlU3RhdGUuZ2V0KFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVEX05PVF9SRUNPUkRJTkcpID09PSAnMScgOiBmYWxzZTtcblxuICAvLyBJZiB0cmFjZSBmbGFnIGlzIGBTQU1QTEVEYCwgd2UgaW50ZXJwcmV0IHRoaXMgYXMgc2FtcGxlZFxuICAvLyBJZiBpdCBpcyBgTk9ORWAsIGl0IGNvdWxkIG1lYW4gZWl0aGVyIGl0IHdhcyBzYW1wbGVkIHRvIGJlIG5vdCByZWNvcmRlciwgb3IgdGhhdCBpdCB3YXMgbm90IHNhbXBsZWQgYXQgYWxsXG4gIC8vIEZvciB1cyB0aGlzIGlzIGFuIGltcG9ydGFudCBkaWZmZXJlbmNlLCBzb3cgZSBsb29rIGF0IHRoZSBTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HXG4gIC8vIHRvIGlkZW50aWZ5IHdoaWNoIGl0IGlzXG4gIGlmICh0cmFjZUZsYWdzID09PSBhcGkuVHJhY2VGbGFncy5TQU1QTEVEKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc2FtcGxlZE5vdFJlY29yZGluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBEU0MgYXMgYSBsYXN0IHJlc29ydCwgdGhhdCBtYXkgYWxzbyBjb250YWluIGBzYW1wbGVkYC4uLlxuICBjb25zdCBkc2NTdHJpbmcgPSB0cmFjZVN0YXRlID8gdHJhY2VTdGF0ZS5nZXQoU0VOVFJZX1RSQUNFX1NUQVRFX0RTQykgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGRzYyA9IGRzY1N0cmluZyA/IGNvcmUuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dChkc2NTdHJpbmcpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChkc2M/LnNhbXBsZWQgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChkc2M/LnNhbXBsZWQgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEluZmVyIHRoZSBvcCAmIGRlc2NyaXB0aW9uIGZvciBhIHNldCBvZiBuYW1lLCBhdHRyaWJ1dGVzIGFuZCBraW5kIG9mIGEgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gaW5mZXJTcGFuRGF0YShzcGFuTmFtZSwgYXR0cmlidXRlcywga2luZCkge1xuICAvLyBpZiBodHRwLm1ldGhvZCBleGlzdHMsIHRoaXMgaXMgYW4gaHR0cCByZXF1ZXN0IHNwYW5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IGh0dHBNZXRob2QgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EXSB8fCBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuU0VNQVRUUlNfSFRUUF9NRVRIT0RdO1xuICBpZiAoaHR0cE1ldGhvZCkge1xuICAgIHJldHVybiBkZXNjcmlwdGlvbkZvckh0dHBNZXRob2QoeyBhdHRyaWJ1dGVzLCBuYW1lOiBzcGFuTmFtZSwga2luZCB9LCBodHRwTWV0aG9kKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBjb25zdCBkYlN5c3RlbSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19EQl9TWVNURU1dO1xuICBjb25zdCBvcElzQ2FjaGUgPVxuICAgIHR5cGVvZiBhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gPT09ICdzdHJpbmcnICYmXG4gICAgYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdLnN0YXJ0c1dpdGgoJ2NhY2hlLicpO1xuXG4gIC8vIElmIGRiLnR5cGUgZXhpc3RzIHRoZW4gdGhpcyBpcyBhIGRhdGFiYXNlIGNhbGwgc3BhblxuICAvLyBJZiB0aGUgUmVkaXMgREIgaXMgdXNlZCBhcyBhIGNhY2hlLCB0aGUgc3BhbiBkZXNjcmlwdGlvbiBzaG91bGQgbm90IGJlIGNoYW5nZWRcbiAgaWYgKGRiU3lzdGVtICYmICFvcElzQ2FjaGUpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRpb25Gb3JEYlN5c3RlbSh7IGF0dHJpYnV0ZXMsIG5hbWU6IHNwYW5OYW1lIH0pO1xuICB9XG5cbiAgY29uc3QgY3VzdG9tU291cmNlT3JSb3V0ZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV0gPT09ICdjdXN0b20nID8gJ2N1c3RvbScgOiAncm91dGUnO1xuXG4gIC8vIElmIHJwYy5zZXJ2aWNlIGV4aXN0cyB0aGVuIHRoaXMgaXMgYSBycGMgY2FsbCBzcGFuLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgcnBjU2VydmljZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19SUENfU0VSVklDRV07XG4gIGlmIChycGNTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZShzcGFuTmFtZSwgYXR0cmlidXRlcywgJ3JvdXRlJyksXG4gICAgICBvcDogJ3JwYycsXG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG1lc3NhZ2luZy5zeXN0ZW0gZXhpc3RzIHRoZW4gdGhpcyBpcyBhIG1lc3NhZ2luZyBzeXN0ZW0gc3Bhbi5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IG1lc3NhZ2luZ1N5c3RlbSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19NRVNTQUdJTkdfU1lTVEVNXTtcbiAgaWYgKG1lc3NhZ2luZ1N5c3RlbSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5nZXRVc2VyVXBkYXRlZE5hbWVBbmRTb3VyY2Uoc3Bhbk5hbWUsIGF0dHJpYnV0ZXMsIGN1c3RvbVNvdXJjZU9yUm91dGUpLFxuICAgICAgb3A6ICdtZXNzYWdlJyxcbiAgICB9O1xuICB9XG5cbiAgLy8gSWYgZmFhcy50cmlnZ2VyIGV4aXN0cyB0aGVuIHRoaXMgaXMgYSBmdW5jdGlvbiBhcyBhIHNlcnZpY2Ugc3Bhbi5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IGZhYXNUcmlnZ2VyID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLlNFTUFUVFJTX0ZBQVNfVFJJR0dFUl07XG4gIGlmIChmYWFzVHJpZ2dlcikge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5nZXRVc2VyVXBkYXRlZE5hbWVBbmRTb3VyY2Uoc3Bhbk5hbWUsIGF0dHJpYnV0ZXMsIGN1c3RvbVNvdXJjZU9yUm91dGUpLFxuICAgICAgb3A6IGZhYXNUcmlnZ2VyLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IG9wOiB1bmRlZmluZWQsIGRlc2NyaXB0aW9uOiBzcGFuTmFtZSwgc291cmNlOiAnY3VzdG9tJyB9O1xufVxuXG4vKipcbiAqIEV4dHJhY3QgYmV0dGVyIG9wL2Rlc2NyaXB0aW9uIGZyb20gYW4gb3RlbCBzcGFuLlxuICpcbiAqIERvZXMgbm90IG92ZXJ3cml0ZSB0aGUgc3BhbiBuYW1lIGlmIHRoZSBzb3VyY2UgaXMgYWxyZWFkeSBzZXQgdG8gY3VzdG9tIHRvIGVuc3VyZVxuICogdGhhdCB1c2VyLXVwZGF0ZWQgc3BhbiBuYW1lcyBhcmUgcHJlc2VydmVkLiBJbiB0aGlzIGNhc2UsIHdlIG9ubHkgYWRqdXN0IHRoZSBvcCBidXRcbiAqIGxlYXZlIHNwYW4gZGVzY3JpcHRpb24gYW5kIHNvdXJjZSB1bmNoYW5nZWQuXG4gKlxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktY29sbGVjdG9yLWNvbnRyaWIvYmxvYi83NDIyY2UyYTA2MzM3ZjY4YTU5YjU1MmI4YzVhMmFjMTI1ZDZiYWU1L2V4cG9ydGVyL3NlbnRyeWV4cG9ydGVyL3NlbnRyeV9leHBvcnRlci5nbyNMMzA2XG4gKi9cbmZ1bmN0aW9uIHBhcnNlU3BhbkRlc2NyaXB0aW9uKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IHNwYW5IYXNBdHRyaWJ1dGVzKHNwYW4pID8gc3Bhbi5hdHRyaWJ1dGVzIDoge307XG4gIGNvbnN0IG5hbWUgPSBzcGFuSGFzTmFtZShzcGFuKSA/IHNwYW4ubmFtZSA6ICc8dW5rbm93bj4nO1xuICBjb25zdCBraW5kID0gZ2V0U3BhbktpbmQoc3Bhbik7XG5cbiAgcmV0dXJuIGluZmVyU3BhbkRhdGEobmFtZSwgYXR0cmlidXRlcywga2luZCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaXB0aW9uRm9yRGJTeXN0ZW0oeyBhdHRyaWJ1dGVzLCBuYW1lIH0pIHtcbiAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgY3VzdG9tIG5hbWUsIHdlIGRvbid0IG92ZXJ3cml0ZSBpdCBidXQgb25seSBzZXQgdGhlIG9wXG4gIGNvbnN0IHVzZXJEZWZpbmVkTmFtZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuICBpZiAodHlwZW9mIHVzZXJEZWZpbmVkTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3A6ICdkYicsXG4gICAgICBkZXNjcmlwdGlvbjogdXNlckRlZmluZWROYW1lLFxuICAgICAgc291cmNlOiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSApIHx8ICdjdXN0b20nLFxuICAgIH07XG4gIH1cblxuICAvLyBpZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHNvdXJjZSBzZXQgdG8gY3VzdG9tLCB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHNwYW4gZGVzY3JpcHRpb24gYnV0IG9ubHkgc2V0IHRoZSBvcFxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSA9PT0gJ2N1c3RvbScpIHtcbiAgICByZXR1cm4geyBvcDogJ2RiJywgZGVzY3JpcHRpb246IG5hbWUsIHNvdXJjZTogJ2N1c3RvbScgfTtcbiAgfVxuXG4gIC8vIFVzZSBEQiBzdGF0ZW1lbnQgKEV4IFwiU0VMRUNUICogRlJPTSB0YWJsZVwiKSBpZiBwb3NzaWJsZSBhcyBkZXNjcmlwdGlvbi5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHN0YXRlbWVudCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19EQl9TVEFURU1FTlRdO1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gc3RhdGVtZW50ID8gc3RhdGVtZW50LnRvU3RyaW5nKCkgOiBuYW1lO1xuXG4gIHJldHVybiB7IG9wOiAnZGInLCBkZXNjcmlwdGlvbiwgc291cmNlOiAndGFzaycgfTtcbn1cblxuLyoqIE9ubHkgZXhwb3J0ZWQgZm9yIHRlc3RzLiAqL1xuZnVuY3Rpb24gZGVzY3JpcHRpb25Gb3JIdHRwTWV0aG9kKFxuICB7IG5hbWUsIGtpbmQsIGF0dHJpYnV0ZXMgfSxcbiAgaHR0cE1ldGhvZCxcbikge1xuICBjb25zdCBvcFBhcnRzID0gWydodHRwJ107XG5cbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBhcGkuU3BhbktpbmQuQ0xJRU5UOlxuICAgICAgb3BQYXJ0cy5wdXNoKCdjbGllbnQnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgYXBpLlNwYW5LaW5kLlNFUlZFUjpcbiAgICAgIG9wUGFydHMucHVzaCgnc2VydmVyJyk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIC8vIFNwYW5zIGZvciBIVFRQIHJlcXVlc3RzIHdlIGhhdmUgZGV0ZXJtaW5lZCB0byBiZSBwcmVmZXRjaCByZXF1ZXN0cyB3aWxsIGhhdmUgYSBgLnByZWZldGNoYCBwb3N0Zml4IGluIHRoZSBvcFxuICBpZiAoYXR0cmlidXRlc1snc2VudHJ5Lmh0dHAucHJlZmV0Y2gnXSkge1xuICAgIG9wUGFydHMucHVzaCgncHJlZmV0Y2gnKTtcbiAgfVxuXG4gIGNvbnN0IHsgdXJsUGF0aCwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlIH0gPSBnZXRTYW5pdGl6ZWRVcmwoYXR0cmlidXRlcywga2luZCk7XG5cbiAgaWYgKCF1cmxQYXRoKSB7XG4gICAgcmV0dXJuIHsgLi4uZ2V0VXNlclVwZGF0ZWROYW1lQW5kU291cmNlKG5hbWUsIGF0dHJpYnV0ZXMpLCBvcDogb3BQYXJ0cy5qb2luKCcuJykgfTtcbiAgfVxuXG4gIGNvbnN0IGdyYXBocWxPcGVyYXRpb25zQXR0cmlidXRlID0gYXR0cmlidXRlc1tTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OXTtcblxuICAvLyBFeC4gR0VUIC9hcGkvdXNlcnNcbiAgY29uc3QgYmFzZURlc2NyaXB0aW9uID0gYCR7aHR0cE1ldGhvZH0gJHt1cmxQYXRofWA7XG5cbiAgLy8gV2hlbiB0aGUgaHR0cCBzcGFuIGhhcyBhIGdyYXBocWwgb3BlcmF0aW9uLCBhcHBlbmQgaXQgdG8gdGhlIGRlc2NyaXB0aW9uXG4gIC8vIFdlIGFkZCB0aGVzZSBpbiB0aGUgZ3JhcGhxbEludGVncmF0aW9uXG4gIGNvbnN0IGluZmVycmVkRGVzY3JpcHRpb24gPSBncmFwaHFsT3BlcmF0aW9uc0F0dHJpYnV0ZVxuICAgID8gYCR7YmFzZURlc2NyaXB0aW9ufSAoJHtnZXRHcmFwaHFsT3BlcmF0aW9uTmFtZXNGcm9tQXR0cmlidXRlKGdyYXBocWxPcGVyYXRpb25zQXR0cmlidXRlKX0pYFxuICAgIDogYmFzZURlc2NyaXB0aW9uO1xuXG4gIC8vIElmIGBodHRwUGF0aGAgaXMgYSByb290IHBhdGgsIHRoZW4gd2UgY2FuIGNhdGVnb3JpemUgdGhlIHRyYW5zYWN0aW9uIHNvdXJjZSBhcyByb3V0ZS5cbiAgY29uc3QgaW5mZXJyZWRTb3VyY2UgPSBoYXNSb3V0ZSB8fCB1cmxQYXRoID09PSAnLycgPyAncm91dGUnIDogJ3VybCc7XG5cbiAgY29uc3QgZGF0YSA9IHt9O1xuXG4gIGlmICh1cmwpIHtcbiAgICBkYXRhLnVybCA9IHVybDtcbiAgfVxuICBpZiAocXVlcnkpIHtcbiAgICBkYXRhWydodHRwLnF1ZXJ5J10gPSBxdWVyeTtcbiAgfVxuICBpZiAoZnJhZ21lbnQpIHtcbiAgICBkYXRhWydodHRwLmZyYWdtZW50J10gPSBmcmFnbWVudDtcbiAgfVxuXG4gIC8vIElmIHRoZSBzcGFuIGtpbmQgaXMgbmVpdGhlciBjbGllbnQgbm9yIHNlcnZlciwgd2UgdXNlIHRoZSBvcmlnaW5hbCBuYW1lXG4gIC8vIHRoaXMgaW5mZXJzIHRoYXQgc29tZWJvZHkgbWFudWFsbHkgc3RhcnRlZCB0aGlzIHNwYW4sIGluIHdoaWNoIGNhc2Ugd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIG5hbWVcbiAgY29uc3QgaXNDbGllbnRPclNlcnZlcktpbmQgPSBraW5kID09PSBhcGkuU3BhbktpbmQuQ0xJRU5UIHx8IGtpbmQgPT09IGFwaS5TcGFuS2luZC5TRVJWRVI7XG5cbiAgLy8gSWYgdGhlIHNwYW4gaXMgYW4gYXV0by1zcGFuICg9aXQgY29tZXMgZnJvbSBvbmUgb2Ygb3VyIGluc3RydW1lbnRhdGlvbnMpLFxuICAvLyB3ZSBhbHdheXMgd2FudCB0byBpbmZlciB0aGUgbmFtZVxuICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNvbWUgb2YgdGhlIGF1dG8taW5zdHJ1bWVudGF0aW9uIHdlIHVzZSB1c2VzIGtpbmQ9SU5URVJOQUxcbiAgY29uc3Qgb3JpZ2luID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXSB8fCAnbWFudWFsJztcbiAgY29uc3QgaXNNYW51YWxTcGFuID0gIWAke29yaWdpbn1gLnN0YXJ0c1dpdGgoJ2F1dG8nKTtcblxuICAvLyBJZiB1c2VycyAob3IgaW4gdmVyeSByYXJlIG9jY2FzaW9ucyB3ZSkgc2V0IHRoZSBzb3VyY2UgdG8gY3VzdG9tLCB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIG5hbWVcbiAgY29uc3QgYWxyZWFkeUhhc0N1c3RvbVNvdXJjZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV0gPT09ICdjdXN0b20nO1xuICBjb25zdCBjdXN0b21TcGFuTmFtZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuXG4gIGNvbnN0IHVzZUluZmVycmVkRGVzY3JpcHRpb24gPVxuICAgICFhbHJlYWR5SGFzQ3VzdG9tU291cmNlICYmIGN1c3RvbVNwYW5OYW1lID09IG51bGwgJiYgKGlzQ2xpZW50T3JTZXJ2ZXJLaW5kIHx8ICFpc01hbnVhbFNwYW4pO1xuXG4gIGNvbnN0IHsgZGVzY3JpcHRpb24sIHNvdXJjZSB9ID0gdXNlSW5mZXJyZWREZXNjcmlwdGlvblxuICAgID8geyBkZXNjcmlwdGlvbjogaW5mZXJyZWREZXNjcmlwdGlvbiwgc291cmNlOiBpbmZlcnJlZFNvdXJjZSB9XG4gICAgOiBnZXRVc2VyVXBkYXRlZE5hbWVBbmRTb3VyY2UobmFtZSwgYXR0cmlidXRlcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBvcDogb3BQYXJ0cy5qb2luKCcuJyksXG4gICAgZGVzY3JpcHRpb24sXG4gICAgc291cmNlLFxuICAgIGRhdGEsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEdyYXBocWxPcGVyYXRpb25OYW1lc0Zyb21BdHRyaWJ1dGUoYXR0cikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhdHRyKSkge1xuICAgIGNvbnN0IHNvcnRlZCA9IGF0dHIuc2xpY2UoKS5zb3J0KCk7XG5cbiAgICAvLyBVcCB0byA1IGl0ZW1zLCB3ZSBqdXN0IGFkZCBhbGwgb2YgdGhlbVxuICAgIGlmIChzb3J0ZWQubGVuZ3RoIDw9IDUpIHtcbiAgICAgIHJldHVybiBzb3J0ZWQuam9pbignLCAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRWxzZSwgd2UgYWRkIHRoZSBmaXJzdCA1IGFuZCB0aGUgZGlmZiBvZiBvdGhlciBvcGVyYXRpb25zXG4gICAgICByZXR1cm4gYCR7c29ydGVkLnNsaWNlKDAsIDUpLmpvaW4oJywgJyl9LCArJHtzb3J0ZWQubGVuZ3RoIC0gNX1gO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBgJHthdHRyfWA7XG59XG5cbi8qKiBFeHBvcnRlZCBmb3IgdGVzdHMgb25seSAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkVXJsKFxuICBhdHRyaWJ1dGVzLFxuICBraW5kLFxuKVxuXG4ge1xuICAvLyBUaGlzIGlzIHRoZSByZWxhdGl2ZSBwYXRoIG9mIHRoZSBVUkwsIGUuZy4gL3N1YlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgaHR0cFRhcmdldCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19IVFRQX1RBUkdFVF07XG4gIC8vIFRoaXMgaXMgdGhlIGZ1bGwgVVJMLCBpbmNsdWRpbmcgaG9zdCAmIHF1ZXJ5IHBhcmFtcyBldGMuLCBlLmcuIGh0dHBzOi8vZXhhbXBsZS5jb20vc3ViP2Zvbz1iYXJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IGh0dHBVcmwgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuU0VNQVRUUlNfSFRUUF9VUkxdIHx8IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1VSTF9GVUxMXTtcbiAgLy8gVGhpcyBpcyB0aGUgbm9ybWFsaXplZCByb3V0ZSBuYW1lIC0gbWF5IG5vdCBhbHdheXMgYmUgYXZhaWxhYmxlIVxuICBjb25zdCBodHRwUm91dGUgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JPVVRFXTtcblxuICBjb25zdCBwYXJzZWRVcmwgPSB0eXBlb2YgaHR0cFVybCA9PT0gJ3N0cmluZycgPyBjb3JlLnBhcnNlVXJsKGh0dHBVcmwpIDogdW5kZWZpbmVkO1xuICBjb25zdCB1cmwgPSBwYXJzZWRVcmwgPyBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZyhwYXJzZWRVcmwpIDogdW5kZWZpbmVkO1xuICBjb25zdCBxdWVyeSA9IHBhcnNlZFVybD8uc2VhcmNoIHx8IHVuZGVmaW5lZDtcbiAgY29uc3QgZnJhZ21lbnQgPSBwYXJzZWRVcmw/Lmhhc2ggfHwgdW5kZWZpbmVkO1xuXG4gIGlmICh0eXBlb2YgaHR0cFJvdXRlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7IHVybFBhdGg6IGh0dHBSb3V0ZSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiB0cnVlIH07XG4gIH1cblxuICBpZiAoa2luZCA9PT0gYXBpLlNwYW5LaW5kLlNFUlZFUiAmJiB0eXBlb2YgaHR0cFRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyB1cmxQYXRoOiBjb3JlLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChodHRwVGFyZ2V0KSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICB9XG5cbiAgaWYgKHBhcnNlZFVybCkge1xuICAgIHJldHVybiB7IHVybFBhdGg6IHVybCwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICB9XG5cbiAgLy8gZmFsbCBiYWNrIHRvIHRhcmdldCBldmVuIGZvciBjbGllbnQgc3BhbnMsIGlmIG5vIFVSTCBpcyBwcmVzZW50XG4gIGlmICh0eXBlb2YgaHR0cFRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyB1cmxQYXRoOiBjb3JlLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChodHRwVGFyZ2V0KSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgdXJsUGF0aDogdW5kZWZpbmVkLCB1cmwsIHF1ZXJ5LCBmcmFnbWVudCwgaGFzUm91dGU6IGZhbHNlIH07XG59XG5cbi8qKlxuICogQmVjYXVzZSBPdGVsIGluc3RydW1lbnRhdGlvbiBzb21ldGltZXMgbXV0YXRlcyBzcGFuIG5hbWVzIHZpYSBgc3Bhbi51cGRhdGVOYW1lYCwgdGhlIG9ubHkgd2F5XG4gKiB0byBlbnN1cmUgdGhhdCBhIHVzZXItc2V0IHNwYW4gbmFtZSBpcyBwcmVzZXJ2ZWQgaXMgdG8gc3RvcmUgaXQgYXMgYSB0bXAgYXR0cmlidXRlIG9uIHRoZSBzcGFuLlxuICogV2UgZGVsZXRlIHRoaXMgYXR0cmlidXRlIG9uY2Ugd2UncmUgZG9uZSB3aXRoIGl0IHdoZW4gcHJlcGFyaW5nIHRoZSBldmVudCBlbnZlbG9wZS5cbiAqXG4gKiBUaGlzIHRlbXAgYXR0cmlidXRlIGFsd2F5cyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9yaWdpbmFsIG5hbWUuXG4gKlxuICogV2UgYWxzbyBuZWVkIHRvIHRha2UgY2FyZSBvZiBzZXR0aW5nIHRoZSBjb3JyZWN0IHNvdXJjZS4gVXNlcnMgY2FuIGFsd2F5cyB1cGRhdGUgdGhlIHNvdXJjZVxuICogYWZ0ZXIgdXBkYXRpbmcgdGhlIG5hbWUsIHNvIHdlIG5lZWQgdG8gcmVzcGVjdCB0aGF0LlxuICpcbiAqIEBpbnRlcm5hbCBleHBvcnRlZCBvbmx5IGZvciB0ZXN0aW5nXG4gKi9cbmZ1bmN0aW9uIGdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZShcbiAgb3JpZ2luYWxOYW1lLFxuICBhdHRyaWJ1dGVzLFxuICBmYWxsYmFja1NvdXJjZSA9ICdjdXN0b20nLFxuKVxuXG4ge1xuICBjb25zdCBzb3VyY2UgPSAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSApIHx8IGZhbGxiYWNrU291cmNlO1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuXG4gIGlmIChkZXNjcmlwdGlvbiAmJiB0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgc291cmNlLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyBkZXNjcmlwdGlvbjogb3JpZ2luYWxOYW1lLCBzb3VyY2UgfTtcbn1cblxuLyoqXG4gKiBTZXR1cCBhIERTQyBoYW5kbGVyIG9uIHRoZSBwYXNzZWQgY2xpZW50LFxuICogZW5zdXJpbmcgdGhhdCB0aGUgdHJhbnNhY3Rpb24gbmFtZSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBzcGFuIGNvcnJlY3RseS5cbiAqL1xuZnVuY3Rpb24gZW5oYW5jZURzY1dpdGhPcGVuVGVsZW1ldHJ5Um9vdFNwYW5OYW1lKGNsaWVudCkge1xuICBjbGllbnQub24oJ2NyZWF0ZURzYycsIChkc2MsIHJvb3RTcGFuKSA9PiB7XG4gICAgaWYgKCFyb290U3Bhbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gb3ZlcndyaXRlIHRoZSB0cmFuc2FjdGlvbiBvbiB0aGUgRFNDIHRoYXQgaXMgY3JlYXRlZCBieSBkZWZhdWx0IGluIGNvcmVcbiAgICAvLyBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgd2Ugd2FudCB0byBpbmZlciB0aGUgc3BhbiBuYW1lLCBub3QgdXNlIHRoZSBpbml0aWFsIG9uZVxuICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgZ2V0IG5hbWVzIGxpa2UgXCJHRVRcIiBpbnN0ZWFkIG9mIGUuZy4gXCJHRVQgL2Zvb1wiXG4gICAgLy8gYHBhcnNlU3BhbkRlc2NyaXB0aW9uYCB0YWtlcyB0aGUgYXR0cmlidXRlcyBvZiB0aGUgc3BhbiBpbnRvIGFjY291bnQgZm9yIHRoZSBuYW1lXG4gICAgLy8gVGhpcyBtdXRhdGVzIHRoZSBwYXNzZWQtaW4gRFNDXG5cbiAgICBjb25zdCBqc29uU3BhbiA9IGNvcmUuc3BhblRvSlNPTihyb290U3Bhbik7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGpzb25TcGFuLmRhdGE7XG4gICAgY29uc3Qgc291cmNlID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTtcblxuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24gfSA9IHNwYW5IYXNOYW1lKHJvb3RTcGFuKSA/IHBhcnNlU3BhbkRlc2NyaXB0aW9uKHJvb3RTcGFuKSA6IHsgZGVzY3JpcHRpb246IHVuZGVmaW5lZCB9O1xuICAgIGlmIChzb3VyY2UgIT09ICd1cmwnICYmIGRlc2NyaXB0aW9uKSB7XG4gICAgICBkc2MudHJhbnNhY3Rpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvLyBBbHNvIGVuc3VyZSBzYW1wbGluZyBkZWNpc2lvbiBpcyBjb3JyZWN0bHkgaW5mZXJyZWRcbiAgICAvLyBJbiBjb3JlLCB3ZSB1c2UgYHNwYW5Jc1NhbXBsZWRgLCB3aGljaCBqdXN0IGxvb2tzIGF0IHRoZSB0cmFjZSBmbGFnc1xuICAgIC8vIGJ1dCBpbiBPVEVMLCB3ZSB1c2UgYSBzbGlnaHRseSBtb3JlIGNvbXBsZXggbG9naWMgdG8gYmUgYWJsZSB0byBkaWZmZXJudGlhdGUgYmV0d2VlbiB1bnNhbXBsZWQgYW5kIGRlZmVycmVkIHNhbXBsaW5nXG4gICAgaWYgKGNvcmUuaGFzU3BhbnNFbmFibGVkKCkpIHtcbiAgICAgIGNvbnN0IHNhbXBsZWQgPSBnZXRTYW1wbGluZ0RlY2lzaW9uKHJvb3RTcGFuLnNwYW5Db250ZXh0KCkpO1xuICAgICAgZHNjLnNhbXBsZWQgPSBzYW1wbGVkID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhzYW1wbGVkKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBhY3RpdmUgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlU3BhbigpIHtcbiAgcmV0dXJuIGFwaS50cmFjZS5nZXRBY3RpdmVTcGFuKCk7XG59XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBUcmFjZVN0YXRlIGZvciB0aGUgZ2l2ZW4gZGF0YS5cbiAqL1xuZnVuY3Rpb24gbWFrZVRyYWNlU3RhdGUoe1xuICBkc2MsXG4gIHNhbXBsZWQsXG59XG5cbikge1xuICAvLyBXZSBzdG9yZSB0aGUgRFNDIGFzIE9URUwgdHJhY2Ugc3RhdGUgb24gdGhlIHNwYW4gY29udGV4dFxuICBjb25zdCBkc2NTdHJpbmcgPSBkc2MgPyBjb3JlLmR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHNjKSA6IHVuZGVmaW5lZDtcblxuICBjb25zdCB0cmFjZVN0YXRlQmFzZSA9IG5ldyBjb3JlJDEuVHJhY2VTdGF0ZSgpO1xuXG4gIGNvbnN0IHRyYWNlU3RhdGVXaXRoRHNjID0gZHNjU3RyaW5nID8gdHJhY2VTdGF0ZUJhc2Uuc2V0KFNFTlRSWV9UUkFDRV9TVEFURV9EU0MsIGRzY1N0cmluZykgOiB0cmFjZVN0YXRlQmFzZTtcblxuICAvLyBXZSBhbHNvIHNwZWNpZmljYWxseSB3YW50IHRvIHN0b3JlIGlmIHRoaXMgaXMgc2FtcGxlZCB0byBiZSBub3QgcmVjb3JkaW5nLFxuICAvLyBvciB1bnNhbXBsZWQgKD1jb3VsZCBiZSBlaXRoZXIgc2FtcGxlZCBvciBub3QpXG4gIHJldHVybiBzYW1wbGVkID09PSBmYWxzZSA/IHRyYWNlU3RhdGVXaXRoRHNjLnNldChTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HLCAnMScpIDogdHJhY2VTdGF0ZVdpdGhEc2M7XG59XG5cbmNvbnN0IHNldHVwRWxlbWVudHMgPSBuZXcgU2V0KCk7XG5cbi8qKiBHZXQgYWxsIHRoZSBPcGVuVGVsZW1ldHJ5IGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIHNldCB1cC4gKi9cbmZ1bmN0aW9uIG9wZW5UZWxlbWV0cnlTZXR1cENoZWNrKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbShzZXR1cEVsZW1lbnRzKTtcbn1cblxuLyoqIE1hcmsgYW4gT3BlblRlbGVtZXRyeSBlbGVtZW50IGFzIHNldHVwLiAqL1xuZnVuY3Rpb24gc2V0SXNTZXR1cChlbGVtZW50KSB7XG4gIHNldHVwRWxlbWVudHMuYWRkKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEluamVjdHMgYW5kIGV4dHJhY3RzIGBzZW50cnktdHJhY2VgIGFuZCBgYmFnZ2FnZWAgaGVhZGVycyBmcm9tIGNhcnJpZXJzLlxuICovXG5jbGFzcyBTZW50cnlQcm9wYWdhdG9yIGV4dGVuZHMgY29yZSQxLlczQ0JhZ2dhZ2VQcm9wYWdhdG9yIHtcbiAgLyoqIEEgbWFwIG9mIFVSTHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBjaGVja2VkIGZvciBpZiB0aGV5IG1hdGNoIHRyYWNlUHJvcGFnYXRpb25UYXJnZXRzLiAqL1xuXG4gICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHNldElzU2V0dXAoJ1NlbnRyeVByb3BhZ2F0b3InKTtcblxuICAgIC8vIFdlJ3JlIGNhY2hpbmcgcmVzdWx0cyBzbyB3ZSBkb24ndCBoYXZlIHRvIHJlY29tcHV0ZSByZWdleHAgZXZlcnkgdGltZSB3ZSBjcmVhdGUgYSByZXF1ZXN0LlxuICAgIHRoaXMuX3VybE1hdGNoZXNUYXJnZXRzTWFwID0gbmV3IGNvcmUuTFJVTWFwKDEwMCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBpbmplY3QoY29udGV4dCwgY2Fycmllciwgc2V0dGVyKSB7XG4gICAgaWYgKGNvcmUkMS5pc1RyYWNpbmdTdXBwcmVzc2VkKGNvbnRleHQpKSB7XG4gICAgICBERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnW1RyYWNpbmddIE5vdCBpbmplY3RpbmcgdHJhY2UgZGF0YSBmb3IgdXJsIGJlY2F1c2UgdHJhY2luZyBpcyBzdXBwcmVzc2VkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBhcGkudHJhY2UuZ2V0U3Bhbihjb250ZXh0KTtcbiAgICBjb25zdCB1cmwgPSBhY3RpdmVTcGFuICYmIGdldEN1cnJlbnRVUkwoYWN0aXZlU3Bhbik7XG5cbiAgICBjb25zdCB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyA9IGNvcmUuZ2V0Q2xpZW50KCk/LmdldE9wdGlvbnMoKT8udHJhY2VQcm9wYWdhdGlvblRhcmdldHM7XG4gICAgaWYgKCFzaG91bGRQcm9wYWdhdGVUcmFjZUZvclVybCh1cmwsIHRyYWNlUHJvcGFnYXRpb25UYXJnZXRzLCB0aGlzLl91cmxNYXRjaGVzVGFyZ2V0c01hcCkpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGNvcmUuZGVidWcubG9nKCdbVHJhY2luZ10gTm90IGluamVjdGluZyB0cmFjZSBkYXRhIGZvciB1cmwgYmVjYXVzZSBpdCBkb2VzIG5vdCBtYXRjaCB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0czonLCB1cmwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV4aXN0aW5nQmFnZ2FnZUhlYWRlciA9IGdldEV4aXN0aW5nQmFnZ2FnZShjYXJyaWVyKTtcbiAgICBsZXQgYmFnZ2FnZSA9IGFwaS5wcm9wYWdhdGlvbi5nZXRCYWdnYWdlKGNvbnRleHQpIHx8IGFwaS5wcm9wYWdhdGlvbi5jcmVhdGVCYWdnYWdlKHt9KTtcblxuICAgIGNvbnN0IHsgZHluYW1pY1NhbXBsaW5nQ29udGV4dCwgdHJhY2VJZCwgc3BhbklkLCBzYW1wbGVkIH0gPSBnZXRJbmplY3Rpb25EYXRhKGNvbnRleHQpO1xuXG4gICAgaWYgKGV4aXN0aW5nQmFnZ2FnZUhlYWRlcikge1xuICAgICAgY29uc3QgYmFnZ2FnZUVudHJpZXMgPSBjb3JlLnBhcnNlQmFnZ2FnZUhlYWRlcihleGlzdGluZ0JhZ2dhZ2VIZWFkZXIpO1xuXG4gICAgICBpZiAoYmFnZ2FnZUVudHJpZXMpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoYmFnZ2FnZUVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGJhZ2dhZ2UgPSBiYWdnYWdlLnNldEVudHJ5KGtleSwgeyB2YWx1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpIHtcbiAgICAgIGJhZ2dhZ2UgPSBPYmplY3QuZW50cmllcyhkeW5hbWljU2FtcGxpbmdDb250ZXh0KS5yZWR1Y2UoKGIsIFtkc2NLZXksIGRzY1ZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAoZHNjVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYi5zZXRFbnRyeShgJHtjb3JlLlNFTlRSWV9CQUdHQUdFX0tFWV9QUkVGSVh9JHtkc2NLZXl9YCwgeyB2YWx1ZTogZHNjVmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9LCBiYWdnYWdlKTtcbiAgICB9XG5cbiAgICAvLyBXZSBhbHNvIHdhbnQgdG8gYXZvaWQgc2V0dGluZyB0aGUgZGVmYXVsdCBPVEVMIHRyYWNlIElELCBpZiB3ZSBnZXQgdGhhdCBmb3Igd2hhdGV2ZXIgcmVhc29uXG4gICAgaWYgKHRyYWNlSWQgJiYgdHJhY2VJZCAhPT0gYXBpLklOVkFMSURfVFJBQ0VJRCkge1xuICAgICAgc2V0dGVyLnNldChjYXJyaWVyLCBTRU5UUllfVFJBQ0VfSEVBREVSLCBjb3JlLmdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIodHJhY2VJZCwgc3BhbklkLCBzYW1wbGVkKSk7XG4gICAgfVxuXG4gICAgc3VwZXIuaW5qZWN0KGFwaS5wcm9wYWdhdGlvbi5zZXRCYWdnYWdlKGNvbnRleHQsIGJhZ2dhZ2UpLCBjYXJyaWVyLCBzZXR0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgZXh0cmFjdChjb250ZXh0LCBjYXJyaWVyLCBnZXR0ZXIpIHtcbiAgICBjb25zdCBtYXliZVNlbnRyeVRyYWNlSGVhZGVyID0gZ2V0dGVyLmdldChjYXJyaWVyLCBTRU5UUllfVFJBQ0VfSEVBREVSKTtcbiAgICBjb25zdCBiYWdnYWdlID0gZ2V0dGVyLmdldChjYXJyaWVyLCBTRU5UUllfQkFHR0FHRV9IRUFERVIpO1xuXG4gICAgY29uc3Qgc2VudHJ5VHJhY2UgPSBtYXliZVNlbnRyeVRyYWNlSGVhZGVyXG4gICAgICA/IEFycmF5LmlzQXJyYXkobWF5YmVTZW50cnlUcmFjZUhlYWRlcilcbiAgICAgICAgPyBtYXliZVNlbnRyeVRyYWNlSGVhZGVyWzBdXG4gICAgICAgIDogbWF5YmVTZW50cnlUcmFjZUhlYWRlclxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBBZGQgcmVtb3RlIHBhcmVudCBzcGFuIGNvbnRleHRcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBpbmNvbWluZyB0cmFjZSwgdGhpcyB3aWxsIHJldHVybiB0aGUgY29udGV4dCBhcy1pc1xuICAgIHJldHVybiBlbnN1cmVTY29wZXNPbkNvbnRleHQoZ2V0Q29udGV4dFdpdGhSZW1vdGVBY3RpdmVTcGFuKGNvbnRleHQsIHsgc2VudHJ5VHJhY2UsIGJhZ2dhZ2UgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgZmllbGRzKCkge1xuICAgIHJldHVybiBbU0VOVFJZX1RSQUNFX0hFQURFUiwgU0VOVFJZX0JBR0dBR0VfSEVBREVSXTtcbiAgfVxufVxuXG5jb25zdCBOT1RfUFJPUEFHQVRFRF9NRVNTQUdFID1cbiAgJ1tUcmFjaW5nXSBOb3QgaW5qZWN0aW5nIHRyYWNlIGRhdGEgZm9yIHVybCBiZWNhdXNlIGl0IGRvZXMgbm90IG1hdGNoIHRyYWNlUHJvcGFnYXRpb25UYXJnZXRzOic7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBnaXZlbiBVUkwgc2hvdWxkIGJlIHByb3BhZ2F0ZWQgdG8gb3Igbm90LlxuICogSWYgbm8gdXJsIGlzIGRlZmluZWQsIG9yIG5vIHRyYWNlIHByb3BhZ2F0aW9uIHRhcmdldHMgYXJlIGRlZmluZWQsIHRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIGB0cnVlYC5cbiAqIFlvdSBjYW4gYWxzbyBvcHRpb25hbGx5IHByb3ZpZGUgYSBkZWNpc2lvbiBtYXAsIHRvIGNhY2hlIGRlY2lzaW9ucyBhbmQgYXZvaWQgcmVwZWF0ZWQgcmVnZXggbG9va3Vwcy5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkUHJvcGFnYXRlVHJhY2VGb3JVcmwoXG4gIHVybCxcbiAgdHJhY2VQcm9wYWdhdGlvblRhcmdldHMsXG4gIGRlY2lzaW9uTWFwLFxuKSB7XG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCAhdHJhY2VQcm9wYWdhdGlvblRhcmdldHMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGNhY2hlZERlY2lzaW9uID0gZGVjaXNpb25NYXA/LmdldCh1cmwpO1xuICBpZiAoY2FjaGVkRGVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIERFQlVHX0JVSUxEICYmICFjYWNoZWREZWNpc2lvbiAmJiBjb3JlLmRlYnVnLmxvZyhOT1RfUFJPUEFHQVRFRF9NRVNTQUdFLCB1cmwpO1xuICAgIHJldHVybiBjYWNoZWREZWNpc2lvbjtcbiAgfVxuXG4gIGNvbnN0IGRlY2lzaW9uID0gY29yZS5zdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4odXJsLCB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyk7XG4gIGRlY2lzaW9uTWFwPy5zZXQodXJsLCBkZWNpc2lvbik7XG5cbiAgREVCVUdfQlVJTEQgJiYgIWRlY2lzaW9uICYmIGNvcmUuZGVidWcubG9nKE5PVF9QUk9QQUdBVEVEX01FU1NBR0UsIHVybCk7XG4gIHJldHVybiBkZWNpc2lvbjtcbn1cblxuLyoqXG4gKiBHZXQgcHJvcGFnYXRpb24gaW5qZWN0aW9uIGRhdGEgZm9yIHRoZSBnaXZlbiBjb250ZXh0LlxuICogVGhlIGFkZGl0aW9uYWwgb3B0aW9ucyBjYW4gYmUgcGFzc2VkIHRvIG92ZXJyaWRlIHRoZSBzY29wZSBhbmQgY2xpZW50IHRoYXQgaXMgb3RoZXJ3aXNlIGRlcml2ZWQgZnJvbSB0aGUgY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5qZWN0aW9uRGF0YShcbiAgY29udGV4dCxcbiAgb3B0aW9ucyA9IHt9LFxuKVxuXG4ge1xuICBjb25zdCBzcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY29udGV4dCk7XG5cbiAgLy8gSWYgd2UgaGF2ZSBhIHJlbW90ZSBzcGFuLCB0aGUgc3BhbklkIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHRoZSBwYXJlbnRTcGFuSWQsIG5vdCBzcGFuSWQgaXRzZWxmXG4gIC8vIEluc3RlYWQsIHdlIHVzZSBhIHZpcnR1YWwgKGdlbmVyYXRlZCkgc3BhbklkIGZvciBwcm9wYWdhdGlvblxuICBpZiAoc3Bhbj8uc3BhbkNvbnRleHQoKS5pc1JlbW90ZSkge1xuICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKTtcblxuICAgIHJldHVybiB7XG4gICAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgICAgdHJhY2VJZDogc3BhbkNvbnRleHQudHJhY2VJZCxcbiAgICAgIHNwYW5JZDogdW5kZWZpbmVkLFxuICAgICAgc2FtcGxlZDogZ2V0U2FtcGxpbmdEZWNpc2lvbihzcGFuQ29udGV4dCksIC8vIFRPRE86IERvIHdlIG5lZWQgdG8gY2hhbmdlIHNvbWV0aGluZyBoZXJlP1xuICAgIH07XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIGEgbG9jYWwgc3Bhbiwgd2UganVzdCB1c2UgdGhpc1xuICBpZiAoc3Bhbikge1xuICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKTtcblxuICAgIHJldHVybiB7XG4gICAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgICAgdHJhY2VJZDogc3BhbkNvbnRleHQudHJhY2VJZCxcbiAgICAgIHNwYW5JZDogc3BhbkNvbnRleHQuc3BhbklkLFxuICAgICAgc2FtcGxlZDogZ2V0U2FtcGxpbmdEZWNpc2lvbihzcGFuQ29udGV4dCksIC8vIFRPRE86IERvIHdlIG5lZWQgdG8gY2hhbmdlIHNvbWV0aGluZyBoZXJlP1xuICAgIH07XG4gIH1cblxuICAvLyBFbHNlIHdlIHRyeSB0byB1c2UgdGhlIHByb3BhZ2F0aW9uIGNvbnRleHQgZnJvbSB0aGUgc2NvcGVcbiAgLy8gVGhlIG9ubHkgc2NlbmFyaW8gd2hlcmUgdGhpcyBzaG91bGQgaGFwcGVuIGlzIHdoZW4gd2UgbmVpdGhlciBoYXZlIGEgc3Bhbiwgbm9yIGFuIGluY29taW5nIHRyYWNlXG4gIGNvbnN0IHNjb3BlID0gb3B0aW9ucy5zY29wZSB8fCBnZXRTY29wZXNGcm9tQ29udGV4dChjb250ZXh0KT8uc2NvcGUgfHwgY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgY29uc3QgY2xpZW50ID0gb3B0aW9ucy5jbGllbnQgfHwgY29yZS5nZXRDbGllbnQoKTtcblxuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSBzY29wZS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGNsaWVudCA/IGNvcmUuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZShjbGllbnQsIHNjb3BlKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgIHRyYWNlSWQ6IHByb3BhZ2F0aW9uQ29udGV4dC50cmFjZUlkLFxuICAgIHNwYW5JZDogcHJvcGFnYXRpb25Db250ZXh0LnByb3BhZ2F0aW9uU3BhbklkLFxuICAgIHNhbXBsZWQ6IHByb3BhZ2F0aW9uQ29udGV4dC5zYW1wbGVkLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0V2l0aFJlbW90ZUFjdGl2ZVNwYW4oXG4gIGN0eCxcbiAgeyBzZW50cnlUcmFjZSwgYmFnZ2FnZSB9LFxuKSB7XG4gIGNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IGNvcmUucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMoc2VudHJ5VHJhY2UsIGJhZ2dhZ2UpO1xuXG4gIGNvbnN0IHsgdHJhY2VJZCwgcGFyZW50U3BhbklkLCBzYW1wbGVkLCBkc2MgfSA9IHByb3BhZ2F0aW9uQ29udGV4dDtcblxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBjb25zdCBpbmNvbWluZ0RzYyA9IGNvcmUuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dChiYWdnYWdlKTtcblxuICAvLyBXZSBvbmx5IHdhbnQgdG8gc2V0IHRoZSB2aXJ0dWFsIHNwYW4gaWYgd2UgYXJlIGNvbnRpbnVpbmcgYSBjb25jcmV0ZSB0cmFjZVxuICAvLyBPdGhlcndpc2UsIHdlIGlnbm9yZSB0aGUgaW5jb21pbmcgdHJhY2UgaGVyZSwgZS5nLiBpZiB3ZSBoYXZlIG5vIHRyYWNlIGhlYWRlcnNcbiAgaWYgKCFwYXJlbnRTcGFuSWQgfHwgKGNsaWVudCAmJiAhY29yZS5zaG91bGRDb250aW51ZVRyYWNlKGNsaWVudCwgaW5jb21pbmdEc2M/Lm9yZ19pZCkpKSB7XG4gICAgcmV0dXJuIGN0eDtcbiAgfVxuXG4gIGNvbnN0IHNwYW5Db250ZXh0ID0gZ2VuZXJhdGVSZW1vdGVTcGFuQ29udGV4dCh7XG4gICAgdHJhY2VJZCxcbiAgICBzcGFuSWQ6IHBhcmVudFNwYW5JZCxcbiAgICBzYW1wbGVkLFxuICAgIGRzYyxcbiAgfSk7XG5cbiAgcmV0dXJuIGFwaS50cmFjZS5zZXRTcGFuQ29udGV4dChjdHgsIHNwYW5Db250ZXh0KTtcbn1cblxuLyoqXG4gKiBUYWtlcyB0cmFjZSBzdHJpbmdzIGFuZCBwcm9wYWdhdGVzIHRoZW0gYXMgYSByZW1vdGUgYWN0aXZlIHNwYW4uXG4gKiBUaGlzIHNob3VsZCBiZSB1c2VkIGluIGFkZGl0aW9uIHRvIGBjb250aW51ZVRyYWNlYCBpbiBPVEVMLXBvd2VyZWQgZW52aXJvbm1lbnRzLlxuICovXG5mdW5jdGlvbiBjb250aW51ZVRyYWNlQXNSZW1vdGVTcGFuKFxuICBjdHgsXG4gIG9wdGlvbnMsXG4gIGNhbGxiYWNrLFxuKSB7XG4gIGNvbnN0IGN0eFdpdGhTcGFuQ29udGV4dCA9IGVuc3VyZVNjb3Blc09uQ29udGV4dChnZXRDb250ZXh0V2l0aFJlbW90ZUFjdGl2ZVNwYW4oY3R4LCBvcHRpb25zKSk7XG5cbiAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoY3R4V2l0aFNwYW5Db250ZXh0LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNjb3Blc09uQ29udGV4dChjdHgpIHtcbiAgLy8gSWYgdGhlcmUgYXJlIG5vIHNjb3BlcyB5ZXQgb24gdGhlIGNvbnRleHQsIGVuc3VyZSB3ZSBoYXZlIHRoZW1cbiAgY29uc3Qgc2NvcGVzID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQoY3R4KTtcbiAgY29uc3QgbmV3U2NvcGVzID0ge1xuICAgIC8vIElmIHdlIGhhdmUgbm8gc2NvcGUgaGVyZSwgdGhpcyBpcyBtb3N0IGxpa2VseSBlaXRoZXIgdGhlIHJvb3QgY29udGV4dCBvciBhIGNvbnRleHQgbWFudWFsbHkgZGVyaXZlZCBmcm9tIGl0XG4gICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSB3YW50IHRvIGZvcmsgdGhlIGN1cnJlbnQgc2NvcGUsIHRvIGVuc3VyZSB3ZSBkbyBub3QgcG9sbHV0ZSB0aGUgcm9vdCBzY29wZVxuICAgIHNjb3BlOiBzY29wZXMgPyBzY29wZXMuc2NvcGUgOiBjb3JlLmdldEN1cnJlbnRTY29wZSgpLmNsb25lKCksXG4gICAgaXNvbGF0aW9uU2NvcGU6IHNjb3BlcyA/IHNjb3Blcy5pc29sYXRpb25TY29wZSA6IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSxcbiAgfTtcblxuICByZXR1cm4gc2V0U2NvcGVzT25Db250ZXh0KGN0eCwgbmV3U2NvcGVzKTtcbn1cblxuLyoqIFRyeSB0byBnZXQgdGhlIGV4aXN0aW5nIGJhZ2dhZ2UgaGVhZGVyIHNvIHdlIGNhbiBtZXJnZSB0aGlzIGluLiAqL1xuZnVuY3Rpb24gZ2V0RXhpc3RpbmdCYWdnYWdlKGNhcnJpZXIpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBiYWdnYWdlID0gKGNhcnJpZXIgKVtTRU5UUllfQkFHR0FHRV9IRUFERVJdO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGJhZ2dhZ2UpID8gYmFnZ2FnZS5qb2luKCcsJykgOiBiYWdnYWdlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogSXQgaXMgcHJldHR5IHRyaWNreSB0byBnZXQgYWNjZXNzIHRvIHRoZSBvdXRnb2luZyByZXF1ZXN0IFVSTCBvZiBhIHJlcXVlc3QgaW4gdGhlIHByb3BhZ2F0b3IuXG4gKiBBcyB3ZSBvbmx5IGhhdmUgYWNjZXNzIHRvIHRoZSBjb250ZXh0IG9mIHRoZSBzcGFuIHRvIGJlIHNlbnQgYW5kIHRoZSBjYXJyaWVyICg9aGVhZGVycyksXG4gKiBidXQgdGhlIHNwYW4gbWF5IGJlIHVuc2FtcGxlZCBhbmQgdGh1cyBoYXZlIG5vIGF0dHJpYnV0ZXMuXG4gKlxuICogU28gd2UgdXNlIHRoZSBmb2xsb3dpbmcgbG9naWM6XG4gKiAxLiBJZiB3ZSBoYXZlIGFuIGFjdGl2ZSBzcGFuLCB3ZSBjaGVjayBpZiBpdCBoYXMgYSBVUkwgYXR0cmlidXRlLlxuICogMi4gRWxzZSwgaWYgdGhlIGFjdGl2ZSBzcGFuIGhhcyBubyBVUkwgYXR0cmlidXRlIChlLmcuIGl0IGlzIHVuc2FtcGxlZCksIHdlIGNoZWNrIGEgc3BlY2lhbCB0cmFjZSBzdGF0ZSAod2hpY2ggd2Ugc2V0IGluIG91ciBzYW1wbGVyKS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFVSTChzcGFuKSB7XG4gIGNvbnN0IHNwYW5EYXRhID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG4gIC8vIGBBVFRSX1VSTF9GVUxMYCBpcyB0aGUgbmV3IGF0dHJpYnV0ZSwgYnV0IHdlIHN0aWxsIHN1cHBvcnQgdGhlIG9sZCBvbmUsIGBTRU1BVFRSU19IVFRQX1VSTGAsIGZvciBub3cuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBjb25zdCB1cmxBdHRyaWJ1dGUgPSBzcGFuRGF0YVtzZW1hbnRpY0NvbnZlbnRpb25zLlNFTUFUVFJTX0hUVFBfVVJMXSB8fCBzcGFuRGF0YVtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfVVJMX0ZVTExdO1xuICBpZiAodHlwZW9mIHVybEF0dHJpYnV0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsQXR0cmlidXRlO1xuICB9XG5cbiAgLy8gQWxzbyBsb29rIGF0IHRoZSB0cmFjZVN0YXRlLCB3aGljaCB3ZSBtYXkgc2V0IGluIHRoZSBzYW1wbGVyIGV2ZW4gZm9yIHVuc2FtcGxlZCBzcGFuc1xuICBjb25zdCB1cmxUcmFjZVN0YXRlID0gc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlU3RhdGU/LmdldChTRU5UUllfVFJBQ0VfU1RBVEVfVVJMKTtcbiAgaWYgKHVybFRyYWNlU3RhdGUpIHtcbiAgICByZXR1cm4gdXJsVHJhY2VTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUmVtb3RlU3BhbkNvbnRleHQoe1xuICBzcGFuSWQsXG4gIHRyYWNlSWQsXG4gIHNhbXBsZWQsXG4gIGRzYyxcbn1cblxuKSB7XG4gIC8vIFdlIHN0b3JlIHRoZSBEU0MgYXMgT1RFTCB0cmFjZSBzdGF0ZSBvbiB0aGUgc3BhbiBjb250ZXh0XG4gIGNvbnN0IHRyYWNlU3RhdGUgPSBtYWtlVHJhY2VTdGF0ZSh7XG4gICAgZHNjLFxuICAgIHNhbXBsZWQsXG4gIH0pO1xuXG4gIGNvbnN0IHNwYW5Db250ZXh0ID0ge1xuICAgIHRyYWNlSWQsXG4gICAgc3BhbklkLFxuICAgIGlzUmVtb3RlOiB0cnVlLFxuICAgIHRyYWNlRmxhZ3M6IHNhbXBsZWQgPyBhcGkuVHJhY2VGbGFncy5TQU1QTEVEIDogYXBpLlRyYWNlRmxhZ3MuTk9ORSxcbiAgICB0cmFjZVN0YXRlLFxuICB9O1xuXG4gIHJldHVybiBzcGFuQ29udGV4dDtcbn1cblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHdpdGggYSB0cmFuc2FjdGlvbi9zcGFuIGFuZCBmaW5pc2hlcyB0aGUgc3BhbiBhZnRlciB0aGUgZnVuY3Rpb24gaXMgZG9uZS5cbiAqIFRoZSBjcmVhdGVkIHNwYW4gaXMgdGhlIGFjdGl2ZSBzcGFuIGFuZCB3aWxsIGJlIHVzZWQgYXMgcGFyZW50IGJ5IG90aGVyIHNwYW5zIGNyZWF0ZWQgaW5zaWRlIHRoZSBmdW5jdGlvblxuICogYW5kIGNhbiBiZSBhY2Nlc3NlZCB2aWEgYFNlbnRyeS5nZXRBY3RpdmVTcGFuKClgLCBhcyBsb25nIGFzIHRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCB3aGlsZSB0aGUgc2NvcGUgaXMgYWN0aXZlLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIHNwYW4gdGhhdCBpcyBub3Qgc2V0IGFzIGFjdGl2ZSwgdXNlIHtAbGluayBzdGFydEluYWN0aXZlU3Bhbn0uXG4gKlxuICogWW91J2xsIGFsd2F5cyBnZXQgYSBzcGFuIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssXG4gKiBpdCBtYXkganVzdCBiZSBhIG5vbi1yZWNvcmRpbmcgc3BhbiBpZiB0aGUgc3BhbiBpcyBub3Qgc2FtcGxlZCBvciBpZiB0cmFjaW5nIGlzIGRpc2FibGVkLlxuICovXG5mdW5jdGlvbiBzdGFydFNwYW4ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgY29uc3QgdHJhY2VyID0gZ2V0VHJhY2VyKCk7XG5cbiAgY29uc3QgeyBuYW1lLCBwYXJlbnRTcGFuOiBjdXN0b21QYXJlbnRTcGFuIH0gPSBvcHRpb25zO1xuXG4gIC8vIElmIGBvcHRpb25zLnBhcmVudFNwYW5gIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gd3JhcCB0aGUgY2FsbGJhY2sgaW4gYHdpdGhBY3RpdmVTcGFuYFxuICBjb25zdCB3cmFwcGVyID0gZ2V0QWN0aXZlU3BhbldyYXBwZXIoY3VzdG9tUGFyZW50U3Bhbik7XG5cbiAgcmV0dXJuIHdyYXBwZXIoKCkgPT4ge1xuICAgIGNvbnN0IGFjdGl2ZUN0eCA9IGdldENvbnRleHQob3B0aW9ucy5zY29wZSwgb3B0aW9ucy5mb3JjZVRyYW5zYWN0aW9uKTtcbiAgICBjb25zdCBzaG91bGRTa2lwU3BhbiA9IG9wdGlvbnMub25seUlmUGFyZW50ICYmICFhcGkudHJhY2UuZ2V0U3BhbihhY3RpdmVDdHgpO1xuICAgIGNvbnN0IGN0eCA9IHNob3VsZFNraXBTcGFuID8gY29yZSQxLnN1cHByZXNzVHJhY2luZyhhY3RpdmVDdHgpIDogYWN0aXZlQ3R4O1xuXG4gICAgY29uc3Qgc3Bhbk9wdGlvbnMgPSBnZXRTcGFuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIHJldHVybiB0cmFjZXIuc3RhcnRBY3RpdmVTcGFuKG5hbWUsIHNwYW5PcHRpb25zLCBjdHgsIHNwYW4gPT4ge1xuICAgICAgcmV0dXJuIGNvcmUuaGFuZGxlQ2FsbGJhY2tFcnJvcnMoXG4gICAgICAgICgpID0+IGNhbGxiYWNrKHNwYW4pLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgLy8gT25seSBzZXQgdGhlIHNwYW4gc3RhdHVzIHRvIEVSUk9SIHdoZW4gdGhlcmUgd2Fzbid0IGFueSBzdGF0dXMgc2V0IGJlZm9yZSwgaW4gb3JkZXIgdG8gYXZvaWQgc3RvbXBpbmcgdXNlZnVsIHNwYW4gc3RhdHVzZXNcbiAgICAgICAgICBpZiAoY29yZS5zcGFuVG9KU09OKHNwYW4pLnN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUiB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHNwYW4uZW5kKCksXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGBTZW50cnkuc3RhcnRTcGFuYC4gV3JhcHMgYSBmdW5jdGlvbiB3aXRoIGEgc3BhbiwgYnV0IGRvZXMgbm90IGZpbmlzaCB0aGUgc3BhblxuICogYWZ0ZXIgdGhlIGZ1bmN0aW9uIGlzIGRvbmUgYXV0b21hdGljYWxseS4gWW91J2xsIGhhdmUgdG8gY2FsbCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogVGhlIGNyZWF0ZWQgc3BhbiBpcyB0aGUgYWN0aXZlIHNwYW4gYW5kIHdpbGwgYmUgdXNlZCBhcyBwYXJlbnQgYnkgb3RoZXIgc3BhbnMgY3JlYXRlZCBpbnNpZGUgdGhlIGZ1bmN0aW9uXG4gKiBhbmQgY2FuIGJlIGFjY2Vzc2VkIHZpYSBgU2VudHJ5LmdldEFjdGl2ZVNwYW4oKWAsIGFzIGxvbmcgYXMgdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdoaWxlIHRoZSBzY29wZSBpcyBhY3RpdmUuXG4gKlxuICogWW91J2xsIGFsd2F5cyBnZXQgYSBzcGFuIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssXG4gKiBpdCBtYXkganVzdCBiZSBhIG5vbi1yZWNvcmRpbmcgc3BhbiBpZiB0aGUgc3BhbiBpcyBub3Qgc2FtcGxlZCBvciBpZiB0cmFjaW5nIGlzIGRpc2FibGVkLlxuICovXG5mdW5jdGlvbiBzdGFydFNwYW5NYW51YWwoXG4gIG9wdGlvbnMsXG4gIGNhbGxiYWNrLFxuKSB7XG4gIGNvbnN0IHRyYWNlciA9IGdldFRyYWNlcigpO1xuXG4gIGNvbnN0IHsgbmFtZSwgcGFyZW50U3BhbjogY3VzdG9tUGFyZW50U3BhbiB9ID0gb3B0aW9ucztcblxuICAvLyBJZiBgb3B0aW9ucy5wYXJlbnRTcGFuYCBpcyBkZWZpbmVkLCB3ZSB3YW50IHRvIHdyYXAgdGhlIGNhbGxiYWNrIGluIGB3aXRoQWN0aXZlU3BhbmBcbiAgY29uc3Qgd3JhcHBlciA9IGdldEFjdGl2ZVNwYW5XcmFwcGVyKGN1c3RvbVBhcmVudFNwYW4pO1xuXG4gIHJldHVybiB3cmFwcGVyKCgpID0+IHtcbiAgICBjb25zdCBhY3RpdmVDdHggPSBnZXRDb250ZXh0KG9wdGlvbnMuc2NvcGUsIG9wdGlvbnMuZm9yY2VUcmFuc2FjdGlvbik7XG4gICAgY29uc3Qgc2hvdWxkU2tpcFNwYW4gPSBvcHRpb25zLm9ubHlJZlBhcmVudCAmJiAhYXBpLnRyYWNlLmdldFNwYW4oYWN0aXZlQ3R4KTtcbiAgICBjb25zdCBjdHggPSBzaG91bGRTa2lwU3BhbiA/IGNvcmUkMS5zdXBwcmVzc1RyYWNpbmcoYWN0aXZlQ3R4KSA6IGFjdGl2ZUN0eDtcblxuICAgIGNvbnN0IHNwYW5PcHRpb25zID0gZ2V0U3Bhbk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbihuYW1lLCBzcGFuT3B0aW9ucywgY3R4LCBzcGFuID0+IHtcbiAgICAgIHJldHVybiBjb3JlLmhhbmRsZUNhbGxiYWNrRXJyb3JzKFxuICAgICAgICAoKSA9PiBjYWxsYmFjayhzcGFuLCAoKSA9PiBzcGFuLmVuZCgpKSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIE9ubHkgc2V0IHRoZSBzcGFuIHN0YXR1cyB0byBFUlJPUiB3aGVuIHRoZXJlIHdhc24ndCBhbnkgc3RhdHVzIHNldCBiZWZvcmUsIGluIG9yZGVyIHRvIGF2b2lkIHN0b21waW5nIHVzZWZ1bCBzcGFuIHN0YXR1c2VzXG4gICAgICAgICAgaWYgKGNvcmUuc3BhblRvSlNPTihzcGFuKS5zdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwYW4uIFRoaXMgc3BhbiBpcyBub3Qgc2V0IGFzIGFjdGl2ZSwgc28gd2lsbCBub3QgZ2V0IGF1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gc3BhbnNcbiAqIGFzIGNoaWxkcmVuIG9yIGJlIGFibGUgdG8gYmUgYWNjZXNzZWQgdmlhIGBTZW50cnkuZ2V0QWN0aXZlU3BhbigpYC5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBzcGFuIHRoYXQgaXMgc2V0IGFzIGFjdGl2ZSwgdXNlIHtAbGluayBzdGFydFNwYW59LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcmV0dXJuIGEgc3BhbixcbiAqIGl0IG1heSBqdXN0IGJlIGEgbm9uLXJlY29yZGluZyBzcGFuIGlmIHRoZSBzcGFuIGlzIG5vdCBzYW1wbGVkIG9yIGlmIHRyYWNpbmcgaXMgZGlzYWJsZWQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0SW5hY3RpdmVTcGFuKG9wdGlvbnMpIHtcbiAgY29uc3QgdHJhY2VyID0gZ2V0VHJhY2VyKCk7XG5cbiAgY29uc3QgeyBuYW1lLCBwYXJlbnRTcGFuOiBjdXN0b21QYXJlbnRTcGFuIH0gPSBvcHRpb25zO1xuXG4gIC8vIElmIGBvcHRpb25zLnBhcmVudFNwYW5gIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gd3JhcCB0aGUgY2FsbGJhY2sgaW4gYHdpdGhBY3RpdmVTcGFuYFxuICBjb25zdCB3cmFwcGVyID0gZ2V0QWN0aXZlU3BhbldyYXBwZXIoY3VzdG9tUGFyZW50U3Bhbik7XG5cbiAgcmV0dXJuIHdyYXBwZXIoKCkgPT4ge1xuICAgIGNvbnN0IGFjdGl2ZUN0eCA9IGdldENvbnRleHQob3B0aW9ucy5zY29wZSwgb3B0aW9ucy5mb3JjZVRyYW5zYWN0aW9uKTtcbiAgICBjb25zdCBzaG91bGRTa2lwU3BhbiA9IG9wdGlvbnMub25seUlmUGFyZW50ICYmICFhcGkudHJhY2UuZ2V0U3BhbihhY3RpdmVDdHgpO1xuICAgIGNvbnN0IGN0eCA9IHNob3VsZFNraXBTcGFuID8gY29yZSQxLnN1cHByZXNzVHJhY2luZyhhY3RpdmVDdHgpIDogYWN0aXZlQ3R4O1xuXG4gICAgY29uc3Qgc3Bhbk9wdGlvbnMgPSBnZXRTcGFuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKG5hbWUsIHNwYW5PcHRpb25zLCBjdHgpO1xuXG4gICAgcmV0dXJuIHNwYW47XG4gIH0pO1xufVxuXG4vKipcbiAqIEZvcmtzIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBzZXRzIHRoZSBwcm92aWRlZCBzcGFuIGFzIGFjdGl2ZSBzcGFuIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwcm92aWRlZCBjYWxsYmFjay4gQ2FuIGJlXG4gKiBwYXNzZWQgYG51bGxgIHRvIHN0YXJ0IGFuIGVudGlyZWx5IG5ldyBzcGFuIHRyZWUuXG4gKlxuICogQHBhcmFtIHNwYW4gU3BhbnMgc3RhcnRlZCBpbiB0aGUgY29udGV4dCBvZiB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZSBjaGlsZHJlbiBvZiB0aGlzIHNwYW4uIElmIGBudWxsYCBpcyBwYXNzZWQsXG4gKiBzcGFucyBzdGFydGVkIHdpdGhpbiB0aGUgY2FsbGJhY2sgd2lsbCBiZSByb290IHNwYW5zLlxuICogQHBhcmFtIGNhbGxiYWNrIEV4ZWN1dGlvbiBjb250ZXh0IGluIHdoaWNoIHRoZSBwcm92aWRlZCBzcGFuIHdpbGwgYmUgYWN0aXZlLiBJcyBwYXNzZWQgdGhlIG5ld2x5IGZvcmtlZCBzY29wZS5cbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBwcm92aWRlZCBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gd2l0aEFjdGl2ZVNwYW4oc3BhbiwgY2FsbGJhY2spIHtcbiAgY29uc3QgbmV3Q29udGV4dFdpdGhBY3RpdmVTcGFuID0gc3BhbiA/IGFwaS50cmFjZS5zZXRTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpLCBzcGFuKSA6IGFwaS50cmFjZS5kZWxldGVTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpKTtcbiAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgobmV3Q29udGV4dFdpdGhBY3RpdmVTcGFuLCAoKSA9PiBjYWxsYmFjayhjb3JlLmdldEN1cnJlbnRTY29wZSgpKSk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNlcigpIHtcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgcmV0dXJuIGNsaWVudD8udHJhY2VyIHx8IGFwaS50cmFjZS5nZXRUcmFjZXIoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScsIGNvcmUuU0RLX1ZFUlNJT04pO1xufVxuXG5mdW5jdGlvbiBnZXRTcGFuT3B0aW9ucyhvcHRpb25zKSB7XG4gIGNvbnN0IHsgc3RhcnRUaW1lLCBhdHRyaWJ1dGVzLCBraW5kLCBvcCwgbGlua3MgfSA9IG9wdGlvbnM7XG5cbiAgLy8gT1RFTCBleHBlY3RzIHRpbWVzdGFtcHMgaW4gbXMsIG5vdCBzZWNvbmRzXG4gIGNvbnN0IGZpeGVkU3RhcnRUaW1lID0gdHlwZW9mIHN0YXJ0VGltZSA9PT0gJ251bWJlcicgPyBlbnN1cmVUaW1lc3RhbXBJbk1pbGxpc2Vjb25kcyhzdGFydFRpbWUpIDogc3RhcnRUaW1lO1xuXG4gIHJldHVybiB7XG4gICAgYXR0cmlidXRlczogb3BcbiAgICAgID8ge1xuICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBvcCxcbiAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxuICAgICAgICB9XG4gICAgICA6IGF0dHJpYnV0ZXMsXG4gICAga2luZCxcbiAgICBsaW5rcyxcbiAgICBzdGFydFRpbWU6IGZpeGVkU3RhcnRUaW1lLFxuICB9O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVUaW1lc3RhbXBJbk1pbGxpc2Vjb25kcyh0aW1lc3RhbXApIHtcbiAgY29uc3QgaXNNcyA9IHRpbWVzdGFtcCA8IDk5OTk5OTk5OTk7XG4gIHJldHVybiBpc01zID8gdGltZXN0YW1wICogMTAwMCA6IHRpbWVzdGFtcDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dChzY29wZSwgZm9yY2VUcmFuc2FjdGlvbikge1xuICBjb25zdCBjdHggPSBnZXRDb250ZXh0Rm9yU2NvcGUoc2NvcGUpO1xuICBjb25zdCBwYXJlbnRTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY3R4KTtcblxuICAvLyBJbiB0aGUgY2FzZSB0aGF0IHdlIGhhdmUgbm8gcGFyZW50IHNwYW4sIHdlIHN0YXJ0IGEgbmV3IHRyYWNlXG4gIC8vIE5vdGUgdGhhdCBpZiB3ZSBjb250aW51ZSBhIHRyYWNlLCB3ZSdsbCBhbHdheXMgaGF2ZSBhIHJlbW90ZSBwYXJlbnQgc3BhbiBoZXJlIGFueWhvd1xuICBpZiAoIXBhcmVudFNwYW4pIHtcbiAgICByZXR1cm4gY3R4O1xuICB9XG5cbiAgLy8gSWYgd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBhIHRyYW5zYWN0aW9uLCBhbmQgd2UgaGF2ZSBhIHBhcmVudCBzcGFuLCBhbGwgZ29vZCwgd2UganVzdCByZXR1cm4gYXMtaXMhXG4gIGlmICghZm9yY2VUcmFuc2FjdGlvbikge1xuICAgIHJldHVybiBjdHg7XG4gIH1cblxuICAvLyBFbHNlLCBpZiB3ZSBkbyBoYXZlIGEgcGFyZW50IHNwYW4gYnV0IHdhbnQgdG8gZm9yY2UgYSB0cmFuc2FjdGlvbiwgd2UgaGF2ZSB0byBzaW11bGF0ZSBhIFwicm9vdFwiIGNvbnRleHRcblxuICAvLyBFbHNlLCB3ZSBuZWVkIHRvIGRvIHR3byB0aGluZ3M6XG4gIC8vIDEuIFVuc2V0IHRoZSBwYXJlbnQgc3BhbiBmcm9tIHRoZSBjb250ZXh0LCBzbyB3ZSdsbCBjcmVhdGUgYSBuZXcgcm9vdCBzcGFuXG4gIC8vIDIuIEVuc3VyZSB0aGUgcHJvcGFnYXRpb24gY29udGV4dCBpcyBjb3JyZWN0LCBzbyB3ZSdsbCBjb250aW51ZSBmcm9tIHRoZSBwYXJlbnQgc3BhblxuICBjb25zdCBjdHhXaXRob3V0U3BhbiA9IGFwaS50cmFjZS5kZWxldGVTcGFuKGN0eCk7XG5cbiAgY29uc3QgeyBzcGFuSWQsIHRyYWNlSWQgfSA9IHBhcmVudFNwYW4uc3BhbkNvbnRleHQoKTtcbiAgY29uc3Qgc2FtcGxlZCA9IGdldFNhbXBsaW5nRGVjaXNpb24ocGFyZW50U3Bhbi5zcGFuQ29udGV4dCgpKTtcblxuICAvLyBJbiB0aGlzIGNhc2UsIHdoZW4gd2UgYXJlIGZvcmNpbmcgYSB0cmFuc2FjdGlvbiwgd2Ugd2FudCB0byB0cmVhdCB0aGlzIGxpa2UgY29udGludWluZyBhbiBpbmNvbWluZyB0cmFjZVxuICAvLyBzbyB3ZSBzZXQgdGhlIHRyYWNlU3RhdGUgYWNjb3JkaW5nIHRvIHRoZSByb290IHNwYW5cbiAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKHBhcmVudFNwYW4pO1xuICBjb25zdCBkc2MgPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3Bhbihyb290U3Bhbik7XG5cbiAgY29uc3QgdHJhY2VTdGF0ZSA9IG1ha2VUcmFjZVN0YXRlKHtcbiAgICBkc2MsXG4gICAgc2FtcGxlZCxcbiAgfSk7XG5cbiAgY29uc3Qgc3Bhbk9wdGlvbnMgPSB7XG4gICAgdHJhY2VJZCxcbiAgICBzcGFuSWQsXG4gICAgaXNSZW1vdGU6IHRydWUsXG4gICAgdHJhY2VGbGFnczogc2FtcGxlZCA/IGFwaS5UcmFjZUZsYWdzLlNBTVBMRUQgOiBhcGkuVHJhY2VGbGFncy5OT05FLFxuICAgIHRyYWNlU3RhdGUsXG4gIH07XG5cbiAgY29uc3QgY3R4V2l0aFNwYW5Db250ZXh0ID0gYXBpLnRyYWNlLnNldFNwYW5Db250ZXh0KGN0eFdpdGhvdXRTcGFuLCBzcGFuT3B0aW9ucyk7XG5cbiAgcmV0dXJuIGN0eFdpdGhTcGFuQ29udGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dEZvclNjb3BlKHNjb3BlKSB7XG4gIGlmIChzY29wZSkge1xuICAgIGNvbnN0IGN0eCA9IGdldENvbnRleHRGcm9tU2NvcGUoc2NvcGUpO1xuICAgIGlmIChjdHgpIHtcbiAgICAgIHJldHVybiBjdHg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xufVxuXG4vKipcbiAqIENvbnRpbnVlIGEgdHJhY2UgZnJvbSBgc2VudHJ5LXRyYWNlYCBhbmQgYGJhZ2dhZ2VgIHZhbHVlcy5cbiAqIFRoZXNlIHZhbHVlcyBjYW4gYmUgb2J0YWluZWQgZnJvbSBpbmNvbWluZyByZXF1ZXN0IGhlYWRlcnMsIG9yIGluIHRoZSBicm93c2VyIGZyb20gYDxtZXRhIG5hbWU9XCJzZW50cnktdHJhY2VcIj5gXG4gKiBhbmQgYDxtZXRhIG5hbWU9XCJiYWdnYWdlXCI+YCBIVE1MIHRhZ3MuXG4gKlxuICogU3BhbnMgc3RhcnRlZCB3aXRoIGBzdGFydFNwYW5gLCBgc3RhcnRTcGFuTWFudWFsYCBhbmQgYHN0YXJ0SW5hY3RpdmVTcGFuYCwgd2l0aGluIHRoZSBjYWxsYmFjayB3aWxsIGF1dG9tYXRpY2FsbHlcbiAqIGJlIGF0dGFjaGVkIHRvIHRoZSBpbmNvbWluZyB0cmFjZS5cbiAqXG4gKiBUaGlzIGlzIGEgY3VzdG9tIHZlcnNpb24gb2YgYGNvbnRpbnVlVHJhY2VgIHRoYXQgaXMgdXNlZCBpbiBPVEVMLXBvd2VyZWQgZW52aXJvbm1lbnRzLlxuICogSXQgcHJvcGFnYXRlcyB0aGUgdHJhY2UgYXMgYSByZW1vdGUgc3BhbiwgaW4gYWRkaXRpb24gdG8gc2V0dGluZyBpdCBvbiB0aGUgcHJvcGFnYXRpb24gY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gY29udGludWVUcmFjZShvcHRpb25zLCBjYWxsYmFjaykge1xuICByZXR1cm4gY29udGludWVUcmFjZUFzUmVtb3RlU3BhbihhcGkuY29udGV4dC5hY3RpdmUoKSwgb3B0aW9ucywgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdHJhY2UgY29udGV4dCBmb3IgYSBnaXZlbiBzY29wZS5cbiAqIFdlIGhhdmUgYSBjdXN0b20gaW1wbGVtZW50YXRpb24gaGVyZSBiZWNhdXNlIHdlIG5lZWQgYW4gT1RFTC1zcGVjaWZpYyB3YXkgdG8gZ2V0IHRoZSBzcGFuIGZyb20gYSBzY29wZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VHJhY2VDb250ZXh0Rm9yU2NvcGUoXG4gIGNsaWVudCxcbiAgc2NvcGUsXG4pIHtcbiAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dEZyb21TY29wZShzY29wZSk7XG4gIGNvbnN0IHNwYW4gPSBjdHggJiYgYXBpLnRyYWNlLmdldFNwYW4oY3R4KTtcblxuICBjb25zdCB0cmFjZUNvbnRleHQgPSBzcGFuID8gY29yZS5zcGFuVG9UcmFjZUNvbnRleHQoc3BhbikgOiBjb3JlLmdldFRyYWNlQ29udGV4dEZyb21TY29wZShzY29wZSk7XG5cbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IHNwYW5cbiAgICA/IGNvcmUuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKHNwYW4pXG4gICAgOiBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGUoY2xpZW50LCBzY29wZSk7XG4gIHJldHVybiBbZHluYW1pY1NhbXBsaW5nQ29udGV4dCwgdHJhY2VDb250ZXh0XTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlU3BhbldyYXBwZXIocGFyZW50U3Bhbikge1xuICByZXR1cm4gcGFyZW50U3BhbiAhPT0gdW5kZWZpbmVkXG4gICAgPyAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgcmV0dXJuIHdpdGhBY3RpdmVTcGFuKHBhcmVudFNwYW4sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICA6IChjYWxsYmFjaykgPT4gY2FsbGJhY2soKTtcbn1cblxuLyoqIFN1cHByZXNzIHRyYWNpbmcgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLCBlbnN1cmluZyBubyBzcGFucyBhcmUgZ2VuZXJhdGVkIGluc2lkZSBvZiBpdC4gKi9cbmZ1bmN0aW9uIHN1cHByZXNzVHJhY2luZyhjYWxsYmFjaykge1xuICBjb25zdCBjdHggPSBjb3JlJDEuc3VwcHJlc3NUcmFjaW5nKGFwaS5jb250ZXh0LmFjdGl2ZSgpKTtcbiAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoY3R4LCBjYWxsYmFjayk7XG59XG5cbi8qKiBFbnN1cmUgdGhlIGB0cmFjZWAgY29udGV4dCBpcyBzZXQgb24gYWxsIGV2ZW50cy4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRDb250ZXh0VHJhY2UoY2xpZW50KSB7XG4gIGNsaWVudC5vbigncHJlcHJvY2Vzc0V2ZW50JywgZXZlbnQgPT4ge1xuICAgIGNvbnN0IHNwYW4gPSBnZXRBY3RpdmVTcGFuKCk7XG4gICAgLy8gRm9yIHRyYW5zYWN0aW9uIGV2ZW50cywgdGhpcyBpcyBoYW5kbGVkIHNlcGFyYXRlbHlcbiAgICAvLyBCZWNhdXNlIHRoZSBhY3RpdmUgc3BhbiBtYXkgbm90IGJlIHRoZSBzcGFuIHRoYXQgaXMgYWN0dWFsbHkgdGhlIHRyYW5zYWN0aW9uIGV2ZW50XG4gICAgaWYgKCFzcGFuIHx8IGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBldmVudCBoYXMgYWxyZWFkeSBzZXQgYHRyYWNlYCBjb250ZXh0LCB1c2UgdGhhdCBvbmUuXG4gICAgZXZlbnQuY29udGV4dHMgPSB7XG4gICAgICB0cmFjZTogY29yZS5zcGFuVG9UcmFjZUNvbnRleHQoc3BhbiksXG4gICAgICAuLi5ldmVudC5jb250ZXh0cyxcbiAgICB9O1xuXG4gICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKHNwYW4pO1xuXG4gICAgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge1xuICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dDogY29yZS5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4ocm9vdFNwYW4pLFxuICAgICAgLi4uZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLFxuICAgIH07XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIE90ZWwtc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgYGdldFRyYWNlRGF0YWAuXG4gKiBAc2VlIGBAc2VudHJ5L2NvcmVgIHZlcnNpb24gb2YgYGdldFRyYWNlRGF0YWAgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0VHJhY2VEYXRhKHtcbiAgc3BhbixcbiAgc2NvcGUsXG4gIGNsaWVudCxcbn0gPSB7fSkge1xuICBsZXQgY3R4ID0gKHNjb3BlICYmIGdldENvbnRleHRGcm9tU2NvcGUoc2NvcGUpKSA/PyBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICBpZiAoc3Bhbikge1xuICAgIGNvbnN0IHsgc2NvcGUgfSA9IGNvcmUuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4oc3Bhbik7XG4gICAgLy8gZmFsbCBiYWNrIHRvIGN1cnJlbnQgY29udGV4dCBpZiBmb3Igd2hhdGV2ZXIgcmVhc29uIHdlIGNhbid0IGZpbmQgdGhlIG9uZSBvZiB0aGUgc3BhblxuICAgIGN0eCA9IChzY29wZSAmJiBnZXRDb250ZXh0RnJvbVNjb3BlKHNjb3BlKSkgfHwgYXBpLnRyYWNlLnNldFNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIHNwYW4pO1xuICB9XG5cbiAgY29uc3QgeyB0cmFjZUlkLCBzcGFuSWQsIHNhbXBsZWQsIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgfSA9IGdldEluamVjdGlvbkRhdGEoY3R4LCB7IHNjb3BlLCBjbGllbnQgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICAnc2VudHJ5LXRyYWNlJzogY29yZS5nZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyKHRyYWNlSWQsIHNwYW5JZCwgc2FtcGxlZCksXG4gICAgYmFnZ2FnZTogY29yZS5keW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpLFxuICB9O1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGFzeW5jIGNvbnRleHQgc3RyYXRlZ3kgdG8gdXNlIGZvbGxvdyB0aGUgT1RFTCBjb250ZXh0IHVuZGVyIHRoZSBob29kLlxuICogV2UgaGFuZGxlIGZvcmtpbmcgYSBodWIgaW5zaWRlIG9mIG91ciBjdXN0b20gT1RFTCBDb250ZXh0IE1hbmFnZXIgKC4vb3RlbENvbnRleHRNYW5hZ2VyLnRzKVxuICovXG5mdW5jdGlvbiBzZXRPcGVuVGVsZW1ldHJ5Q29udGV4dEFzeW5jQ29udGV4dFN0cmF0ZWd5KCkge1xuICBmdW5jdGlvbiBnZXRTY29wZXMoKSB7XG4gICAgY29uc3QgY3R4ID0gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgY29uc3Qgc2NvcGVzID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQoY3R4KTtcblxuICAgIGlmIChzY29wZXMpIHtcbiAgICAgIHJldHVybiBzY29wZXM7XG4gICAgfVxuXG4gICAgLy8gZmFsbGJhY2sgYmVoYXZpb3I6XG4gICAgLy8gaWYsIGZvciB3aGF0ZXZlciByZWFzb24sIHdlIGNhbid0IGZpbmQgc2NvcGVzIG9uIHRoZSBjb250ZXh0IGhlcmUsIHdlIGhhdmUgdG8gZml4IHRoaXMgc29tZWhvd1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZTogY29yZS5nZXREZWZhdWx0Q3VycmVudFNjb3BlKCksXG4gICAgICBpc29sYXRpb25TY29wZTogY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd2l0aFNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY3R4ID0gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG5cbiAgICAvLyBXZSBkZXBlbmQgb24gdGhlIG90ZWxDb250ZXh0TWFuYWdlciB0byBoYW5kbGUgdGhlIGNvbnRleHQvaHViXG4gICAgLy8gV2Ugc2V0IHRoZSBgU0VOVFJZX0ZPUktfSVNPTEFUSU9OX1NDT1BFX0NPTlRFWFRfS0VZYCBjb250ZXh0IHZhbHVlLCB3aGljaCBpcyBwaWNrZWQgdXAgYnlcbiAgICAvLyB0aGUgT1RFTCBjb250ZXh0IG1hbmFnZXIsIHdoaWNoIHVzZXMgdGhlIHByZXNlbmNlIG9mIHRoaXMga2V5IHRvIGRldGVybWluZSBpZiBpdCBzaG91bGRcbiAgICAvLyBmb3JrIHRoZSBpc29sYXRpb24gc2NvcGUsIG9yIG5vdFxuICAgIC8vIGFzIGJ5IGRlZmF1bHQsIHdlIGRvbid0IHdhbnQgdG8gZm9yayB0aGlzLCB1bmxlc3MgdHJpZ2dlcmVkIGV4cGxpY2l0bHkgYnkgYHdpdGhTY29wZWBcbiAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aChjdHgsICgpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhnZXRDdXJyZW50U2NvcGUoKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dEZyb21TY29wZShzY29wZSkgfHwgYXBpLmNvbnRleHQuYWN0aXZlKCk7XG5cbiAgICAvLyBXZSBkZXBlbmQgb24gdGhlIG90ZWxDb250ZXh0TWFuYWdlciB0byBoYW5kbGUgdGhlIGNvbnRleHQvaHViXG4gICAgLy8gV2Ugc2V0IHRoZSBgU0VOVFJZX0ZPUktfU0VUX1NDT1BFX0NPTlRFWFRfS0VZYCBjb250ZXh0IHZhbHVlLCB3aGljaCBpcyBwaWNrZWQgdXAgYnlcbiAgICAvLyB0aGUgT1RFTCBjb250ZXh0IG1hbmFnZXIsIHdoaWNoIHBpY2tzIHVwIHRoaXMgc2NvcGUgYXMgdGhlIGN1cnJlbnQgc2NvcGVcbiAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aChjdHguc2V0VmFsdWUoU0VOVFJZX0ZPUktfU0VUX1NDT1BFX0NPTlRFWFRfS0VZLCBzY29wZSksICgpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhzY29wZSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgIC8vIFdlIGRlcGVuZCBvbiB0aGUgb3RlbENvbnRleHRNYW5hZ2VyIHRvIGhhbmRsZSB0aGUgY29udGV4dC9odWJcbiAgICAvLyBXZSBzZXQgdGhlIGBTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVlgIGNvbnRleHQgdmFsdWUsIHdoaWNoIGlzIHBpY2tlZCB1cCBieVxuICAgIC8vIHRoZSBPVEVMIGNvbnRleHQgbWFuYWdlciwgd2hpY2ggdXNlcyB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBrZXkgdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZFxuICAgIC8vIGZvcmsgdGhlIGlzb2xhdGlvbiBzY29wZSwgb3Igbm90XG4gICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoY3R4LnNldFZhbHVlKFNFTlRSWV9GT1JLX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSwgdHJ1ZSksICgpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhnZXRJc29sYXRpb25TY29wZSgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpdGhTZXRJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgIC8vIFdlIGRlcGVuZCBvbiB0aGUgb3RlbENvbnRleHRNYW5hZ2VyIHRvIGhhbmRsZSB0aGUgY29udGV4dC9odWJcbiAgICAvLyBXZSBzZXQgdGhlIGBTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVlgIGNvbnRleHQgdmFsdWUsIHdoaWNoIGlzIHBpY2tlZCB1cCBieVxuICAgIC8vIHRoZSBPVEVMIGNvbnRleHQgbWFuYWdlciwgd2hpY2ggdXNlcyB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBrZXkgdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZFxuICAgIC8vIGZvcmsgdGhlIGlzb2xhdGlvbiBzY29wZSwgb3Igbm90XG4gICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoY3R4LnNldFZhbHVlKFNFTlRSWV9GT1JLX1NFVF9JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVksIGlzb2xhdGlvblNjb3BlKSwgKCkgPT4ge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGdldElzb2xhdGlvblNjb3BlKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICAgIHJldHVybiBnZXRTY29wZXMoKS5zY29wZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElzb2xhdGlvblNjb3BlKCkge1xuICAgIHJldHVybiBnZXRTY29wZXMoKS5pc29sYXRpb25TY29wZTtcbiAgfVxuXG4gIGNvcmUuc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koe1xuICAgIHdpdGhTY29wZSxcbiAgICB3aXRoU2V0U2NvcGUsXG4gICAgd2l0aFNldElzb2xhdGlvblNjb3BlLFxuICAgIHdpdGhJc29sYXRpb25TY29wZSxcbiAgICBnZXRDdXJyZW50U2NvcGUsXG4gICAgZ2V0SXNvbGF0aW9uU2NvcGUsXG4gICAgc3RhcnRTcGFuLFxuICAgIHN0YXJ0U3Bhbk1hbnVhbCxcbiAgICBzdGFydEluYWN0aXZlU3BhbixcbiAgICBnZXRBY3RpdmVTcGFuLFxuICAgIHN1cHByZXNzVHJhY2luZyxcbiAgICBnZXRUcmFjZURhdGEsXG4gICAgY29udGludWVUcmFjZSxcbiAgICAvLyBUaGUgdHlwZXMgaGVyZSBkb24ndCBmdWxseSBhbGlnbiwgYmVjYXVzZSBvdXIgb3duIGBTcGFuYCB0eXBlIGlzIG5hcnJvd2VyXG4gICAgLy8gdGhhbiB0aGUgT1RFTCBvbmUgLSBidXQgdGhpcyBpcyBPSyBmb3IgaGVyZSwgYXMgd2Ugbm93IHdlJ2xsIG9ubHkgaGF2ZSBPVEVMIHNwYW5zIHBhc3NlZCBhcm91bmRcbiAgICB3aXRoQWN0aXZlU3Bhbjogd2l0aEFjdGl2ZVNwYW4gLFxuICB9KTtcbn1cblxuLyoqXG4gKiBXcmFwIGFuIE9wZW5UZWxlbWV0cnkgQ29udGV4dE1hbmFnZXIgaW4gYSB3YXkgdGhhdCBlbnN1cmVzIHRoZSBjb250ZXh0IGlzIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBTZW50cnkgU2NvcGUuXG4gKlxuICogVXNhZ2U6XG4gKiBpbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rcyc7XG4gKiBjb25zdCBTZW50cnlDb250ZXh0TWFuYWdlciA9IHdyYXBDb250ZXh0TWFuYWdlckNsYXNzKEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIpO1xuICogY29uc3QgY29udGV4dE1hbmFnZXIgPSBuZXcgU2VudHJ5Q29udGV4dE1hbmFnZXIoKTtcbiAqL1xuZnVuY3Rpb24gd3JhcENvbnRleHRNYW5hZ2VyQ2xhc3MoXG4gIENvbnRleHRNYW5hZ2VyQ2xhc3MsXG4pIHtcbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBjdXN0b20gQ29udGV4dE1hbmFnZXIgZm9yIE9wZW5UZWxlbWV0cnksIHdoaWNoIGV4dGVuZHMgdGhlIGRlZmF1bHQgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlci5cbiAgICogSXQgZW5zdXJlcyB0aGF0IHdlIGNyZWF0ZSBuZXcgc2NvcGVzIHBlciBjb250ZXh0LCBzbyB0aGF0IHRoZSBPVEVMIENvbnRleHQgJiB0aGUgU2VudHJ5IFNjb3BlIGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHdlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQXN5bmNIb29rcyB3aXRoIHRoaXMsXG4gICAqIGJ1dCBzaW5jZSB0aGlzIHNob3VsZCB3b3JrIGZvciBOb2RlIDE0KyBhbnlob3cgdGhhdCBzaG91bGQgYmUgZ29vZCBlbm91Z2guXG4gICAqL1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgZG9lcyBub3QgbGlrZSB0aGlzLCBidXQgd2Uga25vdyB0aGlzIGlzIGZpbmVcbiAgY2xhc3MgU2VudHJ5Q29udGV4dE1hbmFnZXIgZXh0ZW5kcyBDb250ZXh0TWFuYWdlckNsYXNzIHtcbiAgICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICBzZXRJc1NldHVwKCdTZW50cnlDb250ZXh0TWFuYWdlcicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVyd3JpdGUgd2l0aCgpIG9mIHRoZSBvcmlnaW5hbCBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyXG4gICAgICogdG8gZW5zdXJlIHdlIGFsc28gY3JlYXRlIG5ldyBzY29wZXMgcGVyIGNvbnRleHQuXG4gICAgICovXG4gICAgIHdpdGgoXG4gICAgICBjb250ZXh0LFxuICAgICAgZm4sXG4gICAgICB0aGlzQXJnLFxuICAgICAgLi4uYXJnc1xuICAgICkge1xuICAgICAgY29uc3QgY3VycmVudFNjb3BlcyA9IGdldFNjb3Blc0Zyb21Db250ZXh0KGNvbnRleHQpO1xuICAgICAgY29uc3QgY3VycmVudFNjb3BlID0gY3VycmVudFNjb3Blcz8uc2NvcGUgfHwgY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJc29sYXRpb25TY29wZSA9IGN1cnJlbnRTY29wZXM/Lmlzb2xhdGlvblNjb3BlIHx8IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKTtcblxuICAgICAgY29uc3Qgc2hvdWxkRm9ya0lzb2xhdGlvblNjb3BlID0gY29udGV4dC5nZXRWYWx1ZShTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkpID09PSB0cnVlO1xuICAgICAgY29uc3Qgc2NvcGUgPSBjb250ZXh0LmdldFZhbHVlKFNFTlRSWV9GT1JLX1NFVF9TQ09QRV9DT05URVhUX0tFWSkgO1xuICAgICAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjb250ZXh0LmdldFZhbHVlKFNFTlRSWV9GT1JLX1NFVF9JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkpIDtcblxuICAgICAgY29uc3QgbmV3Q3VycmVudFNjb3BlID0gc2NvcGUgfHwgY3VycmVudFNjb3BlLmNsb25lKCk7XG4gICAgICBjb25zdCBuZXdJc29sYXRpb25TY29wZSA9XG4gICAgICAgIGlzb2xhdGlvblNjb3BlIHx8IChzaG91bGRGb3JrSXNvbGF0aW9uU2NvcGUgPyBjdXJyZW50SXNvbGF0aW9uU2NvcGUuY2xvbmUoKSA6IGN1cnJlbnRJc29sYXRpb25TY29wZSk7XG4gICAgICBjb25zdCBzY29wZXMgPSB7IHNjb3BlOiBuZXdDdXJyZW50U2NvcGUsIGlzb2xhdGlvblNjb3BlOiBuZXdJc29sYXRpb25TY29wZSB9O1xuXG4gICAgICBjb25zdCBjdHgxID0gc2V0U2NvcGVzT25Db250ZXh0KGNvbnRleHQsIHNjb3Blcyk7XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgdW5uZWVkZWQgdmFsdWVzIGFnYWluXG4gICAgICBjb25zdCBjdHgyID0gY3R4MVxuICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfSVNPTEFUSU9OX1NDT1BFX0NPTlRFWFRfS0VZKVxuICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfU0VUX1NDT1BFX0NPTlRFWFRfS0VZKVxuICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfU0VUX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSk7XG5cbiAgICAgIHNldENvbnRleHRPblNjb3BlKG5ld0N1cnJlbnRTY29wZSwgY3R4Mik7XG5cbiAgICAgIHJldHVybiBzdXBlci53aXRoKGN0eDIsIGZuLCB0aGlzQXJnLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gU2VudHJ5Q29udGV4dE1hbmFnZXIgO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcnVucyB0aHJvdWdoIGEgbGlzdCBvZiBPVEVMIFNwYW5zLCBhbmQgd3JhcHMgdGhlbSBpbiBhbiBgU3Bhbk5vZGVgXG4gKiB3aGVyZSBlYWNoIG5vZGUgaG9sZHMgYSByZWZlcmVuY2UgdG8gdGhlaXIgcGFyZW50IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdyb3VwU3BhbnNXaXRoUGFyZW50cyhzcGFucykge1xuICBjb25zdCBub2RlTWFwID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3Qgc3BhbiBvZiBzcGFucykge1xuICAgIGNyZWF0ZU9yVXBkYXRlU3Bhbk5vZGVBbmRSZWZzKG5vZGVNYXAsIHNwYW4pO1xuICB9XG5cbiAgcmV0dXJuIEFycmF5LmZyb20obm9kZU1hcCwgZnVuY3Rpb24gKFtfaWQsIHNwYW5Ob2RlXSkge1xuICAgIHJldHVybiBzcGFuTm9kZTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyByZXR1cm5zIHRoZSBfbG9jYWxfIHBhcmVudCBJRCAtIGBwYXJlbnRJZGAgb24gdGhlIHNwYW4gbWF5IHBvaW50IHRvIGEgcmVtb3RlIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGdldExvY2FsUGFyZW50SWQoc3Bhbikge1xuICBjb25zdCBwYXJlbnRJc1JlbW90ZSA9IHNwYW4uYXR0cmlidXRlc1tTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEVdID09PSB0cnVlO1xuICAvLyBJZiB0aGUgcGFyZW50SWQgaXMgdGhlIHRyYWNlIHBhcmVudCBJRCwgd2UgcHJldGVuZCBpdCdzIHVuZGVmaW5lZFxuICAvLyBBcyB0aGlzIG1lYW5zIHRoZSBwYXJlbnQgZXhpc3RzIHNvbWV3aGVyZSBlbHNlXG4gIHJldHVybiAhcGFyZW50SXNSZW1vdGUgPyBnZXRQYXJlbnRTcGFuSWQoc3BhbikgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlU3Bhbk5vZGVBbmRSZWZzKG5vZGVNYXAsIHNwYW4pIHtcbiAgY29uc3QgaWQgPSBzcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkO1xuICBjb25zdCBwYXJlbnRJZCA9IGdldExvY2FsUGFyZW50SWQoc3Bhbik7XG5cbiAgaWYgKCFwYXJlbnRJZCkge1xuICAgIGNyZWF0ZU9yVXBkYXRlTm9kZShub2RlTWFwLCB7IGlkLCBzcGFuLCBjaGlsZHJlbjogW10gfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRWxzZSBtYWtlIHN1cmUgdG8gY3JlYXRlIHBhcmVudCBub2RlIGFzIHdlbGxcbiAgLy8gTm90ZSB0aGF0IHRoZSBwYXJlbnQgbWF5IG5vdCBrbm93IGl0J3MgcGFyZW50IF95ZXRfLCB0aGlzIG1heSBiZSB1cGRhdGVkIGluIGEgbGF0ZXIgcGFzc1xuICBjb25zdCBwYXJlbnROb2RlID0gY3JlYXRlT3JHZXRQYXJlbnROb2RlKG5vZGVNYXAsIHBhcmVudElkKTtcbiAgY29uc3Qgbm9kZSA9IGNyZWF0ZU9yVXBkYXRlTm9kZShub2RlTWFwLCB7IGlkLCBzcGFuLCBwYXJlbnROb2RlLCBjaGlsZHJlbjogW10gfSk7XG4gIHBhcmVudE5vZGUuY2hpbGRyZW4ucHVzaChub2RlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT3JHZXRQYXJlbnROb2RlKG5vZGVNYXAsIGlkKSB7XG4gIGNvbnN0IGV4aXN0aW5nID0gbm9kZU1hcC5nZXQoaWQpO1xuXG4gIGlmIChleGlzdGluZykge1xuICAgIHJldHVybiBleGlzdGluZztcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVPclVwZGF0ZU5vZGUobm9kZU1hcCwgeyBpZCwgY2hpbGRyZW46IFtdIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPclVwZGF0ZU5vZGUobm9kZU1hcCwgc3Bhbk5vZGUpIHtcbiAgY29uc3QgZXhpc3RpbmcgPSBub2RlTWFwLmdldChzcGFuTm9kZS5pZCk7XG5cbiAgLy8gSWYgc3BhbiBpcyBhbHJlYWR5IHNldCwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmIChleGlzdGluZz8uc3Bhbikge1xuICAgIHJldHVybiBleGlzdGluZztcbiAgfVxuXG4gIC8vIElmIGl0IGV4aXN0cyBidXQgc3BhbiBpcyBub3Qgc2V0IHlldCwgd2UgdXBkYXRlIGl0XG4gIGlmIChleGlzdGluZyAmJiAhZXhpc3Rpbmcuc3Bhbikge1xuICAgIGV4aXN0aW5nLnNwYW4gPSBzcGFuTm9kZS5zcGFuO1xuICAgIGV4aXN0aW5nLnBhcmVudE5vZGUgPSBzcGFuTm9kZS5wYXJlbnROb2RlO1xuICAgIHJldHVybiBleGlzdGluZztcbiAgfVxuXG4gIC8vIEVsc2UsIHdlIGNyZWF0ZSBhIG5ldyBvbmUuLi5cbiAgbm9kZU1hcC5zZXQoc3Bhbk5vZGUuaWQsIHNwYW5Ob2RlKTtcbiAgcmV0dXJuIHNwYW5Ob2RlO1xufVxuXG4vLyBjYW5vbmljYWxDb2Rlc0dycGNNYXAgbWFwcyBzb21lIEdSUEMgY29kZXMgdG8gU2VudHJ5J3Mgc3BhbiBzdGF0dXNlcy4gU2VlIGRlc2NyaXB0aW9uIGluIGdycGMgZG9jdW1lbnRhdGlvbi5cbmNvbnN0IGNhbm9uaWNhbEdycGNFcnJvckNvZGVzTWFwID0ge1xuICAnMSc6ICdjYW5jZWxsZWQnLFxuICAnMic6ICd1bmtub3duX2Vycm9yJyxcbiAgJzMnOiAnaW52YWxpZF9hcmd1bWVudCcsXG4gICc0JzogJ2RlYWRsaW5lX2V4Y2VlZGVkJyxcbiAgJzUnOiAnbm90X2ZvdW5kJyxcbiAgJzYnOiAnYWxyZWFkeV9leGlzdHMnLFxuICAnNyc6ICdwZXJtaXNzaW9uX2RlbmllZCcsXG4gICc4JzogJ3Jlc291cmNlX2V4aGF1c3RlZCcsXG4gICc5JzogJ2ZhaWxlZF9wcmVjb25kaXRpb24nLFxuICAnMTAnOiAnYWJvcnRlZCcsXG4gICcxMSc6ICdvdXRfb2ZfcmFuZ2UnLFxuICAnMTInOiAndW5pbXBsZW1lbnRlZCcsXG4gICcxMyc6ICdpbnRlcm5hbF9lcnJvcicsXG4gICcxNCc6ICd1bmF2YWlsYWJsZScsXG4gICcxNSc6ICdkYXRhX2xvc3MnLFxuICAnMTYnOiAndW5hdXRoZW50aWNhdGVkJyxcbn0gO1xuXG5jb25zdCBpc1N0YXR1c0Vycm9yTWVzc2FnZVZhbGlkID0gKG1lc3NhZ2UpID0+IHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoY2Fub25pY2FsR3JwY0Vycm9yQ29kZXNNYXApLmluY2x1ZGVzKG1lc3NhZ2UgKTtcbn07XG5cbi8qKlxuICogR2V0IGEgU2VudHJ5IHNwYW4gc3RhdHVzIGZyb20gYW4gb3RlbCBzcGFuLlxuICovXG5mdW5jdGlvbiBtYXBTdGF0dXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gc3Bhbkhhc0F0dHJpYnV0ZXMoc3BhbikgPyBzcGFuLmF0dHJpYnV0ZXMgOiB7fTtcbiAgY29uc3Qgc3RhdHVzID0gc3Bhbkhhc1N0YXR1cyhzcGFuKSA/IHNwYW4uc3RhdHVzIDogdW5kZWZpbmVkO1xuXG4gIGlmIChzdGF0dXMpIHtcbiAgICAvLyBTaW5jZSBzcGFuIHN0YXR1cyBPSyBpcyBub3Qgc2V0IGJ5IGRlZmF1bHQsIHdlIGdpdmUgaXQgcHJpb3JpdHk6IGh0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9kb2NzL2NvbmNlcHRzL3NpZ25hbHMvdHJhY2VzLyNzcGFuLXN0YXR1c1xuICAgIGlmIChzdGF0dXMuY29kZSA9PT0gYXBpLlNwYW5TdGF0dXNDb2RlLk9LKSB7XG4gICAgICByZXR1cm4geyBjb2RlOiBjb3JlLlNQQU5fU1RBVFVTX09LIH07XG4gICAgICAvLyBJZiB0aGUgc3BhbiBpcyBhbHJlYWR5IG1hcmtlZCBhcyBlcnJvbmVvdXMgd2UgcmV0dXJuIHRoYXQgZXhhY3Qgc3RhdHVzXG4gICAgfSBlbHNlIGlmIChzdGF0dXMuY29kZSA9PT0gYXBpLlNwYW5TdGF0dXNDb2RlLkVSUk9SKSB7XG4gICAgICBpZiAodHlwZW9mIHN0YXR1cy5tZXNzYWdlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBpbmZlcnJlZFN0YXR1cyA9IGluZmVyU3RhdHVzRnJvbUF0dHJpYnV0ZXMoYXR0cmlidXRlcyk7XG4gICAgICAgIGlmIChpbmZlcnJlZFN0YXR1cykge1xuICAgICAgICAgIHJldHVybiBpbmZlcnJlZFN0YXR1cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdHVzLm1lc3NhZ2UgJiYgaXNTdGF0dXNFcnJvck1lc3NhZ2VWYWxpZChzdGF0dXMubWVzc2FnZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogc3RhdHVzLm1lc3NhZ2UgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmtub3duX2Vycm9yJyB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZSBzcGFuIHN0YXR1cyBpcyBVTlNFVCwgd2UgdHJ5IHRvIGluZmVyIGl0IGZyb20gSFRUUCBvciBHUlBDIHN0YXR1cyBjb2Rlcy5cbiAgY29uc3QgaW5mZXJyZWRTdGF0dXMgPSBpbmZlclN0YXR1c0Zyb21BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuXG4gIGlmIChpbmZlcnJlZFN0YXR1cykge1xuICAgIHJldHVybiBpbmZlcnJlZFN0YXR1cztcbiAgfVxuXG4gIC8vIFdlIGRlZmF1bHQgdG8gc2V0dGluZyB0aGUgc3BhbnMgc3RhdHVzIHRvIG9rLlxuICBpZiAoc3RhdHVzPy5jb2RlID09PSBhcGkuU3BhblN0YXR1c0NvZGUuVU5TRVQpIHtcbiAgICByZXR1cm4geyBjb2RlOiBjb3JlLlNQQU5fU1RBVFVTX09LIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Vua25vd25fZXJyb3InIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5mZXJTdGF0dXNGcm9tQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gIC8vIElmIHRoZSBzcGFuIHN0YXR1cyBpcyBVTlNFVCwgd2UgdHJ5IHRvIGluZmVyIGl0IGZyb20gSFRUUCBvciBHUlBDIHN0YXR1cyBjb2Rlcy5cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgaHR0cENvZGVBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXSB8fCBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuU0VNQVRUUlNfSFRUUF9TVEFUVVNfQ09ERV07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBjb25zdCBncnBjQ29kZUF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19SUENfR1JQQ19TVEFUVVNfQ09ERV07XG5cbiAgY29uc3QgbnVtYmVySHR0cENvZGUgPVxuICAgIHR5cGVvZiBodHRwQ29kZUF0dHJpYnV0ZSA9PT0gJ251bWJlcidcbiAgICAgID8gaHR0cENvZGVBdHRyaWJ1dGVcbiAgICAgIDogdHlwZW9mIGh0dHBDb2RlQXR0cmlidXRlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHBhcnNlSW50KGh0dHBDb2RlQXR0cmlidXRlKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICBpZiAodHlwZW9mIG51bWJlckh0dHBDb2RlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBjb3JlLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUobnVtYmVySHR0cENvZGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBncnBjQ29kZUF0dHJpYnV0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBjb2RlOiBjb3JlLlNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiBjYW5vbmljYWxHcnBjRXJyb3JDb2Rlc01hcFtncnBjQ29kZUF0dHJpYnV0ZV0gfHwgJ3Vua25vd25fZXJyb3InIH07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5jb25zdCBNQVhfU1BBTl9DT1VOVCA9IDEwMDA7XG5jb25zdCBERUZBVUxUX1RJTUVPVVQgPSAzMDA7IC8vIDUgbWluXG5cbi8qKlxuICogQSBTZW50cnktc3BlY2lmaWMgZXhwb3J0ZXIgdGhhdCBjb252ZXJ0cyBPcGVuVGVsZW1ldHJ5IFNwYW5zIHRvIFNlbnRyeSBTcGFucyAmIFRyYW5zYWN0aW9ucy5cbiAqL1xuY2xhc3MgU2VudHJ5U3BhbkV4cG9ydGVyIHtcbiAgLypcbiAgICogQSBxdWljayBleHBsYW5hdGlvbiBvbiB0aGUgYnVja2V0czogV2UgZG8gYnVja2V0aW5nIG9mIGZpbmlzaGVkIHNwYW5zIGZvciBlZmZpY2llbmN5LiBUaGlzIHNwYW4gZXhwb3J0ZXIgaXNcbiAgICogYWNjdW11bGF0aW5nIHNwYW5zIHVudGlsIGEgcm9vdCBzcGFuIGlzIGVuY291bnRlcmVkIGFuZCB0aGVuIGl0IGZsdXNoZXMgYWxsIHRoZSBzcGFucyB0aGF0IGFyZSBkZXNjZW5kYW50cyBvZiB0aGF0XG4gICAqIHJvb3Qgc3Bhbi4gQmVjYXVzZSBpdCBpcyB0b3RhbGx5IGluIHRoZSByZWFsbSBvZiBwb3NzaWJpbGl0aWVzIHRoYXQgcm9vdCBzcGFucyBhcmUgbmV2ZXIgZmluaXNoZWQsIGFuZCB3ZSBkb24ndFxuICAgKiB3YW50IHRvIGFjY3VtdWxhdGUgc3BhbnMgaW5kZWZpbml0ZWx5IGluIG1lbW9yeSwgd2UgbmVlZCB0byBwZXJpb2RpY2FsbHkgZXZhY3VhdGUgc3BhbnMuIE5haXZlbHkgd2UgY291bGQgc2ltcGx5XG4gICAqIHN0b3JlIHRoZSBzcGFucyBpbiBhbiBhcnJheSBhbmQgZWFjaCB0aW1lIGEgbmV3IHNwYW4gY29tZXMgaW4gd2UgY291bGQgaXRlcmF0ZSB0aHJvdWdoIHRoZSBlbnRpcmUgYXJyYXkgYW5kXG4gICAqIGV2YWN1YXRlIGFsbCBzcGFucyB0aGF0IGhhdmUgYW4gZW5kLXRpbWVzdGFtcCB0aGF0IGlzIG9sZGVyIHRoYW4gb3VyIGxpbWl0LiBUaGlzIGNvdWxkIGdldCBxdWl0ZSBleHBlbnNpdmUgYmVjYXVzZVxuICAgKiB3ZSB3b3VsZCBoYXZlIHRvIGl0ZXJhdGUgYSBwb3RlbnRpYWxseSBsYXJnZSBudW1iZXIgb2Ygc3BhbnMgZXZlcnkgdGltZSB3ZSBldmFjdWF0ZS4gV2Ugd2FudCB0byBhdm9pZCB0aGVzZSBsYXJnZVxuICAgKiBidXJzdHMgb2YgY29tcHV0YXRpb24uXG4gICAqXG4gICAqIEluc3RlYWQgd2UgZ28gZm9yIGEgYnVja2V0aW5nIGFwcHJvYWNoIGFuZCBwdXQgc3BhbnMgaW50byBidWNrZXRzLCBiYXNlZCBvbiB3aGF0IHNlY29uZFxuICAgKiAobW9kdWxvIHRoZSB0aW1lIGxpbWl0KSB0aGUgc3BhbiB3YXMgcHV0IGludG8gdGhlIGV4cG9ydGVyLiBXaXRoIGJ1Y2tldHMsIHdoZW4gd2UgZGVjaWRlIHRvIGV2YWN1YXRlLCB3ZSBjYW5cbiAgICogaXRlcmF0ZSB0aHJvdWdoIHRoZSBidWNrZXQgZW50cmllcyBpbnN0ZWFkLCB3aGljaCBoYXZlIGFuIHVwcGVyIGJvdW5kIG9mIGl0ZW1zLCBtYWtpbmcgdGhlIGV2YWN1YXRpb24gbXVjaCBtb3JlXG4gICAqIGVmZmljaWVudC4gQ2xlYW5pbmcgdXAgYWxzbyBiZWNvbWVzIG11Y2ggbW9yZSBlZmZpY2llbnQgc2luY2UgaXQgc2ltcGx5IGludm9sdmVzIGRlLXJlZmVyZW5jaW5nIGEgYnVja2V0IHdpdGhpbiB0aGVcbiAgICogYnVja2V0IGFycmF5LCBhbmQgbGV0dGluZyBnYXJiYWdlIGNvbGxlY3Rpb24gdGFrZSBjYXJlIG9mIHRoZSByZXN0LlxuICAgKi9cblxuICAvLyBFc3NlbnRpYWxseSBhIGEgc2V0IG9mIHNwYW4gaWRzIHRoYXQgYXJlIGFscmVhZHkgc2VudC4gVGhlIHZhbHVlcyBhcmUgZXhwaXJhdGlvblxuICAvLyB0aW1lcyBpbiB0aGlzIGNhY2hlIHNvIHdlIGRvbid0IGhvbGQgb250byB0aGVtIGluZGVmaW5pdGVseS5cblxuICAvKiBJbnRlcm5hbGx5LCB3ZSB1c2UgYSBkZWJvdW5jZWQgZmx1c2ggdG8gZ2l2ZSBzb21lIHdpZ2dsZSByb29tIHRvIHRoZSBzcGFuIHByb2Nlc3NvciB0byBhY2N1bXVsYXRlIG1vcmUgc3BhbnMuICovXG5cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnNcblxuKSB7XG4gICAgdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0U2l6ZSA9IG9wdGlvbnM/LnRpbWVvdXQgfHwgREVGQVVMVF9USU1FT1VUO1xuICAgIHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldHMgPSBuZXcgQXJyYXkodGhpcy5fZmluaXNoZWRTcGFuQnVja2V0U2l6ZSkuZmlsbCh1bmRlZmluZWQpO1xuICAgIHRoaXMuX2xhc3RDbGVhbnVwVGltZXN0YW1wSW5TID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgdGhpcy5fc3BhbnNUb0J1Y2tldEVudHJ5ID0gbmV3IFdlYWtNYXAoKTtcbiAgICB0aGlzLl9zZW50U3BhbnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fZGVib3VuY2VkRmx1c2ggPSBjb3JlLmRlYm91bmNlKHRoaXMuZmx1c2guYmluZCh0aGlzKSwgMSwgeyBtYXhXYWl0OiAxMDAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0IGEgc2luZ2xlIHNwYW4uXG4gICAqIFRoaXMgaXMgY2FsbGVkIGJ5IHRoZSBzcGFuIHByb2Nlc3NvciB3aGVuZXZlciBhIHNwYW4gaXMgZW5kZWQuXG4gICAqL1xuICAgZXhwb3J0KHNwYW4pIHtcbiAgICBjb25zdCBjdXJyZW50VGltZXN0YW1wSW5TID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgICBpZiAodGhpcy5fbGFzdENsZWFudXBUaW1lc3RhbXBJblMgIT09IGN1cnJlbnRUaW1lc3RhbXBJblMpIHtcbiAgICAgIGxldCBkcm9wcGVkU3BhbkNvdW50ID0gMDtcbiAgICAgIHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldHMuZm9yRWFjaCgoYnVja2V0LCBpKSA9PiB7XG4gICAgICAgIGlmIChidWNrZXQgJiYgYnVja2V0LnRpbWVzdGFtcEluUyA8PSBjdXJyZW50VGltZXN0YW1wSW5TIC0gdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0U2l6ZSkge1xuICAgICAgICAgIGRyb3BwZWRTcGFuQ291bnQgKz0gYnVja2V0LnNwYW5zLnNpemU7XG4gICAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0c1tpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZHJvcHBlZFNwYW5Db3VudCA+IDApIHtcbiAgICAgICAgREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICBjb3JlLmRlYnVnLmxvZyhcbiAgICAgICAgICAgIGBTcGFuRXhwb3J0ZXIgZHJvcHBlZCAke2Ryb3BwZWRTcGFuQ291bnR9IHNwYW5zIGJlY2F1c2UgdGhleSB3ZXJlIHBlbmRpbmcgZm9yIG1vcmUgdGhhbiAke3RoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldFNpemV9IHNlY29uZHMuYCxcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGFzdENsZWFudXBUaW1lc3RhbXBJblMgPSBjdXJyZW50VGltZXN0YW1wSW5TO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRCdWNrZXRJbmRleCA9IGN1cnJlbnRUaW1lc3RhbXBJblMgJSB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRTaXplO1xuICAgIGNvbnN0IGN1cnJlbnRCdWNrZXQgPSB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzW2N1cnJlbnRCdWNrZXRJbmRleF0gfHwge1xuICAgICAgdGltZXN0YW1wSW5TOiBjdXJyZW50VGltZXN0YW1wSW5TLFxuICAgICAgc3BhbnM6IG5ldyBTZXQoKSxcbiAgICB9O1xuICAgIHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldHNbY3VycmVudEJ1Y2tldEluZGV4XSA9IGN1cnJlbnRCdWNrZXQ7XG4gICAgY3VycmVudEJ1Y2tldC5zcGFucy5hZGQoc3Bhbik7XG4gICAgdGhpcy5fc3BhbnNUb0J1Y2tldEVudHJ5LnNldChzcGFuLCBjdXJyZW50QnVja2V0KTtcblxuICAgIC8vIElmIHRoZSBzcGFuIGRvZXNuJ3QgaGF2ZSBhIGxvY2FsIHBhcmVudCBJRCAoaXQncyBhIHJvb3Qgc3BhbiksIHdlJ3JlIGdvbm5hIGZsdXNoIGFsbCB0aGUgZW5kZWQgc3BhbnNcbiAgICBjb25zdCBsb2NhbFBhcmVudElkID0gZ2V0TG9jYWxQYXJlbnRJZChzcGFuKTtcbiAgICBpZiAoIWxvY2FsUGFyZW50SWQgfHwgdGhpcy5fc2VudFNwYW5zLmhhcyhsb2NhbFBhcmVudElkKSkge1xuICAgICAgdGhpcy5fZGVib3VuY2VkRmx1c2goKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJ5IHRvIGZsdXNoIGFueSBwZW5kaW5nIHNwYW5zIGltbWVkaWF0ZWx5LlxuICAgKiBUaGlzIGlzIGNhbGxlZCBpbnRlcm5hbGx5IGJ5IHRoZSBleHBvcnRlciAodmlhIF9kZWJvdW5jZWRGbHVzaCksXG4gICAqIGJ1dCBjYW4gYWxzbyBiZSB0cmlnZ2VyZWQgZXh0ZXJuYWxseSBpZiB3ZSBmb3JjZS1mbHVzaC5cbiAgICovXG4gICBmbHVzaCgpIHtcbiAgICBjb25zdCBmaW5pc2hlZFNwYW5zID0gdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0cy5mbGF0TWFwKGJ1Y2tldCA9PiAoYnVja2V0ID8gQXJyYXkuZnJvbShidWNrZXQuc3BhbnMpIDogW10pKTtcblxuICAgIHRoaXMuX2ZsdXNoU2VudFNwYW5DYWNoZSgpO1xuICAgIGNvbnN0IHNlbnRTcGFucyA9IHRoaXMuX21heWJlU2VuZChmaW5pc2hlZFNwYW5zKTtcblxuICAgIGNvbnN0IHNlbnRTcGFuQ291bnQgPSBzZW50U3BhbnMuc2l6ZTtcbiAgICBjb25zdCByZW1haW5pbmdPcGVuU3BhbkNvdW50ID0gZmluaXNoZWRTcGFucy5sZW5ndGggLSBzZW50U3BhbkNvdW50O1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBjb3JlLmRlYnVnLmxvZyhcbiAgICAgICAgYFNwYW5FeHBvcnRlciBleHBvcnRlZCAke3NlbnRTcGFuQ291bnR9IHNwYW5zLCAke3JlbWFpbmluZ09wZW5TcGFuQ291bnR9IHNwYW5zIGFyZSB3YWl0aW5nIGZvciB0aGVpciBwYXJlbnQgc3BhbnMgdG8gZmluaXNoYCxcbiAgICAgICk7XG5cbiAgICBjb25zdCBleHBpcmF0aW9uRGF0ZSA9IERhdGUubm93KCkgKyBERUZBVUxUX1RJTUVPVVQgKiAxMDAwO1xuXG4gICAgZm9yIChjb25zdCBzcGFuIG9mIHNlbnRTcGFucykge1xuICAgICAgdGhpcy5fc2VudFNwYW5zLnNldChzcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkLCBleHBpcmF0aW9uRGF0ZSk7XG4gICAgICBjb25zdCBidWNrZXRFbnRyeSA9IHRoaXMuX3NwYW5zVG9CdWNrZXRFbnRyeS5nZXQoc3Bhbik7XG4gICAgICBpZiAoYnVja2V0RW50cnkpIHtcbiAgICAgICAgYnVja2V0RW50cnkuc3BhbnMuZGVsZXRlKHNwYW4pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDYW5jZWwgYSBwZW5kaW5nIGRlYm91bmNlZCBmbHVzaCwgaWYgdGhlcmUgaXMgb25lXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVsZXZhbnQgaWYgd2UgZGlyZWN0bHkgZmx1c2gsIGNpcmN1bXZlbnRpbmcgdGhlIGRlYm91bmNlXG4gICAgLy8gaW4gdGhhdCBjYXNlLCB3ZSB3YW50IHRvIGNhbmNlbCBhbnkgcGVuZGluZyBkZWJvdW5jZWQgZmx1c2hcbiAgICB0aGlzLl9kZWJvdW5jZWRGbHVzaC5jYW5jZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgZXhwb3J0ZXIuXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIHNwYW4gcHJvY2Vzc29yIGlzIHNodXQgZG93bi5cbiAgICovXG4gICBjbGVhcigpIHtcbiAgICB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzID0gdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0cy5maWxsKHVuZGVmaW5lZCk7XG4gICAgdGhpcy5fc2VudFNwYW5zLmNsZWFyKCk7XG4gICAgdGhpcy5fZGVib3VuY2VkRmx1c2guY2FuY2VsKCk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCB0aGUgZ2l2ZW4gc3BhbnMsIGJ1dCBvbmx5IGlmIHRoZXkgYXJlIHBhcnQgb2YgYSBmaW5pc2hlZCB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogUmV0dXJucyB0aGUgc2VudCBzcGFucy5cbiAgICogU3BhbnMgcmVtYWluIHVuc2VudCB3aGVuIHRoZWlyIHBhcmVudCBzcGFuIGlzIG5vdCB5ZXQgZmluaXNoZWQuXG4gICAqIFRoaXMgd2lsbCBoYXBwZW4gcmVndWxhcmx5LCBhcyBjaGlsZCBzcGFucyBhcmUgZ2VuZXJhbGx5IGZpbmlzaGVkIGJlZm9yZSB0aGVpciBwYXJlbnRzLlxuICAgKiBCdXQgaXQgX2NvdWxkXyBhbHNvIGhhcHBlbiBiZWNhdXNlLCBmb3Igd2hhdGV2ZXIgcmVhc29uLCBhIHBhcmVudCBzcGFuIHdhcyBsb3N0LlxuICAgKiBJbiB0aGlzIGNhc2UsIHdlJ2xsIGV2ZW50dWFsbHkgbmVlZCB0byBjbGVhbiB0aGlzIHVwLlxuICAgKi9cbiAgIF9tYXliZVNlbmQoc3BhbnMpIHtcbiAgICBjb25zdCBncm91cGVkID0gZ3JvdXBTcGFuc1dpdGhQYXJlbnRzKHNwYW5zKTtcbiAgICBjb25zdCBzZW50U3BhbnMgPSBuZXcgU2V0KCk7XG5cbiAgICBjb25zdCByb290Tm9kZXMgPSB0aGlzLl9nZXRDb21wbGV0ZWRSb290Tm9kZXMoZ3JvdXBlZCk7XG5cbiAgICBmb3IgKGNvbnN0IHJvb3Qgb2Ygcm9vdE5vZGVzKSB7XG4gICAgICBjb25zdCBzcGFuID0gcm9vdC5zcGFuO1xuICAgICAgc2VudFNwYW5zLmFkZChzcGFuKTtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uRXZlbnQgPSBjcmVhdGVUcmFuc2FjdGlvbkZvck90ZWxTcGFuKHNwYW4pO1xuXG4gICAgICAvLyBBZGQgYW4gYXR0cmlidXRlIHRvIHRoZSB0cmFuc2FjdGlvbiBldmVudCB0byBpbmRpY2F0ZSB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gaXMgYW4gb3JwaGFuZWQgdHJhbnNhY3Rpb25cbiAgICAgIGlmIChyb290LnBhcmVudE5vZGUgJiYgdGhpcy5fc2VudFNwYW5zLmhhcyhyb290LnBhcmVudE5vZGUuaWQpKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlRGF0YSA9IHRyYW5zYWN0aW9uRXZlbnQuY29udGV4dHM/LnRyYWNlPy5kYXRhO1xuICAgICAgICBpZiAodHJhY2VEYXRhKSB7XG4gICAgICAgICAgdHJhY2VEYXRhWydzZW50cnkucGFyZW50X3NwYW5fYWxyZWFkeV9zZW50J10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFdlJ2xsIHJlY3Vyc2l2ZWx5IGFkZCBhbGwgdGhlIGNoaWxkIHNwYW5zIHRvIHRoaXMgYXJyYXlcbiAgICAgIGNvbnN0IHNwYW5zID0gdHJhbnNhY3Rpb25FdmVudC5zcGFucyB8fCBbXTtcblxuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiByb290LmNoaWxkcmVuKSB7XG4gICAgICAgIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3BhbihjaGlsZCwgc3BhbnMsIHNlbnRTcGFucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNwYW5zLnNvcnQoKSBtdXRhdGVzIHRoZSBhcnJheSwgYnV0IHdlIGRvIG5vdCB1c2UgdGhpcyBhbnltb3JlIGFmdGVyIHRoaXMgcG9pbnRcbiAgICAgIC8vIHNvIHdlIGNhbiBzYWZlbHkgbXV0YXRlIGl0IGhlcmVcbiAgICAgIHRyYW5zYWN0aW9uRXZlbnQuc3BhbnMgPVxuICAgICAgICBzcGFucy5sZW5ndGggPiBNQVhfU1BBTl9DT1VOVFxuICAgICAgICAgID8gc3BhbnMuc29ydCgoYSwgYikgPT4gYS5zdGFydF90aW1lc3RhbXAgLSBiLnN0YXJ0X3RpbWVzdGFtcCkuc2xpY2UoMCwgTUFYX1NQQU5fQ09VTlQpXG4gICAgICAgICAgOiBzcGFucztcblxuICAgICAgY29uc3QgbWVhc3VyZW1lbnRzID0gY29yZS50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzKHNwYW4uZXZlbnRzKTtcbiAgICAgIGlmIChtZWFzdXJlbWVudHMpIHtcbiAgICAgICAgdHJhbnNhY3Rpb25FdmVudC5tZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHM7XG4gICAgICB9XG5cbiAgICAgIGNvcmUuY2FwdHVyZUV2ZW50KHRyYW5zYWN0aW9uRXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBzZW50U3BhbnM7XG4gIH1cblxuICAvKiogUmVtb3ZlIFwiZXhwaXJlZFwiIHNwYW4gaWQgZW50cmllcyBmcm9tIHRoZSBfc2VudFNwYW5zIGNhY2hlLiAqL1xuICAgX2ZsdXNoU2VudFNwYW5DYWNoZSgpIHtcbiAgICBjb25zdCBjdXJyZW50VGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAvLyBOb3RlLCBpdCBpcyBzYWZlIHRvIGRlbGV0ZSBpdGVtcyBmcm9tIHRoZSBtYXAgYXMgd2UgZ286IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNTk0Mzk5NS85MDI5N1xuICAgIGZvciAoY29uc3QgW3NwYW5JZCwgZXhwaXJhdGlvblRpbWVdIG9mIHRoaXMuX3NlbnRTcGFucy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMuX3NlbnRTcGFucy5kZWxldGUoc3BhbklkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogQ2hlY2sgaWYgYSBub2RlIGlzIGEgY29tcGxldGVkIHJvb3Qgbm9kZSBvciBhIG5vZGUgd2hvc2UgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gc2VudCAqL1xuICAgX25vZGVJc0NvbXBsZXRlZFJvb3ROb2RlT3JIYXNTZW50UGFyZW50KG5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlLnNwYW4gJiYgKCFub2RlLnBhcmVudE5vZGUgfHwgdGhpcy5fc2VudFNwYW5zLmhhcyhub2RlLnBhcmVudE5vZGUuaWQpKTtcbiAgfVxuXG4gIC8qKiBHZXQgYWxsIGNvbXBsZXRlZCByb290IG5vZGVzIGZyb20gYSBsaXN0IG9mIG5vZGVzICovXG4gICBfZ2V0Q29tcGxldGVkUm9vdE5vZGVzKG5vZGVzKSB7XG4gICAgLy8gVE9ETzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlIHRoZSBleHBsaWNpdCBgbm9kZSBpcyBTcGFuTm9kZUNvbXBsZXRlZGAgdHlwZSBndWFyZFxuICAgIC8vICAgICAgIG9uY2Ugd2Ugc3RvcCBzdXBwb3J0aW5nIFRTIDwgNS41XG4gICAgcmV0dXJuIG5vZGVzLmZpbHRlcigobm9kZSkgPT4gdGhpcy5fbm9kZUlzQ29tcGxldGVkUm9vdE5vZGVPckhhc1NlbnRQYXJlbnQobm9kZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3BhbihzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBzcGFuLmF0dHJpYnV0ZXM7XG5cbiAgY29uc3Qgb3JpZ2luID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXSA7XG4gIGNvbnN0IG9wID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIDtcbiAgY29uc3Qgc291cmNlID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSA7XG5cbiAgcmV0dXJuIHsgb3JpZ2luLCBvcCwgc291cmNlIH07XG59XG5cbi8qKiBFeHBvcnRlZCBvbmx5IGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zYWN0aW9uRm9yT3RlbFNwYW4oc3Bhbikge1xuICBjb25zdCB7IG9wLCBkZXNjcmlwdGlvbiwgZGF0YSwgb3JpZ2luID0gJ21hbnVhbCcsIHNvdXJjZSB9ID0gZ2V0U3BhbkRhdGEoc3Bhbik7XG4gIGNvbnN0IGNhcHR1cmVkU3BhblNjb3BlcyA9IGNvcmUuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4oc3BhbiApO1xuXG4gIGNvbnN0IHNhbXBsZVJhdGUgPSBzcGFuLmF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFXSA7XG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06IHNvdXJjZSxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFXTogc2FtcGxlUmF0ZSxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogb3AsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiBvcmlnaW4sXG4gICAgLi4uZGF0YSxcbiAgICAuLi5yZW1vdmVTZW50cnlBdHRyaWJ1dGVzKHNwYW4uYXR0cmlidXRlcyksXG4gIH07XG5cbiAgY29uc3QgeyBsaW5rcyB9ID0gc3BhbjtcbiAgY29uc3QgeyB0cmFjZUlkOiB0cmFjZV9pZCwgc3BhbklkOiBzcGFuX2lkIH0gPSBzcGFuLnNwYW5Db250ZXh0KCk7XG5cbiAgLy8gSWYgcGFyZW50U3BhbklkRnJvbVRyYWNlU3RhdGUgaXMgZGVmaW5lZCBhdCBhbGwsIHdlIHdhbnQgaXQgdG8gdGFrZSBwcmVjZWRlbmNlXG4gIC8vIEluIHRoYXQgY2FzZSwgYW4gZW1wdHkgc3RyaW5nIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBcIm5vIHBhcmVudCBzcGFuIGlkXCIsXG4gIC8vIGV2ZW4gaWYgYHNwYW4ucGFyZW50U3BhbklkYCBpcyBzZXRcbiAgLy8gdGhpcyBpcyB0aGUgY2FzZSB3aGVuIHdlIGFyZSBzdGFydGluZyBhIG5ldyB0cmFjZSwgd2hlcmUgd2UgaGF2ZSBhIHZpcnR1YWwgc3BhbiBiYXNlZCBvbiB0aGUgcHJvcGFnYXRpb25Db250ZXh0XG4gIC8vIFdlIG9ubHkgd2FudCB0byBjb250aW51ZSB0aGUgdHJhY2VJZCBpbiB0aGlzIGNhc2UsIGJ1dCBpZ25vcmUgdGhlIHBhcmVudCBzcGFuXG4gIGNvbnN0IHBhcmVudF9zcGFuX2lkID0gZ2V0UGFyZW50U3BhbklkKHNwYW4pO1xuXG4gIGNvbnN0IHN0YXR1cyA9IG1hcFN0YXR1cyhzcGFuKTtcblxuICBjb25zdCB0cmFjZUNvbnRleHQgPSB7XG4gICAgcGFyZW50X3NwYW5faWQsXG4gICAgc3Bhbl9pZCxcbiAgICB0cmFjZV9pZCxcbiAgICBkYXRhOiBhdHRyaWJ1dGVzLFxuICAgIG9yaWdpbixcbiAgICBvcCxcbiAgICBzdGF0dXM6IGNvcmUuZ2V0U3RhdHVzTWVzc2FnZShzdGF0dXMpLCAvLyBBcyBwZXIgcHJvdG9jb2wsIHNwYW4gc3RhdHVzIGlzIGFsbG93ZWQgdG8gYmUgdW5kZWZpbmVkXG4gICAgbGlua3M6IGNvcmUuY29udmVydFNwYW5MaW5rc0ZvckVudmVsb3BlKGxpbmtzKSxcbiAgfTtcblxuICBjb25zdCBzdGF0dXNDb2RlID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9SRVNQT05TRV9TVEFUVVNfQ09ERV07XG4gIGNvbnN0IHJlc3BvbnNlQ29udGV4dCA9IHR5cGVvZiBzdGF0dXNDb2RlID09PSAnbnVtYmVyJyA/IHsgcmVzcG9uc2U6IHsgc3RhdHVzX2NvZGU6IHN0YXR1c0NvZGUgfSB9IDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHRyYW5zYWN0aW9uRXZlbnQgPSB7XG4gICAgY29udGV4dHM6IHtcbiAgICAgIHRyYWNlOiB0cmFjZUNvbnRleHQsXG4gICAgICBvdGVsOiB7XG4gICAgICAgIHJlc291cmNlOiBzcGFuLnJlc291cmNlLmF0dHJpYnV0ZXMsXG4gICAgICB9LFxuICAgICAgLi4ucmVzcG9uc2VDb250ZXh0LFxuICAgIH0sXG4gICAgc3BhbnM6IFtdLFxuICAgIHN0YXJ0X3RpbWVzdGFtcDogY29yZS5zcGFuVGltZUlucHV0VG9TZWNvbmRzKHNwYW4uc3RhcnRUaW1lKSxcbiAgICB0aW1lc3RhbXA6IGNvcmUuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyhzcGFuLmVuZFRpbWUpLFxuICAgIHRyYW5zYWN0aW9uOiBkZXNjcmlwdGlvbixcbiAgICB0eXBlOiAndHJhbnNhY3Rpb24nLFxuICAgIHNka1Byb2Nlc3NpbmdNZXRhZGF0YToge1xuICAgICAgY2FwdHVyZWRTcGFuU2NvcGU6IGNhcHR1cmVkU3BhblNjb3Blcy5zY29wZSxcbiAgICAgIGNhcHR1cmVkU3Bhbklzb2xhdGlvblNjb3BlOiBjYXB0dXJlZFNwYW5TY29wZXMuaXNvbGF0aW9uU2NvcGUsXG4gICAgICBzYW1wbGVSYXRlLFxuICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dDogY29yZS5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4oc3BhbiApLFxuICAgIH0sXG4gICAgLi4uKHNvdXJjZSAmJiB7XG4gICAgICB0cmFuc2FjdGlvbl9pbmZvOiB7XG4gICAgICAgIHNvdXJjZSxcbiAgICAgIH0sXG4gICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIHRyYW5zYWN0aW9uRXZlbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3Bhbihub2RlLCBzcGFucywgc2VudFNwYW5zKSB7XG4gIGNvbnN0IHNwYW4gPSBub2RlLnNwYW47XG5cbiAgaWYgKHNwYW4pIHtcbiAgICBzZW50U3BhbnMuYWRkKHNwYW4pO1xuICB9XG5cbiAgY29uc3Qgc2hvdWxkRHJvcCA9ICFzcGFuO1xuXG4gIC8vIElmIHRoaXMgc3BhbiBzaG91bGQgYmUgZHJvcHBlZCwgd2Ugc3RpbGwgd2FudCB0byBjcmVhdGUgc3BhbnMgZm9yIHRoZSBjaGlsZHJlbiBvZiB0aGlzXG4gIGlmIChzaG91bGREcm9wKSB7XG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3BhbihjaGlsZCwgc3BhbnMsIHNlbnRTcGFucyk7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc3Bhbl9pZCA9IHNwYW4uc3BhbkNvbnRleHQoKS5zcGFuSWQ7XG4gIGNvbnN0IHRyYWNlX2lkID0gc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlSWQ7XG4gIGNvbnN0IHBhcmVudFNwYW5JZCA9IGdldFBhcmVudFNwYW5JZChzcGFuKTtcblxuICBjb25zdCB7IGF0dHJpYnV0ZXMsIHN0YXJ0VGltZSwgZW5kVGltZSwgbGlua3MgfSA9IHNwYW47XG5cbiAgY29uc3QgeyBvcCwgZGVzY3JpcHRpb24sIGRhdGEsIG9yaWdpbiA9ICdtYW51YWwnIH0gPSBnZXRTcGFuRGF0YShzcGFuKTtcbiAgY29uc3QgYWxsRGF0YSA9IHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06IG9yaWdpbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogb3AsXG4gICAgLi4ucmVtb3ZlU2VudHJ5QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSxcbiAgICAuLi5kYXRhLFxuICB9O1xuXG4gIGNvbnN0IHN0YXR1cyA9IG1hcFN0YXR1cyhzcGFuKTtcblxuICBjb25zdCBzcGFuSlNPTiA9IHtcbiAgICBzcGFuX2lkLFxuICAgIHRyYWNlX2lkLFxuICAgIGRhdGE6IGFsbERhdGEsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgcGFyZW50X3NwYW5faWQ6IHBhcmVudFNwYW5JZCxcbiAgICBzdGFydF90aW1lc3RhbXA6IGNvcmUuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyhzdGFydFRpbWUpLFxuICAgIC8vIFRoaXMgaXMgWzAsMF0gYnkgZGVmYXVsdCBpbiBPVEVMLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gaW50ZXJwcmV0IHRoaXMgYXMgbm8gZW5kIHRpbWVcbiAgICB0aW1lc3RhbXA6IGNvcmUuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyhlbmRUaW1lKSB8fCB1bmRlZmluZWQsXG4gICAgc3RhdHVzOiBjb3JlLmdldFN0YXR1c01lc3NhZ2Uoc3RhdHVzKSwgLy8gQXMgcGVyIHByb3RvY29sLCBzcGFuIHN0YXR1cyBpcyBhbGxvd2VkIHRvIGJlIHVuZGVmaW5lZFxuICAgIG9wLFxuICAgIG9yaWdpbixcbiAgICBtZWFzdXJlbWVudHM6IGNvcmUudGltZWRFdmVudHNUb01lYXN1cmVtZW50cyhzcGFuLmV2ZW50cyksXG4gICAgbGlua3M6IGNvcmUuY29udmVydFNwYW5MaW5rc0ZvckVudmVsb3BlKGxpbmtzKSxcbiAgfTtcblxuICBzcGFucy5wdXNoKHNwYW5KU09OKTtcblxuICBub2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3BhbihjaGlsZCwgc3BhbnMsIHNlbnRTcGFucyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTcGFuRGF0YShzcGFuKVxuXG4ge1xuICBjb25zdCB7IG9wOiBkZWZpbmVkT3AsIHNvdXJjZTogZGVmaW5lZFNvdXJjZSwgb3JpZ2luIH0gPSBwYXJzZVNwYW4oc3Bhbik7XG4gIGNvbnN0IHsgb3A6IGluZmVycmVkT3AsIGRlc2NyaXB0aW9uLCBzb3VyY2U6IGluZmVycmVkU291cmNlLCBkYXRhOiBpbmZlcnJlZERhdGEgfSA9IHBhcnNlU3BhbkRlc2NyaXB0aW9uKHNwYW4pO1xuXG4gIGNvbnN0IG9wID0gZGVmaW5lZE9wIHx8IGluZmVycmVkT3A7XG4gIGNvbnN0IHNvdXJjZSA9IGRlZmluZWRTb3VyY2UgfHwgaW5mZXJyZWRTb3VyY2U7XG5cbiAgY29uc3QgZGF0YSA9IHsgLi4uaW5mZXJyZWREYXRhLCAuLi5nZXREYXRhKHNwYW4pIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvcCxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBzb3VyY2UsXG4gICAgb3JpZ2luLFxuICAgIGRhdGEsXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlIGN1c3RvbSBgc2VudHJ5LmAgYXR0cmlidXRlcyB3ZSBkbyBub3QgbmVlZCB0byBzZW5kLlxuICogVGhlc2UgYXJlIG1vcmUgY2FycmllciBhdHRyaWJ1dGVzIHdlIHVzZSBpbnNpZGUgb2YgdGhlIFNESywgd2UgZG8gbm90IG5lZWQgdG8gc2VuZCB0aGVtIHRvIHRoZSBBUEkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVNlbnRyeUF0dHJpYnV0ZXMoZGF0YSkge1xuICBjb25zdCBjbGVhbmVkRGF0YSA9IHsgLi4uZGF0YSB9O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZSAqL1xuICBkZWxldGUgY2xlYW5lZERhdGFbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFXTtcbiAgZGVsZXRlIGNsZWFuZWREYXRhW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUEFSRU5UX0lTX1JFTU9URV07XG4gIGRlbGV0ZSBjbGVhbmVkRGF0YVtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRV07XG4gIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlICovXG5cbiAgcmV0dXJuIGNsZWFuZWREYXRhO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IHNwYW4uYXR0cmlidXRlcztcbiAgY29uc3QgZGF0YSA9IHt9O1xuXG4gIGlmIChzcGFuLmtpbmQgIT09IGFwaS5TcGFuS2luZC5JTlRFUk5BTCkge1xuICAgIGRhdGFbJ290ZWwua2luZCddID0gYXBpLlNwYW5LaW5kW3NwYW4ua2luZF07XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgbWF5YmVIdHRwU3RhdHVzQ29kZUF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19IVFRQX1NUQVRVU19DT0RFXTtcbiAgaWYgKG1heWJlSHR0cFN0YXR1c0NvZGVBdHRyaWJ1dGUpIHtcbiAgICBkYXRhW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXSA9IG1heWJlSHR0cFN0YXR1c0NvZGVBdHRyaWJ1dGUgO1xuICB9XG5cbiAgY29uc3QgcmVxdWVzdERhdGEgPSBnZXRSZXF1ZXN0U3BhbkRhdGEoc3Bhbik7XG5cbiAgaWYgKHJlcXVlc3REYXRhLnVybCkge1xuICAgIGRhdGEudXJsID0gcmVxdWVzdERhdGEudXJsO1xuICB9XG5cbiAgaWYgKHJlcXVlc3REYXRhWydodHRwLnF1ZXJ5J10pIHtcbiAgICBkYXRhWydodHRwLnF1ZXJ5J10gPSByZXF1ZXN0RGF0YVsnaHR0cC5xdWVyeSddLnNsaWNlKDEpO1xuICB9XG4gIGlmIChyZXF1ZXN0RGF0YVsnaHR0cC5mcmFnbWVudCddKSB7XG4gICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gcmVxdWVzdERhdGFbJ2h0dHAuZnJhZ21lbnQnXS5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBvblNwYW5TdGFydChzcGFuLCBwYXJlbnRDb250ZXh0KSB7XG4gIC8vIFRoaXMgaXMgYSByZWxpYWJsZSB3YXkgdG8gZ2V0IHRoZSBwYXJlbnQgc3BhbiAtIGJlY2F1c2UgdGhpcyBpcyBleGFjdGx5IGhvdyB0aGUgcGFyZW50IGlzIGlkZW50aWZpZWQgaW4gdGhlIE9URUwgU0RLXG4gIGNvbnN0IHBhcmVudFNwYW4gPSBhcGkudHJhY2UuZ2V0U3BhbihwYXJlbnRDb250ZXh0KTtcblxuICBsZXQgc2NvcGVzID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQocGFyZW50Q29udGV4dCk7XG5cbiAgLy8gV2UgbmVlZCBhY2Nlc3MgdG8gdGhlIHBhcmVudCBzcGFuIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gbW92ZSB1cCB0aGUgc3BhbiB0cmVlIGZvciBicmVhZGNydW1ic1xuICBpZiAocGFyZW50U3BhbiAmJiAhcGFyZW50U3Bhbi5zcGFuQ29udGV4dCgpLmlzUmVtb3RlKSB7XG4gICAgY29yZS5hZGRDaGlsZFNwYW5Ub1NwYW4ocGFyZW50U3Bhbiwgc3Bhbik7XG4gIH1cblxuICAvLyBXZSBuZWVkIHRoaXMgaW4gdGhlIHNwYW4gZXhwb3J0ZXJcbiAgaWYgKHBhcmVudFNwYW4/LnNwYW5Db250ZXh0KCkuaXNSZW1vdGUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEUsIHRydWUpO1xuICB9XG5cbiAgLy8gVGhlIHJvb3QgY29udGV4dCBkb2VzIG5vdCBoYXZlIHNjb3BlcyBzdG9yZWQsIHNvIHdlIGNoZWNrIGZvciB0aGlzIHNwZWNpZmljYWxseVxuICAvLyBBcyBmYWxsYmFjayB3ZSBhdHRhY2ggdGhlIGdsb2JhbCBzY29wZXNcbiAgaWYgKHBhcmVudENvbnRleHQgPT09IGFwaS5ST09UX0NPTlRFWFQpIHtcbiAgICBzY29wZXMgPSB7XG4gICAgICBzY29wZTogY29yZS5nZXREZWZhdWx0Q3VycmVudFNjb3BlKCksXG4gICAgICBpc29sYXRpb25TY29wZTogY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gV2UgbmVlZCB0aGUgc2NvcGUgYXQgdGltZSBvZiBzcGFuIGNyZWF0aW9uIGluIG9yZGVyIHRvIGFwcGx5IGl0IHRvIHRoZSBldmVudCB3aGVuIHRoZSBzcGFuIGlzIGZpbmlzaGVkXG4gIGlmIChzY29wZXMpIHtcbiAgICBjb3JlLnNldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4sIHNjb3Blcy5zY29wZSwgc2NvcGVzLmlzb2xhdGlvblNjb3BlKTtcbiAgfVxuXG4gIGNvcmUubG9nU3BhblN0YXJ0KHNwYW4pO1xuXG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGNsaWVudD8uZW1pdCgnc3BhblN0YXJ0Jywgc3Bhbik7XG59XG5cbmZ1bmN0aW9uIG9uU3BhbkVuZChzcGFuKSB7XG4gIGNvcmUubG9nU3BhbkVuZChzcGFuKTtcblxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBjbGllbnQ/LmVtaXQoJ3NwYW5FbmQnLCBzcGFuKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBPcGVuVGVsZW1ldHJ5IFNwYW5zIHRvIFNlbnRyeSBTcGFucyBhbmQgc2VuZHMgdGhlbSB0byBTZW50cnkgdmlhXG4gKiB0aGUgU2VudHJ5IFNESy5cbiAqL1xuY2xhc3MgU2VudHJ5U3BhblByb2Nlc3NvciAge1xuXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc2V0SXNTZXR1cCgnU2VudHJ5U3BhblByb2Nlc3NvcicpO1xuICAgIHRoaXMuX2V4cG9ydGVyID0gbmV3IFNlbnRyeVNwYW5FeHBvcnRlcihvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGFzeW5jIGZvcmNlRmx1c2goKSB7XG4gICAgdGhpcy5fZXhwb3J0ZXIuZmx1c2goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGFzeW5jIHNodXRkb3duKCkge1xuICAgIHRoaXMuX2V4cG9ydGVyLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBvblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpIHtcbiAgICBvblNwYW5TdGFydChzcGFuLCBwYXJlbnRDb250ZXh0KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgb25FbmQoc3Bhbikge1xuICAgIG9uU3BhbkVuZChzcGFuKTtcblxuICAgIHRoaXMuX2V4cG9ydGVyLmV4cG9ydChzcGFuKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgY3VzdG9tIE9URUwgc2FtcGxlciB0aGF0IHVzZXMgU2VudHJ5IHNhbXBsaW5nIHJhdGVzIHRvIG1ha2UgaXRzIGRlY2lzaW9uXG4gKi9cbmNsYXNzIFNlbnRyeVNhbXBsZXIgIHtcblxuICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgIHNldElzU2V0dXAoJ1NlbnRyeVNhbXBsZXInKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgc2hvdWxkU2FtcGxlKFxuICAgIGNvbnRleHQsXG4gICAgdHJhY2VJZCxcbiAgICBzcGFuTmFtZSxcbiAgICBzcGFuS2luZCxcbiAgICBzcGFuQXR0cmlidXRlcyxcbiAgICBfbGlua3MsXG4gICkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9jbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gICAgY29uc3QgcGFyZW50U3BhbiA9IGdldFZhbGlkU3Bhbihjb250ZXh0KTtcbiAgICBjb25zdCBwYXJlbnRDb250ZXh0ID0gcGFyZW50U3Bhbj8uc3BhbkNvbnRleHQoKTtcblxuICAgIGlmICghY29yZS5oYXNTcGFuc0VuYWJsZWQob3B0aW9ucykpIHtcbiAgICAgIHJldHVybiB3cmFwU2FtcGxpbmdEZWNpc2lvbih7IGRlY2lzaW9uOiB1bmRlZmluZWQsIGNvbnRleHQsIHNwYW5BdHRyaWJ1dGVzIH0pO1xuICAgIH1cblxuICAgIC8vIGBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RgIGlzIHRoZSBuZXcgYXR0cmlidXRlLCBidXQgd2Ugc3RpbGwgc3VwcG9ydCB0aGUgb2xkIG9uZSwgYFNFTUFUVFJTX0hUVFBfTUVUSE9EYCwgZm9yIG5vdy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBtYXliZVNwYW5IdHRwTWV0aG9kID0gc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5TRU1BVFRSU19IVFRQX01FVEhPRF0gfHwgc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIGh0dHAuY2xpZW50IHNwYW4gdGhhdCBoYXMgbm8gbG9jYWwgcGFyZW50LCB3ZSBuZXZlciB3YW50IHRvIHNhbXBsZSBpdFxuICAgIC8vIGJ1dCB3ZSB3YW50IHRvIGxlYXZlIGRvd25zdHJlYW0gc2FtcGxpbmcgZGVjaXNpb25zIHVwIHRvIHRoZSBzZXJ2ZXJcbiAgICBpZiAoc3BhbktpbmQgPT09IGFwaS5TcGFuS2luZC5DTElFTlQgJiYgbWF5YmVTcGFuSHR0cE1ldGhvZCAmJiAoIXBhcmVudFNwYW4gfHwgcGFyZW50Q29udGV4dD8uaXNSZW1vdGUpKSB7XG4gICAgICByZXR1cm4gd3JhcFNhbXBsaW5nRGVjaXNpb24oeyBkZWNpc2lvbjogdW5kZWZpbmVkLCBjb250ZXh0LCBzcGFuQXR0cmlidXRlcyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnRTYW1wbGVkID0gcGFyZW50U3BhbiA/IGdldFBhcmVudFNhbXBsZWQocGFyZW50U3BhbiwgdHJhY2VJZCwgc3Bhbk5hbWUpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGlzUm9vdFNwYW4gPSAhcGFyZW50U3BhbiB8fCBwYXJlbnRDb250ZXh0Py5pc1JlbW90ZTtcblxuICAgIC8vIFdlIG9ubHkgc2FtcGxlIGJhc2VkIG9uIHBhcmFtZXRlcnMgKGxpa2UgdHJhY2VzU2FtcGxlUmF0ZSBvciB0cmFjZXNTYW1wbGVyKSBmb3Igcm9vdCBzcGFucyAod2hpY2ggaXMgZG9uZSBpbiBzYW1wbGVTcGFuKS5cbiAgICAvLyBOb24tcm9vdC1zcGFucyBzaW1wbHkgaW5oZXJpdCB0aGUgc2FtcGxpbmcgZGVjaXNpb24gZnJvbSB0aGVpciBwYXJlbnQuXG4gICAgaWYgKCFpc1Jvb3RTcGFuKSB7XG4gICAgICByZXR1cm4gd3JhcFNhbXBsaW5nRGVjaXNpb24oe1xuICAgICAgICBkZWNpc2lvbjogcGFyZW50U2FtcGxlZCA/IHNka1RyYWNlQmFzZS5TYW1wbGluZ0RlY2lzaW9uLlJFQ09SRF9BTkRfU0FNUExFRCA6IHNka1RyYWNlQmFzZS5TYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHNwYW5BdHRyaWJ1dGVzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2Ugd2FudCB0byBwYXNzIHRoZSBpbmZlcnJlZCBuYW1lICYgYXR0cmlidXRlcyB0byB0aGUgc2FtcGxlciBtZXRob2RcbiAgICBjb25zdCB7XG4gICAgICBkZXNjcmlwdGlvbjogaW5mZXJyZWRTcGFuTmFtZSxcbiAgICAgIGRhdGE6IGluZmVycmVkQXR0cmlidXRlcyxcbiAgICAgIG9wLFxuICAgIH0gPSBpbmZlclNwYW5EYXRhKHNwYW5OYW1lLCBzcGFuQXR0cmlidXRlcywgc3BhbktpbmQpO1xuXG4gICAgY29uc3QgbWVyZ2VkQXR0cmlidXRlcyA9IHtcbiAgICAgIC4uLmluZmVycmVkQXR0cmlidXRlcyxcbiAgICAgIC4uLnNwYW5BdHRyaWJ1dGVzLFxuICAgIH07XG5cbiAgICBpZiAob3ApIHtcbiAgICAgIG1lcmdlZEF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSA9IG9wO1xuICAgIH1cblxuICAgIGNvbnN0IG11dGFibGVTYW1wbGluZ0RlY2lzaW9uID0geyBkZWNpc2lvbjogdHJ1ZSB9O1xuICAgIHRoaXMuX2NsaWVudC5lbWl0KFxuICAgICAgJ2JlZm9yZVNhbXBsaW5nJyxcbiAgICAgIHtcbiAgICAgICAgc3BhbkF0dHJpYnV0ZXM6IG1lcmdlZEF0dHJpYnV0ZXMsXG4gICAgICAgIHNwYW5OYW1lOiBpbmZlcnJlZFNwYW5OYW1lLFxuICAgICAgICBwYXJlbnRTYW1wbGVkOiBwYXJlbnRTYW1wbGVkLFxuICAgICAgICBwYXJlbnRDb250ZXh0OiBwYXJlbnRDb250ZXh0LFxuICAgICAgfSxcbiAgICAgIG11dGFibGVTYW1wbGluZ0RlY2lzaW9uLFxuICAgICk7XG4gICAgaWYgKCFtdXRhYmxlU2FtcGxpbmdEZWNpc2lvbi5kZWNpc2lvbikge1xuICAgICAgcmV0dXJuIHdyYXBTYW1wbGluZ0RlY2lzaW9uKHsgZGVjaXNpb246IHVuZGVmaW5lZCwgY29udGV4dCwgc3BhbkF0dHJpYnV0ZXMgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBpc29sYXRpb25TY29wZSB9ID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQoY29udGV4dCkgPz8ge307XG5cbiAgICBjb25zdCBkc2NTdHJpbmcgPSBwYXJlbnRDb250ZXh0Py50cmFjZVN0YXRlID8gcGFyZW50Q29udGV4dC50cmFjZVN0YXRlLmdldChTRU5UUllfVFJBQ0VfU1RBVEVfRFNDKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBkc2MgPSBkc2NTdHJpbmcgPyBjb3JlLmJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoZHNjU3RyaW5nKSA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHNhbXBsZVJhbmQgPSBjb3JlLnBhcnNlU2FtcGxlUmF0ZShkc2M/LnNhbXBsZV9yYW5kKSA/PyBNYXRoLnJhbmRvbSgpO1xuXG4gICAgY29uc3QgW3NhbXBsZWQsIHNhbXBsZVJhdGUsIGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWRdID0gY29yZS5zYW1wbGVTcGFuKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogaW5mZXJyZWRTcGFuTmFtZSxcbiAgICAgICAgYXR0cmlidXRlczogbWVyZ2VkQXR0cmlidXRlcyxcbiAgICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IGlzb2xhdGlvblNjb3BlPy5nZXRTY29wZURhdGEoKS5zZGtQcm9jZXNzaW5nTWV0YWRhdGEubm9ybWFsaXplZFJlcXVlc3QsXG4gICAgICAgIHBhcmVudFNhbXBsZWQsXG4gICAgICAgIHBhcmVudFNhbXBsZVJhdGU6IGNvcmUucGFyc2VTYW1wbGVSYXRlKGRzYz8uc2FtcGxlX3JhdGUpLFxuICAgICAgfSxcbiAgICAgIHNhbXBsZVJhbmQsXG4gICAgKTtcblxuICAgIGNvbnN0IG1ldGhvZCA9IGAke21heWJlU3Bhbkh0dHBNZXRob2R9YC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChtZXRob2QgPT09ICdPUFRJT05TJyB8fCBtZXRob2QgPT09ICdIRUFEJykge1xuICAgICAgREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coYFtUcmFjaW5nXSBOb3Qgc2FtcGxpbmcgc3BhbiBiZWNhdXNlIEhUVFAgbWV0aG9kIGlzICcke21ldGhvZH0nIGZvciAke3NwYW5OYW1lfWApO1xuXG4gICAgICByZXR1cm4gd3JhcFNhbXBsaW5nRGVjaXNpb24oe1xuICAgICAgICBkZWNpc2lvbjogc2RrVHJhY2VCYXNlLlNhbXBsaW5nRGVjaXNpb24uTk9UX1JFQ09SRCxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgc3BhbkF0dHJpYnV0ZXMsXG4gICAgICAgIHNhbXBsZVJhbmQsXG4gICAgICAgIGRvd25zdHJlYW1UcmFjZVNhbXBsZVJhdGU6IDAsIC8vIHdlIGRvbid0IHdhbnQgdG8gc2FtcGxlIGFueXRoaW5nIGluIHRoZSBkb3duc3RyZWFtIHRyYWNlIGVpdGhlclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXNhbXBsZWQgJiZcbiAgICAgIC8vIFdlIGNoZWNrIGZvciBgcGFyZW50U2FtcGxlZCA9PT0gdW5kZWZpbmVkYCBiZWNhdXNlIHdlIG9ubHkgd2FudCB0byByZWNvcmQgY2xpZW50IHJlcG9ydHMgZm9yIHNwYW5zIHRoYXQgYXJlIHRyYWNlIHJvb3RzIChpZS4gd2hlbiB0aGVyZSB3YXMgaW5jb21pbmcgdHJhY2UpXG4gICAgICBwYXJlbnRTYW1wbGVkID09PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIERFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKCdbVHJhY2luZ10gRGlzY2FyZGluZyByb290IHNwYW4gYmVjYXVzZSBpdHMgdHJhY2Ugd2FzIG5vdCBjaG9zZW4gdG8gYmUgc2FtcGxlZC4nKTtcbiAgICAgIHRoaXMuX2NsaWVudC5yZWNvcmREcm9wcGVkRXZlbnQoJ3NhbXBsZV9yYXRlJywgJ3RyYW5zYWN0aW9uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLndyYXBTYW1wbGluZ0RlY2lzaW9uKHtcbiAgICAgICAgZGVjaXNpb246IHNhbXBsZWQgPyBzZGtUcmFjZUJhc2UuU2FtcGxpbmdEZWNpc2lvbi5SRUNPUkRfQU5EX1NBTVBMRUQgOiBzZGtUcmFjZUJhc2UuU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JELFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBzcGFuQXR0cmlidXRlcyxcbiAgICAgICAgc2FtcGxlUmFuZCxcbiAgICAgICAgZG93bnN0cmVhbVRyYWNlU2FtcGxlUmF0ZTogbG9jYWxTYW1wbGVSYXRlV2FzQXBwbGllZCA/IHNhbXBsZVJhdGUgOiB1bmRlZmluZWQsXG4gICAgICB9KSxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgLy8gV2Ugc2V0IHRoZSBzYW1wbGUgcmF0ZSBvbiB0aGUgc3BhbiB3aGVuIGEgbG9jYWwgc2FtcGxlIHJhdGUgd2FzIGFwcGxpZWQgdG8gYmV0dGVyIHVuZGVyc3RhbmQgaG93IHRyYWNlcyB3ZXJlIHNhbXBsZWQgaW4gU2VudHJ5XG4gICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEVdOiBsb2NhbFNhbXBsZVJhdGVXYXNBcHBsaWVkID8gc2FtcGxlUmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIHRoZSBzYW1wbGVyIG5hbWUgb3Igc2hvcnQgZGVzY3JpcHRpb24gd2l0aCB0aGUgY29uZmlndXJhdGlvbi4gKi9cbiAgIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnU2VudHJ5U2FtcGxlcic7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50U2FtcGxlZChwYXJlbnRTcGFuLCB0cmFjZUlkLCBzcGFuTmFtZSkge1xuICBjb25zdCBwYXJlbnRDb250ZXh0ID0gcGFyZW50U3Bhbi5zcGFuQ29udGV4dCgpO1xuXG4gIC8vIE9ubHkgaW5oZXJpdCBzYW1wbGUgcmF0ZSBpZiBgdHJhY2VJZGAgaXMgdGhlIHNhbWVcbiAgLy8gTm90ZSBmb3IgdGVzdGluZzogYGlzU3BhbkNvbnRleHRWYWxpZCgpYCBjaGVja3MgdGhlIGZvcm1hdCBvZiB0aGUgdHJhY2VJZC9zcGFuSWQsIHNvIHdlIG5lZWQgdG8gcGFzcyB2YWxpZCBvbmVzXG4gIGlmIChhcGkuaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudENvbnRleHQpICYmIHBhcmVudENvbnRleHQudHJhY2VJZCA9PT0gdHJhY2VJZCkge1xuICAgIGlmIChwYXJlbnRDb250ZXh0LmlzUmVtb3RlKSB7XG4gICAgICBjb25zdCBwYXJlbnRTYW1wbGVkID0gZ2V0U2FtcGxpbmdEZWNpc2lvbihwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCkpO1xuICAgICAgREVCVUdfQlVJTEQgJiZcbiAgICAgICAgY29yZS5kZWJ1Zy5sb2coYFtUcmFjaW5nXSBJbmhlcml0aW5nIHJlbW90ZSBwYXJlbnQncyBzYW1wbGVkIGRlY2lzaW9uIGZvciAke3NwYW5OYW1lfTogJHtwYXJlbnRTYW1wbGVkfWApO1xuICAgICAgcmV0dXJuIHBhcmVudFNhbXBsZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50U2FtcGxlZCA9IGdldFNhbXBsaW5nRGVjaXNpb24ocGFyZW50Q29udGV4dCk7XG4gICAgREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coYFtUcmFjaW5nXSBJbmhlcml0aW5nIHBhcmVudCdzIHNhbXBsZWQgZGVjaXNpb24gZm9yICR7c3Bhbk5hbWV9OiAke3BhcmVudFNhbXBsZWR9YCk7XG4gICAgcmV0dXJuIHBhcmVudFNhbXBsZWQ7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFdyYXAgYSBzYW1wbGluZyBkZWNpc2lvbiB3aXRoIGRhdGEgdGhhdCBTZW50cnkgbmVlZHMgdG8gd29yayBwcm9wZXJseSB3aXRoIGl0LlxuICogSWYgeW91IHBhc3MgYGRlY2lzaW9uOiB1bmRlZmluZWRgLCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYE5PVF9SRUNPUkRJTkdgLCBidXQgaW4gY29udHJhc3QgdG8gcGFzc2luZyBgTk9UX1JFQ09SRElOR2BcbiAqIGl0IHdpbGwgbm90IHByb3BhZ2F0ZSB0aGlzIGRlY2lzaW9uIHRvIGRvd25zdHJlYW0gU2VudHJ5IFNES3MuXG4gKi9cbmZ1bmN0aW9uIHdyYXBTYW1wbGluZ0RlY2lzaW9uKHtcbiAgZGVjaXNpb24sXG4gIGNvbnRleHQsXG4gIHNwYW5BdHRyaWJ1dGVzLFxuICBzYW1wbGVSYW5kLFxuICBkb3duc3RyZWFtVHJhY2VTYW1wbGVSYXRlLFxufVxuXG4pIHtcbiAgbGV0IHRyYWNlU3RhdGUgPSBnZXRCYXNlVHJhY2VTdGF0ZShjb250ZXh0LCBzcGFuQXR0cmlidXRlcyk7XG5cbiAgLy8gV2Ugd2lsbCBvdmVycmlkZSB0aGUgcHJvcGFnYXRlZCBzYW1wbGUgcmF0ZSBkb3duc3RyZWFtIHdoZW5cbiAgLy8gLSB0aGUgdHJhY2VzU2FtcGxlUmF0ZSBpcyBhcHBsaWVkXG4gIC8vIC0gdGhlIHRyYWNlc1NhbXBsZXIgaXMgaW52b2tlZFxuICAvLyBTaW5jZSB1bnNhbXBsZWQgT1RFTCBzcGFucyAoTm9uUmVjb3JkaW5nU3BhbnMpIGNhbm5vdCBob2xkIGF0dHJpYnV0ZXMgd2UgbmVlZCB0byBzdG9yZSB0aGlzIG9uIHRoZSAodHJhY2UpY29udGV4dC5cbiAgaWYgKGRvd25zdHJlYW1UcmFjZVNhbXBsZVJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRyYWNlU3RhdGUgPSB0cmFjZVN0YXRlLnNldChTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFX1JBVEUsIGAke2Rvd25zdHJlYW1UcmFjZVNhbXBsZVJhdGV9YCk7XG4gIH1cblxuICBpZiAoc2FtcGxlUmFuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdHJhY2VTdGF0ZSA9IHRyYWNlU3RhdGUuc2V0KFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVfUkFORCwgYCR7c2FtcGxlUmFuZH1gKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBkZWNpc2lvbiBpcyB1bmRlZmluZWQsIHdlIHRyZWF0IGl0IGFzIE5PVF9SRUNPUkRJTkcsIGJ1dCB3ZSBkb24ndCBwcm9wYWdhdGUgdGhpcyBkZWNpc2lvbiB0byBkb3duc3RyZWFtIFNES3NcbiAgLy8gV2hpY2ggaXMgZG9uZSBieSBub3Qgc2V0dGluZyBgU0VOVFJZX1RSQUNFX1NUQVRFX1NBTVBMRURfTk9UX1JFQ09SRElOR2AgdHJhY2VTdGF0ZVxuICBpZiAoZGVjaXNpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHsgZGVjaXNpb246IHNka1RyYWNlQmFzZS5TYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsIHRyYWNlU3RhdGUgfTtcbiAgfVxuXG4gIGlmIChkZWNpc2lvbiA9PT0gc2RrVHJhY2VCYXNlLlNhbXBsaW5nRGVjaXNpb24uTk9UX1JFQ09SRCkge1xuICAgIHJldHVybiB7IGRlY2lzaW9uLCB0cmFjZVN0YXRlOiB0cmFjZVN0YXRlLnNldChTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HLCAnMScpIH07XG4gIH1cblxuICByZXR1cm4geyBkZWNpc2lvbiwgdHJhY2VTdGF0ZSB9O1xufVxuXG5mdW5jdGlvbiBnZXRCYXNlVHJhY2VTdGF0ZShjb250ZXh0LCBzcGFuQXR0cmlidXRlcykge1xuICBjb25zdCBwYXJlbnRTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY29udGV4dCk7XG4gIGNvbnN0IHBhcmVudENvbnRleHQgPSBwYXJlbnRTcGFuPy5zcGFuQ29udGV4dCgpO1xuXG4gIGxldCB0cmFjZVN0YXRlID0gcGFyZW50Q29udGV4dD8udHJhY2VTdGF0ZSB8fCBuZXcgY29yZSQxLlRyYWNlU3RhdGUoKTtcblxuICAvLyBXZSBhbHdheXMga2VlcCB0aGUgVVJMIG9uIHRoZSB0cmFjZSBzdGF0ZSwgc28gd2UgY2FuIGFjY2VzcyBpdCBpbiB0aGUgcHJvcGFnYXRvclxuICAvLyBgQVRUUl9VUkxfRlVMTGAgaXMgdGhlIG5ldyBhdHRyaWJ1dGUsIGJ1dCB3ZSBzdGlsbCBzdXBwb3J0IHRoZSBvbGQgb25lLCBgQVRUUl9IVFRQX1VSTGAsIGZvciBub3cuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBjb25zdCB1cmwgPSBzcGFuQXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLlNFTUFUVFJTX0hUVFBfVVJMXSB8fCBzcGFuQXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfVVJMX0ZVTExdO1xuICBpZiAodXJsICYmIHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJhY2VTdGF0ZSA9IHRyYWNlU3RhdGUuc2V0KFNFTlRSWV9UUkFDRV9TVEFURV9VUkwsIHVybCk7XG4gIH1cblxuICByZXR1cm4gdHJhY2VTdGF0ZTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYWN0aXZlIHNwYW4gaXMgaW52YWxpZCwgd2Ugd2FudCB0byBpZ25vcmUgaXQgYXMgcGFyZW50LlxuICogVGhpcyBhbGlnbnMgd2l0aCBob3cgb3RlbCB0cmFjZXJzIGFuZCBkZWZhdWx0IHNhbXBsZXJzIGhhbmRsZSB0aGVzZSBjYXNlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsaWRTcGFuKGNvbnRleHQpIHtcbiAgY29uc3Qgc3BhbiA9IGFwaS50cmFjZS5nZXRTcGFuKGNvbnRleHQpO1xuICByZXR1cm4gc3BhbiAmJiBhcGkuaXNTcGFuQ29udGV4dFZhbGlkKHNwYW4uc3BhbkNvbnRleHQoKSkgPyBzcGFuIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnRzLmdldENsaWVudCA9IGNvcmUuZ2V0Q2xpZW50O1xuZXhwb3J0cy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4gPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT047XG5leHBvcnRzLlNlbnRyeVByb3BhZ2F0b3IgPSBTZW50cnlQcm9wYWdhdG9yO1xuZXhwb3J0cy5TZW50cnlTYW1wbGVyID0gU2VudHJ5U2FtcGxlcjtcbmV4cG9ydHMuU2VudHJ5U3BhblByb2Nlc3NvciA9IFNlbnRyeVNwYW5Qcm9jZXNzb3I7XG5leHBvcnRzLmNvbnRpbnVlVHJhY2UgPSBjb250aW51ZVRyYWNlO1xuZXhwb3J0cy5lbmhhbmNlRHNjV2l0aE9wZW5UZWxlbWV0cnlSb290U3Bhbk5hbWUgPSBlbmhhbmNlRHNjV2l0aE9wZW5UZWxlbWV0cnlSb290U3Bhbk5hbWU7XG5leHBvcnRzLmdldEFjdGl2ZVNwYW4gPSBnZXRBY3RpdmVTcGFuO1xuZXhwb3J0cy5nZXRSZXF1ZXN0U3BhbkRhdGEgPSBnZXRSZXF1ZXN0U3BhbkRhdGE7XG5leHBvcnRzLmdldFNjb3Blc0Zyb21Db250ZXh0ID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQ7XG5leHBvcnRzLmdldFNwYW5LaW5kID0gZ2V0U3BhbktpbmQ7XG5leHBvcnRzLmdldFRyYWNlQ29udGV4dEZvclNjb3BlID0gZ2V0VHJhY2VDb250ZXh0Rm9yU2NvcGU7XG5leHBvcnRzLmlzU2VudHJ5UmVxdWVzdFNwYW4gPSBpc1NlbnRyeVJlcXVlc3RTcGFuO1xuZXhwb3J0cy5vcGVuVGVsZW1ldHJ5U2V0dXBDaGVjayA9IG9wZW5UZWxlbWV0cnlTZXR1cENoZWNrO1xuZXhwb3J0cy5zZXRPcGVuVGVsZW1ldHJ5Q29udGV4dEFzeW5jQ29udGV4dFN0cmF0ZWd5ID0gc2V0T3BlblRlbGVtZXRyeUNvbnRleHRBc3luY0NvbnRleHRTdHJhdGVneTtcbmV4cG9ydHMuc2V0dXBFdmVudENvbnRleHRUcmFjZSA9IHNldHVwRXZlbnRDb250ZXh0VHJhY2U7XG5leHBvcnRzLnNob3VsZFByb3BhZ2F0ZVRyYWNlRm9yVXJsID0gc2hvdWxkUHJvcGFnYXRlVHJhY2VGb3JVcmw7XG5leHBvcnRzLnNwYW5IYXNBdHRyaWJ1dGVzID0gc3Bhbkhhc0F0dHJpYnV0ZXM7XG5leHBvcnRzLnNwYW5IYXNFdmVudHMgPSBzcGFuSGFzRXZlbnRzO1xuZXhwb3J0cy5zcGFuSGFzS2luZCA9IHNwYW5IYXNLaW5kO1xuZXhwb3J0cy5zcGFuSGFzTmFtZSA9IHNwYW5IYXNOYW1lO1xuZXhwb3J0cy5zcGFuSGFzUGFyZW50SWQgPSBzcGFuSGFzUGFyZW50SWQ7XG5leHBvcnRzLnNwYW5IYXNTdGF0dXMgPSBzcGFuSGFzU3RhdHVzO1xuZXhwb3J0cy5zdGFydEluYWN0aXZlU3BhbiA9IHN0YXJ0SW5hY3RpdmVTcGFuO1xuZXhwb3J0cy5zdGFydFNwYW4gPSBzdGFydFNwYW47XG5leHBvcnRzLnN0YXJ0U3Bhbk1hbnVhbCA9IHN0YXJ0U3Bhbk1hbnVhbDtcbmV4cG9ydHMuc3VwcHJlc3NUcmFjaW5nID0gc3VwcHJlc3NUcmFjaW5nO1xuZXhwb3J0cy53aXRoQWN0aXZlU3BhbiA9IHdpdGhBY3RpdmVTcGFuO1xuZXhwb3J0cy53cmFwQ2xpZW50Q2xhc3MgPSB3cmFwQ2xpZW50Q2xhc3M7XG5leHBvcnRzLndyYXBDb250ZXh0TWFuYWdlckNsYXNzID0gd3JhcENvbnRleHRNYW5hZ2VyQ2xhc3M7XG5leHBvcnRzLndyYXBTYW1wbGluZ0RlY2lzaW9uID0gd3JhcFNhbXBsaW5nRGVjaXNpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\n");

/***/ })

};
;